using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Threading;
using System.Windows.Winservr;
using System.Xml;
using Client;
using ClientSample;
using DamienG.Security.Cryptography;
using Dinobenz.Wpf.MessageBox.View;
using DiscordRPC;
using DiscordRPC.Message;
using Hardcodet.Wpf.TaskbarNotification;
using LoadingIndicators.WPF;
using MahApps.Metro.Controls;
using Microsoft.Win32;
using MonoTorrent.Client;
using MonoTorrent.Connections;
using RZM;
using Samples;
using SERVER;
using SingleInstance;
using SteamIDs_Engine;
using WindowsFirewallHelper;

namespace Launcher;

public partial class MainWindow : MetroWindow, INotifyPropertyChanged, IComponentConnector
{
	public class ENews
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		public string TXT_ALLNEWS
		{
			[CompilerGenerated]
			get
			{
				short num = -17405;
				short num2 = num;
				num = -17405;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 18557;
				short num2 = num;
				num = 18557;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string URL_ALLNEWS
		{
			[CompilerGenerated]
			get
			{
				short num = 29043;
				short num2 = num;
				num = 29043;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 11403;
				short num2 = num;
				num = 11403;
				switch (num2 == num)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Headline_ALLNEWS
		{
			[CompilerGenerated]
			get
			{
				short num = -26083;
				short num2 = num;
				num = -26083;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = -14182;
				short num2 = num;
				num = -14182;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string IMAGE_ALLNEWS
		{
			[CompilerGenerated]
			get
			{
				short num = 7480;
				short num2 = num;
				num = 7480;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -3926;
				short num2 = num;
				num = -3926;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}
	}

	public class EShop_loot
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = -25319;
				short num2 = num;
				num = -25319;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 29145;
				short num2 = num;
				num = 29145;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = -16458;
				short num2 = num;
				num = -16458;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 23144;
				short num2 = num;
				num = 23144;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = 19875;
				short num2 = num;
				num = 19875;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = -4712;
				short num2 = num;
				num = -4712;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = -15852;
				short num2 = num;
				num = -15852;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 15548;
				short num2 = num;
				num = 15548;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = -29247;
				short num2 = num;
				num = -29247;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -24442;
				short num2 = num;
				num = -24442;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = -22728;
				short num2 = num;
				num = -22728;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_f;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 8267;
				short num2 = num;
				num = 8267;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class EShop_weapon
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = -9966;
				short num2 = num;
				num = -9966;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -20856;
				short num2 = num;
				num = -20856;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = -1242;
				short num2 = num;
				num = -1242;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1378;
				short num2 = num;
				num = 1378;
				switch (num2 == num)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = 29256;
				short num2 = num;
				num = 29256;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 24169;
				short num2 = num;
				num = 24169;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = -3064;
				short num2 = num;
				num = -3064;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -18520;
				short num2 = num;
				num = -18520;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = -27694;
				short num2 = num;
				num = -27694;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 17628;
				short num2 = num;
				num = 17628;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = -19059;
				short num2 = num;
				num = -19059;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					return eval_f;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -21019;
				short num2 = num;
				num = -21019;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class EShop_set
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = 26670;
				short num2 = num;
				num = 26670;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -142;
				short num2 = num;
				num = -142;
				switch (num2 == num)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = 7827;
				short num2 = num;
				num = 7827;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 29749;
				short num2 = num;
				num = 29749;
				switch (num2 == num)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = 14781;
				short num2 = num;
				num = 14781;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = -4701;
				short num2 = num;
				num = -4701;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = 2895;
				short num2 = num;
				num = 2895;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -1721;
				short num2 = num;
				num = -1721;
				switch (num2 == num)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = -3551;
				short num2 = num;
				num = -3551;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 22484;
				short num2 = num;
				num = 22484;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = 18670;
				short num2 = num;
				num = 18670;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_f;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 826;
				short num2 = num;
				num = 826;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class EShop_car
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = -8604;
				short num2 = num;
				num = -8604;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 232;
				short num2 = num;
				num = 232;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = 26780;
				short num2 = num;
				num = 26780;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -21650;
				short num2 = num;
				num = -21650;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = 9215;
				short num2 = num;
				num = 9215;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 10762;
				short num2 = num;
				num = 10762;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = 11788;
				short num2 = num;
				num = 11788;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -1387;
				short num2 = num;
				num = -1387;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = 12759;
				short num2 = num;
				num = 12759;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -864;
				short num2 = num;
				num = -864;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 19564;
				short num2 = num;
				num = 19564;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_f;
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 3451;
				short num2 = num;
				num = 3451;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class EShop_inventory
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = 19799;
				short num2 = num;
				num = 19799;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 27665;
				short num2 = num;
				num = 27665;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = -17853;
				short num2 = num;
				num = -17853;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 15283;
				short num2 = num;
				num = 15283;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = -11118;
				short num2 = num;
				num = -11118;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 25999;
				short num2 = num;
				num = 25999;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 23767;
				short num2 = num;
				num = 23767;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_d;
			}
			[CompilerGenerated]
			set
			{
				short num = 22589;
				short num2 = num;
				num = 22589;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = -17333;
				short num2 = num;
				num = -17333;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 4560;
				short num2 = num;
				num = 4560;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = -3526;
				short num2 = num;
				num = -3526;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_f;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 20016;
				short num2 = num;
				num = 20016;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class EShop_mask
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = -12540;
				short num2 = num;
				num = -12540;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 19934;
				short num2 = num;
				num = 19934;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = 766;
				short num2 = num;
				num = 766;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -24546;
				short num2 = num;
				num = -24546;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = -27338;
				short num2 = num;
				num = -27338;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -21008;
				short num2 = num;
				num = -21008;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = 11817;
				short num2 = num;
				num = 11817;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -32450;
				short num2 = num;
				num = -32450;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = 26009;
				short num2 = num;
				num = 26009;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -2069;
				short num2 = num;
				num = -2069;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = 9982;
				short num2 = num;
				num = 9982;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_f;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 29023;
				short num2 = num;
				num = 29023;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class EShop_base
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = -2611;
				short num2 = num;
				num = -2611;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 18585;
				short num2 = num;
				num = 18585;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = -27736;
				short num2 = num;
				num = -27736;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_b;
			}
			[CompilerGenerated]
			set
			{
				short num = 27080;
				short num2 = num;
				num = 27080;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = 5839;
				short num2 = num;
				num = 5839;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -17672;
				short num2 = num;
				num = -17672;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = 31758;
				short num2 = num;
				num = 31758;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 27533;
				short num2 = num;
				num = 27533;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = -19706;
				short num2 = num;
				num = -19706;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 4375;
				short num2 = num;
				num = 4375;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = 9950;
				short num2 = num;
				num = 9950;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_f;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -12885;
				short num2 = num;
				num = -12885;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class EShop_medic
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		public string Name
		{
			[CompilerGenerated]
			get
			{
				short num = 13151;
				short num2 = num;
				num = 13151;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -12388;
				short num2 = num;
				num = -12388;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Price
		{
			[CompilerGenerated]
			get
			{
				short num = 9397;
				short num2 = num;
				num = 9397;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -29551;
				short num2 = num;
				num = -29551;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Cmd
		{
			[CompilerGenerated]
			get
			{
				short num = -1284;
				short num2 = num;
				num = -1284;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -3919;
				short num2 = num;
				num = -3919;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Description
		{
			[CompilerGenerated]
			get
			{
				short num = 18158;
				short num2 = num;
				num = 18158;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -13165;
				short num2 = num;
				num = -13165;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Set
		{
			[CompilerGenerated]
			get
			{
				short num = 3758;
				short num2 = num;
				num = 3758;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 6763;
				short num2 = num;
				num = 6763;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Image
		{
			[CompilerGenerated]
			get
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = -9111;
				short num2 = num;
				num = -9111;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_f;
			}
			[CompilerGenerated]
			set
			{
				short num = -10720;
				short num2 = num;
				num = -10720;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}
	}

	public class Name_MD5
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		public string Name_md
		{
			[CompilerGenerated]
			get
			{
				short num = 9995;
				short num2 = num;
				num = 9995;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -29202;
				short num2 = num;
				num = -29202;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string MD5_md
		{
			[CompilerGenerated]
			get
			{
				short num = 25950;
				short num2 = num;
				num = 25950;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -31770;
				short num2 = num;
				num = -31770;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}
	}

	public static class Internet
	{
		[Flags]
		private enum eval_a
		{
			eval_a = 1,
			eval_b = 2,
			eval_c = 4,
			eval_d = 0x10,
			eval_e = 0x20,
			eval_f = 0x40
		}

		private static object m_eval_a;

		[DllImport("wininet.dll")]
		private static extern bool InternetGetConnectedState(ref eval_a A_0, int A_1);

		public static bool CheckConnection()
		{
			short num = 0;
			int num2 = num;
			switch (num2)
			{
			default:
			{
				object obj = Internet.m_eval_a;
				bool lockTaken = false;
				bool result = default(bool);
				try
				{
					Monitor.Enter(obj, ref lockTaken);
					try
					{
						bool flag = default(bool);
						switch (0)
						{
						default:
							while (true)
							{
								switch (num2)
								{
								case 2:
								{
									if (flag)
									{
										num = 3;
										num2 = num;
										continue;
									}
									num = -12682;
									short num3 = num;
									num = -12682;
									switch (num3 == num)
									{
									case false:
									case true:
										break;
									default:
										num = 0;
										if (num != 0)
										{
										}
										result = flag;
										num = 0;
										num2 = num;
										continue;
									}
									break;
								}
								case 3:
									result = PingServer(new string[8] { "yandex.com", "yandex.ru", "mail.ru", "google.com.ua", "youtube.com", "google.com", "microsoft.com", "ibm.com" });
									num = 1;
									num2 = num;
									continue;
								case 1:
									goto end_IL_003b;
								case 0:
									goto end_IL_003b;
								}
								goto case 0;
								continue;
								end_IL_003b:
								break;
							}
							break;
						case 0:
						{
							eval_a A_ = Internet.eval_a.eval_f;
							flag = InternetGetConnectedState(ref A_, 0);
							num = 2;
							num2 = num;
							goto default;
						}
						}
					}
					catch (Exception ex)
					{
						System.Windows.MessageBox.Show("[CheckConnection] " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						result = false;
					}
				}
				finally
				{
					num = 2;
					num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 2:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (lockTaken)
							{
								num = 0;
								num2 = num;
								continue;
							}
							break;
						case 0:
							Monitor.Exit(obj);
							num = 1;
							num2 = num;
							continue;
						case 1:
							break;
						}
						break;
					}
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return result;
			}
			}
		}

		public static bool PingServer(string[] serverList)
		{
			int num = default(int);
			int num3 = default(int);
			bool flag = default(bool);
			Ping ping = default(Ping);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 0:
					case 4:
						num2 = 5;
						num = num2;
						continue;
					case 5:
						if (num3 >= serverList.Length)
						{
							num2 = 2;
							num = num2;
							continue;
						}
						goto IL_009d;
					case 1:
						num3++;
						num2 = 0;
						num = num2;
						continue;
					case 3:
						if (!flag)
						{
							num2 = 1;
							num = num2;
							continue;
						}
						goto case 2;
					case 2:
						{
							num2 = -13522;
							short num4 = num2;
							num2 = -13522;
							switch (num4 == num2)
							{
							case false:
							case true:
								break;
							default:
								num2 = 0;
								if (num2 != 0)
								{
								}
								num2 = 1;
								if (num2 != 0)
								{
								}
								return flag;
							}
							goto IL_009d;
						}
						IL_009d:
						flag = ping.Send(serverList[num3]).Status == IPStatus.Success;
						num2 = 0;
						_ = num2;
						num2 = 3;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				flag = false;
				ping = new Ping();
				num3 = 0;
				short num2 = 4;
				num = num2;
				goto default;
			}
			}
		}

		static Internet()
		{
			short num = -22559;
			short num2 = num;
			num = -22559;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			Internet.m_eval_a = new object();
		}
	}

	public class ServerOnlain
	{
		[CompilerGenerated]
		private int eval_a;

		[CompilerGenerated]
		private string eval_b;

		[CompilerGenerated]
		private string eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		[CompilerGenerated]
		private string eval_g;

		[CompilerGenerated]
		private string eval_h;

		[CompilerGenerated]
		private string eval_i;

		[CompilerGenerated]
		private string eval_j;

		[CompilerGenerated]
		private string eval_k;

		[CompilerGenerated]
		private string eval_l;

		[CompilerGenerated]
		private string eval_m;

		[CompilerGenerated]
		private string eval_n;

		[CompilerGenerated]
		private string eval_o;

		[CompilerGenerated]
		private string eval_p;

		[CompilerGenerated]
		private string eval_q;

		[CompilerGenerated]
		private string eval_r;

		[CompilerGenerated]
		private string eval_s;

		[CompilerGenerated]
		private string eval_t;

		public int Server_
		{
			[CompilerGenerated]
			get
			{
				short num = 21867;
				short num2 = num;
				num = 21867;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_a;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 17682;
				short num2 = num;
				num = 17682;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string Name_
		{
			[CompilerGenerated]
			get
			{
				short num = 18659;
				short num2 = num;
				num = 18659;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_b;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 17894;
				short num2 = num;
				num = 17894;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}

		public string Players_
		{
			[CompilerGenerated]
			get
			{
				short num = -29704;
				short num2 = num;
				num = -29704;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_c;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -11802;
				short num2 = num;
				num = -11802;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_c = value;
			}
		}

		public string Ping_
		{
			[CompilerGenerated]
			get
			{
				short num = -3313;
				short num2 = num;
				num = -3313;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_d;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 16750;
				short num2 = num;
				num = 16750;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_d = value;
			}
		}

		public string Whitelist_
		{
			[CompilerGenerated]
			get
			{
				short num = 339;
				short num2 = num;
				num = 339;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_e;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -27198;
				short num2 = num;
				num = -27198;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_e = value;
			}
		}

		public string Password_
		{
			[CompilerGenerated]
			get
			{
				short num = -31060;
				short num2 = num;
				num = -31060;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_f;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -25814;
				short num2 = num;
				num = -25814;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_f = value;
			}
		}

		public string Ip_Host_
		{
			[CompilerGenerated]
			get
			{
				short num = -16915;
				short num2 = num;
				num = -16915;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					return eval_g;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 9984;
				short num2 = num;
				num = 9984;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_g = value;
			}
		}

		public string Port_host_
		{
			[CompilerGenerated]
			get
			{
				short num = 13650;
				short num2 = num;
				num = 13650;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					return eval_h;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 27838;
				short num2 = num;
				num = 27838;
				switch (num2 == num)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_h = value;
			}
		}

		public string UDP_PORT_
		{
			[CompilerGenerated]
			get
			{
				short num = -14950;
				short num2 = num;
				num = -14950;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_i;
			}
			[CompilerGenerated]
			set
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = -30405;
				short num2 = num;
				num = -30405;
				switch (num2 == num)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_i = value;
			}
		}

		public string MODS_
		{
			[CompilerGenerated]
			get
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = -24168;
				short num2 = num;
				num = -24168;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					return eval_j;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = -31167;
				short num2 = num;
				num = -31167;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_j = value;
			}
		}

		public string MODSEN_
		{
			[CompilerGenerated]
			get
			{
				short num = 29928;
				short num2 = num;
				num = 29928;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_k;
			}
			[CompilerGenerated]
			set
			{
				short num = -20227;
				short num2 = num;
				num = -20227;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_k = value;
			}
		}

		public string Played_players_
		{
			[CompilerGenerated]
			get
			{
				short num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 23146;
				short num2 = num;
				num = 23146;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					return eval_l;
				}
			}
			[CompilerGenerated]
			set
			{
				short num = 25265;
				short num2 = num;
				num = 25265;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_l = value;
			}
		}

		public string Playhost
		{
			[CompilerGenerated]
			get
			{
				short num = -9374;
				short num2 = num;
				num = -9374;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_m;
			}
			[CompilerGenerated]
			set
			{
				short num = 27695;
				short num2 = num;
				num = 27695;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_m = value;
			}
		}

		public string Slotevery
		{
			[CompilerGenerated]
			get
			{
				short num = -17016;
				short num2 = num;
				num = -17016;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_n;
			}
			[CompilerGenerated]
			set
			{
				short num = 17084;
				short num2 = num;
				num = 17084;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_n = value;
			}
		}

		public string PORT_VID
		{
			[CompilerGenerated]
			get
			{
				short num = -30496;
				short num2 = num;
				num = -30496;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_o;
			}
			[CompilerGenerated]
			set
			{
				short num = 21913;
				short num2 = num;
				num = 21913;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_o = value;
			}
		}

		public string IP_VIDSCS
		{
			[CompilerGenerated]
			get
			{
				short num = -2009;
				short num2 = num;
				num = -2009;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_p;
			}
			[CompilerGenerated]
			set
			{
				short num = -25322;
				short num2 = num;
				num = -25322;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_p = value;
			}
		}

		public string TimesServer
		{
			[CompilerGenerated]
			get
			{
				short num = -6185;
				short num2 = num;
				num = -6185;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_q;
			}
			[CompilerGenerated]
			set
			{
				short num = 26934;
				short num2 = num;
				num = 26934;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_q = value;
			}
		}

		public string DISCORD
		{
			[CompilerGenerated]
			get
			{
				short num = -11918;
				short num2 = num;
				num = -11918;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_r;
			}
			[CompilerGenerated]
			set
			{
				short num = -30567;
				short num2 = num;
				num = -30567;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_r = value;
			}
		}

		public string TIMERESTART
		{
			[CompilerGenerated]
			get
			{
				short num = -5509;
				short num2 = num;
				num = -5509;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_s;
			}
			[CompilerGenerated]
			set
			{
				short num = -30282;
				short num2 = num;
				num = -30282;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_s = value;
			}
		}

		public string IMAGE
		{
			[CompilerGenerated]
			get
			{
				short num = -26436;
				short num2 = num;
				num = -26436;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_t;
			}
			[CompilerGenerated]
			set
			{
				short num = -17750;
				short num2 = num;
				num = -17750;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_t = value;
			}
		}

		public ServerOnlain(int SN, string NS, string PS, string PGS, string WH, string PWS, string IpS, string PortS, string MODSS, string PlayedS, string UDPS, string PlayS, string SlotS, string PORTVID, string IPVIDSCS, string TIMESERVER, string ENNMOD, string DIS, string TIMER, string IMAG)
		{
			Server_ = SN;
			Name_ = NS;
			Players_ = PS;
			Ping_ = PGS;
			Whitelist_ = WH;
			Password_ = PWS;
			Ip_Host_ = IpS;
			Port_host_ = PortS;
			UDP_PORT_ = UDPS;
			MODS_ = MODSS;
			Played_players_ = PlayedS;
			Playhost = PlayS;
			Slotevery = SlotS;
			PORT_VID = PORTVID;
			IP_VIDSCS = IPVIDSCS;
			TimesServer = TIMESERVER;
			MODSEN_ = ENNMOD;
			DISCORD = DIS;
			TIMERESTART = TIMER;
			IMAGE = IMAG;
		}
	}

	public class DIRINFO
	{
		[CompilerGenerated]
		private string eval_a;

		public string DIRS
		{
			[CompilerGenerated]
			get
			{
				short num = 2028;
				short num2 = num;
				num = 2028;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_a;
			}
			[CompilerGenerated]
			set
			{
				short num = -20670;
				short num2 = num;
				num = -20670;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}
	}

	public class FILEINFO
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		public string FILEEXIST
		{
			[CompilerGenerated]
			get
			{
				short num = 17819;
				short num2 = num;
				num = 17819;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_a;
			}
			[CompilerGenerated]
			set
			{
				short num = 14033;
				short num2 = num;
				num = 14033;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string FILENEWMD5
		{
			[CompilerGenerated]
			get
			{
				short num = -30718;
				short num2 = num;
				num = -30718;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_b;
			}
			[CompilerGenerated]
			set
			{
				short num = 32576;
				short num2 = num;
				num = 32576;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}
	}

	public class FILEINFOOLD
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		public string FILEOLD
		{
			[CompilerGenerated]
			get
			{
				short num = 7804;
				short num2 = num;
				num = 7804;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_a;
			}
			[CompilerGenerated]
			set
			{
				short num = -20704;
				short num2 = num;
				num = -20704;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string FILEMD5OLD
		{
			[CompilerGenerated]
			get
			{
				short num = -3656;
				short num2 = num;
				num = -3656;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_b;
			}
			[CompilerGenerated]
			set
			{
				short num = 8495;
				short num2 = num;
				num = 8495;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}
	}

	public class DELLETEDDIR
	{
		[CompilerGenerated]
		private string eval_a;

		public string DIRDELLDIR
		{
			[CompilerGenerated]
			get
			{
				short num = -24637;
				short num2 = num;
				num = -24637;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_a;
			}
			[CompilerGenerated]
			set
			{
				short num = -1365;
				short num2 = num;
				num = -1365;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}
	}

	public class DELLETEDFILE
	{
		[CompilerGenerated]
		private string eval_a;

		[CompilerGenerated]
		private string eval_b;

		public string FILEDELLDIR
		{
			[CompilerGenerated]
			get
			{
				short num = 11486;
				short num2 = num;
				num = 11486;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_a;
			}
			[CompilerGenerated]
			set
			{
				short num = 17644;
				short num2 = num;
				num = 17644;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a = value;
			}
		}

		public string NAMEDELLDIR
		{
			[CompilerGenerated]
			get
			{
				short num = 13048;
				short num2 = num;
				num = 13048;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_b;
			}
			[CompilerGenerated]
			set
			{
				short num = -23442;
				short num2 = num;
				num = -23442;
				switch (num2 == num)
				{
				default:
					num = 0;
					_ = num;
					break;
				case true:
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_b = value;
			}
		}
	}

	public static class NativeUtilities
	{
		[Flags]
		public enum DisplayDeviceStateFlags
		{
			AttachedToDesktop = 1,
			MultiDriver = 2,
			PrimaryDevice = 4,
			MirroringDriver = 8,
			VGACompatible = 0x16,
			Removable = 0x20,
			ModesPruned = 0x8000000,
			Remote = 0x4000000,
			Disconnect = 0x2000000
		}

		public struct DisplayDevice
		{
			[MarshalAs(UnmanagedType.U4)]
			public int cb;

			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
			public string DeviceName;

			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
			public string DeviceString;

			[MarshalAs(UnmanagedType.U4)]
			public DisplayDeviceStateFlags StateFlags;

			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
			public string DeviceID;

			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
			public string DeviceKey;
		}

		public struct DEVMODE
		{
			private const int eval_a = 32;

			private const int eval_b = 32;

			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
			public string dmDeviceName;

			public short dmSpecVersion;

			public short dmDriverVersion;

			public short dmSize;

			public short dmDriverExtra;

			public int dmFields;

			public int dmPositionX;

			public int dmPositionY;

			public ScreenOrientation dmDisplayOrientation;

			public int dmDisplayFixedOutput;

			public short dmColor;

			public short dmDuplex;

			public short dmYResolution;

			public short dmTTOption;

			public short dmCollate;

			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
			public string dmFormName;

			public short dmLogPixels;

			public int dmBitsPerPel;

			public int dmPelsWidth;

			public int dmPelsHeight;

			public int dmDisplayFlags;

			public int dmDisplayFrequency;

			public int dmICMMethod;

			public int dmICMIntent;

			public int dmMediaType;

			public int dmDitherType;

			public int dmReserved1;

			public int dmReserved2;

			public int dmPanningWidth;

			public int dmPanningHeight;
		}

		public const int ENUM_CURRENT_SETTINGS = -1;

		[DllImport("user32.dll")]
		public static extern bool EnumDisplaySettings(string deviceName, int modeNum, ref DEVMODE devMode);

		[DllImport("User32.dll")]
		public static extern int EnumDisplayDevices(string lpDevice, int iDevNum, ref DisplayDevice lpDisplayDevice, int dwFlags);
	}

	private class eval_a
	{
		[CompilerGenerated]
		private string m_eval_a;

		[CompilerGenerated]
		private string m_eval_b;

		[CompilerGenerated]
		private string m_eval_c;

		[CompilerGenerated]
		private string eval_d;

		[CompilerGenerated]
		private string eval_e;

		[CompilerGenerated]
		private string eval_f;

		[CompilerGenerated]
		private string eval_g;

		[CompilerGenerated]
		private string m_eval_h;

		[CompilerGenerated]
		private string eval_i;

		[CompilerGenerated]
		private string m_eval_j;

		[CompilerGenerated]
		private string eval_k;

		[SpecialName]
		[CompilerGenerated]
		public string eval_q()
		{
			short num = -5465;
			short num2 = num;
			num = -5465;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return this.m_eval_a;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_q(string A_0)
		{
			short num = -6606;
			short num2 = num;
			num = -6606;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_a = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_p()
		{
			short num = 27267;
			short num2 = num;
			num = 27267;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return this.m_eval_b;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_p(string A_0)
		{
			short num = 8137;
			short num2 = num;
			num = 8137;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			this.m_eval_b = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_o()
		{
			short num = 5214;
			short num2 = num;
			num = 5214;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return this.m_eval_c;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_o(string A_0)
		{
			short num = -20398;
			short num2 = num;
			num = -20398;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_c = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_n()
		{
			short num = -18291;
			short num2 = num;
			num = -18291;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return eval_d;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_n(string A_0)
		{
			short num = -21575;
			short num2 = num;
			num = -21575;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_d = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_m()
		{
			short num = -25190;
			short num2 = num;
			num = -25190;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return eval_e;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_m(string A_0)
		{
			short num = -5739;
			short num2 = num;
			num = -5739;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_e = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_l()
		{
			short num = -19630;
			short num2 = num;
			num = -19630;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			return eval_f;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_l(string A_0)
		{
			short num = 21686;
			short num2 = num;
			num = 21686;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_f = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_j()
		{
			short num = 21902;
			short num2 = num;
			num = 21902;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return eval_g;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_j(string A_0)
		{
			short num = -21319;
			short num2 = num;
			num = -21319;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_g = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_h()
		{
			short num = -32190;
			short num2 = num;
			num = -32190;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return this.m_eval_h;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_h(string A_0)
		{
			short num = 15332;
			short num2 = num;
			num = 15332;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_h = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_c()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = -3970;
			short num2 = num;
			num = -3970;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return eval_i;
			}
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_c(string A_0)
		{
			short num = -6419;
			short num2 = num;
			num = -6419;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_i = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_b()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 32341;
			short num2 = num;
			num = 32341;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_j;
			}
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_b(string A_0)
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = -14939;
			short num2 = num;
			num = -14939;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_j = A_0;
		}

		[SpecialName]
		[CompilerGenerated]
		public string eval_a()
		{
			short num = 27489;
			short num2 = num;
			num = 27489;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			return eval_k;
		}

		[SpecialName]
		[CompilerGenerated]
		public void eval_a(string A_0)
		{
			short num = 9113;
			short num2 = num;
			num = 9113;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_k = A_0;
		}
	}

	[Flags]
	private enum eval_b : uint
	{
		eval_a = 1u,
		eval_b = 2u,
		[Obsolete("This value is not supported.")]
		eval_c = 4u,
		eval_d = 0x40u,
		eval_e = 0x80000000u
	}

	public static class SystemSleep
	{
		public static void PreventForCurrentThread(bool keepDisplayOn = true)
		{
			short num = 1;
			int num2 = num;
			int threadExecutionState;
			while (true)
			{
				switch (num2)
				{
				case 1:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					while (true)
					{
						if (!keepDisplayOn)
						{
							num = -9553;
							short num3 = num;
							num = -9553;
							switch (num3 == num)
							{
							case false:
							case true:
								continue;
							}
							num = 0;
							_ = num;
							num = 1;
							if (num != 0)
							{
							}
							num = 0;
							if (num != 0)
							{
							}
							num = 0;
							num2 = num;
						}
						else
						{
							num = 3;
							num2 = num;
						}
						break;
					}
					continue;
				case 3:
					threadExecutionState = -2147483645;
					break;
				case 0:
					num = 2;
					num2 = num;
					continue;
				case 2:
					threadExecutionState = -2147483647;
					break;
				}
				break;
			}
			SetThreadExecutionState((eval_b)threadExecutionState);
		}

		public static void RestoreForCurrentThread()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 23585;
			short num2 = num;
			num = 23585;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			SetThreadExecutionState(MainWindow.eval_b.eval_e);
		}

		public static void ResetIdle(bool keepDisplayOn = true)
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 1;
			int num2 = num;
			int threadExecutionState;
			while (true)
			{
				switch (num2)
				{
				case 1:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					while (true)
					{
						if (!keepDisplayOn)
						{
							num = 19890;
							short num3 = num;
							num = 19890;
							switch (num3 == num)
							{
							case false:
							case true:
								continue;
							default:
								num = 0;
								_ = num;
								break;
							case true:
								break;
							}
							num = 0;
							if (num != 0)
							{
							}
							num = 0;
							num2 = num;
						}
						else
						{
							num = 3;
							num2 = num;
						}
						break;
					}
					continue;
				case 3:
					threadExecutionState = 3;
					break;
				case 0:
					num = 2;
					num2 = num;
					continue;
				case 2:
					threadExecutionState = 1;
					break;
				}
				break;
			}
			SetThreadExecutionState((eval_b)threadExecutionState);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_c : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private string m_eval_d;

		private int eval_e;

		private int eval_f;

		private TaskAwaiter eval_g;

		private void eval_d()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 3;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				int num7 = default(int);
				string[] array = default(string[]);
				int num5 = default(int);
				while (true)
				{
					switch (num3)
					{
					case 4:
						break;
					case 3:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 5;
							num3 = num;
							continue;
						}
						goto IL_00fc;
					case 7:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num3)
									{
									case 6:
										goto end_IL_0121;
									case 3:
										if (mainWindow.dy.Length == 0L)
										{
											num = 5;
											num3 = num;
										}
										else
										{
											num = 4;
											num3 = num;
										}
										continue;
									case 1:
										MessageBoxWindow.Show(mainWindow, "Ошибка, лаунчеру не удалось скачать нужные файлы для запуска игры, попробуйте перезапустить лаунчер и повторить попытку.", name_messege);
										num = 0;
										num3 = num;
										continue;
									case 0:
									case 2:
										mainWindow.BoxServer.IsEnabled = true;
										num = 6;
										num3 = num;
										continue;
									case 5:
										mainWindow.eval_bw();
										num = 7;
										num3 = num;
										continue;
									case 7:
										if (!(Langve == "RU"))
										{
											MessageBoxWindow.Show(mainWindow, "Error, the launcher could not download the necessary files for the run game, try restarting the launcher and try again.", name_messege);
											num = 2;
											num3 = num;
										}
										else
										{
											num = 1;
											num3 = num;
										}
										continue;
									case 4:
										goto IL_090a;
									}
									goto case 0;
									continue;
									end_IL_0121:
									break;
								}
								break;
							case 0:
								mainWindow.dy = new FileInfo(DirLocal + "\\FILE.log");
								num = 3;
								num3 = num;
								goto default;
							}
						}
						catch
						{
							goto IL_090a;
						}
						break;
					case 0:
						try
						{
							num = 16;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 16:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 != 0)
									{
										num = 6;
										num3 = num;
										continue;
									}
									awaiter = eval_g;
									eval_g = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 14;
									num3 = num;
									continue;
								case 15:
									if (Path.GetDirectoryName(mainWindow.d3[eval_e].FILEEXIST).Contains(mainWindow.eval_c8[eval_f]))
									{
										num = 18;
										num3 = num;
										continue;
									}
									goto case 1;
								case 7:
								case 9:
									num = 3;
									num3 = num;
									continue;
								case 3:
									if (eval_f < mainWindow.eval_c8.Count)
									{
										num = 15;
										num3 = num;
									}
									else
									{
										num = 17;
										num3 = num;
									}
									continue;
								case 13:
									mainWindow.eval_fp.Content = "Проверка файла : " + mainWindow.Directory_game + mainWindow.d3[eval_e].FILEEXIST;
									num = 1;
									num3 = num;
									continue;
								case 18:
									ListFileModsDownload.Add(mainWindow.Directory_game + mainWindow.d3[eval_e].FILEEXIST);
									this.m_eval_d = this.m_eval_d + mainWindow.Directory_game + mainWindow.d3[eval_e].FILEEXIST + ",";
									num = 12;
									num3 = num;
									continue;
								case 12:
									if (Langve == "RU")
									{
										num = 13;
										num3 = num;
									}
									else
									{
										mainWindow.eval_fp.Content = "File check : " + mainWindow.Directory_game + mainWindow.d3[eval_e].FILEEXIST;
										num = 8;
										num3 = num;
									}
									continue;
								case 6:
									this.m_eval_d = string.Empty;
									eval_e = 0;
									num = 0;
									num3 = num;
									continue;
								case 19:
									num2 = (eval_a = 0);
									eval_g = awaiter;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
									num = 5;
									num3 = num;
									continue;
								case 5:
									return;
								case 1:
								case 8:
									awaiter = Task.Delay(1).GetAwaiter();
									num = 20;
									num3 = num;
									continue;
								case 20:
									if (!awaiter.IsCompleted)
									{
										num = 19;
										num3 = num;
										continue;
									}
									goto case 14;
								case 17:
									num7 = eval_e++;
									num = 10;
									num3 = num;
									continue;
								case 14:
									awaiter.GetResult();
									num7 = eval_f++;
									num = 9;
									num3 = num;
									continue;
								case 0:
								case 10:
									num = 4;
									num3 = num;
									continue;
								case 4:
									if (eval_e >= mainWindow.d3.Count)
									{
										num = 11;
										num3 = num;
										continue;
									}
									mainWindow.eval_fo.Value++;
									eval_f = 0;
									num = 7;
									num3 = num;
									continue;
								case 11:
									mainWindow.eval_fo.Value = 0.0;
									CheckGameFileServer = true;
									mainWindow.BoxServer.IsEnabled = true;
									mainWindow.eval_bw();
									mainWindow.eval_a6();
									mainWindow.eval_be();
									this.m_eval_d = null;
									num = 2;
									num3 = num;
									continue;
								case 2:
									break;
								}
								break;
							}
						}
						catch (Exception ex3)
						{
							MessageBoxWindow.Show(mainWindow, "ErrorFileGame2 : " + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							mainWindow.BoxServer.IsEnabled = true;
							break;
						}
						num = 4;
						num3 = num;
						continue;
					case 1:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num3)
									{
									case 0:
									case 2:
										num = 3;
										num3 = num;
										continue;
									case 3:
										if (num7 < array.Length)
										{
											string text2 = array[num7];
											mainWindow.eval_c8.Add(text2.Trim());
											num7++;
											num = 0;
											num3 = num;
										}
										else
										{
											num = 4;
											num3 = num;
										}
										continue;
									case 4:
										num = 1;
										num3 = num;
										continue;
									case 1:
										goto end_IL_07c8;
									}
									goto case 0;
									continue;
									end_IL_07c8:
									break;
								}
								break;
							case 0:
								ListFileModsDownload.Clear();
								mainWindow.eval_c8.Clear();
								array = Mod_in.Replace("\"", string.Empty).Replace("-mod=", string.Empty).Split(';');
								num7 = 0;
								num = 2;
								num3 = num;
								goto default;
							}
						}
						catch (Exception ex2)
						{
							mainWindow.BoxServer.IsEnabled = true;
							mainWindow.eval_bw();
							MessageBoxWindow.Show(mainWindow, "CheckGameFile Mod_in : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							break;
						}
						num = 2;
						num3 = num;
						continue;
					case 5:
						num = 7;
						num3 = num;
						continue;
					case 6:
					{
						try
						{
							mainWindow.d3.Clear();
						}
						catch
						{
						}
						num = 3688;
						short num6 = num;
						num = 3688;
						switch (num6 == num)
						{
						case false:
						case true:
							break;
						default:
							num = 0;
							if (num != 0)
							{
							}
							num = 1;
							num3 = num;
							continue;
						}
						goto case 7;
					}
					case 2:
						{
							try
							{
								int num4 = 0;
								string text = string.Empty;
								StreamReader streamReader = new StreamReader(DirLocal + "\\FILE.log");
								try
								{
									num = 5;
									num3 = num;
									while (true)
									{
										switch (num3)
										{
										case 5:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										case 9:
										case 12:
											num = 11;
											num3 = num;
											continue;
										case 11:
											if (num5 >= mainWindow.eval_c8.Count)
											{
												num = 4;
												num3 = num;
											}
											else
											{
												num = 10;
												num3 = num;
											}
											continue;
										case 6:
											if (!string.IsNullOrEmpty(text))
											{
												num = 0;
												num3 = num;
												continue;
											}
											goto default;
										case 0:
											num5 = 0;
											num = 9;
											num3 = num;
											continue;
										case 7:
											num5++;
											num = 12;
											num3 = num;
											continue;
										case 10:
											if (Path.GetDirectoryName(text.Split('|')[0]).Contains(mainWindow.eval_c8[num5]))
											{
												num = 1;
												num3 = num;
												continue;
											}
											goto case 7;
										default:
											num = 2;
											num3 = num;
											continue;
										case 2:
											if ((text = streamReader.ReadLine()) != null)
											{
												num = 6;
												num3 = num;
											}
											else
											{
												num = 8;
												num3 = num;
											}
											continue;
										case 1:
											mainWindow.d3.Add(new FILEINFO
											{
												FILEEXIST = text.Split('|')[0],
												FILENEWMD5 = text.Split('|')[1]
											});
											num4++;
											num = 7;
											num3 = num;
											continue;
										case 8:
											mainWindow.eval_fo.Maximum = num4 + 1;
											num = 3;
											num3 = num;
											continue;
										case 3:
											break;
										}
										break;
									}
								}
								finally
								{
									num = 3;
									num3 = num;
									while (true)
									{
										switch (num3)
										{
										case 3:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (num2 < 0)
											{
												num = 1;
												num3 = num;
												continue;
											}
											break;
										case 2:
											((IDisposable)streamReader).Dispose();
											num = 4;
											num3 = num;
											continue;
										case 4:
											break;
										case 1:
											num = 0;
											num3 = num;
											continue;
										case 0:
											if (streamReader != null)
											{
												num = 2;
												num3 = num;
												continue;
											}
											break;
										}
										break;
									}
								}
							}
							catch (Exception ex)
							{
								mainWindow.BoxServer.IsEnabled = true;
								mainWindow.eval_bw();
								MessageBoxWindow.Show(mainWindow, "CheckGameFile : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								break;
							}
							goto IL_00fc;
						}
						IL_00fc:
						num = 0;
						num3 = num;
						continue;
						IL_090a:
						num = 6;
						num3 = num;
						continue;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			num = 0;
			_ = num;
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 20740;
			short num2 = num;
			num = 20740;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_d : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private string eval_e;

		private int eval_f;

		private string eval_g;

		private StreamReader eval_h;

		private TaskAwaiter<string> eval_i;

		private void eval_d()
		{
			short num = 0;
			_ = num;
			num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 7;
				int num3 = num;
				TaskAwaiter awaiter2 = default(TaskAwaiter);
				string text7 = default(string);
				MessageBoxResult messageBoxResult3 = default(MessageBoxResult);
				TaskAwaiter<string> awaiter = default(TaskAwaiter<string>);
				int num10 = default(int);
				string text9 = default(string);
				string text10 = default(string);
				int num9 = default(int);
				int num7 = default(int);
				string[] array = default(string[]);
				string text8 = default(string);
				int num8 = default(int);
				int num4 = default(int);
				string text = default(string);
				int num6 = default(int);
				string text3 = default(string);
				MessageBoxResult messageBoxResult2 = default(MessageBoxResult);
				int num5 = default(int);
				string text2 = default(string);
				MessageBoxResult messageBoxResult = default(MessageBoxResult);
				while (true)
				{
					switch (num3)
					{
					case 7:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 2;
							num3 = num;
							continue;
						}
						goto case 4;
					case 4:
						num = 5;
						num3 = num;
						continue;
					case 3:
						try
						{
							string text13 = string.Empty;
							StreamReader streamReader = new StreamReader(DirLocal + "\\FILE.log");
							try
							{
								num = 5;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 5:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 6:
										mainWindow.d3.Add(new FILEINFO
										{
											FILEEXIST = text13.Split('|')[0],
											FILENEWMD5 = text13.Split('|')[1]
										});
										num = 0;
										num3 = num;
										continue;
									case 3:
										if (!string.IsNullOrEmpty(text13))
										{
											num = 26544;
											short num11 = num;
											num = 26544;
											switch (num11 == num)
											{
											case false:
											case true:
												break;
											default:
												num = 0;
												if (num != 0)
												{
												}
												num = 6;
												num3 = num;
												continue;
											}
											goto case 6;
										}
										goto default;
									default:
										num = 2;
										num3 = num;
										continue;
									case 2:
										if ((text13 = streamReader.ReadLine()) != null)
										{
											num = 3;
											num3 = num;
										}
										else
										{
											num = 1;
											num3 = num;
										}
										continue;
									case 1:
										mainWindow.eval_ig.Content = "";
										num = 4;
										num3 = num;
										continue;
									case 4:
										break;
									}
									break;
								}
							}
							finally
							{
								num = 3;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 3:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 < 0)
										{
											num = 1;
											num3 = num;
											continue;
										}
										break;
									case 1:
										num = 4;
										num3 = num;
										continue;
									case 4:
										if (streamReader != null)
										{
											num = 0;
											num3 = num;
											continue;
										}
										break;
									case 0:
										((IDisposable)streamReader).Dispose();
										num = 2;
										num3 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
						}
						catch (Exception ex4)
						{
							mainWindow.BoxServer.IsEnabled = true;
							mainWindow.eval_bw();
							MessageBoxWindow.Show(mainWindow, "CheckGameFileExist : " + ex4.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						goto IL_00d7;
					case 5:
						try
						{
							num = 16;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 16:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 != 0)
									{
										num = 13;
										num3 = num;
										continue;
									}
									awaiter2 = this.m_eval_d;
									this.m_eval_d = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 9;
									num3 = num;
									continue;
								case 12:
									MessageBoxWindow.Show(mainWindow, "Ошибка, лаунчеру не удалось скачать нужные файлы для запуска игры, попробуйте перезапустить лаунчер и повторить попытку.", name_messege);
									num = 15;
									num3 = num;
									continue;
								case 17:
									num = 2;
									num3 = num;
									continue;
								case 2:
									if (Langve == "RU")
									{
										num = 12;
										num3 = num;
									}
									else
									{
										MessageBoxWindow.Show(mainWindow, "Error, the launcher could not download the necessary files for the run game, try restarting the launcher and try again.", name_messege);
										num = 6;
										num3 = num;
									}
									continue;
								case 13:
									mainWindow.dy = new FileInfo(DirLocal + "\\FILE.log");
									num = 11;
									num3 = num;
									continue;
								case 11:
									if (mainWindow.dy.Length == 0L)
									{
										num = 14;
										num3 = num;
									}
									else
									{
										num = 10;
										num3 = num;
									}
									continue;
								case 3:
								case 19:
									awaiter2 = mainWindow.eval_bx().GetAwaiter();
									num = 0;
									num3 = num;
									continue;
								case 0:
									if (!awaiter2.IsCompleted)
									{
										num = 7;
										num3 = num;
										continue;
									}
									goto case 9;
								case 5:
									if (!(Langve == "RU"))
									{
										mainWindow.eval_ig.Content = "Error, the launcher was unable to download the necessary files, try ... " + mainWindow.eval_c6;
										num = 3;
										num3 = num;
									}
									else
									{
										num = 1;
										num3 = num;
									}
									continue;
								case 9:
									awaiter2.GetResult();
									num = 4;
									num3 = num;
									continue;
								case 1:
									mainWindow.eval_ig.Content = "Ошибка, лаунчеру не удалось скачать нужные файлы , попытка ... " + mainWindow.eval_c6;
									num = 19;
									num3 = num;
									continue;
								case 4:
								case 6:
								case 15:
									mainWindow.BoxServer.IsEnabled = true;
									num = 18;
									num3 = num;
									continue;
								case 18:
									break;
								case 14:
									mainWindow.eval_bw();
									num = 20;
									num3 = num;
									continue;
								case 20:
									if (mainWindow.eval_c6 != 4)
									{
										num = 5;
										num3 = num;
									}
									else
									{
										num = 17;
										num3 = num;
									}
									continue;
								case 7:
									num2 = (eval_a = 0);
									this.m_eval_d = awaiter2;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter2, ref this);
									num = 8;
									num3 = num;
									continue;
								case 10:
									goto IL_3677;
								case 8:
									goto IL_3737;
								}
								break;
							}
						}
						catch
						{
							goto IL_3677;
						}
						break;
					case 0:
						try
						{
							num = 25;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 25:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									switch (num2)
									{
									case 6:
									case 7:
									case 8:
									case 9:
										goto IL_0889;
									case 1:
										goto IL_0915;
									case 2:
									case 3:
									case 4:
									case 5:
										goto IL_1ef2;
									}
									num = 31;
									num3 = num;
									continue;
								case 16:
									num = 12;
									num3 = num;
									continue;
								case 12:
									if (Path.GetDirectoryName(mainWindow.d3[eval_f].FILEEXIST).Contains(text7.Replace("\"", string.Empty)))
									{
										num = 28;
										num3 = num;
										continue;
									}
									goto case 13;
								case 17:
									mainWindow.BoxServer.IsEnabled = true;
									mainWindow.eval_bw();
									mainWindow.eval_a6();
									mainWindow.eval_be();
									num = 4;
									num3 = num;
									continue;
								case 30:
									if (!awaiter2.IsCompleted)
									{
										num = 23;
										num3 = num;
										continue;
									}
									goto case 24;
								case 19:
									if (Directory.Exists(mainWindow.Directory_game + "\\" + text7.Replace("\"", string.Empty)))
									{
										num = 16;
										num3 = num;
										continue;
									}
									goto case 13;
								case 2:
									mainWindow.eval_bw();
									mainWindow.Norificons(name_messege + " : " + eval_e);
									num = 27;
									num3 = num;
									continue;
								case 27:
									if (Langve == "RU")
									{
										num = 7;
										num3 = num;
									}
									else
									{
										messageBoxResult3 = MessageBoxWindow.Show(mainWindow, "Corrupt game files have been detected. Check game files for integrity?", name_messege, MessageBoxButton.YesNo);
										num = 9;
										num3 = num;
									}
									continue;
								case 5:
									ListFileModsDownload.Add(mainWindow.Directory_game + mainWindow.d3[eval_f].FILEEXIST);
									eval_e = eval_e + mainWindow.Directory_game + mainWindow.d3[eval_f].FILEEXIST + ",";
									num = 13;
									num3 = num;
									continue;
								case 0:
									try
									{
										num = 11;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 11:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if ((uint)(num2 - 2) > 3u)
												{
													num = 8;
													num3 = num;
													continue;
												}
												goto case 1;
											case 14:
												try
												{
													num = 28;
													num3 = num;
													while (true)
													{
														switch (num3)
														{
														case 28:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															switch (num2)
															{
															default:
																num = 7;
																num3 = num;
																break;
															case 3:
																awaiter = eval_i;
																eval_i = default(TaskAwaiter<string>);
																num2 = (eval_a = -1);
																num = 29;
																num3 = num;
																break;
															case 2:
																awaiter = eval_i;
																eval_i = default(TaskAwaiter<string>);
																num2 = (eval_a = -1);
																num = 67;
																num3 = num;
																break;
															case 4:
																awaiter2 = this.m_eval_d;
																this.m_eval_d = default(TaskAwaiter);
																num2 = (eval_a = -1);
																num = 2;
																num3 = num;
																break;
															case 5:
																awaiter2 = this.m_eval_d;
																this.m_eval_d = default(TaskAwaiter);
																num2 = (eval_a = -1);
																num = 45;
																num3 = num;
																break;
															}
															continue;
														case 31:
														case 46:
															num = 73;
															num3 = num;
															continue;
														case 73:
															if (num10 >= mainWindow.d3.Count)
															{
																num = 35;
																num3 = num;
															}
															else
															{
																num = 15;
																num3 = num;
															}
															continue;
														case 23:
															mainWindow.ShopGenerateUrl(Connectip, Connectport);
															num = 61;
															num3 = num;
															continue;
														case 7:
															num = 26;
															num3 = num;
															continue;
														case 50:
															if (!string.IsNullOrEmpty(text9))
															{
																num = 51;
																num3 = num;
																continue;
															}
															goto case 26;
														case 9:
															mainWindow.eval_bw();
															mainWindow.Norificons(name_messege + " : " + eval_g);
															num = 34;
															num3 = num;
															continue;
														case 34:
															if (Langve == "RU")
															{
																num = 10;
																num3 = num;
															}
															else
															{
																messageBoxResult3 = MessageBoxWindow.Show(mainWindow, "Found missing game files!. Update to current version ?", name_messege, MessageBoxButton.YesNo);
																num = 4;
																num3 = num;
															}
															continue;
														case 15:
															if (Path.GetDirectoryName(mainWindow.d3[num10].FILEEXIST).Contains(text10.Replace("\"", string.Empty)))
															{
																num = 68;
																num3 = num;
																continue;
															}
															goto case 8;
														case 54:
															if (!Directory.Exists(mainWindow.Directory_game + "\\" + text10.Replace("\"", string.Empty)))
															{
																num = 30;
																num3 = num;
																continue;
															}
															goto case 35;
														case 43:
															mainWindow.eval_be();
															mainWindow.BoxServer.IsEnabled = true;
															num = 75;
															num3 = num;
															continue;
														case 8:
															num10++;
															num = 46;
															num3 = num;
															continue;
														case 39:
															num9++;
															num = 55;
															num3 = num;
															continue;
														case 65:
															num2 = (eval_a = 3);
															eval_i = awaiter;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
															num = 0;
															num3 = num;
															continue;
														case 0:
															break;
														case 47:
															mainWindow.eval_be();
															mainWindow.BoxServer.IsEnabled = true;
															num = 57;
															num3 = num;
															continue;
														case 3:
															goto end_IL_0091;
														case 32:
															mainWindow.Norificons(name_messege + " : Обнаружено обновление модификаций(модов) данного сервера. Обновить ?");
															messageBoxResult3 = MessageBoxWindow.Show(mainWindow, "Обнаружено обновление модификаций(модов) данного сервера. Обновить ?", name_messege, MessageBoxButton.YesNo);
															num = 71;
															num3 = num;
															continue;
														case 24:
															num = 63;
															num3 = num;
															continue;
														case 63:
															if (Enable_Shop)
															{
																num = 23;
																num3 = num;
																continue;
															}
															goto case 61;
														case 44:
														case 58:
															num = 12;
															num3 = num;
															continue;
														case 12:
															if (num7 < array.Length)
															{
																string text12 = array[num7];
																text10 = "\"" + text12.Trim() + "\"";
																num = 54;
																num3 = num;
															}
															else
															{
																num = 72;
																num3 = num;
															}
															continue;
														case 13:
														case 64:
															num = 38;
															num3 = num;
															continue;
														case 38:
														{
															if (num7 >= array.Length)
															{
																num = 49;
																num3 = num;
																continue;
															}
															string text11 = array[num7];
															text8 = "\"" + text11.Trim() + "\"";
															num = 5;
															num3 = num;
															continue;
														}
														case 62:
														case 71:
															num = 37;
															num3 = num;
															continue;
														case 37:
															if (messageBoxResult3 == MessageBoxResult.Yes)
															{
																num = 43;
																num3 = num;
															}
															else
															{
																mainWindow.BoxServer.IsEnabled = true;
																num = 48;
																num3 = num;
															}
															continue;
														case 61:
															awaiter = System.Windows.Winservr.System.LoadMac().GetAwaiter();
															num = 40;
															num3 = num;
															continue;
														case 40:
															if (!awaiter.IsCompleted)
															{
																num = 19;
																num3 = num;
																continue;
															}
															goto case 67;
														case 57:
															num = 18;
															num3 = num;
															continue;
														case 18:
															if (eval_g == string.Empty)
															{
																num = 24;
																num3 = num;
																continue;
															}
															goto case 26;
														case 72:
															num = 74;
															num3 = num;
															continue;
														case 74:
															if (eval_g != string.Empty)
															{
																num = 9;
																num3 = num;
																continue;
															}
															goto case 57;
														case 4:
														case 36:
															num = 27;
															num3 = num;
															continue;
														case 27:
															if (messageBoxResult3 != MessageBoxResult.Yes)
															{
																mainWindow.BoxServer.IsEnabled = true;
																num = 3;
																num3 = num;
															}
															else
															{
																num = 47;
																num3 = num;
															}
															continue;
														case 19:
															num2 = (eval_a = 2);
															eval_i = awaiter;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
															num = 11;
															num3 = num;
															continue;
														case 11:
															break;
														case 2:
															awaiter2.GetResult();
															awaiter2 = mainWindow.eval_a4().GetAwaiter();
															num = 66;
															num3 = num;
															continue;
														case 66:
															if (!awaiter2.IsCompleted)
															{
																num = 42;
																num3 = num;
																continue;
															}
															goto case 45;
														case 51:
															num = 52;
															num3 = num;
															continue;
														case 52:
															if (text9 != Updatemods)
															{
																num = 17;
																num3 = num;
																continue;
															}
															ListFileModsDownload.Clear();
															array = Mod_in.Replace("\"", string.Empty).Replace("-mod=", string.Empty).Split(';');
															num7 = 0;
															num = 58;
															num3 = num;
															continue;
														case 41:
															num7++;
															num = 64;
															num3 = num;
															continue;
														case 10:
															messageBoxResult3 = MessageBoxWindow.Show(mainWindow, "Обнаружено отсутствие файлов игры!. Обновить до актуальной версии ?", name_messege, MessageBoxButton.YesNo);
															num = 36;
															num3 = num;
															continue;
														case 30:
															num10 = 0;
															num = 31;
															num3 = num;
															continue;
														case 5:
															if (!Directory.Exists(mainWindow.Directory_game + "\\" + text8.Replace("\"", string.Empty)))
															{
																num = 1;
																num3 = num;
																continue;
															}
															goto case 41;
														case 67:
														{
															string result = awaiter.GetResult();
															mainWindow.MC = result;
															awaiter = System.Windows.Winservr.System.GetSMB().GetAwaiter();
															num = 33;
															num3 = num;
															continue;
														}
														case 33:
															if (!awaiter.IsCompleted)
															{
																num = 65;
																num3 = num;
																continue;
															}
															goto case 29;
														case 49:
															mainWindow.eval_bw();
															num = 69;
															num3 = num;
															continue;
														case 69:
															if (!(Langve == "RU"))
															{
																mainWindow.Norificons(name_messege + " : An update to modifications (mods) of this server has been detected. Update ?");
																messageBoxResult3 = MessageBoxWindow.Show(mainWindow, "An update to modifications (mods) of this server has been detected. Update ?", name_messege, MessageBoxButton.YesNo);
																num = 62;
																num3 = num;
															}
															else
															{
																num = 32;
																num3 = num;
															}
															continue;
														case 48:
															goto end_IL_0091;
														case 26:
														case 59:
														case 75:
															num = 14;
															num3 = num;
															continue;
														case 14:
															if ((text9 = eval_h.ReadLine()) != null)
															{
																num = 50;
																num3 = num;
															}
															else
															{
																num = 6;
																num3 = num;
															}
															continue;
														case 17:
															mainWindow.eval_ew.Stop();
															mainWindow.eval_fo.Value = 0.0;
															ListFileModsDownload.Clear();
															array = Mod_in.Replace("\"", string.Empty).Replace("-mod=", string.Empty).Split(';');
															num7 = 0;
															num = 13;
															num3 = num;
															continue;
														case 1:
															num9 = 0;
															num = 60;
															num3 = num;
															continue;
														case 21:
															ListFileModsDownload.Add(mainWindow.Directory_game + mainWindow.d3[num9].FILEEXIST);
															num = 39;
															num3 = num;
															continue;
														case 53:
															num2 = (eval_a = 4);
															this.m_eval_d = awaiter2;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter2, ref this);
															num = 56;
															num3 = num;
															continue;
														case 56:
															break;
														case 42:
															num2 = (eval_a = 5);
															this.m_eval_d = awaiter2;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter2, ref this);
															num = 22;
															num3 = num;
															continue;
														case 22:
															break;
														case 35:
															num7++;
															num = 44;
															num3 = num;
															continue;
														case 68:
															ListFileModsDownload.Add(mainWindow.Directory_game + mainWindow.d3[num10].FILEEXIST);
															eval_g = eval_g + mainWindow.d3[num10].FILEEXIST + ",";
															num = 8;
															num3 = num;
															continue;
														case 45:
														{
															awaiter2.GetResult();
															mainWindow.eval_fe.Visibility = Visibility.Hidden;
															mainWindow.ij.Visibility = Visibility.Visible;
															DoubleAnimation animation2 = new DoubleAnimation
															{
																From = 0.0,
																To = 1.0,
																Duration = new Duration(TimeSpan.FromSeconds(mainWindow.m_eval_ah)),
																AutoReverse = false
															};
															mainWindow.ij.BeginAnimation(UIElement.OpacityProperty, animation2);
															mainWindow.c9.Interval = new TimeSpan(0, 0, 2);
															mainWindow.c9.Start();
															mainWindow.BoxServer.IsEnabled = true;
															mainWindow.eval_id.Visibility = Visibility.Hidden;
															num = 59;
															num3 = num;
															continue;
														}
														case 25:
															if (Path.GetDirectoryName(mainWindow.d3[num9].FILEEXIST).Contains(text8.Replace("\"", string.Empty)))
															{
																num = 21;
																num3 = num;
																continue;
															}
															goto case 39;
														case 55:
														case 60:
															num = 20;
															num3 = num;
															continue;
														case 20:
															if (num9 < mainWindow.d3.Count)
															{
																num = 25;
																num3 = num;
															}
															else
															{
																num = 41;
																num3 = num;
															}
															continue;
														case 29:
														{
															string result = awaiter.GetResult();
															mainWindow.TxtSMD = result;
															awaiter2 = Task.Delay(2000).GetAwaiter();
															num = 16;
															num3 = num;
															continue;
														}
														case 16:
															if (!awaiter2.IsCompleted)
															{
																num = 53;
																num3 = num;
																continue;
															}
															goto case 2;
														case 6:
															eval_h.Close();
															eval_h.Dispose();
															num = 70;
															num3 = num;
															continue;
														case 70:
															goto IL_1ded;
														}
														break;
													}
												}
												finally
												{
													num = 4;
													num3 = num;
													while (true)
													{
														switch (num3)
														{
														case 4:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															if (num2 < 0)
															{
																num = 2;
																num3 = num;
																continue;
															}
															break;
														case 0:
															((IDisposable)eval_h).Dispose();
															num = 1;
															num3 = num;
															continue;
														case 1:
															break;
														case 2:
															num = 3;
															num3 = num;
															continue;
														case 3:
															if (eval_h != null)
															{
																num = 0;
																num3 = num;
																continue;
															}
															break;
														}
														break;
													}
												}
												goto end_IL_07a9;
											case 13:
												num = 10;
												num3 = num;
												continue;
											case 7:
												if (!File.Exists(mainWindow.Directory_game + mainWindow.d3[num8].FILEEXIST))
												{
													num = 3;
													num3 = num;
													continue;
												}
												goto case 9;
											case 4:
												num8 = 0;
												num = 6;
												num3 = num;
												continue;
											case 3:
												eval_g = eval_g + mainWindow.d3[num8].FILEEXIST + ",";
												num = 9;
												num3 = num;
												continue;
											case 8:
												eval_g = string.Empty;
												num = 2;
												num3 = num;
												continue;
											case 2:
												if (mainWindow.m_eval_b6)
												{
													num = 4;
													num3 = num;
													continue;
												}
												text9 = "";
												eval_h = new StreamReader(Directory_Launcher + "\\mods.ini");
												num = 1;
												num3 = num;
												continue;
											case 9:
												num8++;
												num = 0;
												num3 = num;
												continue;
											case 1:
												num = 14;
												num3 = num;
												continue;
											case 0:
											case 6:
												num = 15;
												num3 = num;
												continue;
											case 15:
												if (num8 < mainWindow.d3.Count)
												{
													num = 7;
													num3 = num;
												}
												else
												{
													num = 13;
													num3 = num;
												}
												continue;
											case 10:
											case 12:
												eval_g = null;
												num = 5;
												num3 = num;
												continue;
											case 5:
												break;
												IL_1ded:
												eval_h = null;
												num = 12;
												num3 = num;
												continue;
											}
											break;
										}
									}
									catch (Exception ex2)
									{
										mainWindow.BoxServer.IsEnabled = true;
										mainWindow.eval_bw();
										MessageBoxWindow.Show(mainWindow, "CheckGameFileExist2 : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									}
									break;
								case 3:
								case 9:
									num = 8;
									num3 = num;
									continue;
								case 8:
									if (messageBoxResult3 == MessageBoxResult.Yes)
									{
										num = 17;
										num3 = num;
										continue;
									}
									goto IL_1ef2;
								case 24:
									awaiter2.GetResult();
									array = Mod_in.Replace("\"", string.Empty).Replace("-mod=", string.Empty).Split(';');
									num7 = 0;
									num = 20;
									num3 = num;
									continue;
								case 10:
								case 22:
									num = 29;
									num3 = num;
									continue;
								case 29:
									if (eval_f < mainWindow.d3.Count)
									{
										awaiter2 = Task.Delay(10).GetAwaiter();
										num = 30;
										num3 = num;
									}
									else
									{
										num = 26;
										num3 = num;
									}
									continue;
								case 14:
									ListFileModsDownload.Add(mainWindow.Directory_game + mainWindow.d3[eval_f].FILEEXIST);
									eval_e = eval_e + mainWindow.Directory_game + mainWindow.d3[eval_f].FILEEXIST + ",";
									num = 18;
									num3 = num;
									continue;
								case 32:
									num7 = eval_f++;
									num = 10;
									num3 = num;
									continue;
								case 23:
									num2 = (eval_a = 1);
									this.m_eval_d = awaiter2;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter2, ref this);
									num = 6;
									num3 = num;
									continue;
								case 6:
									goto end_IL_07a9;
								case 26:
									num = 1;
									num3 = num;
									continue;
								case 1:
									if (eval_e != string.Empty)
									{
										num = 2;
										num3 = num;
										continue;
									}
									goto IL_0889;
								case 13:
								case 18:
									num7++;
									num = 21;
									num3 = num;
									continue;
								case 34:
									if (new FileInfo(mainWindow.Directory_game + mainWindow.d3[eval_f].FILEEXIST).Length == 0L)
									{
										num = 14;
										num3 = num;
										continue;
									}
									goto case 13;
								case 20:
								case 21:
									num = 35;
									num3 = num;
									continue;
								case 35:
									if (num7 < array.Length)
									{
										string text6 = array[num7];
										text7 = "\"" + text6.Trim() + "\"";
										num = 19;
										num3 = num;
									}
									else
									{
										num = 32;
										num3 = num;
									}
									continue;
								case 7:
									messageBoxResult3 = MessageBoxWindow.Show(mainWindow, "Обнаружено поврежденные файлы игры. Проверить файлы игры на целостность?", name_messege, MessageBoxButton.YesNo);
									num = 3;
									num3 = num;
									continue;
								case 28:
									num = 11;
									num3 = num;
									continue;
								case 11:
									if (File.Exists(mainWindow.Directory_game + mainWindow.d3[eval_f].FILEEXIST))
									{
										num = 34;
										num3 = num;
									}
									else
									{
										num = 5;
										num3 = num;
									}
									continue;
								case 31:
									ListFileModsDownload.Clear();
									eval_e = string.Empty;
									eval_f = 0;
									num = 22;
									num3 = num;
									continue;
								case 15:
									try
									{
										num = 15;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 15:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if ((uint)(num2 - 6) > 3u)
												{
													num = 6;
													num3 = num;
													continue;
												}
												goto case 12;
											case 8:
												eval_g = eval_g + mainWindow.d3[num4].FILEEXIST + ",";
												num = 7;
												num3 = num;
												continue;
											case 12:
												num = 10;
												num3 = num;
												continue;
											case 9:
												if (!File.Exists(mainWindow.Directory_game + mainWindow.d3[num4].FILEEXIST))
												{
													num = 8;
													num3 = num;
													continue;
												}
												goto case 7;
											case 7:
												num4++;
												num = 13;
												num3 = num;
												continue;
											case 10:
												try
												{
													num = 24;
													num3 = num;
													while (true)
													{
														switch (num3)
														{
														case 48:
															break;
														case 24:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															switch (num2)
															{
															default:
																num = 15;
																num3 = num;
																break;
															case 8:
																awaiter2 = this.m_eval_d;
																this.m_eval_d = default(TaskAwaiter);
																num2 = (eval_a = -1);
																num = 11;
																num3 = num;
																break;
															case 9:
																awaiter2 = this.m_eval_d;
																this.m_eval_d = default(TaskAwaiter);
																num2 = (eval_a = -1);
																num = 70;
																num3 = num;
																break;
															case 6:
																awaiter = eval_i;
																eval_i = default(TaskAwaiter<string>);
																num2 = (eval_a = -1);
																num = 52;
																num3 = num;
																break;
															case 7:
																awaiter = eval_i;
																eval_i = default(TaskAwaiter<string>);
																num2 = (eval_a = -1);
																num = 32;
																num3 = num;
																break;
															}
															continue;
														case 14:
															num = 50;
															num3 = num;
															continue;
														case 50:
															if (text != Updatemods)
															{
																num = 66;
																num3 = num;
																continue;
															}
															ListFileModsDownload.Clear();
															array = Mod_in.Replace("\"", string.Empty).Replace("-mod=", string.Empty).Split(';');
															num7 = 0;
															num = 57;
															num3 = num;
															continue;
														case 49:
															num6++;
															num = 25;
															num3 = num;
															continue;
														case 0:
														case 64:
															num = 10;
															num3 = num;
															continue;
														case 10:
														{
															if (num7 >= array.Length)
															{
																num = 43;
																num3 = num;
																continue;
															}
															string text5 = array[num7];
															text3 = "\"" + text5.Trim() + "\"";
															num = 63;
															num3 = num;
															continue;
														}
														case 65:
															num6 = 0;
															num = 29;
															num3 = num;
															continue;
														case 55:
															ListFileModsDownload.Add(mainWindow.Directory_game + mainWindow.d3[num6].FILEEXIST);
															num = 49;
															num3 = num;
															continue;
														case 72:
															awaiter = System.Windows.Winservr.System.LoadMac().GetAwaiter();
															num = 60;
															num3 = num;
															continue;
														case 60:
															if (!awaiter.IsCompleted)
															{
																num = 23;
																num3 = num;
																continue;
															}
															goto case 52;
														case 5:
															num2 = (eval_a = 7);
															eval_i = awaiter;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
															num = 59;
															num3 = num;
															continue;
														case 59:
															goto end_IL_2440;
														case 22:
															mainWindow.eval_be();
															mainWindow.BoxServer.IsEnabled = true;
															num = 46;
															num3 = num;
															continue;
														case 4:
														case 62:
															num = 67;
															num3 = num;
															continue;
														case 67:
															if (messageBoxResult2 == MessageBoxResult.Yes)
															{
																num = 36;
																num3 = num;
															}
															else
															{
																mainWindow.BoxServer.IsEnabled = true;
																num = 19;
																num3 = num;
															}
															continue;
														case 69:
															num7++;
															num = 41;
															num3 = num;
															continue;
														case 16:
															num7++;
															num = 0;
															num3 = num;
															continue;
														case 11:
															awaiter2.GetResult();
															awaiter2 = mainWindow.eval_a4().GetAwaiter();
															num = 71;
															num3 = num;
															continue;
														case 71:
															if (!awaiter2.IsCompleted)
															{
																num = 33;
																num3 = num;
																continue;
															}
															goto case 70;
														case 30:
															if (Path.GetDirectoryName(mainWindow.d3[num6].FILEEXIST).Contains(text3.Replace("\"", string.Empty)))
															{
																num = 55;
																num3 = num;
																continue;
															}
															goto case 49;
														case 52:
														{
															string result = awaiter.GetResult();
															mainWindow.MC = result;
															awaiter = System.Windows.Winservr.System.GetSMB().GetAwaiter();
															num = 18;
															num3 = num;
															continue;
														}
														case 18:
															if (!awaiter.IsCompleted)
															{
																num = 5;
																num3 = num;
																continue;
															}
															goto case 32;
														case 75:
															messageBoxResult2 = MessageBoxWindow.Show(mainWindow, "Обнаружено отсутствие файлов игры!. Обновить до актуальной версии ?", name_messege, MessageBoxButton.YesNo);
															num = 4;
															num3 = num;
															continue;
														case 12:
															mainWindow.eval_bw();
															mainWindow.Norificons(name_messege + " : " + eval_g);
															num = 21;
															num3 = num;
															continue;
														case 21:
															if (Langve == "RU")
															{
																num = 75;
																num3 = num;
															}
															else
															{
																messageBoxResult2 = MessageBoxWindow.Show(mainWindow, "Found missing game files!. Update to current version ?", name_messege, MessageBoxButton.YesNo);
																num = 62;
																num3 = num;
															}
															continue;
														case 42:
															num5++;
															num = 26;
															num3 = num;
															continue;
														case 54:
															num = 34;
															num3 = num;
															continue;
														case 34:
															if (Enable_Shop)
															{
																num = 9;
																num3 = num;
																continue;
															}
															goto case 72;
														case 41:
														case 57:
															num = 38;
															num3 = num;
															continue;
														case 38:
														{
															if (num7 >= array.Length)
															{
																num = 2;
																num3 = num;
																continue;
															}
															string text4 = array[num7];
															text2 = "\"" + text4.Trim() + "\"";
															num = 28;
															num3 = num;
															continue;
														}
														case 25:
														case 29:
															num = 3;
															num3 = num;
															continue;
														case 3:
															if (num6 < mainWindow.d3.Count)
															{
																num = 30;
																num3 = num;
															}
															else
															{
																num = 16;
																num3 = num;
															}
															continue;
														case 23:
															num2 = (eval_a = 6);
															eval_i = awaiter;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
															num = 45;
															num3 = num;
															continue;
														case 45:
															goto end_IL_2440;
														case 15:
															num = 6;
															num3 = num;
															continue;
														case 6:
														case 46:
														case 53:
															num = 13;
															num3 = num;
															continue;
														case 13:
															if ((text = eval_h.ReadLine()) == null)
															{
																num = 8;
																num3 = num;
															}
															else
															{
																num = 58;
																num3 = num;
															}
															continue;
														case 63:
															if (!Directory.Exists(mainWindow.Directory_game + "\\" + text3.Replace("\"", string.Empty)))
															{
																num = 65;
																num3 = num;
																continue;
															}
															goto case 16;
														case 44:
															num = 74;
															num3 = num;
															continue;
														case 74:
															if (eval_g == string.Empty)
															{
																num = 54;
																num3 = num;
																continue;
															}
															goto case 6;
														case 26:
														case 47:
															num = 56;
															num3 = num;
															continue;
														case 56:
															if (num5 >= mainWindow.d3.Count)
															{
																num = 69;
																num3 = num;
															}
															else
															{
																num = 1;
																num3 = num;
															}
															continue;
														case 32:
														{
															string result = awaiter.GetResult();
															mainWindow.TxtSMD = result;
															awaiter2 = Task.Delay(2000).GetAwaiter();
															num = 17;
															num3 = num;
															continue;
														}
														case 17:
															if (!awaiter2.IsCompleted)
															{
																num = 68;
																num3 = num;
																continue;
															}
															goto case 11;
														case 70:
														{
															awaiter2.GetResult();
															mainWindow.eval_fe.Visibility = Visibility.Hidden;
															mainWindow.ij.Visibility = Visibility.Visible;
															DoubleAnimation animation = new DoubleAnimation
															{
																From = 0.0,
																To = 1.0,
																Duration = new Duration(TimeSpan.FromSeconds(mainWindow.m_eval_ah)),
																AutoReverse = false
															};
															mainWindow.ij.BeginAnimation(UIElement.OpacityProperty, animation);
															mainWindow.c9.Interval = new TimeSpan(0, 0, 2);
															mainWindow.c9.Start();
															mainWindow.BoxServer.IsEnabled = true;
															mainWindow.eval_id.Visibility = Visibility.Hidden;
															num = 53;
															num3 = num;
															continue;
														}
														case 43:
															mainWindow.eval_bw();
															num = 39;
															num3 = num;
															continue;
														case 39:
															if (!(Langve == "RU"))
															{
																mainWindow.Norificons(name_messege + " : An update to modifications (mods) of this server has been detected. Update ?");
																messageBoxResult = MessageBoxWindow.Show(mainWindow, "An update to modifications (mods) of this server has been detected. Update ?", name_messege, MessageBoxButton.YesNo);
																num = 27;
																num3 = num;
															}
															else
															{
																num = 73;
																num3 = num;
															}
															continue;
														case 68:
															num2 = (eval_a = 8);
															this.m_eval_d = awaiter2;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter2, ref this);
															num = 37;
															num3 = num;
															continue;
														case 37:
															goto end_IL_2440;
														case 2:
															num = 35;
															num3 = num;
															continue;
														case 35:
															if (eval_g != string.Empty)
															{
																num = 12;
																num3 = num;
																continue;
															}
															goto case 44;
														case 28:
															if (!Directory.Exists(mainWindow.Directory_game + "\\" + text2.Replace("\"", string.Empty)))
															{
																num = 51;
																num3 = num;
																continue;
															}
															goto case 69;
														case 36:
															mainWindow.eval_be();
															mainWindow.BoxServer.IsEnabled = true;
															num = 44;
															num3 = num;
															continue;
														case 66:
															mainWindow.eval_ew.Stop();
															mainWindow.eval_fo.Value = 0.0;
															ListFileModsDownload.Clear();
															array = Mod_in.Replace("\"", string.Empty).Replace("-mod=", string.Empty).Split(';');
															num7 = 0;
															num = 64;
															num3 = num;
															continue;
														case 27:
														case 40:
															num = 20;
															num3 = num;
															continue;
														case 20:
															if (messageBoxResult == MessageBoxResult.Yes)
															{
																num = 22;
																num3 = num;
															}
															else
															{
																mainWindow.BoxServer.IsEnabled = true;
																num = 7;
																num3 = num;
															}
															continue;
														case 19:
															goto end_IL_0091;
														case 7:
															goto end_IL_0091;
														case 33:
															num2 = (eval_a = 9);
															this.m_eval_d = awaiter2;
															eval_b.AwaitUnsafeOnCompleted(ref awaiter2, ref this);
															num = 31;
															num3 = num;
															continue;
														case 31:
															goto end_IL_2440;
														case 58:
															if (!string.IsNullOrEmpty(text))
															{
																num = 14;
																num3 = num;
																continue;
															}
															goto case 6;
														case 1:
															if (Path.GetDirectoryName(mainWindow.d3[num5].FILEEXIST).Contains(text2.Replace("\"", string.Empty)))
															{
																num = 61;
																num3 = num;
																continue;
															}
															goto case 42;
														case 9:
															mainWindow.ShopGenerateUrl(Connectip, Connectport);
															num = 72;
															num3 = num;
															continue;
														case 51:
															num5 = 0;
															num = 47;
															num3 = num;
															continue;
														case 61:
															ListFileModsDownload.Add(mainWindow.Directory_game + mainWindow.d3[num5].FILEEXIST);
															eval_g = eval_g + mainWindow.d3[num5].FILEEXIST + ",";
															num = 42;
															num3 = num;
															continue;
														case 73:
															mainWindow.Norificons(name_messege + " : Обнаружено обновление модификаций(модов) данного сервера. Обновить ?");
															messageBoxResult = MessageBoxWindow.Show(mainWindow, "Обнаружено обновление модификаций(модов) данного сервера. Обновить ?", name_messege, MessageBoxButton.YesNo);
															num = 40;
															num3 = num;
															continue;
														case 8:
															eval_h.Close();
															eval_h.Dispose();
															num = 48;
															num3 = num;
															continue;
														}
														break;
													}
													goto IL_239d;
													end_IL_2440:;
												}
												finally
												{
													num = 2;
													num3 = num;
													while (true)
													{
														switch (num3)
														{
														case 2:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															if (num2 < 0)
															{
																num = 4;
																num3 = num;
																continue;
															}
															break;
														case 0:
															((IDisposable)eval_h).Dispose();
															num = 1;
															num3 = num;
															continue;
														case 1:
															break;
														case 4:
															num = 3;
															num3 = num;
															continue;
														case 3:
															if (eval_h != null)
															{
																num = 0;
																num3 = num;
																continue;
															}
															break;
														}
														break;
													}
												}
												goto end_IL_07a9;
											case 1:
												num = 2;
												num3 = num;
												continue;
											case 13:
											case 14:
												num = 5;
												num3 = num;
												continue;
											case 5:
												if (num4 < mainWindow.d3.Count)
												{
													num = 9;
													num3 = num;
												}
												else
												{
													num = 1;
													num3 = num;
												}
												continue;
											case 6:
												eval_g = string.Empty;
												num = 0;
												num3 = num;
												continue;
											case 0:
												if (mainWindow.m_eval_b6)
												{
													num = 4;
													num3 = num;
													continue;
												}
												text = "";
												eval_h = new StreamReader(Directory_Launcher + "\\mods.ini");
												num = 12;
												num3 = num;
												continue;
											case 4:
												num4 = 0;
												num = 14;
												num3 = num;
												continue;
											case 2:
											case 3:
												eval_g = null;
												num = 11;
												num3 = num;
												continue;
											case 11:
												break;
												IL_239d:
												eval_h = null;
												num = 3;
												num3 = num;
												continue;
											}
											break;
										}
									}
									catch (Exception ex)
									{
										mainWindow.BoxServer.IsEnabled = true;
										mainWindow.eval_bw();
										MessageBoxWindow.Show(mainWindow, "CheckGameFileExist2 : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									}
									break;
								case 4:
									break;
								case 33:
									goto IL_3700;
									IL_1ef2:
									num = 0;
									num3 = num;
									continue;
									IL_0915:
									awaiter2 = this.m_eval_d;
									this.m_eval_d = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 24;
									num3 = num;
									continue;
									IL_0889:
									num = 15;
									num3 = num;
									continue;
								}
								eval_e = null;
								num = 33;
								num3 = num;
								continue;
								end_IL_07a9:
								break;
							}
						}
						catch (Exception ex3)
						{
							MessageBoxWindow.Show(mainWindow, "ErrorFileGame : " + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							mainWindow.BoxServer.IsEnabled = true;
							goto IL_3700;
						}
						goto IL_3737;
					case 2:
						num = 1;
						num3 = num;
						continue;
					case 1:
						if ((uint)(num2 - 1) > 8u)
						{
							num = 4;
							num3 = num;
							continue;
						}
						goto IL_00d7;
					case 8:
						try
						{
							mainWindow.d3.Clear();
						}
						catch
						{
						}
						num = 3;
						num3 = num;
						continue;
					case 6:
						break;
						IL_3700:
						num = 6;
						num3 = num;
						continue;
						IL_3677:
						num = 8;
						num3 = num;
						continue;
						IL_00d7:
						num = 0;
						num3 = num;
						continue;
						end_IL_0091:
						break;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				goto IL_3737;
			}
			eval_a = -2;
			eval_b.SetResult();
			goto IL_3737;
			IL_3737:
			num = 1;
			if (num == 0)
			{
			}
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 0;
			_ = num;
			num = -18986;
			short num2 = num;
			num = -18986;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_e : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 8;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				XmlDocument xmlDocument = default(XmlDocument);
				XmlNode xmlNode2 = default(XmlNode);
				IDisposable disposable = default(IDisposable);
				while (true)
				{
					switch (num3)
					{
					case 1:
						break;
					case 8:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 2;
							num3 = num;
							continue;
						}
						awaiter = this.m_eval_d;
						this.m_eval_d = default(TaskAwaiter);
						num2 = (eval_a = -1);
						num = 10;
						num3 = num;
						continue;
					case 16:
						num2 = (eval_a = 0);
						this.m_eval_d = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						num = 9;
						num3 = num;
						continue;
					case 9:
						goto end_IL_006d;
					case 6:
						mainWindow.df.eval_d.Content = "Коннект к серверу...";
						mainWindow.Norificons("Загрузка лаунчера ...");
						num = 12;
						num3 = num;
						continue;
					case 11:
						if (mainWindow.Error_Web)
						{
							num = 14;
							num3 = num;
						}
						else
						{
							awaiter = mainWindow.eval_bo().GetAwaiter();
							num = 13;
							num3 = num;
						}
						continue;
					case 3:
						try
						{
							xmlDocument.Load(mainWindow.m_eval_w + mainWindow.m_eval_o + Site_version_DIR);
							IEnumerator enumerator = xmlDocument.SelectNodes("/server").GetEnumerator();
							try
							{
								num = 12;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 12:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 24:
										try
										{
											mainWindow.eval_e4 = xmlNode2.SelectSingleNode("LargeImageKey_Assets").InnerText;
										}
										catch
										{
										}
										num = 6;
										num3 = num;
										continue;
									case 21:
										try
										{
											mainWindow.ey = xmlNode2.SelectSingleNode("IDDis").InnerText;
										}
										catch
										{
										}
										num = 15;
										num3 = num;
										continue;
									case 17:
										try
										{
											mainWindow.DownloadAllGameFiles = xmlNode2.SelectSingleNode("allfiles").InnerText;
										}
										catch
										{
										}
										num = 21;
										num3 = num;
										continue;
									case 4:
										try
										{
											mainWindow.eval_e2 = xmlNode2.SelectSingleNode("UrlDisButt2").InnerText;
										}
										catch
										{
										}
										num = 22;
										num3 = num;
										continue;
									case 5:
										try
										{
											mainWindow.Vk_URL = xmlNode2.SelectSingleNode("vk").InnerText;
										}
										catch
										{
										}
										num = 16;
										num3 = num;
										continue;
									case 15:
										try
										{
											mainWindow.eval_ez = xmlNode2.SelectSingleNode("IDDisState").InnerText;
										}
										catch
										{
										}
										num = 9;
										num3 = num;
										continue;
									case 25:
										try
										{
											mainWindow.DISCORD_URL = xmlNode2.SelectSingleNode("discord").InnerText;
										}
										catch
										{
										}
										num = 3;
										num3 = num;
										continue;
									case 19:
										mainWindow.m_eval_b6 = true;
										num = 0;
										num3 = num;
										continue;
									case 16:
										try
										{
											mainWindow.Site_URL = xmlNode2.SelectSingleNode("site").InnerText;
										}
										catch
										{
										}
										num = 25;
										num3 = num;
										continue;
									case 3:
										try
										{
											mainWindow.TxtUploadFastResume = xmlNode2.SelectSingleNode("upload").InnerText;
										}
										catch
										{
										}
										num = 17;
										num3 = num;
										continue;
									case 23:
										try
										{
											mainWindow.cj = double.Parse(xmlNode2.SelectSingleNode("discount").InnerText);
										}
										catch
										{
										}
										num = 1;
										num3 = num;
										continue;
									case 1:
										if (mainWindow.DownloadAllGameFiles == "1")
										{
											num = 19;
											num3 = num;
											continue;
										}
										goto case 0;
									case 8:
										try
										{
											mainWindow.eval_e6 = xmlNode2.SelectSingleNode("SmallImageKey_Assets").InnerText;
										}
										catch
										{
										}
										num = 10;
										num3 = num;
										continue;
									case 22:
										try
										{
											mainWindow.eval_e3 = xmlNode2.SelectSingleNode("UrlDisButtName2").InnerText;
										}
										catch
										{
										}
										num = 24;
										num3 = num;
										continue;
									case 7:
										try
										{
											mainWindow.eval_e1 = xmlNode2.SelectSingleNode("UrlDisButtName1").InnerText;
										}
										catch
										{
										}
										num = 4;
										num3 = num;
										continue;
									case 14:
										mainWindow.m_eval_b4 = true;
										num = 11;
										num3 = num;
										continue;
									case 9:
										try
										{
											mainWindow.eval_e0 = xmlNode2.SelectSingleNode("UrlDisButt1").InnerText;
										}
										catch
										{
										}
										num = 7;
										num3 = num;
										continue;
									case 6:
										try
										{
											mainWindow.eval_e5 = xmlNode2.SelectSingleNode("LargeImageKey_Text").InnerText;
										}
										catch
										{
										}
										num = 8;
										num3 = num;
										continue;
									case 10:
										try
										{
											mainWindow.eval_e7 = xmlNode2.SelectSingleNode("SmallImageKey_Text").InnerText;
										}
										catch
										{
										}
										num = 23;
										num3 = num;
										continue;
									default:
										num = 18;
										num3 = num;
										continue;
									case 18:
										if (enumerator.MoveNext())
										{
											xmlNode2 = (XmlNode)enumerator.Current;
											mainWindow.an = xmlNode2.SelectSingleNode("version").InnerText;
											Updateclient = xmlNode2.SelectSingleNode("client").InnerText;
											Updatemods = xmlNode2.SelectSingleNode("mods").InnerText;
											num = 5;
											num3 = num;
										}
										else
										{
											num = 13;
											num3 = num;
										}
										continue;
									case 0:
										num = 20;
										num3 = num;
										continue;
									case 20:
										if (mainWindow.TxtUploadFastResume == "1")
										{
											num = 14;
											num3 = num;
											continue;
										}
										goto default;
									case 13:
										num = 2;
										num3 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
							finally
							{
								num = 1;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 < 0)
										{
											num = 3;
											num3 = num;
											continue;
										}
										break;
									case 4:
										disposable.Dispose();
										num = 0;
										num3 = num;
										continue;
									case 0:
										break;
									case 3:
										disposable = enumerator as IDisposable;
										num = 2;
										num3 = num;
										continue;
									case 2:
										if (disposable != null)
										{
											num = 4;
											num3 = num;
											continue;
										}
										break;
									}
									break;
								}
							}
						}
						catch
						{
							mainWindow.Error_Web = true;
						}
						num = 11;
						num3 = num;
						continue;
					case 5:
					case 12:
						xmlDocument = new XmlDocument();
						num = 4;
						num3 = num;
						continue;
					case 13:
						if (!awaiter.IsCompleted)
						{
							num = 16;
							num3 = num;
							continue;
						}
						goto case 10;
					case 10:
						awaiter.GetResult();
						num = 15;
						num3 = num;
						continue;
					case 2:
						num = 7;
						num3 = num;
						continue;
					case 7:
						if (Langve == "RU")
						{
							num = 6;
							num3 = num;
							continue;
						}
						mainWindow.df.eval_d.Content = "Connect to the server...";
						mainWindow.Norificons("Loading Launcher ...");
						num = 5;
						num3 = num;
						continue;
					case 4:
						try
						{
							num = -644;
							short num4 = num;
							num = -644;
							switch (num4 == num)
							{
							default:
							{
								num = 0;
								if (num != 0)
								{
								}
								xmlDocument.Load(mainWindow.m_eval_w + mainWindow.m_eval_o + Site_version_DIR);
								IEnumerator enumerator = xmlDocument.SelectNodes("/server").GetEnumerator();
								try
								{
									num = 1;
									num3 = num;
									while (true)
									{
										switch (num3)
										{
										case 1:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											num = 0;
											num3 = num;
											continue;
										case 0:
											if (enumerator.MoveNext())
											{
												XmlNode xmlNode = (XmlNode)enumerator.Current;
												mainWindow.an = xmlNode.SelectSingleNode("version").InnerText;
												Updateclient = xmlNode.SelectSingleNode("client").InnerText;
												num = 3;
												num3 = num;
											}
											else
											{
												num = 2;
												num3 = num;
											}
											continue;
										case 2:
											num = 4;
											num3 = num;
											continue;
										case 4:
											break;
										}
										break;
									}
								}
								finally
								{
									num = 1;
									num3 = num;
									while (true)
									{
										switch (num3)
										{
										case 1:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (num2 < 0)
											{
												num = 3;
												num3 = num;
												continue;
											}
											break;
										case 4:
											disposable.Dispose();
											num = 0;
											num3 = num;
											continue;
										case 0:
											break;
										case 3:
											disposable = enumerator as IDisposable;
											num = 2;
											num3 = num;
											continue;
										case 2:
											if (disposable != null)
											{
												num = 4;
												num3 = num;
												continue;
											}
											break;
										}
										break;
									}
								}
								break;
							}
							case false:
							case true:
								break;
							}
						}
						catch
						{
							mainWindow.m_eval_o = mainWindow.m_eval_p;
						}
						num = 3;
						num3 = num;
						continue;
					case 14:
					{
						mainWindow.df.Close();
						mainWindow.eval_ih.Visibility = Visibility.Visible;
						mainWindow.BoxServer.IsEnabled = false;
						mainWindow.eval_h5.IsEnabled = false;
						mainWindow.h6.IsEnabled = false;
						mainWindow.fa.Visibility = Visibility.Visible;
						DoubleAnimation animation = new DoubleAnimation
						{
							From = 0.0,
							To = 1.0,
							Duration = new Duration(TimeSpan.FromSeconds(2.0)),
							AutoReverse = false
						};
						mainWindow.fa.BeginAnimation(UIElement.OpacityProperty, animation);
						mainWindow.eval_fe.Visibility = Visibility.Visible;
						animation = new DoubleAnimation
						{
							From = 0.0,
							To = 1.0,
							Duration = new Duration(TimeSpan.FromSeconds(mainWindow.m_eval_ah)),
							AutoReverse = false
						};
						mainWindow.eval_fe.BeginAnimation(UIElement.OpacityProperty, animation);
						num = 0;
						num3 = num;
						continue;
					}
					case 0:
					case 15:
						num = 1;
						num3 = num;
						continue;
					}
					break;
				}
				goto IL_0042;
				end_IL_006d:;
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
			}
			goto IL_0d9d;
			IL_0d9d:
			num = 1;
			if (num == 0)
			{
			}
			return;
			IL_0042:
			num = 0;
			_ = num;
			eval_a = -2;
			eval_b.SetResult();
			goto IL_0d9d;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 28728;
			short num2 = num;
			num = 28728;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_f : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow CS_0024_003C_003E8__locals0 = eval_c;
			try
			{
				TaskAwaiter awaiter = default(TaskAwaiter);
				IEnumerator enumerator = default(IEnumerator);
				IDisposable disposable = default(IDisposable);
				string text = default(string);
				StreamReader streamReader = default(StreamReader);
				WebClient webClient = default(WebClient);
				while (true)
				{
					IL_0097:
					num = 18;
					int num3 = num;
					while (true)
					{
						switch (num3)
						{
						case 18:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num2 != 0)
							{
								num = 4;
								num3 = num;
								continue;
							}
							awaiter = this.m_eval_d;
							this.m_eval_d = default(TaskAwaiter);
							num2 = (eval_a = -1);
							num = 7;
							num3 = num;
							continue;
						case 13:
							try
							{
								num = 1;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										num = 3;
										num3 = num;
										continue;
									case 3:
									{
										if (!enumerator.MoveNext())
										{
											num = 0;
											num3 = num;
											continue;
										}
										XmlNode xmlNode = (XmlNode)enumerator.Current;
										CS_0024_003C_003E8__locals0.an = xmlNode.SelectSingleNode("version").InnerText;
										Updateclient = xmlNode.SelectSingleNode("client").InnerText;
										num = 2;
										num3 = num;
										continue;
									}
									case 0:
										num = 4;
										num3 = num;
										continue;
									case 4:
										break;
									}
									break;
								}
							}
							finally
							{
								num = 1;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 < 0)
										{
											num = 3;
											num3 = num;
											continue;
										}
										break;
									case 3:
										disposable = enumerator as IDisposable;
										num = 0;
										num3 = num;
										continue;
									case 0:
										if (disposable != null)
										{
											num = 2;
											num3 = num;
											continue;
										}
										break;
									case 2:
										disposable.Dispose();
										num = 4;
										num3 = num;
										continue;
									case 4:
										break;
									}
									break;
								}
							}
							awaiter = Task.Delay(1000).GetAwaiter();
							num = 14;
							num3 = num;
							continue;
						case 16:
							try
							{
								num = 6;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 6:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 2:
										CS_0024_003C_003E8__locals0.eval_ax();
										CS_0024_003C_003E8__locals0.eval_fo.Value = 0.0;
										CS_0024_003C_003E8__locals0.eval_be();
										num = 4;
										num3 = num;
										continue;
									case 5:
										if (text != string.Empty)
										{
											num = 8;
											num3 = num;
											continue;
										}
										goto default;
									case 8:
										num = 3;
										num3 = num;
										continue;
									case 3:
										if (!(text != Updateclient))
										{
											CS_0024_003C_003E8__locals0.Loc_client = text;
											CS_0024_003C_003E8__locals0.BoxServer.IsEnabled = true;
											num = 7;
											num3 = num;
										}
										else
										{
											num = 2;
											num3 = num;
										}
										continue;
									default:
										num = 0;
										num3 = num;
										continue;
									case 0:
										if ((text = streamReader.ReadLine()) != null)
										{
											num = 5;
											num3 = num;
										}
										else
										{
											num = 1;
											num3 = num;
										}
										continue;
									case 1:
										streamReader.Close();
										streamReader.Dispose();
										num = 9;
										num3 = num;
										continue;
									case 9:
										break;
									}
									break;
								}
							}
							finally
							{
								num = 1;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 < 0)
										{
											num = 3;
											num3 = num;
											continue;
										}
										break;
									case 3:
										num = 0;
										num3 = num;
										continue;
									case 0:
										if (streamReader != null)
										{
											num = 2;
											num3 = num;
											continue;
										}
										break;
									case 2:
										((IDisposable)streamReader).Dispose();
										num = 4;
										num3 = num;
										continue;
									case 4:
										break;
									}
									break;
								}
							}
							goto IL_0a3f;
						case 14:
							if (!awaiter.IsCompleted)
							{
								num = 12;
								num3 = num;
								continue;
							}
							goto case 7;
						case 0:
							awaiter.GetResult();
							text = "";
							streamReader = new StreamReader(Directory_Launcher + "\\client.ini");
							num = 16;
							num3 = num;
							continue;
						case 7:
							awaiter.GetResult();
							num = 20;
							num3 = num;
							continue;
						case 20:
							if (Convert.ToDouble(versionlocal, CultureInfo.InvariantCulture) != Convert.ToDouble(CS_0024_003C_003E8__locals0.an, CultureInfo.InvariantCulture))
							{
								num = 17;
								num3 = num;
							}
							else
							{
								awaiter = Task.Delay(1000).GetAwaiter();
								num = 15;
								num3 = num;
							}
							continue;
						case 4:
							num = 9;
							num3 = num;
							continue;
						case 9:
							if (num2 == 1)
							{
								awaiter = this.m_eval_d;
								this.m_eval_d = default(TaskAwaiter);
								num2 = (eval_a = -1);
								num = 0;
								num3 = num;
							}
							else
							{
								num = 1;
								num3 = num;
							}
							continue;
						case 12:
							num2 = (eval_a = 0);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 19;
							num3 = num;
							continue;
						case 19:
							return;
						case 21:
							num2 = (eval_a = 1);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 2;
							num3 = num;
							continue;
						case 2:
							return;
						case 6:
							try
							{
								Uri address = new Uri(Url_update + CS_0024_003C_003E8__locals0.m_eval_o + Url_update_DIR);
								webClient.DownloadFileAsync(address, Directory_Launcher + "\\" + CS_0024_003C_003E8__locals0.m_eval_ac + ".exe");
								webClient.DownloadProgressChanged += CS_0024_003C_003E8__locals0.ProgressChanged_update;
								webClient.DownloadFileCompleted += delegate
								{
									short num5;
									try
									{
										num5 = 9598;
										short num6 = num5;
										num5 = 9598;
										switch (num6 == num5)
										{
										default:
										{
											num5 = 0;
											if (num5 != 0)
											{
											}
											ProcessStartInfo obj = new ProcessStartInfo
											{
												FileName = Directory_Launcher + "\\" + CS_0024_003C_003E8__locals0.m_eval_ac + ".exe"
											};
											obj.WorkingDirectory = obj.WorkingDirectory + Directory_Launcher + "\\";
											Process.Start(obj);
											CS_0024_003C_003E8__locals0.Close_launcher();
											break;
										}
										}
									}
									catch (Exception ex)
									{
										if (Langve == "RU")
										{
											num5 = 1;
											if (num5 != 0)
											{
											}
											MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Исполняемый файл лаунчера либо не докачан либо блокирован защитником виндовс,антивирусом! " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										else
										{
											MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "The launcher executable file is either not downloaded or blocked by Windows defender, antivirus! " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
									}
									num5 = 0;
									_ = num5;
									CS_0024_003C_003E8__locals0.Close_launcher();
								};
							}
							finally
							{
								num = 1;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 < 0)
										{
											num = 3;
											num3 = num;
											continue;
										}
										break;
									case 3:
										num = 0;
										num3 = num;
										continue;
									case 0:
										if (webClient != null)
										{
											num = 2;
											num3 = num;
											continue;
										}
										break;
									case 2:
										((IDisposable)webClient).Dispose();
										num = 4;
										num3 = num;
										continue;
									case 4:
										break;
									}
									break;
								}
							}
							goto IL_0a3f;
						case 17:
							num = 3;
							num3 = num;
							continue;
						case 3:
							if (!(Langve == "RU"))
							{
								CS_0024_003C_003E8__locals0.Norificons("Launcher update : new version - " + CS_0024_003C_003E8__locals0.an);
								num = -23829;
								short num4 = num;
								num = -23829;
								switch (num4 == num)
								{
								case false:
								case true:
									break;
								default:
									num = 0;
									if (num != 0)
									{
									}
									num = 11;
									num3 = num;
									continue;
								}
								break;
							}
							num = 8;
							num3 = num;
							continue;
						case 8:
							CS_0024_003C_003E8__locals0.Norificons("Обновление лаунчера : новая версия - " + CS_0024_003C_003E8__locals0.an);
							num = 10;
							num3 = num;
							continue;
						case 10:
						case 11:
							CS_0024_003C_003E8__locals0.eval_ax();
							CS_0024_003C_003E8__locals0.eval_iy.Visibility = Visibility.Visible;
							CS_0024_003C_003E8__locals0.iz.Visibility = Visibility.Visible;
							webClient = new WebClient();
							num = 6;
							num3 = num;
							continue;
						case 1:
							CS_0024_003C_003E8__locals0.eval_ev.Load(DirLocal + "\\update.xml");
							enumerator = CS_0024_003C_003E8__locals0.eval_ev.SelectNodes("/server").GetEnumerator();
							num = 13;
							num3 = num;
							continue;
						case 15:
							if (!awaiter.IsCompleted)
							{
								num = 21;
								num3 = num;
								continue;
							}
							goto case 0;
						case 5:
							goto end_IL_00b6;
							IL_0a3f:
							num = 5;
							num3 = num;
							continue;
						}
						goto IL_0097;
						continue;
						end_IL_00b6:
						break;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 13885;
			short num2 = num;
			num = 13885;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[CompilerGenerated]
	private sealed class eval_g
	{
		public MainWindow eval_a;

		public Exception b;

		internal void eval_b()
		{
			short num = 1097;
			short num2 = num;
			num = 1097;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_a, "Language : " + b.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
	}

	[CompilerGenerated]
	private sealed class eval_h
	{
		public Uri a;

		public MainWindow eval_b;

		internal void eval_h(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = 7986;
			short num2 = num;
			num = 7986;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			case false:
			case true:
				return;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			WebClient webClient = new WebClient();
			try
			{
				a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/set/" + URL_SET);
				webClient.DownloadFileAsync(a, DirLocal + "\\set.xml");
				webClient.DownloadFileCompleted += delegate
				{
					short num4 = 30963;
					short num5 = num4;
					num4 = 30963;
					switch (num5 == num4)
					{
					default:
						num4 = 0;
						_ = num4;
						break;
					case true:
						break;
					case false:
					case true:
						return;
					}
					num4 = 1;
					if (num4 != 0)
					{
					}
					num4 = 0;
					if (num4 != 0)
					{
					}
					WebClient webClient2 = new WebClient();
					try
					{
						a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/wahicle/" + URL_CAR);
						webClient2.DownloadFileAsync(a, DirLocal + "\\car.xml");
						webClient2.DownloadFileCompleted += delegate
						{
							short num7 = 1;
							if (num7 != 0)
							{
							}
							num7 = 0;
							_ = num7;
							num7 = -22965;
							short num8 = num7;
							num7 = -22965;
							switch (num8 == num7)
							{
							default:
							{
								num7 = 0;
								if (num7 != 0)
								{
								}
								WebClient webClient3 = new WebClient();
								try
								{
									a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/weapon/" + URL_WEAPON);
									webClient3.DownloadFileAsync(a, DirLocal + "\\weapon.xml");
									webClient3.DownloadFileCompleted += delegate
									{
										short num10 = 22425;
										short num11 = num10;
										num10 = 22425;
										switch (num11 == num10)
										{
										default:
											num10 = 0;
											_ = num10;
											goto case true;
										case true:
										{
											num10 = 0;
											if (num10 != 0)
											{
											}
											WebClient webClient4 = new WebClient();
											try
											{
												a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/inventory/" + URL_INVENTORY);
												webClient4.DownloadFileAsync(a, DirLocal + "\\inventory.xml");
												webClient4.DownloadFileCompleted += delegate
												{
													short num13 = -2379;
													short num14 = num13;
													num13 = -2379;
													switch (num14 == num13)
													{
													default:
														num13 = 0;
														_ = num13;
														break;
													case true:
														break;
													case false:
													case true:
														return;
													}
													num13 = 1;
													if (num13 != 0)
													{
													}
													num13 = 0;
													if (num13 != 0)
													{
													}
													WebClient webClient5 = new WebClient();
													try
													{
														a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/mask/" + URL_MASK);
														webClient5.DownloadFileAsync(a, DirLocal + "\\mask.xml");
														webClient5.DownloadFileCompleted += delegate
														{
															short num16 = -26143;
															short num17 = num16;
															num16 = -26143;
															switch (num17 == num16)
															{
															default:
																num16 = 0;
																_ = num16;
																break;
															case true:
																break;
															case false:
															case true:
																return;
															}
															num16 = 0;
															if (num16 != 0)
															{
															}
															WebClient webClient6 = new WebClient();
															try
															{
																num16 = 1;
																if (num16 != 0)
																{
																}
																a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/base/" + URL_BASE);
																webClient6.DownloadFileAsync(a, DirLocal + "\\base.xml");
																webClient6.DownloadFileCompleted += delegate
																{
																	short num19 = -26314;
																	short num20 = num19;
																	num19 = -26314;
																	switch (num20 == num19)
																	{
																	default:
																		num19 = 0;
																		_ = num19;
																		break;
																	case true:
																		break;
																	case false:
																	case true:
																		return;
																	}
																	num19 = 1;
																	if (num19 != 0)
																	{
																	}
																	num19 = 0;
																	if (num19 != 0)
																	{
																	}
																	WebClient webClient7 = new WebClient();
																	try
																	{
																		a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/medic/" + URL_MEDIC);
																		webClient7.DownloadFileAsync(a, DirLocal + "\\medic.xml");
																		webClient7.DownloadFileCompleted += delegate
																		{
																			short num22 = 0;
																			int num23 = num22;
																			switch (num23)
																			{
																			default:
																				switch (0)
																				{
																				default:
																				{
																					XmlNode xmlNode8 = default(XmlNode);
																					IDisposable disposable = default(IDisposable);
																					XmlNode xmlNode4 = default(XmlNode);
																					XmlNode xmlNode6 = default(XmlNode);
																					XmlNode xmlNode2 = default(XmlNode);
																					XmlNode xmlNode7 = default(XmlNode);
																					XmlNode xmlNode5 = default(XmlNode);
																					XmlNode xmlNode3 = default(XmlNode);
																					XmlNode xmlNode = default(XmlNode);
																					while (true)
																					{
																						switch (num23)
																						{
																						case 2:
																							try
																							{
																								eval_b.eval_c2.Clear();
																								eval_b.eval_dm.Load(DirLocal + "\\inventory.xml");
																								IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																								try
																								{
																									num22 = 3;
																									num23 = num22;
																									while (true)
																									{
																										switch (num23)
																										{
																										case 3:
																											switch (0)
																											{
																											default:
																												continue;
																											case 0:
																												break;
																											}
																											goto default;
																										case 4:
																											try
																											{
																												eval_b.eval_c2.Add(new EShop_inventory
																												{
																													Name = xmlNode8.SelectSingleNode("name").InnerText,
																													Price = xmlNode8.SelectSingleNode("price").InnerText,
																													Set = xmlNode8.SelectSingleNode("set").InnerText,
																													Image = xmlNode8.SelectSingleNode("image").InnerText,
																													Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
																												});
																											}
																											catch (Exception ex8)
																											{
																												System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
																												return;
																											}
																											goto default;
																										default:
																											num22 = 2;
																											num23 = num22;
																											continue;
																										case 2:
																											if (enumerator.MoveNext())
																											{
																												xmlNode8 = (XmlNode)enumerator.Current;
																												num22 = 4;
																												num23 = num22;
																											}
																											else
																											{
																												num22 = 0;
																												num23 = num22;
																											}
																											continue;
																										case 0:
																											num22 = 1;
																											num23 = num22;
																											continue;
																										case 1:
																											break;
																										}
																										break;
																									}
																								}
																								finally
																								{
																									switch (0)
																									{
																									default:
																										while (true)
																										{
																											switch (num23)
																											{
																											case 2:
																												if (disposable != null)
																												{
																													num22 = 0;
																													num23 = num22;
																													continue;
																												}
																												goto end_IL_026c;
																											case 0:
																												disposable.Dispose();
																												num22 = 1;
																												num23 = num22;
																												continue;
																											case 1:
																												goto end_IL_026c;
																											}
																											goto case 0;
																											continue;
																											end_IL_026c:
																											break;
																										}
																										break;
																									case 0:
																										disposable = enumerator as IDisposable;
																										num22 = 2;
																										num23 = num22;
																										goto default;
																									}
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							num22 = 0;
																							_ = num22;
																							num22 = 1;
																							if (num22 != 0)
																							{
																							}
																							num22 = 0;
																							num23 = num22;
																							continue;
																						case 1:
																							try
																							{
																								eval_b.eval_c5.Clear();
																								eval_b.eval_dm.Load(DirLocal + "\\medic.xml");
																								IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																								try
																								{
																									num22 = 3;
																									num23 = num22;
																									while (true)
																									{
																										switch (num23)
																										{
																										case 3:
																											switch (0)
																											{
																											default:
																												continue;
																											case 0:
																												break;
																											}
																											goto default;
																										case 0:
																											try
																											{
																												eval_b.eval_c5.Add(new EShop_medic
																												{
																													Name = xmlNode4.SelectSingleNode("name").InnerText,
																													Price = xmlNode4.SelectSingleNode("price").InnerText,
																													Description = xmlNode4.SelectSingleNode("description").InnerText,
																													Set = xmlNode4.SelectSingleNode("set").InnerText,
																													Image = xmlNode4.SelectSingleNode("image").InnerText,
																													Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
																												});
																											}
																											catch (Exception ex4)
																											{
																												System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
																												return;
																											}
																											goto default;
																										default:
																											num22 = 4;
																											num23 = num22;
																											continue;
																										case 4:
																											if (!enumerator.MoveNext())
																											{
																												num22 = 2;
																												num23 = num22;
																											}
																											else
																											{
																												xmlNode4 = (XmlNode)enumerator.Current;
																												num22 = 0;
																												num23 = num22;
																											}
																											continue;
																										case 2:
																											num22 = 1;
																											num23 = num22;
																											continue;
																										case 1:
																											break;
																										}
																										break;
																									}
																								}
																								finally
																								{
																									switch (0)
																									{
																									default:
																										while (true)
																										{
																											switch (num23)
																											{
																											case 2:
																												if (disposable != null)
																												{
																													num22 = 0;
																													num23 = num22;
																													continue;
																												}
																												goto end_IL_04c7;
																											case 0:
																												disposable.Dispose();
																												num22 = 1;
																												num23 = num22;
																												continue;
																											case 1:
																												goto end_IL_04c7;
																											}
																											goto case 0;
																											continue;
																											end_IL_04c7:
																											break;
																										}
																										break;
																									case 0:
																										disposable = enumerator as IDisposable;
																										num22 = 2;
																										num23 = num22;
																										goto default;
																									}
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							eval_b.LoadShop();
																							num22 = 6;
																							num23 = num22;
																							continue;
																						case 6:
																							return;
																						case 7:
																							try
																							{
																								eval_b.eval_cy.Clear();
																								eval_b.eval_dm.Load(DirLocal + "\\loot.xml");
																								IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																								try
																								{
																									num22 = 3;
																									num23 = num22;
																									while (true)
																									{
																										switch (num23)
																										{
																										case 3:
																											switch (0)
																											{
																											default:
																												continue;
																											case 0:
																												break;
																											}
																											goto default;
																										default:
																											num22 = 2;
																											num23 = num22;
																											continue;
																										case 2:
																											if (enumerator.MoveNext())
																											{
																												xmlNode6 = (XmlNode)enumerator.Current;
																												num22 = 4;
																												num23 = num22;
																											}
																											else
																											{
																												num22 = 0;
																												num23 = num22;
																											}
																											continue;
																										case 4:
																											try
																											{
																												eval_b.eval_cy.Add(new EShop_loot
																												{
																													Name = xmlNode6.SelectSingleNode("name").InnerText,
																													Price = xmlNode6.SelectSingleNode("price").InnerText,
																													Description = xmlNode6.SelectSingleNode("description").InnerText,
																													Set = xmlNode6.SelectSingleNode("set").InnerText,
																													Image = xmlNode6.SelectSingleNode("image").InnerText,
																													Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
																												});
																											}
																											catch (Exception ex6)
																											{
																												System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
																												return;
																											}
																											goto default;
																										case 0:
																											num22 = 1;
																											num23 = num22;
																											continue;
																										case 1:
																											break;
																										}
																										break;
																									}
																								}
																								finally
																								{
																									switch (0)
																									{
																									default:
																										while (true)
																										{
																											switch (num23)
																											{
																											case 2:
																												if (disposable != null)
																												{
																													num22 = 0;
																													num23 = num22;
																													continue;
																												}
																												goto end_IL_0736;
																											case 0:
																												disposable.Dispose();
																												num22 = 1;
																												num23 = num22;
																												continue;
																											case 1:
																												goto end_IL_0736;
																											}
																											goto case 0;
																											continue;
																											end_IL_0736:
																											break;
																										}
																										break;
																									case 0:
																										disposable = enumerator as IDisposable;
																										num22 = 2;
																										num23 = num22;
																										goto default;
																									}
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							num22 = 8;
																							num23 = num22;
																							continue;
																						case 3:
																							try
																							{
																								eval_b.eval_c0.Clear();
																								eval_b.eval_dm.Load(DirLocal + "\\set.xml");
																								IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																								try
																								{
																									num22 = 3;
																									num23 = num22;
																									while (true)
																									{
																										switch (num23)
																										{
																										case 3:
																											switch (0)
																											{
																											default:
																												continue;
																											case 0:
																												break;
																											}
																											goto default;
																										default:
																											num22 = 4;
																											num23 = num22;
																											continue;
																										case 4:
																											if (!enumerator.MoveNext())
																											{
																												num22 = 2;
																												num23 = num22;
																											}
																											else
																											{
																												xmlNode2 = (XmlNode)enumerator.Current;
																												num22 = 0;
																												num23 = num22;
																											}
																											continue;
																										case 0:
																											try
																											{
																												eval_b.eval_c0.Add(new EShop_set
																												{
																													Name = xmlNode2.SelectSingleNode("name").InnerText,
																													Price = xmlNode2.SelectSingleNode("price").InnerText,
																													Description = xmlNode2.SelectSingleNode("description").InnerText,
																													Set = xmlNode2.SelectSingleNode("set").InnerText,
																													Image = xmlNode2.SelectSingleNode("image").InnerText,
																													Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
																												});
																											}
																											catch (Exception ex2)
																											{
																												System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
																												return;
																											}
																											goto default;
																										case 2:
																											num22 = 1;
																											num23 = num22;
																											continue;
																										case 1:
																											break;
																										}
																										break;
																									}
																								}
																								finally
																								{
																									switch (0)
																									{
																									default:
																										while (true)
																										{
																											switch (num23)
																											{
																											case 2:
																												if (disposable != null)
																												{
																													num22 = 0;
																													num23 = num22;
																													continue;
																												}
																												goto end_IL_0971;
																											case 0:
																												disposable.Dispose();
																												num22 = 1;
																												num23 = num22;
																												continue;
																											case 1:
																												goto end_IL_0971;
																											}
																											goto case 0;
																											continue;
																											end_IL_0971:
																											break;
																										}
																										break;
																									case 0:
																										disposable = enumerator as IDisposable;
																										num22 = 2;
																										num23 = num22;
																										goto default;
																									}
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							num22 = 4;
																							num23 = num22;
																							continue;
																						case 8:
																							try
																							{
																								while (true)
																								{
																									eval_b.eval_cz.Clear();
																									eval_b.eval_dm.Load(DirLocal + "\\weapon.xml");
																									IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																									try
																									{
																										num22 = 4;
																										num23 = num22;
																										while (true)
																										{
																											switch (num23)
																											{
																											case 4:
																												switch (0)
																												{
																												default:
																													continue;
																												case 0:
																													break;
																												}
																												goto default;
																											case 3:
																												try
																												{
																													eval_b.eval_cz.Add(new EShop_weapon
																													{
																														Name = xmlNode7.SelectSingleNode("name").InnerText,
																														Price = xmlNode7.SelectSingleNode("price").InnerText,
																														Description = xmlNode7.SelectSingleNode("description").InnerText,
																														Set = xmlNode7.SelectSingleNode("set").InnerText,
																														Image = xmlNode7.SelectSingleNode("image").InnerText,
																														Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
																													});
																												}
																												catch (Exception ex7)
																												{
																													System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
																													return;
																												}
																												goto default;
																											default:
																												num22 = 0;
																												num23 = num22;
																												continue;
																											case 0:
																												if (enumerator.MoveNext())
																												{
																													xmlNode7 = (XmlNode)enumerator.Current;
																													num22 = 3;
																													num23 = num22;
																												}
																												else
																												{
																													num22 = 1;
																													num23 = num22;
																												}
																												continue;
																											case 1:
																												num22 = 2;
																												num23 = num22;
																												continue;
																											case 2:
																												break;
																											}
																											break;
																										}
																									}
																									finally
																									{
																										switch (0)
																										{
																										default:
																											while (true)
																											{
																												switch (num23)
																												{
																												case 2:
																													if (disposable != null)
																													{
																														num22 = 0;
																														num23 = num22;
																														continue;
																													}
																													goto end_IL_0bb0;
																												case 0:
																													disposable.Dispose();
																													num22 = 1;
																													num23 = num22;
																													continue;
																												case 1:
																													goto end_IL_0bb0;
																												}
																												goto case 0;
																												continue;
																												end_IL_0bb0:
																												break;
																											}
																											break;
																										case 0:
																											disposable = enumerator as IDisposable;
																											num22 = 2;
																											num23 = num22;
																											goto default;
																										}
																									}
																									num22 = -22575;
																									short num24 = num22;
																									num22 = -22575;
																									switch (num24 == num22)
																									{
																									case false:
																									case true:
																										break;
																									default:
																										num22 = 0;
																										if (num22 == 0)
																										{
																										}
																										goto end_IL_09eb;
																									}
																									continue;
																									end_IL_09eb:
																									break;
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							num22 = 3;
																							num23 = num22;
																							continue;
																						case 0:
																							try
																							{
																								eval_b.eval_c3.Clear();
																								eval_b.eval_dm.Load(DirLocal + "\\mask.xml");
																								IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																								try
																								{
																									num22 = 4;
																									num23 = num22;
																									while (true)
																									{
																										switch (num23)
																										{
																										case 4:
																											switch (0)
																											{
																											default:
																												continue;
																											case 0:
																												break;
																											}
																											goto default;
																										case 1:
																											try
																											{
																												eval_b.eval_c3.Add(new EShop_mask
																												{
																													Name = xmlNode5.SelectSingleNode("name").InnerText,
																													Price = xmlNode5.SelectSingleNode("price").InnerText,
																													Description = xmlNode5.SelectSingleNode("description").InnerText,
																													Set = xmlNode5.SelectSingleNode("set").InnerText,
																													Image = xmlNode5.SelectSingleNode("image").InnerText,
																													Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
																												});
																											}
																											catch (Exception ex5)
																											{
																												System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
																												return;
																											}
																											goto default;
																										default:
																											num22 = 3;
																											num23 = num22;
																											continue;
																										case 3:
																											if (!enumerator.MoveNext())
																											{
																												num22 = 0;
																												num23 = num22;
																											}
																											else
																											{
																												xmlNode5 = (XmlNode)enumerator.Current;
																												num22 = 1;
																												num23 = num22;
																											}
																											continue;
																										case 0:
																											num22 = 2;
																											num23 = num22;
																											continue;
																										case 2:
																											break;
																										}
																										break;
																									}
																								}
																								finally
																								{
																									switch (0)
																									{
																									default:
																										while (true)
																										{
																											switch (num23)
																											{
																											case 2:
																												if (disposable != null)
																												{
																													num22 = 0;
																													num23 = num22;
																													continue;
																												}
																												goto end_IL_0e39;
																											case 0:
																												disposable.Dispose();
																												num22 = 1;
																												num23 = num22;
																												continue;
																											case 1:
																												goto end_IL_0e39;
																											}
																											goto case 0;
																											continue;
																											end_IL_0e39:
																											break;
																										}
																										break;
																									case 0:
																										disposable = enumerator as IDisposable;
																										num22 = 2;
																										num23 = num22;
																										goto default;
																									}
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							num22 = 5;
																							num23 = num22;
																							continue;
																						case 4:
																							try
																							{
																								eval_b.eval_c1.Clear();
																								eval_b.eval_dm.Load(DirLocal + "\\car.xml");
																								IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																								try
																								{
																									num22 = 4;
																									num23 = num22;
																									while (true)
																									{
																										switch (num23)
																										{
																										case 4:
																											switch (0)
																											{
																											default:
																												continue;
																											case 0:
																												break;
																											}
																											goto default;
																										default:
																											num22 = 3;
																											num23 = num22;
																											continue;
																										case 3:
																											if (!enumerator.MoveNext())
																											{
																												num22 = 0;
																												num23 = num22;
																											}
																											else
																											{
																												xmlNode3 = (XmlNode)enumerator.Current;
																												num22 = 1;
																												num23 = num22;
																											}
																											continue;
																										case 1:
																											try
																											{
																												eval_b.eval_c1.Add(new EShop_car
																												{
																													Name = xmlNode3.SelectSingleNode("name").InnerText,
																													Description = xmlNode3.SelectSingleNode("description").InnerText,
																													Price = xmlNode3.SelectSingleNode("price").InnerText,
																													Set = xmlNode3.SelectSingleNode("set").InnerText,
																													Image = xmlNode3.SelectSingleNode("image").InnerText,
																													Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
																												});
																											}
																											catch (Exception ex3)
																											{
																												System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
																												return;
																											}
																											goto default;
																										case 0:
																											num22 = 2;
																											num23 = num22;
																											continue;
																										case 2:
																											break;
																										}
																										break;
																									}
																								}
																								finally
																								{
																									switch (0)
																									{
																									default:
																										while (true)
																										{
																											switch (num23)
																											{
																											case 2:
																												if (disposable != null)
																												{
																													num22 = 0;
																													num23 = num22;
																													continue;
																												}
																												goto end_IL_1075;
																											case 0:
																												disposable.Dispose();
																												num22 = 1;
																												num23 = num22;
																												continue;
																											case 1:
																												goto end_IL_1075;
																											}
																											goto case 0;
																											continue;
																											end_IL_1075:
																											break;
																										}
																										break;
																									case 0:
																										disposable = enumerator as IDisposable;
																										num22 = 2;
																										num23 = num22;
																										goto default;
																									}
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							num22 = 2;
																							num23 = num22;
																							continue;
																						case 5:
																							try
																							{
																								eval_b.eval_c4.Clear();
																								eval_b.eval_dm.Load(DirLocal + "\\base.xml");
																								IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																								try
																								{
																									num22 = 4;
																									num23 = num22;
																									while (true)
																									{
																										switch (num23)
																										{
																										case 4:
																											switch (0)
																											{
																											default:
																												continue;
																											case 0:
																												break;
																											}
																											goto default;
																										case 3:
																											try
																											{
																												eval_b.eval_c4.Add(new EShop_base
																												{
																													Name = xmlNode.SelectSingleNode("name").InnerText,
																													Price = xmlNode.SelectSingleNode("price").InnerText,
																													Description = xmlNode.SelectSingleNode("description").InnerText,
																													Set = xmlNode.SelectSingleNode("set").InnerText,
																													Image = xmlNode.SelectSingleNode("image").InnerText,
																													Cmd = xmlNode.SelectSingleNode("cmd").InnerText
																												});
																											}
																											catch (Exception ex)
																											{
																												System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
																												return;
																											}
																											goto default;
																										default:
																											num22 = 0;
																											num23 = num22;
																											continue;
																										case 0:
																											if (enumerator.MoveNext())
																											{
																												xmlNode = (XmlNode)enumerator.Current;
																												num22 = 3;
																												num23 = num22;
																											}
																											else
																											{
																												num22 = 1;
																												num23 = num22;
																											}
																											continue;
																										case 1:
																											num22 = 2;
																											num23 = num22;
																											continue;
																										case 2:
																											break;
																										}
																										break;
																									}
																								}
																								finally
																								{
																									switch (0)
																									{
																									default:
																										while (true)
																										{
																											switch (num23)
																											{
																											case 2:
																												if (disposable != null)
																												{
																													num22 = 0;
																													num23 = num22;
																													continue;
																												}
																												goto end_IL_1335;
																											case 0:
																												disposable.Dispose();
																												num22 = 1;
																												num23 = num22;
																												continue;
																											case 1:
																												goto end_IL_1335;
																											}
																											goto case 0;
																											continue;
																											end_IL_1335:
																											break;
																										}
																										break;
																									case 0:
																										disposable = enumerator as IDisposable;
																										num22 = 2;
																										num23 = num22;
																										goto default;
																									}
																								}
																							}
																							catch
																							{
																								bool flag = true;
																							}
																							num22 = 1;
																							num23 = num22;
																							continue;
																						}
																						break;
																					}
																					goto case 0;
																				}
																				case 0:
																				{
																					bool flag = false;
																					num22 = 7;
																					num23 = num22;
																					goto default;
																				}
																				}
																			}
																		};
																	}
																	finally
																	{
																		num19 = 0;
																		int num21 = num19;
																		while (true)
																		{
																			switch (num21)
																			{
																			case 0:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			default:
																				if (webClient7 != null)
																				{
																					num19 = 1;
																					num21 = num19;
																					continue;
																				}
																				break;
																			case 1:
																				((IDisposable)webClient7).Dispose();
																				num19 = 2;
																				num21 = num19;
																				continue;
																			case 2:
																				break;
																			}
																			break;
																		}
																	}
																};
															}
															finally
															{
																num16 = 0;
																int num18 = num16;
																while (true)
																{
																	switch (num18)
																	{
																	case 0:
																		switch (0)
																		{
																		default:
																			continue;
																		case 0:
																			break;
																		}
																		goto default;
																	default:
																		if (webClient6 != null)
																		{
																			num16 = 1;
																			num18 = num16;
																			continue;
																		}
																		break;
																	case 1:
																		((IDisposable)webClient6).Dispose();
																		num16 = 2;
																		num18 = num16;
																		continue;
																	case 2:
																		break;
																	}
																	break;
																}
															}
														};
													}
													finally
													{
														num13 = 0;
														int num15 = num13;
														while (true)
														{
															switch (num15)
															{
															case 0:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															default:
																if (webClient5 != null)
																{
																	num13 = 1;
																	num15 = num13;
																	continue;
																}
																break;
															case 1:
																((IDisposable)webClient5).Dispose();
																num13 = 2;
																num15 = num13;
																continue;
															case 2:
																break;
															}
															break;
														}
													}
												};
											}
											finally
											{
												num10 = 0;
												int num12 = num10;
												while (true)
												{
													switch (num12)
													{
													case 0:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (webClient4 != null)
														{
															num10 = 1;
															num12 = num10;
															continue;
														}
														break;
													case 1:
														((IDisposable)webClient4).Dispose();
														num10 = 2;
														num12 = num10;
														continue;
													case 2:
														break;
													}
													break;
												}
											}
											break;
										}
										case false:
										case true:
											break;
										}
										num10 = 1;
										if (num10 == 0)
										{
										}
									};
									break;
								}
								finally
								{
									num7 = 0;
									int num9 = num7;
									while (true)
									{
										switch (num9)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (webClient3 != null)
											{
												num7 = 1;
												num9 = num7;
												continue;
											}
											break;
										case 1:
											((IDisposable)webClient3).Dispose();
											num7 = 2;
											num9 = num7;
											continue;
										case 2:
											break;
										}
										break;
									}
								}
							}
							case false:
							case true:
								break;
							}
						};
					}
					finally
					{
						num4 = 0;
						int num6 = num4;
						while (true)
						{
							switch (num6)
							{
							case 0:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (webClient2 != null)
								{
									num4 = 1;
									num6 = num4;
									continue;
								}
								break;
							case 1:
								((IDisposable)webClient2).Dispose();
								num4 = 2;
								num6 = num4;
								continue;
							case 2:
								break;
							}
							break;
						}
					}
				};
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 1;
							num3 = num;
							continue;
						}
						break;
					case 1:
						((IDisposable)webClient).Dispose();
						num = 2;
						num3 = num;
						continue;
					case 2:
						break;
					}
					break;
				}
			}
		}

		internal void eval_g(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = 30963;
			short num2 = num;
			num = 30963;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			case false:
			case true:
				return;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			WebClient webClient = new WebClient();
			try
			{
				a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/wahicle/" + URL_CAR);
				webClient.DownloadFileAsync(a, DirLocal + "\\car.xml");
				webClient.DownloadFileCompleted += delegate
				{
					short num4 = 1;
					if (num4 != 0)
					{
					}
					num4 = 0;
					_ = num4;
					num4 = -22965;
					short num5 = num4;
					num4 = -22965;
					switch (num5 == num4)
					{
					default:
					{
						num4 = 0;
						if (num4 != 0)
						{
						}
						WebClient webClient2 = new WebClient();
						try
						{
							a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/weapon/" + URL_WEAPON);
							webClient2.DownloadFileAsync(a, DirLocal + "\\weapon.xml");
							webClient2.DownloadFileCompleted += delegate
							{
								short num7 = 22425;
								short num8 = num7;
								num7 = 22425;
								switch (num8 == num7)
								{
								default:
									num7 = 0;
									_ = num7;
									goto case true;
								case true:
								{
									num7 = 0;
									if (num7 != 0)
									{
									}
									WebClient webClient3 = new WebClient();
									try
									{
										a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/inventory/" + URL_INVENTORY);
										webClient3.DownloadFileAsync(a, DirLocal + "\\inventory.xml");
										webClient3.DownloadFileCompleted += delegate
										{
											short num10 = -2379;
											short num11 = num10;
											num10 = -2379;
											switch (num11 == num10)
											{
											default:
												num10 = 0;
												_ = num10;
												break;
											case true:
												break;
											case false:
											case true:
												return;
											}
											num10 = 1;
											if (num10 != 0)
											{
											}
											num10 = 0;
											if (num10 != 0)
											{
											}
											WebClient webClient4 = new WebClient();
											try
											{
												a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/mask/" + URL_MASK);
												webClient4.DownloadFileAsync(a, DirLocal + "\\mask.xml");
												webClient4.DownloadFileCompleted += delegate
												{
													short num13 = -26143;
													short num14 = num13;
													num13 = -26143;
													switch (num14 == num13)
													{
													default:
														num13 = 0;
														_ = num13;
														break;
													case true:
														break;
													case false:
													case true:
														return;
													}
													num13 = 0;
													if (num13 != 0)
													{
													}
													WebClient webClient5 = new WebClient();
													try
													{
														num13 = 1;
														if (num13 != 0)
														{
														}
														a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/base/" + URL_BASE);
														webClient5.DownloadFileAsync(a, DirLocal + "\\base.xml");
														webClient5.DownloadFileCompleted += delegate
														{
															short num16 = -26314;
															short num17 = num16;
															num16 = -26314;
															switch (num17 == num16)
															{
															default:
																num16 = 0;
																_ = num16;
																break;
															case true:
																break;
															case false:
															case true:
																return;
															}
															num16 = 1;
															if (num16 != 0)
															{
															}
															num16 = 0;
															if (num16 != 0)
															{
															}
															WebClient webClient6 = new WebClient();
															try
															{
																a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/medic/" + URL_MEDIC);
																webClient6.DownloadFileAsync(a, DirLocal + "\\medic.xml");
																webClient6.DownloadFileCompleted += delegate
																{
																	short num19 = 0;
																	int num20 = num19;
																	switch (num20)
																	{
																	default:
																		switch (0)
																		{
																		default:
																		{
																			XmlNode xmlNode8 = default(XmlNode);
																			IDisposable disposable = default(IDisposable);
																			XmlNode xmlNode4 = default(XmlNode);
																			XmlNode xmlNode6 = default(XmlNode);
																			XmlNode xmlNode2 = default(XmlNode);
																			XmlNode xmlNode7 = default(XmlNode);
																			XmlNode xmlNode5 = default(XmlNode);
																			XmlNode xmlNode3 = default(XmlNode);
																			XmlNode xmlNode = default(XmlNode);
																			while (true)
																			{
																				switch (num20)
																				{
																				case 2:
																					try
																					{
																						eval_b.eval_c2.Clear();
																						eval_b.eval_dm.Load(DirLocal + "\\inventory.xml");
																						IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																						try
																						{
																							num19 = 3;
																							num20 = num19;
																							while (true)
																							{
																								switch (num20)
																								{
																								case 3:
																									switch (0)
																									{
																									default:
																										continue;
																									case 0:
																										break;
																									}
																									goto default;
																								case 4:
																									try
																									{
																										eval_b.eval_c2.Add(new EShop_inventory
																										{
																											Name = xmlNode8.SelectSingleNode("name").InnerText,
																											Price = xmlNode8.SelectSingleNode("price").InnerText,
																											Set = xmlNode8.SelectSingleNode("set").InnerText,
																											Image = xmlNode8.SelectSingleNode("image").InnerText,
																											Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
																										});
																									}
																									catch (Exception ex8)
																									{
																										System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
																										return;
																									}
																									goto default;
																								default:
																									num19 = 2;
																									num20 = num19;
																									continue;
																								case 2:
																									if (enumerator.MoveNext())
																									{
																										xmlNode8 = (XmlNode)enumerator.Current;
																										num19 = 4;
																										num20 = num19;
																									}
																									else
																									{
																										num19 = 0;
																										num20 = num19;
																									}
																									continue;
																								case 0:
																									num19 = 1;
																									num20 = num19;
																									continue;
																								case 1:
																									break;
																								}
																								break;
																							}
																						}
																						finally
																						{
																							switch (0)
																							{
																							default:
																								while (true)
																								{
																									switch (num20)
																									{
																									case 2:
																										if (disposable != null)
																										{
																											num19 = 0;
																											num20 = num19;
																											continue;
																										}
																										goto end_IL_026c;
																									case 0:
																										disposable.Dispose();
																										num19 = 1;
																										num20 = num19;
																										continue;
																									case 1:
																										goto end_IL_026c;
																									}
																									goto case 0;
																									continue;
																									end_IL_026c:
																									break;
																								}
																								break;
																							case 0:
																								disposable = enumerator as IDisposable;
																								num19 = 2;
																								num20 = num19;
																								goto default;
																							}
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					num19 = 0;
																					_ = num19;
																					num19 = 1;
																					if (num19 != 0)
																					{
																					}
																					num19 = 0;
																					num20 = num19;
																					continue;
																				case 1:
																					try
																					{
																						eval_b.eval_c5.Clear();
																						eval_b.eval_dm.Load(DirLocal + "\\medic.xml");
																						IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																						try
																						{
																							num19 = 3;
																							num20 = num19;
																							while (true)
																							{
																								switch (num20)
																								{
																								case 3:
																									switch (0)
																									{
																									default:
																										continue;
																									case 0:
																										break;
																									}
																									goto default;
																								case 0:
																									try
																									{
																										eval_b.eval_c5.Add(new EShop_medic
																										{
																											Name = xmlNode4.SelectSingleNode("name").InnerText,
																											Price = xmlNode4.SelectSingleNode("price").InnerText,
																											Description = xmlNode4.SelectSingleNode("description").InnerText,
																											Set = xmlNode4.SelectSingleNode("set").InnerText,
																											Image = xmlNode4.SelectSingleNode("image").InnerText,
																											Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
																										});
																									}
																									catch (Exception ex4)
																									{
																										System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
																										return;
																									}
																									goto default;
																								default:
																									num19 = 4;
																									num20 = num19;
																									continue;
																								case 4:
																									if (!enumerator.MoveNext())
																									{
																										num19 = 2;
																										num20 = num19;
																									}
																									else
																									{
																										xmlNode4 = (XmlNode)enumerator.Current;
																										num19 = 0;
																										num20 = num19;
																									}
																									continue;
																								case 2:
																									num19 = 1;
																									num20 = num19;
																									continue;
																								case 1:
																									break;
																								}
																								break;
																							}
																						}
																						finally
																						{
																							switch (0)
																							{
																							default:
																								while (true)
																								{
																									switch (num20)
																									{
																									case 2:
																										if (disposable != null)
																										{
																											num19 = 0;
																											num20 = num19;
																											continue;
																										}
																										goto end_IL_04c7;
																									case 0:
																										disposable.Dispose();
																										num19 = 1;
																										num20 = num19;
																										continue;
																									case 1:
																										goto end_IL_04c7;
																									}
																									goto case 0;
																									continue;
																									end_IL_04c7:
																									break;
																								}
																								break;
																							case 0:
																								disposable = enumerator as IDisposable;
																								num19 = 2;
																								num20 = num19;
																								goto default;
																							}
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					eval_b.LoadShop();
																					num19 = 6;
																					num20 = num19;
																					continue;
																				case 6:
																					return;
																				case 7:
																					try
																					{
																						eval_b.eval_cy.Clear();
																						eval_b.eval_dm.Load(DirLocal + "\\loot.xml");
																						IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																						try
																						{
																							num19 = 3;
																							num20 = num19;
																							while (true)
																							{
																								switch (num20)
																								{
																								case 3:
																									switch (0)
																									{
																									default:
																										continue;
																									case 0:
																										break;
																									}
																									goto default;
																								default:
																									num19 = 2;
																									num20 = num19;
																									continue;
																								case 2:
																									if (enumerator.MoveNext())
																									{
																										xmlNode6 = (XmlNode)enumerator.Current;
																										num19 = 4;
																										num20 = num19;
																									}
																									else
																									{
																										num19 = 0;
																										num20 = num19;
																									}
																									continue;
																								case 4:
																									try
																									{
																										eval_b.eval_cy.Add(new EShop_loot
																										{
																											Name = xmlNode6.SelectSingleNode("name").InnerText,
																											Price = xmlNode6.SelectSingleNode("price").InnerText,
																											Description = xmlNode6.SelectSingleNode("description").InnerText,
																											Set = xmlNode6.SelectSingleNode("set").InnerText,
																											Image = xmlNode6.SelectSingleNode("image").InnerText,
																											Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
																										});
																									}
																									catch (Exception ex6)
																									{
																										System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
																										return;
																									}
																									goto default;
																								case 0:
																									num19 = 1;
																									num20 = num19;
																									continue;
																								case 1:
																									break;
																								}
																								break;
																							}
																						}
																						finally
																						{
																							switch (0)
																							{
																							default:
																								while (true)
																								{
																									switch (num20)
																									{
																									case 2:
																										if (disposable != null)
																										{
																											num19 = 0;
																											num20 = num19;
																											continue;
																										}
																										goto end_IL_0736;
																									case 0:
																										disposable.Dispose();
																										num19 = 1;
																										num20 = num19;
																										continue;
																									case 1:
																										goto end_IL_0736;
																									}
																									goto case 0;
																									continue;
																									end_IL_0736:
																									break;
																								}
																								break;
																							case 0:
																								disposable = enumerator as IDisposable;
																								num19 = 2;
																								num20 = num19;
																								goto default;
																							}
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					num19 = 8;
																					num20 = num19;
																					continue;
																				case 3:
																					try
																					{
																						eval_b.eval_c0.Clear();
																						eval_b.eval_dm.Load(DirLocal + "\\set.xml");
																						IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																						try
																						{
																							num19 = 3;
																							num20 = num19;
																							while (true)
																							{
																								switch (num20)
																								{
																								case 3:
																									switch (0)
																									{
																									default:
																										continue;
																									case 0:
																										break;
																									}
																									goto default;
																								default:
																									num19 = 4;
																									num20 = num19;
																									continue;
																								case 4:
																									if (!enumerator.MoveNext())
																									{
																										num19 = 2;
																										num20 = num19;
																									}
																									else
																									{
																										xmlNode2 = (XmlNode)enumerator.Current;
																										num19 = 0;
																										num20 = num19;
																									}
																									continue;
																								case 0:
																									try
																									{
																										eval_b.eval_c0.Add(new EShop_set
																										{
																											Name = xmlNode2.SelectSingleNode("name").InnerText,
																											Price = xmlNode2.SelectSingleNode("price").InnerText,
																											Description = xmlNode2.SelectSingleNode("description").InnerText,
																											Set = xmlNode2.SelectSingleNode("set").InnerText,
																											Image = xmlNode2.SelectSingleNode("image").InnerText,
																											Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
																										});
																									}
																									catch (Exception ex2)
																									{
																										System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
																										return;
																									}
																									goto default;
																								case 2:
																									num19 = 1;
																									num20 = num19;
																									continue;
																								case 1:
																									break;
																								}
																								break;
																							}
																						}
																						finally
																						{
																							switch (0)
																							{
																							default:
																								while (true)
																								{
																									switch (num20)
																									{
																									case 2:
																										if (disposable != null)
																										{
																											num19 = 0;
																											num20 = num19;
																											continue;
																										}
																										goto end_IL_0971;
																									case 0:
																										disposable.Dispose();
																										num19 = 1;
																										num20 = num19;
																										continue;
																									case 1:
																										goto end_IL_0971;
																									}
																									goto case 0;
																									continue;
																									end_IL_0971:
																									break;
																								}
																								break;
																							case 0:
																								disposable = enumerator as IDisposable;
																								num19 = 2;
																								num20 = num19;
																								goto default;
																							}
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					num19 = 4;
																					num20 = num19;
																					continue;
																				case 8:
																					try
																					{
																						while (true)
																						{
																							eval_b.eval_cz.Clear();
																							eval_b.eval_dm.Load(DirLocal + "\\weapon.xml");
																							IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																							try
																							{
																								num19 = 4;
																								num20 = num19;
																								while (true)
																								{
																									switch (num20)
																									{
																									case 4:
																										switch (0)
																										{
																										default:
																											continue;
																										case 0:
																											break;
																										}
																										goto default;
																									case 3:
																										try
																										{
																											eval_b.eval_cz.Add(new EShop_weapon
																											{
																												Name = xmlNode7.SelectSingleNode("name").InnerText,
																												Price = xmlNode7.SelectSingleNode("price").InnerText,
																												Description = xmlNode7.SelectSingleNode("description").InnerText,
																												Set = xmlNode7.SelectSingleNode("set").InnerText,
																												Image = xmlNode7.SelectSingleNode("image").InnerText,
																												Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
																											});
																										}
																										catch (Exception ex7)
																										{
																											System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
																											return;
																										}
																										goto default;
																									default:
																										num19 = 0;
																										num20 = num19;
																										continue;
																									case 0:
																										if (enumerator.MoveNext())
																										{
																											xmlNode7 = (XmlNode)enumerator.Current;
																											num19 = 3;
																											num20 = num19;
																										}
																										else
																										{
																											num19 = 1;
																											num20 = num19;
																										}
																										continue;
																									case 1:
																										num19 = 2;
																										num20 = num19;
																										continue;
																									case 2:
																										break;
																									}
																									break;
																								}
																							}
																							finally
																							{
																								switch (0)
																								{
																								default:
																									while (true)
																									{
																										switch (num20)
																										{
																										case 2:
																											if (disposable != null)
																											{
																												num19 = 0;
																												num20 = num19;
																												continue;
																											}
																											goto end_IL_0bb0;
																										case 0:
																											disposable.Dispose();
																											num19 = 1;
																											num20 = num19;
																											continue;
																										case 1:
																											goto end_IL_0bb0;
																										}
																										goto case 0;
																										continue;
																										end_IL_0bb0:
																										break;
																									}
																									break;
																								case 0:
																									disposable = enumerator as IDisposable;
																									num19 = 2;
																									num20 = num19;
																									goto default;
																								}
																							}
																							num19 = -22575;
																							short num21 = num19;
																							num19 = -22575;
																							switch (num21 == num19)
																							{
																							case false:
																							case true:
																								break;
																							default:
																								num19 = 0;
																								if (num19 == 0)
																								{
																								}
																								goto end_IL_09eb;
																							}
																							continue;
																							end_IL_09eb:
																							break;
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					num19 = 3;
																					num20 = num19;
																					continue;
																				case 0:
																					try
																					{
																						eval_b.eval_c3.Clear();
																						eval_b.eval_dm.Load(DirLocal + "\\mask.xml");
																						IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																						try
																						{
																							num19 = 4;
																							num20 = num19;
																							while (true)
																							{
																								switch (num20)
																								{
																								case 4:
																									switch (0)
																									{
																									default:
																										continue;
																									case 0:
																										break;
																									}
																									goto default;
																								case 1:
																									try
																									{
																										eval_b.eval_c3.Add(new EShop_mask
																										{
																											Name = xmlNode5.SelectSingleNode("name").InnerText,
																											Price = xmlNode5.SelectSingleNode("price").InnerText,
																											Description = xmlNode5.SelectSingleNode("description").InnerText,
																											Set = xmlNode5.SelectSingleNode("set").InnerText,
																											Image = xmlNode5.SelectSingleNode("image").InnerText,
																											Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
																										});
																									}
																									catch (Exception ex5)
																									{
																										System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
																										return;
																									}
																									goto default;
																								default:
																									num19 = 3;
																									num20 = num19;
																									continue;
																								case 3:
																									if (!enumerator.MoveNext())
																									{
																										num19 = 0;
																										num20 = num19;
																									}
																									else
																									{
																										xmlNode5 = (XmlNode)enumerator.Current;
																										num19 = 1;
																										num20 = num19;
																									}
																									continue;
																								case 0:
																									num19 = 2;
																									num20 = num19;
																									continue;
																								case 2:
																									break;
																								}
																								break;
																							}
																						}
																						finally
																						{
																							switch (0)
																							{
																							default:
																								while (true)
																								{
																									switch (num20)
																									{
																									case 2:
																										if (disposable != null)
																										{
																											num19 = 0;
																											num20 = num19;
																											continue;
																										}
																										goto end_IL_0e39;
																									case 0:
																										disposable.Dispose();
																										num19 = 1;
																										num20 = num19;
																										continue;
																									case 1:
																										goto end_IL_0e39;
																									}
																									goto case 0;
																									continue;
																									end_IL_0e39:
																									break;
																								}
																								break;
																							case 0:
																								disposable = enumerator as IDisposable;
																								num19 = 2;
																								num20 = num19;
																								goto default;
																							}
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					num19 = 5;
																					num20 = num19;
																					continue;
																				case 4:
																					try
																					{
																						eval_b.eval_c1.Clear();
																						eval_b.eval_dm.Load(DirLocal + "\\car.xml");
																						IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																						try
																						{
																							num19 = 4;
																							num20 = num19;
																							while (true)
																							{
																								switch (num20)
																								{
																								case 4:
																									switch (0)
																									{
																									default:
																										continue;
																									case 0:
																										break;
																									}
																									goto default;
																								default:
																									num19 = 3;
																									num20 = num19;
																									continue;
																								case 3:
																									if (!enumerator.MoveNext())
																									{
																										num19 = 0;
																										num20 = num19;
																									}
																									else
																									{
																										xmlNode3 = (XmlNode)enumerator.Current;
																										num19 = 1;
																										num20 = num19;
																									}
																									continue;
																								case 1:
																									try
																									{
																										eval_b.eval_c1.Add(new EShop_car
																										{
																											Name = xmlNode3.SelectSingleNode("name").InnerText,
																											Description = xmlNode3.SelectSingleNode("description").InnerText,
																											Price = xmlNode3.SelectSingleNode("price").InnerText,
																											Set = xmlNode3.SelectSingleNode("set").InnerText,
																											Image = xmlNode3.SelectSingleNode("image").InnerText,
																											Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
																										});
																									}
																									catch (Exception ex3)
																									{
																										System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
																										return;
																									}
																									goto default;
																								case 0:
																									num19 = 2;
																									num20 = num19;
																									continue;
																								case 2:
																									break;
																								}
																								break;
																							}
																						}
																						finally
																						{
																							switch (0)
																							{
																							default:
																								while (true)
																								{
																									switch (num20)
																									{
																									case 2:
																										if (disposable != null)
																										{
																											num19 = 0;
																											num20 = num19;
																											continue;
																										}
																										goto end_IL_1075;
																									case 0:
																										disposable.Dispose();
																										num19 = 1;
																										num20 = num19;
																										continue;
																									case 1:
																										goto end_IL_1075;
																									}
																									goto case 0;
																									continue;
																									end_IL_1075:
																									break;
																								}
																								break;
																							case 0:
																								disposable = enumerator as IDisposable;
																								num19 = 2;
																								num20 = num19;
																								goto default;
																							}
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					num19 = 2;
																					num20 = num19;
																					continue;
																				case 5:
																					try
																					{
																						eval_b.eval_c4.Clear();
																						eval_b.eval_dm.Load(DirLocal + "\\base.xml");
																						IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																						try
																						{
																							num19 = 4;
																							num20 = num19;
																							while (true)
																							{
																								switch (num20)
																								{
																								case 4:
																									switch (0)
																									{
																									default:
																										continue;
																									case 0:
																										break;
																									}
																									goto default;
																								case 3:
																									try
																									{
																										eval_b.eval_c4.Add(new EShop_base
																										{
																											Name = xmlNode.SelectSingleNode("name").InnerText,
																											Price = xmlNode.SelectSingleNode("price").InnerText,
																											Description = xmlNode.SelectSingleNode("description").InnerText,
																											Set = xmlNode.SelectSingleNode("set").InnerText,
																											Image = xmlNode.SelectSingleNode("image").InnerText,
																											Cmd = xmlNode.SelectSingleNode("cmd").InnerText
																										});
																									}
																									catch (Exception ex)
																									{
																										System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
																										return;
																									}
																									goto default;
																								default:
																									num19 = 0;
																									num20 = num19;
																									continue;
																								case 0:
																									if (enumerator.MoveNext())
																									{
																										xmlNode = (XmlNode)enumerator.Current;
																										num19 = 3;
																										num20 = num19;
																									}
																									else
																									{
																										num19 = 1;
																										num20 = num19;
																									}
																									continue;
																								case 1:
																									num19 = 2;
																									num20 = num19;
																									continue;
																								case 2:
																									break;
																								}
																								break;
																							}
																						}
																						finally
																						{
																							switch (0)
																							{
																							default:
																								while (true)
																								{
																									switch (num20)
																									{
																									case 2:
																										if (disposable != null)
																										{
																											num19 = 0;
																											num20 = num19;
																											continue;
																										}
																										goto end_IL_1335;
																									case 0:
																										disposable.Dispose();
																										num19 = 1;
																										num20 = num19;
																										continue;
																									case 1:
																										goto end_IL_1335;
																									}
																									goto case 0;
																									continue;
																									end_IL_1335:
																									break;
																								}
																								break;
																							case 0:
																								disposable = enumerator as IDisposable;
																								num19 = 2;
																								num20 = num19;
																								goto default;
																							}
																						}
																					}
																					catch
																					{
																						bool flag = true;
																					}
																					num19 = 1;
																					num20 = num19;
																					continue;
																				}
																				break;
																			}
																			goto case 0;
																		}
																		case 0:
																		{
																			bool flag = false;
																			num19 = 7;
																			num20 = num19;
																			goto default;
																		}
																		}
																	}
																};
															}
															finally
															{
																num16 = 0;
																int num18 = num16;
																while (true)
																{
																	switch (num18)
																	{
																	case 0:
																		switch (0)
																		{
																		default:
																			continue;
																		case 0:
																			break;
																		}
																		goto default;
																	default:
																		if (webClient6 != null)
																		{
																			num16 = 1;
																			num18 = num16;
																			continue;
																		}
																		break;
																	case 1:
																		((IDisposable)webClient6).Dispose();
																		num16 = 2;
																		num18 = num16;
																		continue;
																	case 2:
																		break;
																	}
																	break;
																}
															}
														};
													}
													finally
													{
														num13 = 0;
														int num15 = num13;
														while (true)
														{
															switch (num15)
															{
															case 0:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															default:
																if (webClient5 != null)
																{
																	num13 = 1;
																	num15 = num13;
																	continue;
																}
																break;
															case 1:
																((IDisposable)webClient5).Dispose();
																num13 = 2;
																num15 = num13;
																continue;
															case 2:
																break;
															}
															break;
														}
													}
												};
											}
											finally
											{
												num10 = 0;
												int num12 = num10;
												while (true)
												{
													switch (num12)
													{
													case 0:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (webClient4 != null)
														{
															num10 = 1;
															num12 = num10;
															continue;
														}
														break;
													case 1:
														((IDisposable)webClient4).Dispose();
														num10 = 2;
														num12 = num10;
														continue;
													case 2:
														break;
													}
													break;
												}
											}
										};
									}
									finally
									{
										num7 = 0;
										int num9 = num7;
										while (true)
										{
											switch (num9)
											{
											case 0:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (webClient3 != null)
												{
													num7 = 1;
													num9 = num7;
													continue;
												}
												break;
											case 1:
												((IDisposable)webClient3).Dispose();
												num7 = 2;
												num9 = num7;
												continue;
											case 2:
												break;
											}
											break;
										}
									}
									break;
								}
								case false:
								case true:
									break;
								}
								num7 = 1;
								if (num7 == 0)
								{
								}
							};
							break;
						}
						finally
						{
							num4 = 0;
							int num6 = num4;
							while (true)
							{
								switch (num6)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (webClient2 != null)
									{
										num4 = 1;
										num6 = num4;
										continue;
									}
									break;
								case 1:
									((IDisposable)webClient2).Dispose();
									num4 = 2;
									num6 = num4;
									continue;
								case 2:
									break;
								}
								break;
							}
						}
					}
					case false:
					case true:
						break;
					}
				};
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 1;
							num3 = num;
							continue;
						}
						break;
					case 1:
						((IDisposable)webClient).Dispose();
						num = 2;
						num3 = num;
						continue;
					case 2:
						break;
					}
					break;
				}
			}
		}

		internal void eval_f(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = -22965;
			short num2 = num;
			num = -22965;
			switch (num2 == num)
			{
			case false:
			case true:
				return;
			}
			num = 0;
			if (num != 0)
			{
			}
			WebClient webClient = new WebClient();
			try
			{
				a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/weapon/" + URL_WEAPON);
				webClient.DownloadFileAsync(a, DirLocal + "\\weapon.xml");
				webClient.DownloadFileCompleted += delegate
				{
					short num4 = 22425;
					short num5 = num4;
					num4 = 22425;
					switch (num5 == num4)
					{
					default:
						num4 = 0;
						_ = num4;
						goto case true;
					case true:
					{
						num4 = 0;
						if (num4 != 0)
						{
						}
						WebClient webClient2 = new WebClient();
						try
						{
							a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/inventory/" + URL_INVENTORY);
							webClient2.DownloadFileAsync(a, DirLocal + "\\inventory.xml");
							webClient2.DownloadFileCompleted += delegate
							{
								short num7 = -2379;
								short num8 = num7;
								num7 = -2379;
								switch (num8 == num7)
								{
								default:
									num7 = 0;
									_ = num7;
									break;
								case true:
									break;
								case false:
								case true:
									return;
								}
								num7 = 1;
								if (num7 != 0)
								{
								}
								num7 = 0;
								if (num7 != 0)
								{
								}
								WebClient webClient3 = new WebClient();
								try
								{
									a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/mask/" + URL_MASK);
									webClient3.DownloadFileAsync(a, DirLocal + "\\mask.xml");
									webClient3.DownloadFileCompleted += delegate
									{
										short num10 = -26143;
										short num11 = num10;
										num10 = -26143;
										switch (num11 == num10)
										{
										default:
											num10 = 0;
											_ = num10;
											break;
										case true:
											break;
										case false:
										case true:
											return;
										}
										num10 = 0;
										if (num10 != 0)
										{
										}
										WebClient webClient4 = new WebClient();
										try
										{
											num10 = 1;
											if (num10 != 0)
											{
											}
											a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/base/" + URL_BASE);
											webClient4.DownloadFileAsync(a, DirLocal + "\\base.xml");
											webClient4.DownloadFileCompleted += delegate
											{
												short num13 = -26314;
												short num14 = num13;
												num13 = -26314;
												switch (num14 == num13)
												{
												default:
													num13 = 0;
													_ = num13;
													break;
												case true:
													break;
												case false:
												case true:
													return;
												}
												num13 = 1;
												if (num13 != 0)
												{
												}
												num13 = 0;
												if (num13 != 0)
												{
												}
												WebClient webClient5 = new WebClient();
												try
												{
													a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/medic/" + URL_MEDIC);
													webClient5.DownloadFileAsync(a, DirLocal + "\\medic.xml");
													webClient5.DownloadFileCompleted += delegate
													{
														short num16 = 0;
														int num17 = num16;
														switch (num17)
														{
														default:
															switch (0)
															{
															default:
															{
																XmlNode xmlNode8 = default(XmlNode);
																IDisposable disposable = default(IDisposable);
																XmlNode xmlNode4 = default(XmlNode);
																XmlNode xmlNode6 = default(XmlNode);
																XmlNode xmlNode2 = default(XmlNode);
																XmlNode xmlNode7 = default(XmlNode);
																XmlNode xmlNode5 = default(XmlNode);
																XmlNode xmlNode3 = default(XmlNode);
																XmlNode xmlNode = default(XmlNode);
																while (true)
																{
																	switch (num17)
																	{
																	case 2:
																		try
																		{
																			eval_b.eval_c2.Clear();
																			eval_b.eval_dm.Load(DirLocal + "\\inventory.xml");
																			IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																			try
																			{
																				num16 = 3;
																				num17 = num16;
																				while (true)
																				{
																					switch (num17)
																					{
																					case 3:
																						switch (0)
																						{
																						default:
																							continue;
																						case 0:
																							break;
																						}
																						goto default;
																					case 4:
																						try
																						{
																							eval_b.eval_c2.Add(new EShop_inventory
																							{
																								Name = xmlNode8.SelectSingleNode("name").InnerText,
																								Price = xmlNode8.SelectSingleNode("price").InnerText,
																								Set = xmlNode8.SelectSingleNode("set").InnerText,
																								Image = xmlNode8.SelectSingleNode("image").InnerText,
																								Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
																							});
																						}
																						catch (Exception ex8)
																						{
																							System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
																							return;
																						}
																						goto default;
																					default:
																						num16 = 2;
																						num17 = num16;
																						continue;
																					case 2:
																						if (enumerator.MoveNext())
																						{
																							xmlNode8 = (XmlNode)enumerator.Current;
																							num16 = 4;
																							num17 = num16;
																						}
																						else
																						{
																							num16 = 0;
																							num17 = num16;
																						}
																						continue;
																					case 0:
																						num16 = 1;
																						num17 = num16;
																						continue;
																					case 1:
																						break;
																					}
																					break;
																				}
																			}
																			finally
																			{
																				switch (0)
																				{
																				default:
																					while (true)
																					{
																						switch (num17)
																						{
																						case 2:
																							if (disposable != null)
																							{
																								num16 = 0;
																								num17 = num16;
																								continue;
																							}
																							goto end_IL_026c;
																						case 0:
																							disposable.Dispose();
																							num16 = 1;
																							num17 = num16;
																							continue;
																						case 1:
																							goto end_IL_026c;
																						}
																						goto case 0;
																						continue;
																						end_IL_026c:
																						break;
																					}
																					break;
																				case 0:
																					disposable = enumerator as IDisposable;
																					num16 = 2;
																					num17 = num16;
																					goto default;
																				}
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		num16 = 0;
																		_ = num16;
																		num16 = 1;
																		if (num16 != 0)
																		{
																		}
																		num16 = 0;
																		num17 = num16;
																		continue;
																	case 1:
																		try
																		{
																			eval_b.eval_c5.Clear();
																			eval_b.eval_dm.Load(DirLocal + "\\medic.xml");
																			IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																			try
																			{
																				num16 = 3;
																				num17 = num16;
																				while (true)
																				{
																					switch (num17)
																					{
																					case 3:
																						switch (0)
																						{
																						default:
																							continue;
																						case 0:
																							break;
																						}
																						goto default;
																					case 0:
																						try
																						{
																							eval_b.eval_c5.Add(new EShop_medic
																							{
																								Name = xmlNode4.SelectSingleNode("name").InnerText,
																								Price = xmlNode4.SelectSingleNode("price").InnerText,
																								Description = xmlNode4.SelectSingleNode("description").InnerText,
																								Set = xmlNode4.SelectSingleNode("set").InnerText,
																								Image = xmlNode4.SelectSingleNode("image").InnerText,
																								Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
																							});
																						}
																						catch (Exception ex4)
																						{
																							System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
																							return;
																						}
																						goto default;
																					default:
																						num16 = 4;
																						num17 = num16;
																						continue;
																					case 4:
																						if (!enumerator.MoveNext())
																						{
																							num16 = 2;
																							num17 = num16;
																						}
																						else
																						{
																							xmlNode4 = (XmlNode)enumerator.Current;
																							num16 = 0;
																							num17 = num16;
																						}
																						continue;
																					case 2:
																						num16 = 1;
																						num17 = num16;
																						continue;
																					case 1:
																						break;
																					}
																					break;
																				}
																			}
																			finally
																			{
																				switch (0)
																				{
																				default:
																					while (true)
																					{
																						switch (num17)
																						{
																						case 2:
																							if (disposable != null)
																							{
																								num16 = 0;
																								num17 = num16;
																								continue;
																							}
																							goto end_IL_04c7;
																						case 0:
																							disposable.Dispose();
																							num16 = 1;
																							num17 = num16;
																							continue;
																						case 1:
																							goto end_IL_04c7;
																						}
																						goto case 0;
																						continue;
																						end_IL_04c7:
																						break;
																					}
																					break;
																				case 0:
																					disposable = enumerator as IDisposable;
																					num16 = 2;
																					num17 = num16;
																					goto default;
																				}
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		eval_b.LoadShop();
																		num16 = 6;
																		num17 = num16;
																		continue;
																	case 6:
																		return;
																	case 7:
																		try
																		{
																			eval_b.eval_cy.Clear();
																			eval_b.eval_dm.Load(DirLocal + "\\loot.xml");
																			IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																			try
																			{
																				num16 = 3;
																				num17 = num16;
																				while (true)
																				{
																					switch (num17)
																					{
																					case 3:
																						switch (0)
																						{
																						default:
																							continue;
																						case 0:
																							break;
																						}
																						goto default;
																					default:
																						num16 = 2;
																						num17 = num16;
																						continue;
																					case 2:
																						if (enumerator.MoveNext())
																						{
																							xmlNode6 = (XmlNode)enumerator.Current;
																							num16 = 4;
																							num17 = num16;
																						}
																						else
																						{
																							num16 = 0;
																							num17 = num16;
																						}
																						continue;
																					case 4:
																						try
																						{
																							eval_b.eval_cy.Add(new EShop_loot
																							{
																								Name = xmlNode6.SelectSingleNode("name").InnerText,
																								Price = xmlNode6.SelectSingleNode("price").InnerText,
																								Description = xmlNode6.SelectSingleNode("description").InnerText,
																								Set = xmlNode6.SelectSingleNode("set").InnerText,
																								Image = xmlNode6.SelectSingleNode("image").InnerText,
																								Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
																							});
																						}
																						catch (Exception ex6)
																						{
																							System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
																							return;
																						}
																						goto default;
																					case 0:
																						num16 = 1;
																						num17 = num16;
																						continue;
																					case 1:
																						break;
																					}
																					break;
																				}
																			}
																			finally
																			{
																				switch (0)
																				{
																				default:
																					while (true)
																					{
																						switch (num17)
																						{
																						case 2:
																							if (disposable != null)
																							{
																								num16 = 0;
																								num17 = num16;
																								continue;
																							}
																							goto end_IL_0736;
																						case 0:
																							disposable.Dispose();
																							num16 = 1;
																							num17 = num16;
																							continue;
																						case 1:
																							goto end_IL_0736;
																						}
																						goto case 0;
																						continue;
																						end_IL_0736:
																						break;
																					}
																					break;
																				case 0:
																					disposable = enumerator as IDisposable;
																					num16 = 2;
																					num17 = num16;
																					goto default;
																				}
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		num16 = 8;
																		num17 = num16;
																		continue;
																	case 3:
																		try
																		{
																			eval_b.eval_c0.Clear();
																			eval_b.eval_dm.Load(DirLocal + "\\set.xml");
																			IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																			try
																			{
																				num16 = 3;
																				num17 = num16;
																				while (true)
																				{
																					switch (num17)
																					{
																					case 3:
																						switch (0)
																						{
																						default:
																							continue;
																						case 0:
																							break;
																						}
																						goto default;
																					default:
																						num16 = 4;
																						num17 = num16;
																						continue;
																					case 4:
																						if (!enumerator.MoveNext())
																						{
																							num16 = 2;
																							num17 = num16;
																						}
																						else
																						{
																							xmlNode2 = (XmlNode)enumerator.Current;
																							num16 = 0;
																							num17 = num16;
																						}
																						continue;
																					case 0:
																						try
																						{
																							eval_b.eval_c0.Add(new EShop_set
																							{
																								Name = xmlNode2.SelectSingleNode("name").InnerText,
																								Price = xmlNode2.SelectSingleNode("price").InnerText,
																								Description = xmlNode2.SelectSingleNode("description").InnerText,
																								Set = xmlNode2.SelectSingleNode("set").InnerText,
																								Image = xmlNode2.SelectSingleNode("image").InnerText,
																								Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
																							});
																						}
																						catch (Exception ex2)
																						{
																							System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
																							return;
																						}
																						goto default;
																					case 2:
																						num16 = 1;
																						num17 = num16;
																						continue;
																					case 1:
																						break;
																					}
																					break;
																				}
																			}
																			finally
																			{
																				switch (0)
																				{
																				default:
																					while (true)
																					{
																						switch (num17)
																						{
																						case 2:
																							if (disposable != null)
																							{
																								num16 = 0;
																								num17 = num16;
																								continue;
																							}
																							goto end_IL_0971;
																						case 0:
																							disposable.Dispose();
																							num16 = 1;
																							num17 = num16;
																							continue;
																						case 1:
																							goto end_IL_0971;
																						}
																						goto case 0;
																						continue;
																						end_IL_0971:
																						break;
																					}
																					break;
																				case 0:
																					disposable = enumerator as IDisposable;
																					num16 = 2;
																					num17 = num16;
																					goto default;
																				}
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		num16 = 4;
																		num17 = num16;
																		continue;
																	case 8:
																		try
																		{
																			while (true)
																			{
																				eval_b.eval_cz.Clear();
																				eval_b.eval_dm.Load(DirLocal + "\\weapon.xml");
																				IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																				try
																				{
																					num16 = 4;
																					num17 = num16;
																					while (true)
																					{
																						switch (num17)
																						{
																						case 4:
																							switch (0)
																							{
																							default:
																								continue;
																							case 0:
																								break;
																							}
																							goto default;
																						case 3:
																							try
																							{
																								eval_b.eval_cz.Add(new EShop_weapon
																								{
																									Name = xmlNode7.SelectSingleNode("name").InnerText,
																									Price = xmlNode7.SelectSingleNode("price").InnerText,
																									Description = xmlNode7.SelectSingleNode("description").InnerText,
																									Set = xmlNode7.SelectSingleNode("set").InnerText,
																									Image = xmlNode7.SelectSingleNode("image").InnerText,
																									Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
																								});
																							}
																							catch (Exception ex7)
																							{
																								System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
																								return;
																							}
																							goto default;
																						default:
																							num16 = 0;
																							num17 = num16;
																							continue;
																						case 0:
																							if (enumerator.MoveNext())
																							{
																								xmlNode7 = (XmlNode)enumerator.Current;
																								num16 = 3;
																								num17 = num16;
																							}
																							else
																							{
																								num16 = 1;
																								num17 = num16;
																							}
																							continue;
																						case 1:
																							num16 = 2;
																							num17 = num16;
																							continue;
																						case 2:
																							break;
																						}
																						break;
																					}
																				}
																				finally
																				{
																					switch (0)
																					{
																					default:
																						while (true)
																						{
																							switch (num17)
																							{
																							case 2:
																								if (disposable != null)
																								{
																									num16 = 0;
																									num17 = num16;
																									continue;
																								}
																								goto end_IL_0bb0;
																							case 0:
																								disposable.Dispose();
																								num16 = 1;
																								num17 = num16;
																								continue;
																							case 1:
																								goto end_IL_0bb0;
																							}
																							goto case 0;
																							continue;
																							end_IL_0bb0:
																							break;
																						}
																						break;
																					case 0:
																						disposable = enumerator as IDisposable;
																						num16 = 2;
																						num17 = num16;
																						goto default;
																					}
																				}
																				num16 = -22575;
																				short num18 = num16;
																				num16 = -22575;
																				switch (num18 == num16)
																				{
																				case false:
																				case true:
																					break;
																				default:
																					num16 = 0;
																					if (num16 == 0)
																					{
																					}
																					goto end_IL_09eb;
																				}
																				continue;
																				end_IL_09eb:
																				break;
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		num16 = 3;
																		num17 = num16;
																		continue;
																	case 0:
																		try
																		{
																			eval_b.eval_c3.Clear();
																			eval_b.eval_dm.Load(DirLocal + "\\mask.xml");
																			IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																			try
																			{
																				num16 = 4;
																				num17 = num16;
																				while (true)
																				{
																					switch (num17)
																					{
																					case 4:
																						switch (0)
																						{
																						default:
																							continue;
																						case 0:
																							break;
																						}
																						goto default;
																					case 1:
																						try
																						{
																							eval_b.eval_c3.Add(new EShop_mask
																							{
																								Name = xmlNode5.SelectSingleNode("name").InnerText,
																								Price = xmlNode5.SelectSingleNode("price").InnerText,
																								Description = xmlNode5.SelectSingleNode("description").InnerText,
																								Set = xmlNode5.SelectSingleNode("set").InnerText,
																								Image = xmlNode5.SelectSingleNode("image").InnerText,
																								Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
																							});
																						}
																						catch (Exception ex5)
																						{
																							System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
																							return;
																						}
																						goto default;
																					default:
																						num16 = 3;
																						num17 = num16;
																						continue;
																					case 3:
																						if (!enumerator.MoveNext())
																						{
																							num16 = 0;
																							num17 = num16;
																						}
																						else
																						{
																							xmlNode5 = (XmlNode)enumerator.Current;
																							num16 = 1;
																							num17 = num16;
																						}
																						continue;
																					case 0:
																						num16 = 2;
																						num17 = num16;
																						continue;
																					case 2:
																						break;
																					}
																					break;
																				}
																			}
																			finally
																			{
																				switch (0)
																				{
																				default:
																					while (true)
																					{
																						switch (num17)
																						{
																						case 2:
																							if (disposable != null)
																							{
																								num16 = 0;
																								num17 = num16;
																								continue;
																							}
																							goto end_IL_0e39;
																						case 0:
																							disposable.Dispose();
																							num16 = 1;
																							num17 = num16;
																							continue;
																						case 1:
																							goto end_IL_0e39;
																						}
																						goto case 0;
																						continue;
																						end_IL_0e39:
																						break;
																					}
																					break;
																				case 0:
																					disposable = enumerator as IDisposable;
																					num16 = 2;
																					num17 = num16;
																					goto default;
																				}
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		num16 = 5;
																		num17 = num16;
																		continue;
																	case 4:
																		try
																		{
																			eval_b.eval_c1.Clear();
																			eval_b.eval_dm.Load(DirLocal + "\\car.xml");
																			IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																			try
																			{
																				num16 = 4;
																				num17 = num16;
																				while (true)
																				{
																					switch (num17)
																					{
																					case 4:
																						switch (0)
																						{
																						default:
																							continue;
																						case 0:
																							break;
																						}
																						goto default;
																					default:
																						num16 = 3;
																						num17 = num16;
																						continue;
																					case 3:
																						if (!enumerator.MoveNext())
																						{
																							num16 = 0;
																							num17 = num16;
																						}
																						else
																						{
																							xmlNode3 = (XmlNode)enumerator.Current;
																							num16 = 1;
																							num17 = num16;
																						}
																						continue;
																					case 1:
																						try
																						{
																							eval_b.eval_c1.Add(new EShop_car
																							{
																								Name = xmlNode3.SelectSingleNode("name").InnerText,
																								Description = xmlNode3.SelectSingleNode("description").InnerText,
																								Price = xmlNode3.SelectSingleNode("price").InnerText,
																								Set = xmlNode3.SelectSingleNode("set").InnerText,
																								Image = xmlNode3.SelectSingleNode("image").InnerText,
																								Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
																							});
																						}
																						catch (Exception ex3)
																						{
																							System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
																							return;
																						}
																						goto default;
																					case 0:
																						num16 = 2;
																						num17 = num16;
																						continue;
																					case 2:
																						break;
																					}
																					break;
																				}
																			}
																			finally
																			{
																				switch (0)
																				{
																				default:
																					while (true)
																					{
																						switch (num17)
																						{
																						case 2:
																							if (disposable != null)
																							{
																								num16 = 0;
																								num17 = num16;
																								continue;
																							}
																							goto end_IL_1075;
																						case 0:
																							disposable.Dispose();
																							num16 = 1;
																							num17 = num16;
																							continue;
																						case 1:
																							goto end_IL_1075;
																						}
																						goto case 0;
																						continue;
																						end_IL_1075:
																						break;
																					}
																					break;
																				case 0:
																					disposable = enumerator as IDisposable;
																					num16 = 2;
																					num17 = num16;
																					goto default;
																				}
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		num16 = 2;
																		num17 = num16;
																		continue;
																	case 5:
																		try
																		{
																			eval_b.eval_c4.Clear();
																			eval_b.eval_dm.Load(DirLocal + "\\base.xml");
																			IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																			try
																			{
																				num16 = 4;
																				num17 = num16;
																				while (true)
																				{
																					switch (num17)
																					{
																					case 4:
																						switch (0)
																						{
																						default:
																							continue;
																						case 0:
																							break;
																						}
																						goto default;
																					case 3:
																						try
																						{
																							eval_b.eval_c4.Add(new EShop_base
																							{
																								Name = xmlNode.SelectSingleNode("name").InnerText,
																								Price = xmlNode.SelectSingleNode("price").InnerText,
																								Description = xmlNode.SelectSingleNode("description").InnerText,
																								Set = xmlNode.SelectSingleNode("set").InnerText,
																								Image = xmlNode.SelectSingleNode("image").InnerText,
																								Cmd = xmlNode.SelectSingleNode("cmd").InnerText
																							});
																						}
																						catch (Exception ex)
																						{
																							System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
																							return;
																						}
																						goto default;
																					default:
																						num16 = 0;
																						num17 = num16;
																						continue;
																					case 0:
																						if (enumerator.MoveNext())
																						{
																							xmlNode = (XmlNode)enumerator.Current;
																							num16 = 3;
																							num17 = num16;
																						}
																						else
																						{
																							num16 = 1;
																							num17 = num16;
																						}
																						continue;
																					case 1:
																						num16 = 2;
																						num17 = num16;
																						continue;
																					case 2:
																						break;
																					}
																					break;
																				}
																			}
																			finally
																			{
																				switch (0)
																				{
																				default:
																					while (true)
																					{
																						switch (num17)
																						{
																						case 2:
																							if (disposable != null)
																							{
																								num16 = 0;
																								num17 = num16;
																								continue;
																							}
																							goto end_IL_1335;
																						case 0:
																							disposable.Dispose();
																							num16 = 1;
																							num17 = num16;
																							continue;
																						case 1:
																							goto end_IL_1335;
																						}
																						goto case 0;
																						continue;
																						end_IL_1335:
																						break;
																					}
																					break;
																				case 0:
																					disposable = enumerator as IDisposable;
																					num16 = 2;
																					num17 = num16;
																					goto default;
																				}
																			}
																		}
																		catch
																		{
																			bool flag = true;
																		}
																		num16 = 1;
																		num17 = num16;
																		continue;
																	}
																	break;
																}
																goto case 0;
															}
															case 0:
															{
																bool flag = false;
																num16 = 7;
																num17 = num16;
																goto default;
															}
															}
														}
													};
												}
												finally
												{
													num13 = 0;
													int num15 = num13;
													while (true)
													{
														switch (num15)
														{
														case 0:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															if (webClient5 != null)
															{
																num13 = 1;
																num15 = num13;
																continue;
															}
															break;
														case 1:
															((IDisposable)webClient5).Dispose();
															num13 = 2;
															num15 = num13;
															continue;
														case 2:
															break;
														}
														break;
													}
												}
											};
										}
										finally
										{
											num10 = 0;
											int num12 = num10;
											while (true)
											{
												switch (num12)
												{
												case 0:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (webClient4 != null)
													{
														num10 = 1;
														num12 = num10;
														continue;
													}
													break;
												case 1:
													((IDisposable)webClient4).Dispose();
													num10 = 2;
													num12 = num10;
													continue;
												case 2:
													break;
												}
												break;
											}
										}
									};
								}
								finally
								{
									num7 = 0;
									int num9 = num7;
									while (true)
									{
										switch (num9)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (webClient3 != null)
											{
												num7 = 1;
												num9 = num7;
												continue;
											}
											break;
										case 1:
											((IDisposable)webClient3).Dispose();
											num7 = 2;
											num9 = num7;
											continue;
										case 2:
											break;
										}
										break;
									}
								}
							};
						}
						finally
						{
							num4 = 0;
							int num6 = num4;
							while (true)
							{
								switch (num6)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (webClient2 != null)
									{
										num4 = 1;
										num6 = num4;
										continue;
									}
									break;
								case 1:
									((IDisposable)webClient2).Dispose();
									num4 = 2;
									num6 = num4;
									continue;
								case 2:
									break;
								}
								break;
							}
						}
						break;
					}
					case false:
					case true:
						break;
					}
					num4 = 1;
					if (num4 == 0)
					{
					}
				};
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 1;
							num3 = num;
							continue;
						}
						break;
					case 1:
						((IDisposable)webClient).Dispose();
						num = 2;
						num3 = num;
						continue;
					case 2:
						break;
					}
					break;
				}
			}
		}

		internal void eval_e(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = 22425;
			short num2 = num;
			num = 22425;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 0;
				if (num != 0)
				{
				}
				WebClient webClient = new WebClient();
				try
				{
					a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/inventory/" + URL_INVENTORY);
					webClient.DownloadFileAsync(a, DirLocal + "\\inventory.xml");
					webClient.DownloadFileCompleted += delegate
					{
						short num4 = -2379;
						short num5 = num4;
						num4 = -2379;
						switch (num5 == num4)
						{
						default:
							num4 = 0;
							_ = num4;
							break;
						case true:
							break;
						case false:
						case true:
							return;
						}
						num4 = 1;
						if (num4 != 0)
						{
						}
						num4 = 0;
						if (num4 != 0)
						{
						}
						WebClient webClient2 = new WebClient();
						try
						{
							a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/mask/" + URL_MASK);
							webClient2.DownloadFileAsync(a, DirLocal + "\\mask.xml");
							webClient2.DownloadFileCompleted += delegate
							{
								short num7 = -26143;
								short num8 = num7;
								num7 = -26143;
								switch (num8 == num7)
								{
								default:
									num7 = 0;
									_ = num7;
									break;
								case true:
									break;
								case false:
								case true:
									return;
								}
								num7 = 0;
								if (num7 != 0)
								{
								}
								WebClient webClient3 = new WebClient();
								try
								{
									num7 = 1;
									if (num7 != 0)
									{
									}
									a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/base/" + URL_BASE);
									webClient3.DownloadFileAsync(a, DirLocal + "\\base.xml");
									webClient3.DownloadFileCompleted += delegate
									{
										short num10 = -26314;
										short num11 = num10;
										num10 = -26314;
										switch (num11 == num10)
										{
										default:
											num10 = 0;
											_ = num10;
											break;
										case true:
											break;
										case false:
										case true:
											return;
										}
										num10 = 1;
										if (num10 != 0)
										{
										}
										num10 = 0;
										if (num10 != 0)
										{
										}
										WebClient webClient4 = new WebClient();
										try
										{
											a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/medic/" + URL_MEDIC);
											webClient4.DownloadFileAsync(a, DirLocal + "\\medic.xml");
											webClient4.DownloadFileCompleted += delegate
											{
												short num13 = 0;
												int num14 = num13;
												switch (num14)
												{
												default:
													switch (0)
													{
													default:
													{
														XmlNode xmlNode8 = default(XmlNode);
														IDisposable disposable = default(IDisposable);
														XmlNode xmlNode4 = default(XmlNode);
														XmlNode xmlNode6 = default(XmlNode);
														XmlNode xmlNode2 = default(XmlNode);
														XmlNode xmlNode7 = default(XmlNode);
														XmlNode xmlNode5 = default(XmlNode);
														XmlNode xmlNode3 = default(XmlNode);
														XmlNode xmlNode = default(XmlNode);
														while (true)
														{
															switch (num14)
															{
															case 2:
																try
																{
																	eval_b.eval_c2.Clear();
																	eval_b.eval_dm.Load(DirLocal + "\\inventory.xml");
																	IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																	try
																	{
																		num13 = 3;
																		num14 = num13;
																		while (true)
																		{
																			switch (num14)
																			{
																			case 3:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			case 4:
																				try
																				{
																					eval_b.eval_c2.Add(new EShop_inventory
																					{
																						Name = xmlNode8.SelectSingleNode("name").InnerText,
																						Price = xmlNode8.SelectSingleNode("price").InnerText,
																						Set = xmlNode8.SelectSingleNode("set").InnerText,
																						Image = xmlNode8.SelectSingleNode("image").InnerText,
																						Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
																					});
																				}
																				catch (Exception ex8)
																				{
																					System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
																					return;
																				}
																				goto default;
																			default:
																				num13 = 2;
																				num14 = num13;
																				continue;
																			case 2:
																				if (enumerator.MoveNext())
																				{
																					xmlNode8 = (XmlNode)enumerator.Current;
																					num13 = 4;
																					num14 = num13;
																				}
																				else
																				{
																					num13 = 0;
																					num14 = num13;
																				}
																				continue;
																			case 0:
																				num13 = 1;
																				num14 = num13;
																				continue;
																			case 1:
																				break;
																			}
																			break;
																		}
																	}
																	finally
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 2:
																					if (disposable != null)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto end_IL_026c;
																				case 0:
																					disposable.Dispose();
																					num13 = 1;
																					num14 = num13;
																					continue;
																				case 1:
																					goto end_IL_026c;
																				}
																				goto case 0;
																				continue;
																				end_IL_026c:
																				break;
																			}
																			break;
																		case 0:
																			disposable = enumerator as IDisposable;
																			num13 = 2;
																			num14 = num13;
																			goto default;
																		}
																	}
																}
																catch
																{
																	bool flag = true;
																}
																num13 = 0;
																_ = num13;
																num13 = 1;
																if (num13 != 0)
																{
																}
																num13 = 0;
																num14 = num13;
																continue;
															case 1:
																try
																{
																	eval_b.eval_c5.Clear();
																	eval_b.eval_dm.Load(DirLocal + "\\medic.xml");
																	IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																	try
																	{
																		num13 = 3;
																		num14 = num13;
																		while (true)
																		{
																			switch (num14)
																			{
																			case 3:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			case 0:
																				try
																				{
																					eval_b.eval_c5.Add(new EShop_medic
																					{
																						Name = xmlNode4.SelectSingleNode("name").InnerText,
																						Price = xmlNode4.SelectSingleNode("price").InnerText,
																						Description = xmlNode4.SelectSingleNode("description").InnerText,
																						Set = xmlNode4.SelectSingleNode("set").InnerText,
																						Image = xmlNode4.SelectSingleNode("image").InnerText,
																						Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
																					});
																				}
																				catch (Exception ex4)
																				{
																					System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
																					return;
																				}
																				goto default;
																			default:
																				num13 = 4;
																				num14 = num13;
																				continue;
																			case 4:
																				if (!enumerator.MoveNext())
																				{
																					num13 = 2;
																					num14 = num13;
																				}
																				else
																				{
																					xmlNode4 = (XmlNode)enumerator.Current;
																					num13 = 0;
																					num14 = num13;
																				}
																				continue;
																			case 2:
																				num13 = 1;
																				num14 = num13;
																				continue;
																			case 1:
																				break;
																			}
																			break;
																		}
																	}
																	finally
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 2:
																					if (disposable != null)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto end_IL_04c7;
																				case 0:
																					disposable.Dispose();
																					num13 = 1;
																					num14 = num13;
																					continue;
																				case 1:
																					goto end_IL_04c7;
																				}
																				goto case 0;
																				continue;
																				end_IL_04c7:
																				break;
																			}
																			break;
																		case 0:
																			disposable = enumerator as IDisposable;
																			num13 = 2;
																			num14 = num13;
																			goto default;
																		}
																	}
																}
																catch
																{
																	bool flag = true;
																}
																eval_b.LoadShop();
																num13 = 6;
																num14 = num13;
																continue;
															case 6:
																return;
															case 7:
																try
																{
																	eval_b.eval_cy.Clear();
																	eval_b.eval_dm.Load(DirLocal + "\\loot.xml");
																	IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																	try
																	{
																		num13 = 3;
																		num14 = num13;
																		while (true)
																		{
																			switch (num14)
																			{
																			case 3:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			default:
																				num13 = 2;
																				num14 = num13;
																				continue;
																			case 2:
																				if (enumerator.MoveNext())
																				{
																					xmlNode6 = (XmlNode)enumerator.Current;
																					num13 = 4;
																					num14 = num13;
																				}
																				else
																				{
																					num13 = 0;
																					num14 = num13;
																				}
																				continue;
																			case 4:
																				try
																				{
																					eval_b.eval_cy.Add(new EShop_loot
																					{
																						Name = xmlNode6.SelectSingleNode("name").InnerText,
																						Price = xmlNode6.SelectSingleNode("price").InnerText,
																						Description = xmlNode6.SelectSingleNode("description").InnerText,
																						Set = xmlNode6.SelectSingleNode("set").InnerText,
																						Image = xmlNode6.SelectSingleNode("image").InnerText,
																						Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
																					});
																				}
																				catch (Exception ex6)
																				{
																					System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
																					return;
																				}
																				goto default;
																			case 0:
																				num13 = 1;
																				num14 = num13;
																				continue;
																			case 1:
																				break;
																			}
																			break;
																		}
																	}
																	finally
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 2:
																					if (disposable != null)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto end_IL_0736;
																				case 0:
																					disposable.Dispose();
																					num13 = 1;
																					num14 = num13;
																					continue;
																				case 1:
																					goto end_IL_0736;
																				}
																				goto case 0;
																				continue;
																				end_IL_0736:
																				break;
																			}
																			break;
																		case 0:
																			disposable = enumerator as IDisposable;
																			num13 = 2;
																			num14 = num13;
																			goto default;
																		}
																	}
																}
																catch
																{
																	bool flag = true;
																}
																num13 = 8;
																num14 = num13;
																continue;
															case 3:
																try
																{
																	eval_b.eval_c0.Clear();
																	eval_b.eval_dm.Load(DirLocal + "\\set.xml");
																	IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																	try
																	{
																		num13 = 3;
																		num14 = num13;
																		while (true)
																		{
																			switch (num14)
																			{
																			case 3:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			default:
																				num13 = 4;
																				num14 = num13;
																				continue;
																			case 4:
																				if (!enumerator.MoveNext())
																				{
																					num13 = 2;
																					num14 = num13;
																				}
																				else
																				{
																					xmlNode2 = (XmlNode)enumerator.Current;
																					num13 = 0;
																					num14 = num13;
																				}
																				continue;
																			case 0:
																				try
																				{
																					eval_b.eval_c0.Add(new EShop_set
																					{
																						Name = xmlNode2.SelectSingleNode("name").InnerText,
																						Price = xmlNode2.SelectSingleNode("price").InnerText,
																						Description = xmlNode2.SelectSingleNode("description").InnerText,
																						Set = xmlNode2.SelectSingleNode("set").InnerText,
																						Image = xmlNode2.SelectSingleNode("image").InnerText,
																						Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
																					});
																				}
																				catch (Exception ex2)
																				{
																					System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
																					return;
																				}
																				goto default;
																			case 2:
																				num13 = 1;
																				num14 = num13;
																				continue;
																			case 1:
																				break;
																			}
																			break;
																		}
																	}
																	finally
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 2:
																					if (disposable != null)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto end_IL_0971;
																				case 0:
																					disposable.Dispose();
																					num13 = 1;
																					num14 = num13;
																					continue;
																				case 1:
																					goto end_IL_0971;
																				}
																				goto case 0;
																				continue;
																				end_IL_0971:
																				break;
																			}
																			break;
																		case 0:
																			disposable = enumerator as IDisposable;
																			num13 = 2;
																			num14 = num13;
																			goto default;
																		}
																	}
																}
																catch
																{
																	bool flag = true;
																}
																num13 = 4;
																num14 = num13;
																continue;
															case 8:
																try
																{
																	while (true)
																	{
																		eval_b.eval_cz.Clear();
																		eval_b.eval_dm.Load(DirLocal + "\\weapon.xml");
																		IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																		try
																		{
																			num13 = 4;
																			num14 = num13;
																			while (true)
																			{
																				switch (num14)
																				{
																				case 4:
																					switch (0)
																					{
																					default:
																						continue;
																					case 0:
																						break;
																					}
																					goto default;
																				case 3:
																					try
																					{
																						eval_b.eval_cz.Add(new EShop_weapon
																						{
																							Name = xmlNode7.SelectSingleNode("name").InnerText,
																							Price = xmlNode7.SelectSingleNode("price").InnerText,
																							Description = xmlNode7.SelectSingleNode("description").InnerText,
																							Set = xmlNode7.SelectSingleNode("set").InnerText,
																							Image = xmlNode7.SelectSingleNode("image").InnerText,
																							Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
																						});
																					}
																					catch (Exception ex7)
																					{
																						System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
																						return;
																					}
																					goto default;
																				default:
																					num13 = 0;
																					num14 = num13;
																					continue;
																				case 0:
																					if (enumerator.MoveNext())
																					{
																						xmlNode7 = (XmlNode)enumerator.Current;
																						num13 = 3;
																						num14 = num13;
																					}
																					else
																					{
																						num13 = 1;
																						num14 = num13;
																					}
																					continue;
																				case 1:
																					num13 = 2;
																					num14 = num13;
																					continue;
																				case 2:
																					break;
																				}
																				break;
																			}
																		}
																		finally
																		{
																			switch (0)
																			{
																			default:
																				while (true)
																				{
																					switch (num14)
																					{
																					case 2:
																						if (disposable != null)
																						{
																							num13 = 0;
																							num14 = num13;
																							continue;
																						}
																						goto end_IL_0bb0;
																					case 0:
																						disposable.Dispose();
																						num13 = 1;
																						num14 = num13;
																						continue;
																					case 1:
																						goto end_IL_0bb0;
																					}
																					goto case 0;
																					continue;
																					end_IL_0bb0:
																					break;
																				}
																				break;
																			case 0:
																				disposable = enumerator as IDisposable;
																				num13 = 2;
																				num14 = num13;
																				goto default;
																			}
																		}
																		num13 = -22575;
																		short num15 = num13;
																		num13 = -22575;
																		switch (num15 == num13)
																		{
																		case false:
																		case true:
																			break;
																		default:
																			num13 = 0;
																			if (num13 == 0)
																			{
																			}
																			goto end_IL_09eb;
																		}
																		continue;
																		end_IL_09eb:
																		break;
																	}
																}
																catch
																{
																	bool flag = true;
																}
																num13 = 3;
																num14 = num13;
																continue;
															case 0:
																try
																{
																	eval_b.eval_c3.Clear();
																	eval_b.eval_dm.Load(DirLocal + "\\mask.xml");
																	IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																	try
																	{
																		num13 = 4;
																		num14 = num13;
																		while (true)
																		{
																			switch (num14)
																			{
																			case 4:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			case 1:
																				try
																				{
																					eval_b.eval_c3.Add(new EShop_mask
																					{
																						Name = xmlNode5.SelectSingleNode("name").InnerText,
																						Price = xmlNode5.SelectSingleNode("price").InnerText,
																						Description = xmlNode5.SelectSingleNode("description").InnerText,
																						Set = xmlNode5.SelectSingleNode("set").InnerText,
																						Image = xmlNode5.SelectSingleNode("image").InnerText,
																						Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
																					});
																				}
																				catch (Exception ex5)
																				{
																					System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
																					return;
																				}
																				goto default;
																			default:
																				num13 = 3;
																				num14 = num13;
																				continue;
																			case 3:
																				if (!enumerator.MoveNext())
																				{
																					num13 = 0;
																					num14 = num13;
																				}
																				else
																				{
																					xmlNode5 = (XmlNode)enumerator.Current;
																					num13 = 1;
																					num14 = num13;
																				}
																				continue;
																			case 0:
																				num13 = 2;
																				num14 = num13;
																				continue;
																			case 2:
																				break;
																			}
																			break;
																		}
																	}
																	finally
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 2:
																					if (disposable != null)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto end_IL_0e39;
																				case 0:
																					disposable.Dispose();
																					num13 = 1;
																					num14 = num13;
																					continue;
																				case 1:
																					goto end_IL_0e39;
																				}
																				goto case 0;
																				continue;
																				end_IL_0e39:
																				break;
																			}
																			break;
																		case 0:
																			disposable = enumerator as IDisposable;
																			num13 = 2;
																			num14 = num13;
																			goto default;
																		}
																	}
																}
																catch
																{
																	bool flag = true;
																}
																num13 = 5;
																num14 = num13;
																continue;
															case 4:
																try
																{
																	eval_b.eval_c1.Clear();
																	eval_b.eval_dm.Load(DirLocal + "\\car.xml");
																	IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																	try
																	{
																		num13 = 4;
																		num14 = num13;
																		while (true)
																		{
																			switch (num14)
																			{
																			case 4:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			default:
																				num13 = 3;
																				num14 = num13;
																				continue;
																			case 3:
																				if (!enumerator.MoveNext())
																				{
																					num13 = 0;
																					num14 = num13;
																				}
																				else
																				{
																					xmlNode3 = (XmlNode)enumerator.Current;
																					num13 = 1;
																					num14 = num13;
																				}
																				continue;
																			case 1:
																				try
																				{
																					eval_b.eval_c1.Add(new EShop_car
																					{
																						Name = xmlNode3.SelectSingleNode("name").InnerText,
																						Description = xmlNode3.SelectSingleNode("description").InnerText,
																						Price = xmlNode3.SelectSingleNode("price").InnerText,
																						Set = xmlNode3.SelectSingleNode("set").InnerText,
																						Image = xmlNode3.SelectSingleNode("image").InnerText,
																						Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
																					});
																				}
																				catch (Exception ex3)
																				{
																					System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
																					return;
																				}
																				goto default;
																			case 0:
																				num13 = 2;
																				num14 = num13;
																				continue;
																			case 2:
																				break;
																			}
																			break;
																		}
																	}
																	finally
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 2:
																					if (disposable != null)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto end_IL_1075;
																				case 0:
																					disposable.Dispose();
																					num13 = 1;
																					num14 = num13;
																					continue;
																				case 1:
																					goto end_IL_1075;
																				}
																				goto case 0;
																				continue;
																				end_IL_1075:
																				break;
																			}
																			break;
																		case 0:
																			disposable = enumerator as IDisposable;
																			num13 = 2;
																			num14 = num13;
																			goto default;
																		}
																	}
																}
																catch
																{
																	bool flag = true;
																}
																num13 = 2;
																num14 = num13;
																continue;
															case 5:
																try
																{
																	eval_b.eval_c4.Clear();
																	eval_b.eval_dm.Load(DirLocal + "\\base.xml");
																	IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
																	try
																	{
																		num13 = 4;
																		num14 = num13;
																		while (true)
																		{
																			switch (num14)
																			{
																			case 4:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			case 3:
																				try
																				{
																					eval_b.eval_c4.Add(new EShop_base
																					{
																						Name = xmlNode.SelectSingleNode("name").InnerText,
																						Price = xmlNode.SelectSingleNode("price").InnerText,
																						Description = xmlNode.SelectSingleNode("description").InnerText,
																						Set = xmlNode.SelectSingleNode("set").InnerText,
																						Image = xmlNode.SelectSingleNode("image").InnerText,
																						Cmd = xmlNode.SelectSingleNode("cmd").InnerText
																					});
																				}
																				catch (Exception ex)
																				{
																					System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
																					return;
																				}
																				goto default;
																			default:
																				num13 = 0;
																				num14 = num13;
																				continue;
																			case 0:
																				if (enumerator.MoveNext())
																				{
																					xmlNode = (XmlNode)enumerator.Current;
																					num13 = 3;
																					num14 = num13;
																				}
																				else
																				{
																					num13 = 1;
																					num14 = num13;
																				}
																				continue;
																			case 1:
																				num13 = 2;
																				num14 = num13;
																				continue;
																			case 2:
																				break;
																			}
																			break;
																		}
																	}
																	finally
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 2:
																					if (disposable != null)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto end_IL_1335;
																				case 0:
																					disposable.Dispose();
																					num13 = 1;
																					num14 = num13;
																					continue;
																				case 1:
																					goto end_IL_1335;
																				}
																				goto case 0;
																				continue;
																				end_IL_1335:
																				break;
																			}
																			break;
																		case 0:
																			disposable = enumerator as IDisposable;
																			num13 = 2;
																			num14 = num13;
																			goto default;
																		}
																	}
																}
																catch
																{
																	bool flag = true;
																}
																num13 = 1;
																num14 = num13;
																continue;
															}
															break;
														}
														goto case 0;
													}
													case 0:
													{
														bool flag = false;
														num13 = 7;
														num14 = num13;
														goto default;
													}
													}
												}
											};
										}
										finally
										{
											num10 = 0;
											int num12 = num10;
											while (true)
											{
												switch (num12)
												{
												case 0:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (webClient4 != null)
													{
														num10 = 1;
														num12 = num10;
														continue;
													}
													break;
												case 1:
													((IDisposable)webClient4).Dispose();
													num10 = 2;
													num12 = num10;
													continue;
												case 2:
													break;
												}
												break;
											}
										}
									};
								}
								finally
								{
									num7 = 0;
									int num9 = num7;
									while (true)
									{
										switch (num9)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (webClient3 != null)
											{
												num7 = 1;
												num9 = num7;
												continue;
											}
											break;
										case 1:
											((IDisposable)webClient3).Dispose();
											num7 = 2;
											num9 = num7;
											continue;
										case 2:
											break;
										}
										break;
									}
								}
							};
						}
						finally
						{
							num4 = 0;
							int num6 = num4;
							while (true)
							{
								switch (num6)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (webClient2 != null)
									{
										num4 = 1;
										num6 = num4;
										continue;
									}
									break;
								case 1:
									((IDisposable)webClient2).Dispose();
									num4 = 2;
									num6 = num4;
									continue;
								case 2:
									break;
								}
								break;
							}
						}
					};
				}
				finally
				{
					num = 0;
					int num3 = num;
					while (true)
					{
						switch (num3)
						{
						case 0:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (webClient != null)
							{
								num = 1;
								num3 = num;
								continue;
							}
							break;
						case 1:
							((IDisposable)webClient).Dispose();
							num = 2;
							num3 = num;
							continue;
						case 2:
							break;
						}
						break;
					}
				}
				break;
			}
			case false:
			case true:
				break;
			}
			num = 1;
			if (num == 0)
			{
			}
		}

		internal void eval_d(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = -2379;
			short num2 = num;
			num = -2379;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			case false:
			case true:
				return;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			WebClient webClient = new WebClient();
			try
			{
				a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/mask/" + URL_MASK);
				webClient.DownloadFileAsync(a, DirLocal + "\\mask.xml");
				webClient.DownloadFileCompleted += delegate
				{
					short num4 = -26143;
					short num5 = num4;
					num4 = -26143;
					switch (num5 == num4)
					{
					default:
						num4 = 0;
						_ = num4;
						break;
					case true:
						break;
					case false:
					case true:
						return;
					}
					num4 = 0;
					if (num4 != 0)
					{
					}
					WebClient webClient2 = new WebClient();
					try
					{
						num4 = 1;
						if (num4 != 0)
						{
						}
						a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/base/" + URL_BASE);
						webClient2.DownloadFileAsync(a, DirLocal + "\\base.xml");
						webClient2.DownloadFileCompleted += delegate
						{
							short num7 = -26314;
							short num8 = num7;
							num7 = -26314;
							switch (num8 == num7)
							{
							default:
								num7 = 0;
								_ = num7;
								break;
							case true:
								break;
							case false:
							case true:
								return;
							}
							num7 = 1;
							if (num7 != 0)
							{
							}
							num7 = 0;
							if (num7 != 0)
							{
							}
							WebClient webClient3 = new WebClient();
							try
							{
								a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/medic/" + URL_MEDIC);
								webClient3.DownloadFileAsync(a, DirLocal + "\\medic.xml");
								webClient3.DownloadFileCompleted += delegate
								{
									short num10 = 0;
									int num11 = num10;
									switch (num11)
									{
									default:
										switch (0)
										{
										default:
										{
											XmlNode xmlNode8 = default(XmlNode);
											IDisposable disposable = default(IDisposable);
											XmlNode xmlNode4 = default(XmlNode);
											XmlNode xmlNode6 = default(XmlNode);
											XmlNode xmlNode2 = default(XmlNode);
											XmlNode xmlNode7 = default(XmlNode);
											XmlNode xmlNode5 = default(XmlNode);
											XmlNode xmlNode3 = default(XmlNode);
											XmlNode xmlNode = default(XmlNode);
											while (true)
											{
												switch (num11)
												{
												case 2:
													try
													{
														eval_b.eval_c2.Clear();
														eval_b.eval_dm.Load(DirLocal + "\\inventory.xml");
														IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
														try
														{
															num10 = 3;
															num11 = num10;
															while (true)
															{
																switch (num11)
																{
																case 3:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																case 4:
																	try
																	{
																		eval_b.eval_c2.Add(new EShop_inventory
																		{
																			Name = xmlNode8.SelectSingleNode("name").InnerText,
																			Price = xmlNode8.SelectSingleNode("price").InnerText,
																			Set = xmlNode8.SelectSingleNode("set").InnerText,
																			Image = xmlNode8.SelectSingleNode("image").InnerText,
																			Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
																		});
																	}
																	catch (Exception ex8)
																	{
																		System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
																		return;
																	}
																	goto default;
																default:
																	num10 = 2;
																	num11 = num10;
																	continue;
																case 2:
																	if (enumerator.MoveNext())
																	{
																		xmlNode8 = (XmlNode)enumerator.Current;
																		num10 = 4;
																		num11 = num10;
																	}
																	else
																	{
																		num10 = 0;
																		num11 = num10;
																	}
																	continue;
																case 0:
																	num10 = 1;
																	num11 = num10;
																	continue;
																case 1:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num11)
																	{
																	case 2:
																		if (disposable != null)
																		{
																			num10 = 0;
																			num11 = num10;
																			continue;
																		}
																		goto end_IL_026c;
																	case 0:
																		disposable.Dispose();
																		num10 = 1;
																		num11 = num10;
																		continue;
																	case 1:
																		goto end_IL_026c;
																	}
																	goto case 0;
																	continue;
																	end_IL_026c:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num10 = 2;
																num11 = num10;
																goto default;
															}
														}
													}
													catch
													{
														bool flag = true;
													}
													num10 = 0;
													_ = num10;
													num10 = 1;
													if (num10 != 0)
													{
													}
													num10 = 0;
													num11 = num10;
													continue;
												case 1:
													try
													{
														eval_b.eval_c5.Clear();
														eval_b.eval_dm.Load(DirLocal + "\\medic.xml");
														IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
														try
														{
															num10 = 3;
															num11 = num10;
															while (true)
															{
																switch (num11)
																{
																case 3:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																case 0:
																	try
																	{
																		eval_b.eval_c5.Add(new EShop_medic
																		{
																			Name = xmlNode4.SelectSingleNode("name").InnerText,
																			Price = xmlNode4.SelectSingleNode("price").InnerText,
																			Description = xmlNode4.SelectSingleNode("description").InnerText,
																			Set = xmlNode4.SelectSingleNode("set").InnerText,
																			Image = xmlNode4.SelectSingleNode("image").InnerText,
																			Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
																		});
																	}
																	catch (Exception ex4)
																	{
																		System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
																		return;
																	}
																	goto default;
																default:
																	num10 = 4;
																	num11 = num10;
																	continue;
																case 4:
																	if (!enumerator.MoveNext())
																	{
																		num10 = 2;
																		num11 = num10;
																	}
																	else
																	{
																		xmlNode4 = (XmlNode)enumerator.Current;
																		num10 = 0;
																		num11 = num10;
																	}
																	continue;
																case 2:
																	num10 = 1;
																	num11 = num10;
																	continue;
																case 1:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num11)
																	{
																	case 2:
																		if (disposable != null)
																		{
																			num10 = 0;
																			num11 = num10;
																			continue;
																		}
																		goto end_IL_04c7;
																	case 0:
																		disposable.Dispose();
																		num10 = 1;
																		num11 = num10;
																		continue;
																	case 1:
																		goto end_IL_04c7;
																	}
																	goto case 0;
																	continue;
																	end_IL_04c7:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num10 = 2;
																num11 = num10;
																goto default;
															}
														}
													}
													catch
													{
														bool flag = true;
													}
													eval_b.LoadShop();
													num10 = 6;
													num11 = num10;
													continue;
												case 6:
													return;
												case 7:
													try
													{
														eval_b.eval_cy.Clear();
														eval_b.eval_dm.Load(DirLocal + "\\loot.xml");
														IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
														try
														{
															num10 = 3;
															num11 = num10;
															while (true)
															{
																switch (num11)
																{
																case 3:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num10 = 2;
																	num11 = num10;
																	continue;
																case 2:
																	if (enumerator.MoveNext())
																	{
																		xmlNode6 = (XmlNode)enumerator.Current;
																		num10 = 4;
																		num11 = num10;
																	}
																	else
																	{
																		num10 = 0;
																		num11 = num10;
																	}
																	continue;
																case 4:
																	try
																	{
																		eval_b.eval_cy.Add(new EShop_loot
																		{
																			Name = xmlNode6.SelectSingleNode("name").InnerText,
																			Price = xmlNode6.SelectSingleNode("price").InnerText,
																			Description = xmlNode6.SelectSingleNode("description").InnerText,
																			Set = xmlNode6.SelectSingleNode("set").InnerText,
																			Image = xmlNode6.SelectSingleNode("image").InnerText,
																			Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
																		});
																	}
																	catch (Exception ex6)
																	{
																		System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
																		return;
																	}
																	goto default;
																case 0:
																	num10 = 1;
																	num11 = num10;
																	continue;
																case 1:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num11)
																	{
																	case 2:
																		if (disposable != null)
																		{
																			num10 = 0;
																			num11 = num10;
																			continue;
																		}
																		goto end_IL_0736;
																	case 0:
																		disposable.Dispose();
																		num10 = 1;
																		num11 = num10;
																		continue;
																	case 1:
																		goto end_IL_0736;
																	}
																	goto case 0;
																	continue;
																	end_IL_0736:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num10 = 2;
																num11 = num10;
																goto default;
															}
														}
													}
													catch
													{
														bool flag = true;
													}
													num10 = 8;
													num11 = num10;
													continue;
												case 3:
													try
													{
														eval_b.eval_c0.Clear();
														eval_b.eval_dm.Load(DirLocal + "\\set.xml");
														IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
														try
														{
															num10 = 3;
															num11 = num10;
															while (true)
															{
																switch (num11)
																{
																case 3:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num10 = 4;
																	num11 = num10;
																	continue;
																case 4:
																	if (!enumerator.MoveNext())
																	{
																		num10 = 2;
																		num11 = num10;
																	}
																	else
																	{
																		xmlNode2 = (XmlNode)enumerator.Current;
																		num10 = 0;
																		num11 = num10;
																	}
																	continue;
																case 0:
																	try
																	{
																		eval_b.eval_c0.Add(new EShop_set
																		{
																			Name = xmlNode2.SelectSingleNode("name").InnerText,
																			Price = xmlNode2.SelectSingleNode("price").InnerText,
																			Description = xmlNode2.SelectSingleNode("description").InnerText,
																			Set = xmlNode2.SelectSingleNode("set").InnerText,
																			Image = xmlNode2.SelectSingleNode("image").InnerText,
																			Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
																		});
																	}
																	catch (Exception ex2)
																	{
																		System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
																		return;
																	}
																	goto default;
																case 2:
																	num10 = 1;
																	num11 = num10;
																	continue;
																case 1:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num11)
																	{
																	case 2:
																		if (disposable != null)
																		{
																			num10 = 0;
																			num11 = num10;
																			continue;
																		}
																		goto end_IL_0971;
																	case 0:
																		disposable.Dispose();
																		num10 = 1;
																		num11 = num10;
																		continue;
																	case 1:
																		goto end_IL_0971;
																	}
																	goto case 0;
																	continue;
																	end_IL_0971:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num10 = 2;
																num11 = num10;
																goto default;
															}
														}
													}
													catch
													{
														bool flag = true;
													}
													num10 = 4;
													num11 = num10;
													continue;
												case 8:
													try
													{
														while (true)
														{
															eval_b.eval_cz.Clear();
															eval_b.eval_dm.Load(DirLocal + "\\weapon.xml");
															IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
															try
															{
																num10 = 4;
																num11 = num10;
																while (true)
																{
																	switch (num11)
																	{
																	case 4:
																		switch (0)
																		{
																		default:
																			continue;
																		case 0:
																			break;
																		}
																		goto default;
																	case 3:
																		try
																		{
																			eval_b.eval_cz.Add(new EShop_weapon
																			{
																				Name = xmlNode7.SelectSingleNode("name").InnerText,
																				Price = xmlNode7.SelectSingleNode("price").InnerText,
																				Description = xmlNode7.SelectSingleNode("description").InnerText,
																				Set = xmlNode7.SelectSingleNode("set").InnerText,
																				Image = xmlNode7.SelectSingleNode("image").InnerText,
																				Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
																			});
																		}
																		catch (Exception ex7)
																		{
																			System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
																			return;
																		}
																		goto default;
																	default:
																		num10 = 0;
																		num11 = num10;
																		continue;
																	case 0:
																		if (enumerator.MoveNext())
																		{
																			xmlNode7 = (XmlNode)enumerator.Current;
																			num10 = 3;
																			num11 = num10;
																		}
																		else
																		{
																			num10 = 1;
																			num11 = num10;
																		}
																		continue;
																	case 1:
																		num10 = 2;
																		num11 = num10;
																		continue;
																	case 2:
																		break;
																	}
																	break;
																}
															}
															finally
															{
																switch (0)
																{
																default:
																	while (true)
																	{
																		switch (num11)
																		{
																		case 2:
																			if (disposable != null)
																			{
																				num10 = 0;
																				num11 = num10;
																				continue;
																			}
																			goto end_IL_0bb0;
																		case 0:
																			disposable.Dispose();
																			num10 = 1;
																			num11 = num10;
																			continue;
																		case 1:
																			goto end_IL_0bb0;
																		}
																		goto case 0;
																		continue;
																		end_IL_0bb0:
																		break;
																	}
																	break;
																case 0:
																	disposable = enumerator as IDisposable;
																	num10 = 2;
																	num11 = num10;
																	goto default;
																}
															}
															num10 = -22575;
															short num12 = num10;
															num10 = -22575;
															switch (num12 == num10)
															{
															case false:
															case true:
																break;
															default:
																num10 = 0;
																if (num10 == 0)
																{
																}
																goto end_IL_09eb;
															}
															continue;
															end_IL_09eb:
															break;
														}
													}
													catch
													{
														bool flag = true;
													}
													num10 = 3;
													num11 = num10;
													continue;
												case 0:
													try
													{
														eval_b.eval_c3.Clear();
														eval_b.eval_dm.Load(DirLocal + "\\mask.xml");
														IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
														try
														{
															num10 = 4;
															num11 = num10;
															while (true)
															{
																switch (num11)
																{
																case 4:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																case 1:
																	try
																	{
																		eval_b.eval_c3.Add(new EShop_mask
																		{
																			Name = xmlNode5.SelectSingleNode("name").InnerText,
																			Price = xmlNode5.SelectSingleNode("price").InnerText,
																			Description = xmlNode5.SelectSingleNode("description").InnerText,
																			Set = xmlNode5.SelectSingleNode("set").InnerText,
																			Image = xmlNode5.SelectSingleNode("image").InnerText,
																			Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
																		});
																	}
																	catch (Exception ex5)
																	{
																		System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
																		return;
																	}
																	goto default;
																default:
																	num10 = 3;
																	num11 = num10;
																	continue;
																case 3:
																	if (!enumerator.MoveNext())
																	{
																		num10 = 0;
																		num11 = num10;
																	}
																	else
																	{
																		xmlNode5 = (XmlNode)enumerator.Current;
																		num10 = 1;
																		num11 = num10;
																	}
																	continue;
																case 0:
																	num10 = 2;
																	num11 = num10;
																	continue;
																case 2:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num11)
																	{
																	case 2:
																		if (disposable != null)
																		{
																			num10 = 0;
																			num11 = num10;
																			continue;
																		}
																		goto end_IL_0e39;
																	case 0:
																		disposable.Dispose();
																		num10 = 1;
																		num11 = num10;
																		continue;
																	case 1:
																		goto end_IL_0e39;
																	}
																	goto case 0;
																	continue;
																	end_IL_0e39:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num10 = 2;
																num11 = num10;
																goto default;
															}
														}
													}
													catch
													{
														bool flag = true;
													}
													num10 = 5;
													num11 = num10;
													continue;
												case 4:
													try
													{
														eval_b.eval_c1.Clear();
														eval_b.eval_dm.Load(DirLocal + "\\car.xml");
														IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
														try
														{
															num10 = 4;
															num11 = num10;
															while (true)
															{
																switch (num11)
																{
																case 4:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num10 = 3;
																	num11 = num10;
																	continue;
																case 3:
																	if (!enumerator.MoveNext())
																	{
																		num10 = 0;
																		num11 = num10;
																	}
																	else
																	{
																		xmlNode3 = (XmlNode)enumerator.Current;
																		num10 = 1;
																		num11 = num10;
																	}
																	continue;
																case 1:
																	try
																	{
																		eval_b.eval_c1.Add(new EShop_car
																		{
																			Name = xmlNode3.SelectSingleNode("name").InnerText,
																			Description = xmlNode3.SelectSingleNode("description").InnerText,
																			Price = xmlNode3.SelectSingleNode("price").InnerText,
																			Set = xmlNode3.SelectSingleNode("set").InnerText,
																			Image = xmlNode3.SelectSingleNode("image").InnerText,
																			Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
																		});
																	}
																	catch (Exception ex3)
																	{
																		System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
																		return;
																	}
																	goto default;
																case 0:
																	num10 = 2;
																	num11 = num10;
																	continue;
																case 2:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num11)
																	{
																	case 2:
																		if (disposable != null)
																		{
																			num10 = 0;
																			num11 = num10;
																			continue;
																		}
																		goto end_IL_1075;
																	case 0:
																		disposable.Dispose();
																		num10 = 1;
																		num11 = num10;
																		continue;
																	case 1:
																		goto end_IL_1075;
																	}
																	goto case 0;
																	continue;
																	end_IL_1075:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num10 = 2;
																num11 = num10;
																goto default;
															}
														}
													}
													catch
													{
														bool flag = true;
													}
													num10 = 2;
													num11 = num10;
													continue;
												case 5:
													try
													{
														eval_b.eval_c4.Clear();
														eval_b.eval_dm.Load(DirLocal + "\\base.xml");
														IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
														try
														{
															num10 = 4;
															num11 = num10;
															while (true)
															{
																switch (num11)
																{
																case 4:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																case 3:
																	try
																	{
																		eval_b.eval_c4.Add(new EShop_base
																		{
																			Name = xmlNode.SelectSingleNode("name").InnerText,
																			Price = xmlNode.SelectSingleNode("price").InnerText,
																			Description = xmlNode.SelectSingleNode("description").InnerText,
																			Set = xmlNode.SelectSingleNode("set").InnerText,
																			Image = xmlNode.SelectSingleNode("image").InnerText,
																			Cmd = xmlNode.SelectSingleNode("cmd").InnerText
																		});
																	}
																	catch (Exception ex)
																	{
																		System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
																		return;
																	}
																	goto default;
																default:
																	num10 = 0;
																	num11 = num10;
																	continue;
																case 0:
																	if (enumerator.MoveNext())
																	{
																		xmlNode = (XmlNode)enumerator.Current;
																		num10 = 3;
																		num11 = num10;
																	}
																	else
																	{
																		num10 = 1;
																		num11 = num10;
																	}
																	continue;
																case 1:
																	num10 = 2;
																	num11 = num10;
																	continue;
																case 2:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num11)
																	{
																	case 2:
																		if (disposable != null)
																		{
																			num10 = 0;
																			num11 = num10;
																			continue;
																		}
																		goto end_IL_1335;
																	case 0:
																		disposable.Dispose();
																		num10 = 1;
																		num11 = num10;
																		continue;
																	case 1:
																		goto end_IL_1335;
																	}
																	goto case 0;
																	continue;
																	end_IL_1335:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num10 = 2;
																num11 = num10;
																goto default;
															}
														}
													}
													catch
													{
														bool flag = true;
													}
													num10 = 1;
													num11 = num10;
													continue;
												}
												break;
											}
											goto case 0;
										}
										case 0:
										{
											bool flag = false;
											num10 = 7;
											num11 = num10;
											goto default;
										}
										}
									}
								};
							}
							finally
							{
								num7 = 0;
								int num9 = num7;
								while (true)
								{
									switch (num9)
									{
									case 0:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (webClient3 != null)
										{
											num7 = 1;
											num9 = num7;
											continue;
										}
										break;
									case 1:
										((IDisposable)webClient3).Dispose();
										num7 = 2;
										num9 = num7;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
						};
					}
					finally
					{
						num4 = 0;
						int num6 = num4;
						while (true)
						{
							switch (num6)
							{
							case 0:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (webClient2 != null)
								{
									num4 = 1;
									num6 = num4;
									continue;
								}
								break;
							case 1:
								((IDisposable)webClient2).Dispose();
								num4 = 2;
								num6 = num4;
								continue;
							case 2:
								break;
							}
							break;
						}
					}
				};
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 1;
							num3 = num;
							continue;
						}
						break;
					case 1:
						((IDisposable)webClient).Dispose();
						num = 2;
						num3 = num;
						continue;
					case 2:
						break;
					}
					break;
				}
			}
		}

		internal void eval_c(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = -26143;
			short num2 = num;
			num = -26143;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			case false:
			case true:
				return;
			}
			num = 0;
			if (num != 0)
			{
			}
			WebClient webClient = new WebClient();
			try
			{
				num = 1;
				if (num != 0)
				{
				}
				a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/base/" + URL_BASE);
				webClient.DownloadFileAsync(a, DirLocal + "\\base.xml");
				webClient.DownloadFileCompleted += delegate
				{
					short num4 = -26314;
					short num5 = num4;
					num4 = -26314;
					switch (num5 == num4)
					{
					default:
						num4 = 0;
						_ = num4;
						break;
					case true:
						break;
					case false:
					case true:
						return;
					}
					num4 = 1;
					if (num4 != 0)
					{
					}
					num4 = 0;
					if (num4 != 0)
					{
					}
					WebClient webClient2 = new WebClient();
					try
					{
						a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/medic/" + URL_MEDIC);
						webClient2.DownloadFileAsync(a, DirLocal + "\\medic.xml");
						webClient2.DownloadFileCompleted += delegate
						{
							short num7 = 0;
							int num8 = num7;
							switch (num8)
							{
							default:
								switch (0)
								{
								default:
								{
									XmlNode xmlNode8 = default(XmlNode);
									IDisposable disposable = default(IDisposable);
									XmlNode xmlNode4 = default(XmlNode);
									XmlNode xmlNode6 = default(XmlNode);
									XmlNode xmlNode2 = default(XmlNode);
									XmlNode xmlNode7 = default(XmlNode);
									XmlNode xmlNode5 = default(XmlNode);
									XmlNode xmlNode3 = default(XmlNode);
									XmlNode xmlNode = default(XmlNode);
									while (true)
									{
										switch (num8)
										{
										case 2:
											try
											{
												eval_b.eval_c2.Clear();
												eval_b.eval_dm.Load(DirLocal + "\\inventory.xml");
												IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
												try
												{
													num7 = 3;
													num8 = num7;
													while (true)
													{
														switch (num8)
														{
														case 3:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														case 4:
															try
															{
																eval_b.eval_c2.Add(new EShop_inventory
																{
																	Name = xmlNode8.SelectSingleNode("name").InnerText,
																	Price = xmlNode8.SelectSingleNode("price").InnerText,
																	Set = xmlNode8.SelectSingleNode("set").InnerText,
																	Image = xmlNode8.SelectSingleNode("image").InnerText,
																	Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
																});
															}
															catch (Exception ex8)
															{
																System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
																return;
															}
															goto default;
														default:
															num7 = 2;
															num8 = num7;
															continue;
														case 2:
															if (enumerator.MoveNext())
															{
																xmlNode8 = (XmlNode)enumerator.Current;
																num7 = 4;
																num8 = num7;
															}
															else
															{
																num7 = 0;
																num8 = num7;
															}
															continue;
														case 0:
															num7 = 1;
															num8 = num7;
															continue;
														case 1:
															break;
														}
														break;
													}
												}
												finally
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num8)
															{
															case 2:
																if (disposable != null)
																{
																	num7 = 0;
																	num8 = num7;
																	continue;
																}
																goto end_IL_026c;
															case 0:
																disposable.Dispose();
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																goto end_IL_026c;
															}
															goto case 0;
															continue;
															end_IL_026c:
															break;
														}
														break;
													case 0:
														disposable = enumerator as IDisposable;
														num7 = 2;
														num8 = num7;
														goto default;
													}
												}
											}
											catch
											{
												bool flag = true;
											}
											num7 = 0;
											_ = num7;
											num7 = 1;
											if (num7 != 0)
											{
											}
											num7 = 0;
											num8 = num7;
											continue;
										case 1:
											try
											{
												eval_b.eval_c5.Clear();
												eval_b.eval_dm.Load(DirLocal + "\\medic.xml");
												IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
												try
												{
													num7 = 3;
													num8 = num7;
													while (true)
													{
														switch (num8)
														{
														case 3:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														case 0:
															try
															{
																eval_b.eval_c5.Add(new EShop_medic
																{
																	Name = xmlNode4.SelectSingleNode("name").InnerText,
																	Price = xmlNode4.SelectSingleNode("price").InnerText,
																	Description = xmlNode4.SelectSingleNode("description").InnerText,
																	Set = xmlNode4.SelectSingleNode("set").InnerText,
																	Image = xmlNode4.SelectSingleNode("image").InnerText,
																	Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
																});
															}
															catch (Exception ex4)
															{
																System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
																return;
															}
															goto default;
														default:
															num7 = 4;
															num8 = num7;
															continue;
														case 4:
															if (!enumerator.MoveNext())
															{
																num7 = 2;
																num8 = num7;
															}
															else
															{
																xmlNode4 = (XmlNode)enumerator.Current;
																num7 = 0;
																num8 = num7;
															}
															continue;
														case 2:
															num7 = 1;
															num8 = num7;
															continue;
														case 1:
															break;
														}
														break;
													}
												}
												finally
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num8)
															{
															case 2:
																if (disposable != null)
																{
																	num7 = 0;
																	num8 = num7;
																	continue;
																}
																goto end_IL_04c7;
															case 0:
																disposable.Dispose();
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																goto end_IL_04c7;
															}
															goto case 0;
															continue;
															end_IL_04c7:
															break;
														}
														break;
													case 0:
														disposable = enumerator as IDisposable;
														num7 = 2;
														num8 = num7;
														goto default;
													}
												}
											}
											catch
											{
												bool flag = true;
											}
											eval_b.LoadShop();
											num7 = 6;
											num8 = num7;
											continue;
										case 6:
											return;
										case 7:
											try
											{
												eval_b.eval_cy.Clear();
												eval_b.eval_dm.Load(DirLocal + "\\loot.xml");
												IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
												try
												{
													num7 = 3;
													num8 = num7;
													while (true)
													{
														switch (num8)
														{
														case 3:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															num7 = 2;
															num8 = num7;
															continue;
														case 2:
															if (enumerator.MoveNext())
															{
																xmlNode6 = (XmlNode)enumerator.Current;
																num7 = 4;
																num8 = num7;
															}
															else
															{
																num7 = 0;
																num8 = num7;
															}
															continue;
														case 4:
															try
															{
																eval_b.eval_cy.Add(new EShop_loot
																{
																	Name = xmlNode6.SelectSingleNode("name").InnerText,
																	Price = xmlNode6.SelectSingleNode("price").InnerText,
																	Description = xmlNode6.SelectSingleNode("description").InnerText,
																	Set = xmlNode6.SelectSingleNode("set").InnerText,
																	Image = xmlNode6.SelectSingleNode("image").InnerText,
																	Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
																});
															}
															catch (Exception ex6)
															{
																System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
																return;
															}
															goto default;
														case 0:
															num7 = 1;
															num8 = num7;
															continue;
														case 1:
															break;
														}
														break;
													}
												}
												finally
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num8)
															{
															case 2:
																if (disposable != null)
																{
																	num7 = 0;
																	num8 = num7;
																	continue;
																}
																goto end_IL_0736;
															case 0:
																disposable.Dispose();
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																goto end_IL_0736;
															}
															goto case 0;
															continue;
															end_IL_0736:
															break;
														}
														break;
													case 0:
														disposable = enumerator as IDisposable;
														num7 = 2;
														num8 = num7;
														goto default;
													}
												}
											}
											catch
											{
												bool flag = true;
											}
											num7 = 8;
											num8 = num7;
											continue;
										case 3:
											try
											{
												eval_b.eval_c0.Clear();
												eval_b.eval_dm.Load(DirLocal + "\\set.xml");
												IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
												try
												{
													num7 = 3;
													num8 = num7;
													while (true)
													{
														switch (num8)
														{
														case 3:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															num7 = 4;
															num8 = num7;
															continue;
														case 4:
															if (!enumerator.MoveNext())
															{
																num7 = 2;
																num8 = num7;
															}
															else
															{
																xmlNode2 = (XmlNode)enumerator.Current;
																num7 = 0;
																num8 = num7;
															}
															continue;
														case 0:
															try
															{
																eval_b.eval_c0.Add(new EShop_set
																{
																	Name = xmlNode2.SelectSingleNode("name").InnerText,
																	Price = xmlNode2.SelectSingleNode("price").InnerText,
																	Description = xmlNode2.SelectSingleNode("description").InnerText,
																	Set = xmlNode2.SelectSingleNode("set").InnerText,
																	Image = xmlNode2.SelectSingleNode("image").InnerText,
																	Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
																});
															}
															catch (Exception ex2)
															{
																System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
																return;
															}
															goto default;
														case 2:
															num7 = 1;
															num8 = num7;
															continue;
														case 1:
															break;
														}
														break;
													}
												}
												finally
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num8)
															{
															case 2:
																if (disposable != null)
																{
																	num7 = 0;
																	num8 = num7;
																	continue;
																}
																goto end_IL_0971;
															case 0:
																disposable.Dispose();
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																goto end_IL_0971;
															}
															goto case 0;
															continue;
															end_IL_0971:
															break;
														}
														break;
													case 0:
														disposable = enumerator as IDisposable;
														num7 = 2;
														num8 = num7;
														goto default;
													}
												}
											}
											catch
											{
												bool flag = true;
											}
											num7 = 4;
											num8 = num7;
											continue;
										case 8:
											try
											{
												while (true)
												{
													eval_b.eval_cz.Clear();
													eval_b.eval_dm.Load(DirLocal + "\\weapon.xml");
													IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
													try
													{
														num7 = 4;
														num8 = num7;
														while (true)
														{
															switch (num8)
															{
															case 4:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															case 3:
																try
																{
																	eval_b.eval_cz.Add(new EShop_weapon
																	{
																		Name = xmlNode7.SelectSingleNode("name").InnerText,
																		Price = xmlNode7.SelectSingleNode("price").InnerText,
																		Description = xmlNode7.SelectSingleNode("description").InnerText,
																		Set = xmlNode7.SelectSingleNode("set").InnerText,
																		Image = xmlNode7.SelectSingleNode("image").InnerText,
																		Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
																	});
																}
																catch (Exception ex7)
																{
																	System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
																	return;
																}
																goto default;
															default:
																num7 = 0;
																num8 = num7;
																continue;
															case 0:
																if (enumerator.MoveNext())
																{
																	xmlNode7 = (XmlNode)enumerator.Current;
																	num7 = 3;
																	num8 = num7;
																}
																else
																{
																	num7 = 1;
																	num8 = num7;
																}
																continue;
															case 1:
																num7 = 2;
																num8 = num7;
																continue;
															case 2:
																break;
															}
															break;
														}
													}
													finally
													{
														switch (0)
														{
														default:
															while (true)
															{
																switch (num8)
																{
																case 2:
																	if (disposable != null)
																	{
																		num7 = 0;
																		num8 = num7;
																		continue;
																	}
																	goto end_IL_0bb0;
																case 0:
																	disposable.Dispose();
																	num7 = 1;
																	num8 = num7;
																	continue;
																case 1:
																	goto end_IL_0bb0;
																}
																goto case 0;
																continue;
																end_IL_0bb0:
																break;
															}
															break;
														case 0:
															disposable = enumerator as IDisposable;
															num7 = 2;
															num8 = num7;
															goto default;
														}
													}
													num7 = -22575;
													short num9 = num7;
													num7 = -22575;
													switch (num9 == num7)
													{
													case false:
													case true:
														break;
													default:
														num7 = 0;
														if (num7 == 0)
														{
														}
														goto end_IL_09eb;
													}
													continue;
													end_IL_09eb:
													break;
												}
											}
											catch
											{
												bool flag = true;
											}
											num7 = 3;
											num8 = num7;
											continue;
										case 0:
											try
											{
												eval_b.eval_c3.Clear();
												eval_b.eval_dm.Load(DirLocal + "\\mask.xml");
												IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
												try
												{
													num7 = 4;
													num8 = num7;
													while (true)
													{
														switch (num8)
														{
														case 4:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														case 1:
															try
															{
																eval_b.eval_c3.Add(new EShop_mask
																{
																	Name = xmlNode5.SelectSingleNode("name").InnerText,
																	Price = xmlNode5.SelectSingleNode("price").InnerText,
																	Description = xmlNode5.SelectSingleNode("description").InnerText,
																	Set = xmlNode5.SelectSingleNode("set").InnerText,
																	Image = xmlNode5.SelectSingleNode("image").InnerText,
																	Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
																});
															}
															catch (Exception ex5)
															{
																System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
																return;
															}
															goto default;
														default:
															num7 = 3;
															num8 = num7;
															continue;
														case 3:
															if (!enumerator.MoveNext())
															{
																num7 = 0;
																num8 = num7;
															}
															else
															{
																xmlNode5 = (XmlNode)enumerator.Current;
																num7 = 1;
																num8 = num7;
															}
															continue;
														case 0:
															num7 = 2;
															num8 = num7;
															continue;
														case 2:
															break;
														}
														break;
													}
												}
												finally
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num8)
															{
															case 2:
																if (disposable != null)
																{
																	num7 = 0;
																	num8 = num7;
																	continue;
																}
																goto end_IL_0e39;
															case 0:
																disposable.Dispose();
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																goto end_IL_0e39;
															}
															goto case 0;
															continue;
															end_IL_0e39:
															break;
														}
														break;
													case 0:
														disposable = enumerator as IDisposable;
														num7 = 2;
														num8 = num7;
														goto default;
													}
												}
											}
											catch
											{
												bool flag = true;
											}
											num7 = 5;
											num8 = num7;
											continue;
										case 4:
											try
											{
												eval_b.eval_c1.Clear();
												eval_b.eval_dm.Load(DirLocal + "\\car.xml");
												IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
												try
												{
													num7 = 4;
													num8 = num7;
													while (true)
													{
														switch (num8)
														{
														case 4:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														default:
															num7 = 3;
															num8 = num7;
															continue;
														case 3:
															if (!enumerator.MoveNext())
															{
																num7 = 0;
																num8 = num7;
															}
															else
															{
																xmlNode3 = (XmlNode)enumerator.Current;
																num7 = 1;
																num8 = num7;
															}
															continue;
														case 1:
															try
															{
																eval_b.eval_c1.Add(new EShop_car
																{
																	Name = xmlNode3.SelectSingleNode("name").InnerText,
																	Description = xmlNode3.SelectSingleNode("description").InnerText,
																	Price = xmlNode3.SelectSingleNode("price").InnerText,
																	Set = xmlNode3.SelectSingleNode("set").InnerText,
																	Image = xmlNode3.SelectSingleNode("image").InnerText,
																	Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
																});
															}
															catch (Exception ex3)
															{
																System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
																return;
															}
															goto default;
														case 0:
															num7 = 2;
															num8 = num7;
															continue;
														case 2:
															break;
														}
														break;
													}
												}
												finally
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num8)
															{
															case 2:
																if (disposable != null)
																{
																	num7 = 0;
																	num8 = num7;
																	continue;
																}
																goto end_IL_1075;
															case 0:
																disposable.Dispose();
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																goto end_IL_1075;
															}
															goto case 0;
															continue;
															end_IL_1075:
															break;
														}
														break;
													case 0:
														disposable = enumerator as IDisposable;
														num7 = 2;
														num8 = num7;
														goto default;
													}
												}
											}
											catch
											{
												bool flag = true;
											}
											num7 = 2;
											num8 = num7;
											continue;
										case 5:
											try
											{
												eval_b.eval_c4.Clear();
												eval_b.eval_dm.Load(DirLocal + "\\base.xml");
												IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
												try
												{
													num7 = 4;
													num8 = num7;
													while (true)
													{
														switch (num8)
														{
														case 4:
															switch (0)
															{
															default:
																continue;
															case 0:
																break;
															}
															goto default;
														case 3:
															try
															{
																eval_b.eval_c4.Add(new EShop_base
																{
																	Name = xmlNode.SelectSingleNode("name").InnerText,
																	Price = xmlNode.SelectSingleNode("price").InnerText,
																	Description = xmlNode.SelectSingleNode("description").InnerText,
																	Set = xmlNode.SelectSingleNode("set").InnerText,
																	Image = xmlNode.SelectSingleNode("image").InnerText,
																	Cmd = xmlNode.SelectSingleNode("cmd").InnerText
																});
															}
															catch (Exception ex)
															{
																System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
																return;
															}
															goto default;
														default:
															num7 = 0;
															num8 = num7;
															continue;
														case 0:
															if (enumerator.MoveNext())
															{
																xmlNode = (XmlNode)enumerator.Current;
																num7 = 3;
																num8 = num7;
															}
															else
															{
																num7 = 1;
																num8 = num7;
															}
															continue;
														case 1:
															num7 = 2;
															num8 = num7;
															continue;
														case 2:
															break;
														}
														break;
													}
												}
												finally
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num8)
															{
															case 2:
																if (disposable != null)
																{
																	num7 = 0;
																	num8 = num7;
																	continue;
																}
																goto end_IL_1335;
															case 0:
																disposable.Dispose();
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																goto end_IL_1335;
															}
															goto case 0;
															continue;
															end_IL_1335:
															break;
														}
														break;
													case 0:
														disposable = enumerator as IDisposable;
														num7 = 2;
														num8 = num7;
														goto default;
													}
												}
											}
											catch
											{
												bool flag = true;
											}
											num7 = 1;
											num8 = num7;
											continue;
										}
										break;
									}
									goto case 0;
								}
								case 0:
								{
									bool flag = false;
									num7 = 7;
									num8 = num7;
									goto default;
								}
								}
							}
						};
					}
					finally
					{
						num4 = 0;
						int num6 = num4;
						while (true)
						{
							switch (num6)
							{
							case 0:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (webClient2 != null)
								{
									num4 = 1;
									num6 = num4;
									continue;
								}
								break;
							case 1:
								((IDisposable)webClient2).Dispose();
								num4 = 2;
								num6 = num4;
								continue;
							case 2:
								break;
							}
							break;
						}
					}
				};
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 1;
							num3 = num;
							continue;
						}
						break;
					case 1:
						((IDisposable)webClient).Dispose();
						num = 2;
						num3 = num;
						continue;
					case 2:
						break;
					}
					break;
				}
			}
		}

		internal void eval_a(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = -26314;
			short num2 = num;
			num = -26314;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			case false:
			case true:
				return;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			WebClient webClient = new WebClient();
			try
			{
				a = new Uri(URL_Shop + eval_b.m_eval_o + "/LAUNCHER/SHOP/medic/" + URL_MEDIC);
				webClient.DownloadFileAsync(a, DirLocal + "\\medic.xml");
				webClient.DownloadFileCompleted += delegate
				{
					short num4 = 0;
					int num5 = num4;
					switch (num5)
					{
					default:
						switch (0)
						{
						default:
						{
							XmlNode xmlNode8 = default(XmlNode);
							IDisposable disposable = default(IDisposable);
							XmlNode xmlNode4 = default(XmlNode);
							XmlNode xmlNode6 = default(XmlNode);
							XmlNode xmlNode2 = default(XmlNode);
							XmlNode xmlNode7 = default(XmlNode);
							XmlNode xmlNode5 = default(XmlNode);
							XmlNode xmlNode3 = default(XmlNode);
							XmlNode xmlNode = default(XmlNode);
							while (true)
							{
								switch (num5)
								{
								case 2:
									try
									{
										eval_b.eval_c2.Clear();
										eval_b.eval_dm.Load(DirLocal + "\\inventory.xml");
										IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
										try
										{
											num4 = 3;
											num5 = num4;
											while (true)
											{
												switch (num5)
												{
												case 3:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												case 4:
													try
													{
														eval_b.eval_c2.Add(new EShop_inventory
														{
															Name = xmlNode8.SelectSingleNode("name").InnerText,
															Price = xmlNode8.SelectSingleNode("price").InnerText,
															Set = xmlNode8.SelectSingleNode("set").InnerText,
															Image = xmlNode8.SelectSingleNode("image").InnerText,
															Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
														});
													}
													catch (Exception ex8)
													{
														System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
														return;
													}
													goto default;
												default:
													num4 = 2;
													num5 = num4;
													continue;
												case 2:
													if (enumerator.MoveNext())
													{
														xmlNode8 = (XmlNode)enumerator.Current;
														num4 = 4;
														num5 = num4;
													}
													else
													{
														num4 = 0;
														num5 = num4;
													}
													continue;
												case 0:
													num4 = 1;
													num5 = num4;
													continue;
												case 1:
													break;
												}
												break;
											}
										}
										finally
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num5)
													{
													case 2:
														if (disposable != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														goto end_IL_026c;
													case 0:
														disposable.Dispose();
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														goto end_IL_026c;
													}
													goto case 0;
													continue;
													end_IL_026c:
													break;
												}
												break;
											case 0:
												disposable = enumerator as IDisposable;
												num4 = 2;
												num5 = num4;
												goto default;
											}
										}
									}
									catch
									{
										bool flag = true;
									}
									num4 = 0;
									_ = num4;
									num4 = 1;
									if (num4 != 0)
									{
									}
									num4 = 0;
									num5 = num4;
									continue;
								case 1:
									try
									{
										eval_b.eval_c5.Clear();
										eval_b.eval_dm.Load(DirLocal + "\\medic.xml");
										IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
										try
										{
											num4 = 3;
											num5 = num4;
											while (true)
											{
												switch (num5)
												{
												case 3:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												case 0:
													try
													{
														eval_b.eval_c5.Add(new EShop_medic
														{
															Name = xmlNode4.SelectSingleNode("name").InnerText,
															Price = xmlNode4.SelectSingleNode("price").InnerText,
															Description = xmlNode4.SelectSingleNode("description").InnerText,
															Set = xmlNode4.SelectSingleNode("set").InnerText,
															Image = xmlNode4.SelectSingleNode("image").InnerText,
															Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
														});
													}
													catch (Exception ex4)
													{
														System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
														return;
													}
													goto default;
												default:
													num4 = 4;
													num5 = num4;
													continue;
												case 4:
													if (!enumerator.MoveNext())
													{
														num4 = 2;
														num5 = num4;
													}
													else
													{
														xmlNode4 = (XmlNode)enumerator.Current;
														num4 = 0;
														num5 = num4;
													}
													continue;
												case 2:
													num4 = 1;
													num5 = num4;
													continue;
												case 1:
													break;
												}
												break;
											}
										}
										finally
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num5)
													{
													case 2:
														if (disposable != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														goto end_IL_04c7;
													case 0:
														disposable.Dispose();
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														goto end_IL_04c7;
													}
													goto case 0;
													continue;
													end_IL_04c7:
													break;
												}
												break;
											case 0:
												disposable = enumerator as IDisposable;
												num4 = 2;
												num5 = num4;
												goto default;
											}
										}
									}
									catch
									{
										bool flag = true;
									}
									eval_b.LoadShop();
									num4 = 6;
									num5 = num4;
									continue;
								case 6:
									return;
								case 7:
									try
									{
										eval_b.eval_cy.Clear();
										eval_b.eval_dm.Load(DirLocal + "\\loot.xml");
										IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
										try
										{
											num4 = 3;
											num5 = num4;
											while (true)
											{
												switch (num5)
												{
												case 3:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													num4 = 2;
													num5 = num4;
													continue;
												case 2:
													if (enumerator.MoveNext())
													{
														xmlNode6 = (XmlNode)enumerator.Current;
														num4 = 4;
														num5 = num4;
													}
													else
													{
														num4 = 0;
														num5 = num4;
													}
													continue;
												case 4:
													try
													{
														eval_b.eval_cy.Add(new EShop_loot
														{
															Name = xmlNode6.SelectSingleNode("name").InnerText,
															Price = xmlNode6.SelectSingleNode("price").InnerText,
															Description = xmlNode6.SelectSingleNode("description").InnerText,
															Set = xmlNode6.SelectSingleNode("set").InnerText,
															Image = xmlNode6.SelectSingleNode("image").InnerText,
															Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
														});
													}
													catch (Exception ex6)
													{
														System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
														return;
													}
													goto default;
												case 0:
													num4 = 1;
													num5 = num4;
													continue;
												case 1:
													break;
												}
												break;
											}
										}
										finally
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num5)
													{
													case 2:
														if (disposable != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														goto end_IL_0736;
													case 0:
														disposable.Dispose();
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														goto end_IL_0736;
													}
													goto case 0;
													continue;
													end_IL_0736:
													break;
												}
												break;
											case 0:
												disposable = enumerator as IDisposable;
												num4 = 2;
												num5 = num4;
												goto default;
											}
										}
									}
									catch
									{
										bool flag = true;
									}
									num4 = 8;
									num5 = num4;
									continue;
								case 3:
									try
									{
										eval_b.eval_c0.Clear();
										eval_b.eval_dm.Load(DirLocal + "\\set.xml");
										IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
										try
										{
											num4 = 3;
											num5 = num4;
											while (true)
											{
												switch (num5)
												{
												case 3:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													num4 = 4;
													num5 = num4;
													continue;
												case 4:
													if (!enumerator.MoveNext())
													{
														num4 = 2;
														num5 = num4;
													}
													else
													{
														xmlNode2 = (XmlNode)enumerator.Current;
														num4 = 0;
														num5 = num4;
													}
													continue;
												case 0:
													try
													{
														eval_b.eval_c0.Add(new EShop_set
														{
															Name = xmlNode2.SelectSingleNode("name").InnerText,
															Price = xmlNode2.SelectSingleNode("price").InnerText,
															Description = xmlNode2.SelectSingleNode("description").InnerText,
															Set = xmlNode2.SelectSingleNode("set").InnerText,
															Image = xmlNode2.SelectSingleNode("image").InnerText,
															Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
														});
													}
													catch (Exception ex2)
													{
														System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
														return;
													}
													goto default;
												case 2:
													num4 = 1;
													num5 = num4;
													continue;
												case 1:
													break;
												}
												break;
											}
										}
										finally
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num5)
													{
													case 2:
														if (disposable != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														goto end_IL_0971;
													case 0:
														disposable.Dispose();
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														goto end_IL_0971;
													}
													goto case 0;
													continue;
													end_IL_0971:
													break;
												}
												break;
											case 0:
												disposable = enumerator as IDisposable;
												num4 = 2;
												num5 = num4;
												goto default;
											}
										}
									}
									catch
									{
										bool flag = true;
									}
									num4 = 4;
									num5 = num4;
									continue;
								case 8:
									try
									{
										while (true)
										{
											eval_b.eval_cz.Clear();
											eval_b.eval_dm.Load(DirLocal + "\\weapon.xml");
											IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
											try
											{
												num4 = 4;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 4:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													case 3:
														try
														{
															eval_b.eval_cz.Add(new EShop_weapon
															{
																Name = xmlNode7.SelectSingleNode("name").InnerText,
																Price = xmlNode7.SelectSingleNode("price").InnerText,
																Description = xmlNode7.SelectSingleNode("description").InnerText,
																Set = xmlNode7.SelectSingleNode("set").InnerText,
																Image = xmlNode7.SelectSingleNode("image").InnerText,
																Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
															});
														}
														catch (Exception ex7)
														{
															System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
															return;
														}
														goto default;
													default:
														num4 = 0;
														num5 = num4;
														continue;
													case 0:
														if (enumerator.MoveNext())
														{
															xmlNode7 = (XmlNode)enumerator.Current;
															num4 = 3;
															num5 = num4;
														}
														else
														{
															num4 = 1;
															num5 = num4;
														}
														continue;
													case 1:
														num4 = 2;
														num5 = num4;
														continue;
													case 2:
														break;
													}
													break;
												}
											}
											finally
											{
												switch (0)
												{
												default:
													while (true)
													{
														switch (num5)
														{
														case 2:
															if (disposable != null)
															{
																num4 = 0;
																num5 = num4;
																continue;
															}
															goto end_IL_0bb0;
														case 0:
															disposable.Dispose();
															num4 = 1;
															num5 = num4;
															continue;
														case 1:
															goto end_IL_0bb0;
														}
														goto case 0;
														continue;
														end_IL_0bb0:
														break;
													}
													break;
												case 0:
													disposable = enumerator as IDisposable;
													num4 = 2;
													num5 = num4;
													goto default;
												}
											}
											num4 = -22575;
											short num6 = num4;
											num4 = -22575;
											switch (num6 == num4)
											{
											case false:
											case true:
												break;
											default:
												num4 = 0;
												if (num4 == 0)
												{
												}
												goto end_IL_09eb;
											}
											continue;
											end_IL_09eb:
											break;
										}
									}
									catch
									{
										bool flag = true;
									}
									num4 = 3;
									num5 = num4;
									continue;
								case 0:
									try
									{
										eval_b.eval_c3.Clear();
										eval_b.eval_dm.Load(DirLocal + "\\mask.xml");
										IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
										try
										{
											num4 = 4;
											num5 = num4;
											while (true)
											{
												switch (num5)
												{
												case 4:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												case 1:
													try
													{
														eval_b.eval_c3.Add(new EShop_mask
														{
															Name = xmlNode5.SelectSingleNode("name").InnerText,
															Price = xmlNode5.SelectSingleNode("price").InnerText,
															Description = xmlNode5.SelectSingleNode("description").InnerText,
															Set = xmlNode5.SelectSingleNode("set").InnerText,
															Image = xmlNode5.SelectSingleNode("image").InnerText,
															Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
														});
													}
													catch (Exception ex5)
													{
														System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
														return;
													}
													goto default;
												default:
													num4 = 3;
													num5 = num4;
													continue;
												case 3:
													if (!enumerator.MoveNext())
													{
														num4 = 0;
														num5 = num4;
													}
													else
													{
														xmlNode5 = (XmlNode)enumerator.Current;
														num4 = 1;
														num5 = num4;
													}
													continue;
												case 0:
													num4 = 2;
													num5 = num4;
													continue;
												case 2:
													break;
												}
												break;
											}
										}
										finally
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num5)
													{
													case 2:
														if (disposable != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														goto end_IL_0e39;
													case 0:
														disposable.Dispose();
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														goto end_IL_0e39;
													}
													goto case 0;
													continue;
													end_IL_0e39:
													break;
												}
												break;
											case 0:
												disposable = enumerator as IDisposable;
												num4 = 2;
												num5 = num4;
												goto default;
											}
										}
									}
									catch
									{
										bool flag = true;
									}
									num4 = 5;
									num5 = num4;
									continue;
								case 4:
									try
									{
										eval_b.eval_c1.Clear();
										eval_b.eval_dm.Load(DirLocal + "\\car.xml");
										IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
										try
										{
											num4 = 4;
											num5 = num4;
											while (true)
											{
												switch (num5)
												{
												case 4:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													num4 = 3;
													num5 = num4;
													continue;
												case 3:
													if (!enumerator.MoveNext())
													{
														num4 = 0;
														num5 = num4;
													}
													else
													{
														xmlNode3 = (XmlNode)enumerator.Current;
														num4 = 1;
														num5 = num4;
													}
													continue;
												case 1:
													try
													{
														eval_b.eval_c1.Add(new EShop_car
														{
															Name = xmlNode3.SelectSingleNode("name").InnerText,
															Description = xmlNode3.SelectSingleNode("description").InnerText,
															Price = xmlNode3.SelectSingleNode("price").InnerText,
															Set = xmlNode3.SelectSingleNode("set").InnerText,
															Image = xmlNode3.SelectSingleNode("image").InnerText,
															Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
														});
													}
													catch (Exception ex3)
													{
														System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
														return;
													}
													goto default;
												case 0:
													num4 = 2;
													num5 = num4;
													continue;
												case 2:
													break;
												}
												break;
											}
										}
										finally
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num5)
													{
													case 2:
														if (disposable != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														goto end_IL_1075;
													case 0:
														disposable.Dispose();
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														goto end_IL_1075;
													}
													goto case 0;
													continue;
													end_IL_1075:
													break;
												}
												break;
											case 0:
												disposable = enumerator as IDisposable;
												num4 = 2;
												num5 = num4;
												goto default;
											}
										}
									}
									catch
									{
										bool flag = true;
									}
									num4 = 2;
									num5 = num4;
									continue;
								case 5:
									try
									{
										eval_b.eval_c4.Clear();
										eval_b.eval_dm.Load(DirLocal + "\\base.xml");
										IEnumerator enumerator = eval_b.eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
										try
										{
											num4 = 4;
											num5 = num4;
											while (true)
											{
												switch (num5)
												{
												case 4:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												case 3:
													try
													{
														eval_b.eval_c4.Add(new EShop_base
														{
															Name = xmlNode.SelectSingleNode("name").InnerText,
															Price = xmlNode.SelectSingleNode("price").InnerText,
															Description = xmlNode.SelectSingleNode("description").InnerText,
															Set = xmlNode.SelectSingleNode("set").InnerText,
															Image = xmlNode.SelectSingleNode("image").InnerText,
															Cmd = xmlNode.SelectSingleNode("cmd").InnerText
														});
													}
													catch (Exception ex)
													{
														System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
														return;
													}
													goto default;
												default:
													num4 = 0;
													num5 = num4;
													continue;
												case 0:
													if (enumerator.MoveNext())
													{
														xmlNode = (XmlNode)enumerator.Current;
														num4 = 3;
														num5 = num4;
													}
													else
													{
														num4 = 1;
														num5 = num4;
													}
													continue;
												case 1:
													num4 = 2;
													num5 = num4;
													continue;
												case 2:
													break;
												}
												break;
											}
										}
										finally
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num5)
													{
													case 2:
														if (disposable != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														goto end_IL_1335;
													case 0:
														disposable.Dispose();
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														goto end_IL_1335;
													}
													goto case 0;
													continue;
													end_IL_1335:
													break;
												}
												break;
											case 0:
												disposable = enumerator as IDisposable;
												num4 = 2;
												num5 = num4;
												goto default;
											}
										}
									}
									catch
									{
										bool flag = true;
									}
									num4 = 1;
									num5 = num4;
									continue;
								}
								break;
							}
							goto case 0;
						}
						case 0:
						{
							bool flag = false;
							num4 = 7;
							num5 = num4;
							goto default;
						}
						}
					}
				};
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 1;
							num3 = num;
							continue;
						}
						break;
					case 1:
						((IDisposable)webClient).Dispose();
						num = 2;
						num3 = num;
						continue;
					case 2:
						break;
					}
					break;
				}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_i
	{
		public string a;

		public string eval_b;

		public MainWindow eval_c;
	}

	[CompilerGenerated]
	private sealed class eval_j
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			Shoploot shoploot = default(Shoploot);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
						}
						else
						{
							eval_b.eval_c.eval_ga.BoxShop.Items.Add(shoploot);
							num2 = 2;
							num = num2;
						}
						continue;
					case 0:
						shoploot.LTXTPDISCOUNT.Content = "Скидка : ";
						shoploot.LTXTPRICE.Content = "Цена : ";
						shoploot.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = -24980;
						short num3 = num2;
						num2 = -24980;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_0379;
						}
						num2 = 0;
						if (num2 != 0)
						{
						}
						num2 = 1;
						if (num2 == 0)
						{
						}
						goto IL_0396;
					}
					case 10:
						shoploot.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shoploot);
						num2 = 1;
						num = num2;
						continue;
					case 1:
						num2 = 0;
						_ = num2;
						goto IL_0396;
					case 3:
					case 5:
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_0379;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shoploot.LTXTPRICE.Content = "Price : ";
								shoploot.BBuy.Content = "Buy";
								shoploot.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_0396:
						num2 = 6;
						num = num2;
						continue;
						IL_0379:
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				shoploot = new Shoploot
				{
					TXTName = eval_b.eval_c.eval_cy[a].Name,
					TXTPrice = eval_b.a,
					TXTDescription = eval_b.eval_c.eval_cy[a].Description,
					TXTItems = eval_b.eval_c.eval_cy[a].Set,
					IMGSHOP = eval_b.eval_c.eval_cy[a].Image,
					TXTCmd = eval_b.eval_c.eval_cy[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				short num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_k
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			ShopWeapon shopWeapon = default(ShopWeapon);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
							continue;
						}
						eval_b.eval_c.eval_ga.BoxShop.Items.Add(shopWeapon);
						num2 = 1;
						if (num2 != 0)
						{
						}
						num2 = 2;
						num = num2;
						continue;
					case 0:
						shopWeapon.LTXTPDISCOUNT.Content = "Скидка : ";
						shopWeapon.LTXTPRICE.Content = "Цена : ";
						shopWeapon.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = -13330;
						short num3 = num2;
						num2 = -13330;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_0377;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_0393;
					}
					case 10:
						shopWeapon.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shopWeapon);
						num2 = 1;
						num = num2;
						continue;
					case 1:
						num2 = 0;
						_ = num2;
						goto IL_0393;
					case 3:
					case 5:
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_0377;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shopWeapon.LTXTPRICE.Content = "Price : ";
								shopWeapon.BBuy.Content = "Buy";
								shopWeapon.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_0393:
						num2 = 6;
						num = num2;
						continue;
						IL_0377:
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				shopWeapon = new ShopWeapon
				{
					TXTName = eval_b.eval_c.eval_cz[a].Name,
					TXTPrice = eval_b.a,
					TXTDescription = eval_b.eval_c.eval_cz[a].Description,
					TXTItems = eval_b.eval_c.eval_cz[a].Set,
					IMGSHOP = eval_b.eval_c.eval_cz[a].Image,
					TXTCmd = eval_b.eval_c.eval_cz[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				short num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_l
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			Shopset shopset = default(Shopset);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
						}
						else
						{
							eval_b.eval_c.eval_ga.BoxShop.Items.Add(shopset);
							num2 = 2;
							num = num2;
						}
						continue;
					case 0:
						shopset.LTXTPDISCOUNT.Content = "Скидка : ";
						shopset.LTXTPRICE.Content = "Цена : ";
						shopset.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = -13883;
						short num3 = num2;
						num2 = -13883;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_035b;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto case 1;
					}
					case 10:
						shopset.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shopset);
						num2 = 1;
						num = num2;
						continue;
					case 3:
					case 5:
						num2 = 0;
						_ = num2;
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_035b;
					case 1:
						num2 = 6;
						num = num2;
						continue;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shopset.LTXTPRICE.Content = "Price : ";
								shopset.BBuy.Content = "Buy";
								shopset.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_035b:
						num2 = 1;
						if (num2 != 0)
						{
						}
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				shopset = new Shopset
				{
					TXTName = eval_b.eval_c.eval_c0[a].Name,
					TXTPrice = eval_b.a,
					TXTDescription = eval_b.eval_c.eval_c0[a].Description,
					TXTItems = eval_b.eval_c.eval_c0[a].Set,
					IMGSHOP = eval_b.eval_c.eval_c0[a].Image,
					TXTCmd = eval_b.eval_c.eval_c0[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				short num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_m
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			Shopcars shopcars = default(Shopcars);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
						}
						else
						{
							eval_b.eval_c.eval_ga.BoxShop.Items.Add(shopcars);
							num2 = 2;
							num = num2;
						}
						continue;
					case 0:
						shopcars.LTXTPDISCOUNT.Content = "Скидка : ";
						shopcars.LTXTPRICE.Content = "Цена : ";
						shopcars.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = 22929;
						short num3 = num2;
						num2 = 22929;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_0378;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_0394;
					}
					case 10:
						shopcars.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shopcars);
						num2 = 1;
						num = num2;
						continue;
					case 1:
						num2 = 0;
						_ = num2;
						goto IL_0394;
					case 3:
					case 5:
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_0378;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shopcars.LTXTPRICE.Content = "Price : ";
								shopcars.BBuy.Content = "Buy";
								shopcars.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_0394:
						num2 = 6;
						num = num2;
						continue;
						IL_0378:
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				short num2 = 1;
				if (num2 != 0)
				{
				}
				shopcars = new Shopcars
				{
					TXTName = eval_b.eval_c.eval_c1[a].Name,
					TXTPrice = eval_b.a,
					TXTItems = eval_b.eval_c.eval_c1[a].Set,
					IMGSHOP = eval_b.eval_c.eval_c1[a].Image,
					TXTDescription = eval_b.eval_c.eval_c1[a].Description,
					TXTCmd = eval_b.eval_c.eval_c1[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_n
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			Shoploot shoploot = default(Shoploot);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
						}
						else
						{
							eval_b.eval_c.eval_ga.BoxShop.Items.Add(shoploot);
							num2 = 2;
							num = num2;
						}
						continue;
					case 0:
						shoploot.LTXTPDISCOUNT.Content = "Скидка : ";
						shoploot.LTXTPRICE.Content = "Цена : ";
						shoploot.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = 17662;
						short num3 = num2;
						num2 = 17662;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_0378;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_0395;
					}
					case 10:
						shoploot.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shoploot);
						num2 = 1;
						num = num2;
						continue;
					case 1:
						num2 = 0;
						_ = num2;
						goto IL_0395;
					case 3:
					case 5:
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_0378;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shoploot.LTXTPRICE.Content = "Price : ";
								shoploot.BBuy.Content = "Buy";
								shoploot.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_0395:
						num2 = 6;
						num = num2;
						continue;
						IL_0378:
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				shoploot = new Shoploot
				{
					TXTName = eval_b.eval_c.eval_cy[a].Name,
					TXTPrice = eval_b.a,
					TXTDescription = eval_b.eval_c.eval_c2[a].Description,
					TXTItems = eval_b.eval_c.eval_c2[a].Set,
					IMGSHOP = eval_b.eval_c.eval_c2[a].Image,
					TXTCmd = eval_b.eval_c.eval_c2[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				short num2 = 1;
				if (num2 != 0)
				{
				}
				num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_o
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			Shoploot shoploot = default(Shoploot);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
						}
						else
						{
							eval_b.eval_c.eval_ga.BoxShop.Items.Add(shoploot);
							num2 = 2;
							num = num2;
						}
						continue;
					case 0:
						shoploot.LTXTPDISCOUNT.Content = "Скидка : ";
						shoploot.LTXTPRICE.Content = "Цена : ";
						shoploot.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = -24851;
						short num3 = num2;
						num2 = -24851;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_037b;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_0399;
					}
					case 10:
						shoploot.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shoploot);
						num2 = 1;
						num = num2;
						continue;
					case 1:
						num2 = 0;
						_ = num2;
						goto IL_0399;
					case 3:
					case 5:
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_037b;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shoploot.LTXTPRICE.Content = "Price : ";
								shoploot.BBuy.Content = "Buy";
								shoploot.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_0399:
						num2 = 6;
						num = num2;
						continue;
						IL_037b:
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				short num2 = 1;
				if (num2 != 0)
				{
				}
				shoploot = new Shoploot
				{
					TXTName = eval_b.eval_c.eval_c3[a].Name,
					TXTPrice = eval_b.a,
					TXTDescription = eval_b.eval_c.eval_c3[a].Description,
					TXTItems = eval_b.eval_c.eval_c3[a].Set,
					IMGSHOP = eval_b.eval_c.eval_c3[a].Image,
					TXTCmd = eval_b.eval_c.eval_c3[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_p
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			Shoploot shoploot = default(Shoploot);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
						}
						else
						{
							eval_b.eval_c.eval_ga.BoxShop.Items.Add(shoploot);
							num2 = 2;
							num = num2;
						}
						continue;
					case 0:
						shoploot.LTXTPDISCOUNT.Content = "Скидка : ";
						shoploot.LTXTPRICE.Content = "Цена : ";
						shoploot.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = 25567;
						short num3 = num2;
						num2 = 25567;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_037a;
						}
						num2 = 1;
						if (num2 != 0)
						{
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_0397;
					}
					case 10:
						shoploot.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shoploot);
						num2 = 1;
						num = num2;
						continue;
					case 1:
						num2 = 0;
						_ = num2;
						goto IL_0397;
					case 3:
					case 5:
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_037a;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shoploot.LTXTPRICE.Content = "Price : ";
								shoploot.BBuy.Content = "Buy";
								shoploot.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_0397:
						num2 = 6;
						num = num2;
						continue;
						IL_037a:
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				shoploot = new Shoploot
				{
					TXTName = eval_b.eval_c.eval_c4[a].Name,
					TXTPrice = eval_b.a,
					TXTDescription = eval_b.eval_c.eval_c4[a].Description,
					TXTItems = eval_b.eval_c.eval_c4[a].Set,
					IMGSHOP = eval_b.eval_c.eval_c4[a].Image,
					TXTCmd = eval_b.eval_c.eval_c4[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				short num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_q
	{
		public int a;

		public eval_i eval_b;

		internal void eval_a()
		{
			int num = default(int);
			Shoploot shoploot = default(Shoploot);
			switch (0)
			{
			default:
				while (true)
				{
					short num2;
					switch (num)
					{
					case 8:
						if (eval_b.eval_c.ij.Visibility == Visibility.Visible)
						{
							num2 = 7;
							num = num2;
							continue;
						}
						num2 = 1;
						if (num2 != 0)
						{
						}
						eval_b.eval_c.eval_ga.BoxShop.Items.Add(shoploot);
						num2 = 2;
						num = num2;
						continue;
					case 0:
						shoploot.LTXTPDISCOUNT.Content = "Скидка : ";
						shoploot.LTXTPRICE.Content = "Цена : ";
						shoploot.BBuy.Content = "Приобрести";
						num2 = 3;
						num = num2;
						continue;
					case 2:
					{
						num2 = 2605;
						short num3 = num2;
						num2 = 2605;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_0377;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_0394;
					}
					case 10:
						shoploot.LTXTPDISCOUNT.Visibility = Visibility.Hidden;
						num2 = 4;
						num = num2;
						continue;
					case 4:
						return;
					case 7:
						eval_b.eval_c.eval_is.BoxShop.Items.Add(shoploot);
						num2 = 1;
						num = num2;
						continue;
					case 1:
						num2 = 0;
						_ = num2;
						goto IL_0394;
					case 3:
					case 5:
						num2 = 9;
						num = num2;
						continue;
					case 9:
						if (Enable_Discount)
						{
							return;
						}
						goto IL_0377;
					case 6:
						{
							if (!(Langve == "RU"))
							{
								shoploot.LTXTPRICE.Content = "Price : ";
								shoploot.BBuy.Content = "Buy";
								shoploot.LTXTPDISCOUNT.Content = "Discount : ";
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 0;
								num = num2;
							}
							continue;
						}
						IL_0394:
						num2 = 6;
						num = num2;
						continue;
						IL_0377:
						num2 = 10;
						num = num2;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				shoploot = new Shoploot
				{
					TXTName = eval_b.eval_c.eval_c5[a].Name,
					TXTPrice = eval_b.a,
					TXTDescription = eval_b.eval_c.eval_c5[a].Description,
					TXTItems = eval_b.eval_c.eval_c5[a].Set,
					IMGSHOP = eval_b.eval_c.eval_c5[a].Image,
					TXTCmd = eval_b.eval_c.eval_c5[a].Cmd,
					TXTPriceDiscount = eval_b.eval_c.TxtDiscount,
					TXTPriceby = eval_b.eval_b
				};
				short num2 = 8;
				num = num2;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private sealed class eval_r
	{
		public string[] a;

		public MainWindow eval_b;

		internal void eval_c()
		{
			short num = 17904;
			short num2 = num;
			num = 17904;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.fv.Content = "Ваш счет : " + a[1].ToString() + " руб.";
			eval_b.iv.Content = "Ваш счет : " + a[1].ToString() + " руб.";
			MessageBoxWindow.Show(eval_b, "Вы успешно приобрели : " + Items_Name, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}

		internal void eval_a()
		{
			short num = -14697;
			short num2 = num;
			num = -14697;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.fv.Content = "Your account : " + a[1].ToString() + " rub.";
			eval_b.iv.Content = "Your account : " + a[1].ToString() + " rub.";
			MessageBoxWindow.Show(eval_b, "You have successfully purchased : " + Items_Name, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
	}

	[CompilerGenerated]
	private sealed class eval_s
	{
		public MainWindow eval_a;

		public string eval_b;

		internal void eval_c()
		{
			short num = 27987;
			short num2 = num;
			num = 27987;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_a.eval_j(eval_b);
		}
	}

	[CompilerGenerated]
	private sealed class eval_t
	{
		public MainWindow eval_a;

		public Uri b;

		public int eval_c;

		public bool eval_d;

		public bool eval_e;

		public Action eval_f;

		public Action eval_g;

		public Action eval_h;

		internal void eval_q()
		{
			while (true)
			{
				short num = 1;
				if (num != 0)
				{
				}
				if (!(Langve == "RU"))
				{
					break;
				}
				num = 0;
				_ = num;
				num = 14604;
				short num2 = num;
				num = 14604;
				switch (num2 == num)
				{
				case false:
				case true:
					continue;
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_a.eval_fp.Content = "Очистка клиента";
				return;
			}
			eval_a.eval_fp.Content = "Clearing the client";
		}

		internal void eval_p()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = -14578;
			short num2 = num;
			num = -14578;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_a.eval_fo.Value = 0.0;
		}

		internal void eval_i(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = 2946;
			short num2 = num;
			num = 2946;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			case false:
			case true:
				return;
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			WebClient webClient = new WebClient();
			try
			{
				b = new Uri(URL_ClearClient + eval_a.m_eval_o + URL_ClearClientDIR);
				webClient.DownloadFileAsync(b, DirLocal + "\\FILE.log");
				webClient.DownloadFileCompleted += delegate
				{
					int num5;
					short num4;
					try
					{
						num4 = 0;
						num5 = num4;
						switch (num5)
						{
						default:
							switch (0)
							{
							default:
								while (true)
								{
									switch (num5)
									{
									case 3:
										if (eval_a.dy.Length == 0L)
										{
											num4 = 5;
											num5 = num4;
										}
										else
										{
											eval_a.dy = new FileInfo(DirLocal + "\\DIRECTORY.log");
											num4 = 7;
											num5 = num4;
										}
										continue;
									case 6:
										eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num35 = 24398;
											short num36 = num35;
											num35 = 24398;
											switch (num36 == num35)
											{
											default:
												num35 = 0;
												_ = num35;
												num35 = 1;
												if (num35 != 0)
												{
												}
												num35 = 0;
												if (num35 != 0)
												{
												}
												MessageBoxWindow.Show(eval_a, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												break;
											}
										});
										num4 = 11;
										num5 = num4;
										continue;
									case 7:
										if (eval_a.dy.Length == 0L)
										{
											num4 = 14;
											num5 = num4;
										}
										else
										{
											num4 = 8;
											num5 = num4;
										}
										continue;
									case 9:
									case 11:
										num4 = 2;
										num5 = num4;
										continue;
									case 2:
										return;
									case 10:
									case 12:
										num4 = 0;
										num5 = num4;
										continue;
									case 0:
										return;
									case 14:
										UpdateStatus = false;
										num4 = 13;
										num5 = num4;
										continue;
									case 13:
										if (Langve == "RU")
										{
											num4 = 6;
											num5 = num4;
										}
										else
										{
											eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
											{
												short num37 = 20700;
												short num38 = num37;
												num37 = 20700;
												switch (num38 == num37)
												{
												default:
													num37 = 0;
													_ = num37;
													num37 = 1;
													if (num37 != 0)
													{
													}
													num37 = 0;
													if (num37 != 0)
													{
													}
													MessageBoxWindow.Show(eval_a, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													break;
												}
											});
											num4 = 9;
											num5 = num4;
										}
										continue;
									case 4:
										eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num39 = -11754;
											short num40 = num39;
											num39 = -11754;
											switch (num40 == num39)
											{
											default:
												num39 = 0;
												_ = num39;
												num39 = 1;
												if (num39 != 0)
												{
												}
												num39 = 0;
												if (num39 != 0)
												{
												}
												MessageBoxWindow.Show(eval_a, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												break;
											}
										});
										num4 = 12;
										num5 = num4;
										continue;
									case 5:
										UpdateStatus = false;
										num4 = 1;
										num5 = num4;
										continue;
									case 1:
										if (!(Langve == "RU"))
										{
											eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
											{
												short num41 = 1;
												if (num41 != 0)
												{
												}
												num41 = 1526;
												short num42 = num41;
												num41 = 1526;
												switch (num42 == num41)
												{
												default:
													num41 = 0;
													_ = num41;
													break;
												case true:
													break;
												}
												num41 = 0;
												if (num41 != 0)
												{
												}
												MessageBoxWindow.Show(eval_a, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											});
											num4 = 10;
											num5 = num4;
										}
										else
										{
											num4 = 4;
											num5 = num4;
										}
										continue;
									case 8:
										goto end_IL_0028;
									}
									goto case 0;
									continue;
									end_IL_0028:
									break;
								}
								break;
							case 0:
								eval_a.dy = new FileInfo(DirLocal + "\\FILE.log");
								num4 = 3;
								num5 = num4;
								goto default;
							}
							break;
						}
					}
					catch
					{
					}
					eval_a.eval_d4.Clear();
					eval_a.d3.Clear();
					eval_a.d6.Clear();
					num4 = 184;
					num5 = num4;
					int num7 = default(int);
					int num10 = default(int);
					int num12 = default(int);
					int num11 = default(int);
					int num19 = default(int);
					int num13 = default(int);
					string text = default(string);
					int num8 = default(int);
					int num6 = default(int);
					string text2 = default(string);
					int num9 = default(int);
					string text3 = default(string);
					int num24 = default(int);
					int num18 = default(int);
					string text4 = default(string);
					int num14 = default(int);
					int num21 = default(int);
					string text6 = default(string);
					int num20 = default(int);
					string text5 = default(string);
					int num16 = default(int);
					int num15 = default(int);
					DirectoryInfo directoryInfo4 = default(DirectoryInfo);
					int num17 = default(int);
					int num22 = default(int);
					string text7 = default(string);
					StreamReader streamReader2 = default(StreamReader);
					StreamReader streamReader = default(StreamReader);
					string fILEDELLDIR = default(string);
					while (true)
					{
						switch (num5)
						{
						case 101:
						case 174:
							num4 = 115;
							num5 = num4;
							break;
						case 115:
							switch (0)
							{
							default:
								goto end_IL_0352;
							case 0:
								break;
							}
							goto default;
						default:
							if (num7 >= eval_a.d6.Count)
							{
								num4 = 20;
								num5 = num4;
							}
							else
							{
								num4 = 33;
								num5 = num4;
							}
							break;
						case 53:
							num4 = 171;
							num5 = num4;
							break;
						case 171:
							if (!eval_a.eval_d2[num10].DIRDELLDIR.StartsWith(NameDirGamePatchTorrent))
							{
								num4 = 76;
								num5 = num4;
								break;
							}
							goto IL_0b99;
						case 5:
						case 8:
							num4 = 168;
							num5 = num4;
							break;
						case 168:
							if (num10 >= eval_a.eval_d2.Count)
							{
								num4 = 117;
								num5 = num4;
							}
							else
							{
								num4 = 100;
								num5 = num4;
							}
							break;
						case 79:
							num4 = 18;
							num5 = num4;
							break;
						case 18:
							eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num25 = 31069;
								short num26 = num25;
								num25 = 31069;
								switch (num26 == num25)
								{
								default:
									num25 = 0;
									_ = num25;
									num25 = 0;
									if (num25 != 0)
									{
									}
									num25 = 1;
									if (num25 != 0)
									{
									}
									eval_a.eval_fo.Value++;
									break;
								}
							});
							num4 = 89;
							num5 = num4;
							break;
						case 179:
							num4 = 24;
							num5 = num4;
							break;
						case 24:
							if (!eval_a.eval_d1[num12].FILEDELLDIR.EndsWith(MainWindow.m_eval_ab + ".exe"))
							{
								num4 = 7;
								num5 = num4;
								break;
							}
							goto IL_1c22;
						case 20:
							text5 = string.Empty;
							num11 = 0;
							num4 = 26;
							num5 = num4;
							break;
						case 185:
							num4 = 3;
							num5 = num4;
							break;
						case 3:
							eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num31 = -24546;
								short num32 = num31;
								num31 = -24546;
								switch (num32 == num31)
								{
								default:
									num31 = 0;
									_ = num31;
									num31 = 0;
									if (num31 != 0)
									{
									}
									num31 = 1;
									if (num31 != 0)
									{
									}
									eval_a.eval_fo.Value++;
									break;
								}
							});
							num4 = 43;
							num5 = num4;
							break;
						case 2:
							num19++;
							num4 = 58;
							num5 = num4;
							break;
						case 27:
							if (Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num11]))
							{
								num4 = 97;
								num5 = num4;
								break;
							}
							goto case 107;
						case 81:
							text = eval_a.Files[num13].DirectoryName + "\\" + eval_a.Files[num13].Name;
							text = "\\" + text.Replace(eval_a.Directory_game + "\\", "");
							eval_e = false;
							num8 = 0;
							num4 = 45;
							num5 = num4;
							break;
						case 183:
							text2 = eval_a.Files[num6].DirectoryName + "\\" + eval_a.Files[num6].Name;
							text2 = text2.Replace(eval_a.Directory_game + "\\", string.Empty);
							text2 = "\\" + text2;
							eval_e = false;
							num9 = 0;
							num4 = 56;
							num5 = num4;
							break;
						case 17:
							if (text3 == eval_a.d5[num24].DIRS)
							{
								num4 = 94;
								num5 = num4;
								break;
							}
							goto case 80;
						case 138:
							eval_a.eval_d1.Add(new DELLETEDFILE
							{
								FILEDELLDIR = eval_a.Directory_game + "\\" + text2,
								NAMEDELLDIR = eval_a.Files[num6].Name
							});
							num4 = 158;
							num5 = num4;
							break;
						case 116:
							eval_d = true;
							num4 = 165;
							num5 = num4;
							break;
						case 10:
							if (text5 == eval_a.d3[num19].FILEEXIST)
							{
								num4 = 82;
								num5 = num4;
								break;
							}
							goto case 2;
						case 92:
						case 149:
							num4 = 177;
							num5 = num4;
							break;
						case 177:
							if (num24 < eval_a.d5.Count)
							{
								num4 = 17;
								num5 = num4;
							}
							else
							{
								num4 = 127;
								num5 = num4;
							}
							break;
						case 159:
							num4 = 187;
							num5 = num4;
							break;
						case 107:
							num11++;
							num4 = 6;
							num5 = num4;
							break;
						case 69:
							num4 = 112;
							num5 = num4;
							break;
						case 112:
							if (!eval_a.d6[num18].EndsWith(eval_a.m_eval_ag))
							{
								num4 = 135;
								num5 = num4;
								break;
							}
							goto case 15;
						case 21:
							if (!fILEDELLDIR.EndsWith("cache"))
							{
								num4 = 23;
								num5 = num4;
								break;
							}
							goto IL_1c22;
						case 96:
						case 131:
							num4 = 62;
							num5 = num4;
							break;
						case 62:
							if (num13 >= eval_a.Files.Length)
							{
								num4 = 145;
								num5 = num4;
							}
							else
							{
								num4 = 70;
								num5 = num4;
							}
							break;
						case 32:
						case 38:
							num4 = 128;
							num5 = num4;
							break;
						case 128:
							if (num6 >= eval_a.Files.Length)
							{
								num4 = 121;
								num5 = num4;
							}
							else
							{
								num4 = 122;
								num5 = num4;
							}
							break;
						case 4:
							num8++;
							num4 = 46;
							num5 = num4;
							break;
						case 54:
							if (text4 != eval_a.Directory_game + "\\cache")
							{
								num4 = 51;
								num5 = num4;
								break;
							}
							goto case 98;
						case 30:
							num4 = 162;
							num5 = num4;
							break;
						case 162:
							if (text3 != eval_a.Directory_game + "\\" + NameDirGamePatchTorrent)
							{
								num4 = 137;
								num5 = num4;
								break;
							}
							goto case 114;
						case 114:
							num14++;
							num4 = 19;
							num5 = num4;
							break;
						case 70:
							if (eval_a.Files[num13].DirectoryName != eval_a.Directory_game + "\\" + eval_a.m_eval_ag)
							{
								num4 = 185;
								num5 = num4;
								break;
							}
							goto case 102;
						case 123:
						case 140:
							num4 = 36;
							num5 = num4;
							break;
						case 36:
							if (num21 >= eval_a.Diles.Length)
							{
								num4 = 108;
								num5 = num4;
							}
							else
							{
								eval_d = false;
								text6 = eval_a.Diles[num21].FullName;
								num4 = 106;
								num5 = num4;
							}
							break;
						case 148:
							num4 = 161;
							num5 = num4;
							break;
						case 161:
							if (text6 != eval_a.Directory_game + "\\" + NameDirGamePatchTorrent)
							{
								num4 = 169;
								num5 = num4;
								break;
							}
							goto case 40;
						case 85:
						{
							DirectoryInfo directoryInfo = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num20]);
							eval_a.Files = directoryInfo.GetFiles("*", SearchOption.TopDirectoryOnly);
							num13 = 0;
							num4 = 131;
							num5 = num4;
							break;
						}
						case 155:
							eval_a.eval_d2.Add(new DELLETEDDIR
							{
								DIRDELLDIR = text4
							});
							num4 = 98;
							num5 = num4;
							break;
						case 91:
							text5 = eval_a.Files[num16].DirectoryName + "\\" + eval_a.Files[num16].Name;
							text5 = "\\" + text5.Replace(eval_a.Directory_game + "\\", "");
							eval_e = false;
							num19 = 0;
							num4 = 105;
							num5 = num4;
							break;
						case 127:
							num4 = 175;
							num5 = num4;
							break;
						case 175:
							if (!eval_d)
							{
								num4 = 143;
								num5 = num4;
								break;
							}
							goto case 114;
						case 102:
							num13++;
							num4 = 96;
							num5 = num4;
							break;
						case 158:
							num6++;
							num4 = 38;
							num5 = num4;
							break;
						case 89:
							if (!eval_a.Files[num16].DirectoryName.EndsWith("cache"))
							{
								num4 = 75;
								num5 = num4;
								break;
							}
							goto case 163;
						case 35:
							num15++;
							num4 = 65;
							num5 = num4;
							break;
						case 52:
							try
							{
								Directory.Delete(eval_a.Directory_game + "\\" + eval_a.eval_d2[num10].DIRDELLDIR);
							}
							catch
							{
							}
							goto IL_0b99;
						case 122:
							eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num33 = 1;
								if (num33 != 0)
								{
								}
								num33 = 4199;
								short num34 = num33;
								num33 = 4199;
								switch (num34 == num33)
								{
								default:
									num33 = 0;
									_ = num33;
									break;
								case true:
									break;
								}
								num33 = 0;
								if (num33 != 0)
								{
								}
								eval_a.eval_fo.Value++;
							});
							num4 = 64;
							num5 = num4;
							break;
						case 9:
							if (text == eval_a.d3[num8].FILEEXIST)
							{
								num4 = 34;
								num5 = num4;
								break;
							}
							goto case 4;
						case 120:
							num4 = 142;
							num5 = num4;
							break;
						case 37:
							if (text3 != eval_a.Directory_game + "\\cache")
							{
								num4 = 30;
								num5 = num4;
								break;
							}
							goto case 114;
						case 173:
							if (Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num18]))
							{
								num4 = 69;
								num5 = num4;
								break;
							}
							goto case 15;
						case 137:
							text3 = text3.Replace(eval_a.Directory_game + "\\", string.Empty);
							num24 = 0;
							num4 = 149;
							num5 = num4;
							break;
						case 43:
							if (!eval_a.Files[num13].DirectoryName.EndsWith("cache"))
							{
								num4 = 60;
								num5 = num4;
								break;
							}
							goto case 102;
						case 22:
							if (GameLicense)
							{
								num4 = 154;
								num5 = num4;
							}
							else
							{
								directoryInfo4 = new DirectoryInfo(eval_a.Directory_game + "\\");
								eval_a.Diles = directoryInfo4.GetDirectories("*", SearchOption.AllDirectories);
								num21 = 0;
								num4 = 123;
								num5 = num4;
							}
							break;
						case 47:
							text = string.Empty;
							num20 = 0;
							num4 = 14;
							num5 = num4;
							break;
						case 1:
							if (Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num20]))
							{
								num4 = 85;
								num5 = num4;
								break;
							}
							goto case 145;
						case 13:
						case 146:
							num4 = 48;
							num5 = num4;
							break;
						case 48:
							if (num17 >= eval_a.d5.Count)
							{
								num4 = 170;
								num5 = num4;
							}
							else
							{
								num4 = 152;
								num5 = num4;
							}
							break;
						case 160:
							num4 = 42;
							num5 = num4;
							break;
						case 42:
							if (!eval_a.Files[num16].DirectoryName.EndsWith("fastresume"))
							{
								num4 = 41;
								num5 = num4;
								break;
							}
							goto case 163;
						case 109:
							eval_d = true;
							num4 = 35;
							num5 = num4;
							break;
						case 165:
							num17++;
							num4 = 146;
							num5 = num4;
							break;
						case 100:
							if (!eval_a.eval_d2[num10].DIRDELLDIR.StartsWith("cache"))
							{
								num4 = 53;
								num5 = num4;
								break;
							}
							goto IL_0b99;
						case 170:
							num4 = 111;
							num5 = num4;
							break;
						case 111:
							if (!eval_d)
							{
								num4 = 155;
								num5 = num4;
								break;
							}
							goto case 98;
						case 83:
							num4 = 86;
							num5 = num4;
							break;
						case 86:
							if (!eval_a.Files[num13].DirectoryName.EndsWith("fastresume"))
							{
								num4 = 182;
								num5 = num4;
								break;
							}
							goto case 102;
						case 150:
							num4 = 103;
							num5 = num4;
							break;
						case 103:
							if (!eval_e)
							{
								num4 = 138;
								num5 = num4;
								break;
							}
							goto case 158;
						case 119:
							num18 = 0;
							num4 = 55;
							num5 = num4;
							break;
						case 90:
							num4 = 186;
							num5 = num4;
							break;
						case 186:
							if (!eval_a.Files[num6].DirectoryName.EndsWith("metadata"))
							{
								num4 = 183;
								num5 = num4;
								break;
							}
							goto case 158;
						case 77:
						{
							DirectoryInfo directoryInfo5 = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num7]);
							eval_a.Diles = directoryInfo5.GetDirectories("*", SearchOption.TopDirectoryOnly);
							num14 = 0;
							num4 = 59;
							num5 = num4;
							break;
						}
						case 16:
							if (text2 == eval_a.d3[num9].FILEEXIST)
							{
								num4 = 29;
								num5 = num4;
								break;
							}
							goto case 71;
						case 29:
							eval_e = true;
							num4 = 71;
							num5 = num4;
							break;
						case 57:
						case 141:
							num4 = 124;
							num5 = num4;
							break;
						case 124:
							if (num22 < eval_a.Diles.Length)
							{
								eval_d = false;
								text4 = eval_a.Diles[num22].FullName;
								num4 = 54;
								num5 = num4;
							}
							else
							{
								num4 = 15;
								num5 = num4;
							}
							break;
						case 60:
							num4 = 99;
							num5 = num4;
							break;
						case 99:
							if (!eval_a.Files[num13].DirectoryName.EndsWith(NameDirGamePatchTorrent))
							{
								num4 = 83;
								num5 = num4;
								break;
							}
							goto case 102;
						case 40:
							num21++;
							num4 = 140;
							num5 = num4;
							break;
						case 133:
							num4 = 28;
							num5 = num4;
							break;
						case 28:
							if (!fILEDELLDIR.EndsWith("cache\\fastresume"))
							{
								num4 = 157;
								num5 = num4;
								break;
							}
							goto IL_1c22;
						case 117:
							eval_a.eval_ba();
							num4 = 153;
							num5 = num4;
							break;
						case 153:
							return;
						case 129:
							num4 = 118;
							num5 = num4;
							break;
						case 118:
							if (!eval_a.d6[num7].EndsWith(eval_a.m_eval_ag))
							{
								num4 = 77;
								num5 = num4;
								break;
							}
							goto case 49;
						case 71:
							num9++;
							num4 = 61;
							num5 = num4;
							break;
						case 58:
						case 105:
							num4 = 73;
							num5 = num4;
							break;
						case 73:
							if (num19 < eval_a.d3.Count)
							{
								num4 = 10;
								num5 = num4;
							}
							else
							{
								num4 = 50;
								num5 = num4;
							}
							break;
						case 49:
							num4 = 0;
							_ = num4;
							num7++;
							num4 = 101;
							num5 = num4;
							break;
						case 144:
							try
							{
								File.Delete(eval_a.eval_d1[num12].FILEDELLDIR);
							}
							catch
							{
							}
							goto IL_1c22;
						case 106:
							if (text6 != eval_a.Directory_game + "\\cache")
							{
								num4 = 148;
								num5 = num4;
								break;
							}
							goto case 40;
						case 108:
							text2 = string.Empty;
							eval_a.Files = directoryInfo4.GetFiles("*", SearchOption.AllDirectories);
							num6 = 0;
							num4 = 32;
							num5 = num4;
							break;
						case 82:
							eval_e = true;
							num4 = 2;
							num5 = num4;
							break;
						case 184:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num5)
										{
										case 1:
											try
											{
												num4 = 3;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 3:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													case 2:
														if (!string.IsNullOrEmpty(text7))
														{
															num4 = 6;
															num5 = num4;
															continue;
														}
														goto default;
													case 6:
														eval_a.d3.Add(new FILEINFO
														{
															FILEEXIST = text7.Split('|')[0],
															FILENEWMD5 = text7.Split('|')[1]
														});
														eval_c++;
														num4 = 5;
														num5 = num4;
														continue;
													default:
														num4 = 4;
														num5 = num4;
														continue;
													case 4:
														if ((text7 = streamReader2.ReadLine()) != null)
														{
															num4 = 2;
															num5 = num4;
														}
														else
														{
															num4 = 0;
															num5 = num4;
														}
														continue;
													case 0:
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														break;
													}
													break;
												}
											}
											finally
											{
												num4 = 2;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 2:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (streamReader2 != null)
														{
															num4 = 1;
															num5 = num4;
															continue;
														}
														break;
													case 1:
														((IDisposable)streamReader2).Dispose();
														num4 = 0;
														num5 = num4;
														continue;
													case 0:
														break;
													}
													break;
												}
											}
											goto IL_20ae;
										case 2:
										{
											try
											{
												num4 = 3;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 3:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													case 2:
														if (!string.IsNullOrEmpty(text7))
														{
															num4 = 6;
															num5 = num4;
															continue;
														}
														goto default;
													default:
														num4 = 5;
														num5 = num4;
														continue;
													case 5:
														if ((text7 = streamReader.ReadLine()) != null)
														{
															num4 = 2;
															num5 = num4;
														}
														else
														{
															num4 = 4;
															num5 = num4;
														}
														continue;
													case 6:
														eval_a.d6.Add(text7);
														eval_a.d5.Add(new DIRINFO
														{
															DIRS = text7
														});
														num4 = 0;
														num5 = num4;
														continue;
													case 4:
														num4 = 1;
														num5 = num4;
														continue;
													case 1:
														break;
													}
													break;
												}
											}
											finally
											{
												num4 = 2;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 2:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (streamReader != null)
														{
															num4 = 1;
															num5 = num4;
															continue;
														}
														break;
													case 1:
														((IDisposable)streamReader).Dispose();
														num4 = 0;
														num5 = num4;
														continue;
													case 0:
														break;
													}
													break;
												}
											}
											text7 = string.Empty;
											streamReader2 = new StreamReader(DirLocal + "\\FILE.log");
											num4 = 3682;
											short num23 = num4;
											num4 = 3682;
											switch (num23 == num4)
											{
											default:
												num4 = 0;
												if (num4 != 0)
												{
												}
												num4 = 1;
												num5 = num4;
												continue;
											case false:
											case true:
												break;
											}
											goto IL_20ae;
										}
										case 0:
											goto end_IL_1c9a;
											IL_20ae:
											eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
											{
												short num29 = -2589;
												short num30 = num29;
												num29 = -2589;
												switch (num30 == num29)
												{
												default:
													num29 = 0;
													_ = num29;
													num29 = 1;
													if (num29 != 0)
													{
													}
													num29 = 0;
													if (num29 != 0)
													{
													}
													eval_a.eval_fo.Maximum = eval_c + 1;
													break;
												}
											});
											num4 = 0;
											num5 = num4;
											continue;
										}
										goto case 0;
										continue;
										end_IL_1c9a:
										break;
									}
									break;
								case 0:
									text7 = string.Empty;
									streamReader = new StreamReader(DirLocal + "\\DIRECTORY.log");
									num4 = 2;
									num5 = num4;
									goto default;
								}
							}
							catch (Exception ex)
							{
								eval_u CS_0024_003C_003E8__locals0 = new eval_u
								{
									eval_b = this
								};
								Exception a = ex;
								CS_0024_003C_003E8__locals0.a = a;
								UpdateStatus = false;
								eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									short num27 = 1;
									if (num27 != 0)
									{
									}
									num27 = 7801;
									short num28 = num27;
									num27 = 7801;
									switch (num28 == num27)
									{
									default:
										num27 = 0;
										_ = num27;
										break;
									case true:
										break;
									}
									num27 = 0;
									if (num27 != 0)
									{
									}
									MessageBoxWindow.Show(CS_0024_003C_003E8__locals0.eval_b.eval_a, "[ReadFileUpdate] : " + CS_0024_003C_003E8__locals0.a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								});
								return;
							}
							num4 = 25;
							num5 = num4;
							break;
						case 34:
							eval_e = true;
							num4 = 4;
							num5 = num4;
							break;
						case 7:
							num4 = 67;
							num5 = num4;
							break;
						case 67:
							if (!eval_a.eval_d1[num12].FILEDELLDIR.EndsWith("client.ini"))
							{
								num4 = 144;
								num5 = num4;
								break;
							}
							goto IL_1c22;
						case 50:
							num4 = 63;
							num5 = num4;
							break;
						case 63:
							if (!eval_e)
							{
								num4 = 68;
								num5 = num4;
								break;
							}
							goto case 163;
						case 145:
							num20++;
							num4 = 72;
							num5 = num4;
							break;
						case 41:
							num4 = 110;
							num5 = num4;
							break;
						case 110:
							if (!eval_a.Files[num16].DirectoryName.EndsWith("metadata"))
							{
								num4 = 91;
								num5 = num4;
								break;
							}
							goto case 163;
						case 64:
							if (!eval_a.Files[num6].DirectoryName.EndsWith("cache"))
							{
								num4 = 78;
								num5 = num4;
								break;
							}
							goto case 158;
						case 163:
							num16++;
							num4 = 74;
							num5 = num4;
							break;
						case 15:
							num18++;
							num4 = 31;
							num5 = num4;
							break;
						case 14:
						case 72:
							num4 = 104;
							num5 = num4;
							break;
						case 104:
							if (num20 < eval_a.d6.Count)
							{
								num4 = 1;
								num5 = num4;
							}
							else
							{
								num4 = 120;
								num5 = num4;
							}
							break;
						case 51:
							num4 = 167;
							num5 = num4;
							break;
						case 167:
							if (text4 != eval_a.Directory_game + "\\" + NameDirGamePatchTorrent)
							{
								num4 = 84;
								num5 = num4;
								break;
							}
							goto case 98;
						case 97:
						{
							DirectoryInfo directoryInfo3 = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num11]);
							eval_a.Files = directoryInfo3.GetFiles("*", SearchOption.TopDirectoryOnly);
							num16 = 0;
							num4 = 12;
							num5 = num4;
							break;
						}
						case 136:
							num10 = 0;
							num4 = 8;
							num5 = num4;
							break;
						case 88:
							num4 = 87;
							num5 = num4;
							break;
						case 87:
							if (!eval_d)
							{
								num4 = 113;
								num5 = num4;
								break;
							}
							goto case 40;
						case 68:
							eval_a.eval_d1.Add(new DELLETEDFILE
							{
								FILEDELLDIR = eval_a.Directory_game + "\\" + text5,
								NAMEDELLDIR = eval_a.Files[num16].Name
							});
							num4 = 163;
							num5 = num4;
							break;
						case 182:
							num4 = 130;
							num5 = num4;
							break;
						case 130:
							if (!eval_a.Files[num13].DirectoryName.EndsWith("metadata"))
							{
								num4 = 81;
								num5 = num4;
								break;
							}
							goto case 102;
						case 143:
							eval_a.eval_d2.Add(new DELLETEDDIR
							{
								DIRDELLDIR = text3
							});
							num4 = 114;
							num5 = num4;
							break;
						case 134:
							if (text6 == eval_a.d5[num15].DIRS)
							{
								num4 = 109;
								num5 = num4;
								break;
							}
							goto case 35;
						case 45:
						case 46:
							num4 = 139;
							num5 = num4;
							break;
						case 139:
							if (num8 < eval_a.d3.Count)
							{
								num4 = 9;
								num5 = num4;
							}
							else
							{
								num4 = 176;
								num5 = num4;
							}
							break;
						case 80:
							num24++;
							num4 = 92;
							num5 = num4;
							break;
						case 75:
							num4 = 66;
							num5 = num4;
							break;
						case 66:
							if (!eval_a.Files[num16].DirectoryName.EndsWith(NameDirGamePatchTorrent))
							{
								num4 = 160;
								num5 = num4;
								break;
							}
							goto case 163;
						case 135:
						{
							DirectoryInfo directoryInfo2 = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num18]);
							eval_a.Diles = directoryInfo2.GetDirectories("*", SearchOption.TopDirectoryOnly);
							num22 = 0;
							num4 = 141;
							num5 = num4;
							break;
						}
						case 56:
						case 61:
							num4 = 178;
							num5 = num4;
							break;
						case 178:
							if (num9 < eval_a.d3.Count)
							{
								num4 = 16;
								num5 = num4;
							}
							else
							{
								num4 = 150;
								num5 = num4;
							}
							break;
						case 6:
						case 26:
							num4 = 44;
							num5 = num4;
							break;
						case 44:
							if (num11 < eval_a.d6.Count)
							{
								num4 = 27;
								num5 = num4;
							}
							else
							{
								num4 = 159;
								num5 = num4;
							}
							break;
						case 176:
							num4 = 164;
							num5 = num4;
							break;
						case 164:
							if (!eval_e)
							{
								num4 = 180;
								num5 = num4;
								break;
							}
							goto case 102;
						case 180:
							num4 = 1;
							if (num4 != 0)
							{
							}
							eval_a.eval_d1.Add(new DELLETEDFILE
							{
								FILEDELLDIR = eval_a.Directory_game + "\\" + text,
								NAMEDELLDIR = eval_a.Files[num13].Name
							});
							num4 = 102;
							num5 = num4;
							break;
						case 113:
							eval_a.eval_d2.Add(new DELLETEDDIR
							{
								DIRDELLDIR = text6
							});
							num4 = 40;
							num5 = num4;
							break;
						case 33:
							if (Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num7]))
							{
								num4 = 129;
								num5 = num4;
								break;
							}
							goto case 49;
						case 157:
							num4 = 172;
							num5 = num4;
							break;
						case 172:
							if (!fILEDELLDIR.EndsWith("cache\\metadata"))
							{
								num4 = 179;
								num5 = num4;
								break;
							}
							goto IL_1c22;
						case 84:
							text4 = text4.Replace(eval_a.Directory_game + "\\", string.Empty);
							num17 = 0;
							num4 = 13;
							num5 = num4;
							break;
						case 169:
							text6 = text6.Replace(eval_a.Directory_game + "\\", string.Empty);
							num15 = 0;
							num4 = 166;
							num5 = num4;
							break;
						case 39:
							if (eval_a.Files[num16].DirectoryName != eval_a.Directory_game + "\\" + eval_a.m_eval_ag)
							{
								num4 = 79;
								num5 = num4;
								break;
							}
							goto case 163;
						case 31:
						case 55:
							num4 = 132;
							num5 = num4;
							break;
						case 132:
							if (num18 < eval_a.d6.Count)
							{
								num4 = 173;
								num5 = num4;
							}
							else
							{
								num4 = 47;
								num5 = num4;
							}
							break;
						case 65:
						case 166:
							num4 = 95;
							num5 = num4;
							break;
						case 95:
							if (num15 < eval_a.d5.Count)
							{
								num4 = 134;
								num5 = num4;
							}
							else
							{
								num4 = 88;
								num5 = num4;
							}
							break;
						case 121:
						case 142:
						case 187:
							num12 = 0;
							num4 = 151;
							num5 = num4;
							break;
						case 12:
						case 74:
							num4 = 0;
							num5 = num4;
							break;
						case 0:
							if (num16 < eval_a.Files.Length)
							{
								num4 = 39;
								num5 = num4;
							}
							else
							{
								num4 = 107;
								num5 = num4;
							}
							break;
						case 152:
							if (text4 == eval_a.d5[num17].DIRS)
							{
								num4 = 116;
								num5 = num4;
								break;
							}
							goto case 165;
						case 23:
							num4 = 156;
							num5 = num4;
							break;
						case 156:
							if (!fILEDELLDIR.EndsWith(NameDirGamePatchTorrent))
							{
								num4 = 133;
								num5 = num4;
								break;
							}
							goto IL_1c22;
						case 19:
						case 59:
							num4 = 126;
							num5 = num4;
							break;
						case 126:
							if (num14 < eval_a.Diles.Length)
							{
								eval_d = false;
								text3 = eval_a.Diles[num14].FullName;
								num4 = 37;
								num5 = num4;
							}
							else
							{
								num4 = 49;
								num5 = num4;
							}
							break;
						case 151:
						case 181:
							num4 = 93;
							num5 = num4;
							break;
						case 93:
							if (num12 < eval_a.eval_d1.Count)
							{
								fILEDELLDIR = eval_a.eval_d1[num12].FILEDELLDIR;
								fILEDELLDIR = fILEDELLDIR.Replace(eval_a.eval_d1[num12].NAMEDELLDIR, "");
								num4 = 21;
								num5 = num4;
							}
							else
							{
								num4 = 136;
								num5 = num4;
							}
							break;
						case 98:
							num22++;
							num4 = 57;
							num5 = num4;
							break;
						case 76:
							try
							{
								CleanFilesAndDirectories(new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.eval_d2[num10].DIRDELLDIR));
							}
							catch
							{
							}
							num4 = 52;
							num5 = num4;
							break;
						case 25:
							if (eval_a.m_eval_b6)
							{
								num4 = 22;
								num5 = num4;
							}
							else
							{
								num4 = 119;
								num5 = num4;
							}
							break;
						case 78:
							num4 = 125;
							num5 = num4;
							break;
						case 125:
							if (!eval_a.Files[num6].DirectoryName.EndsWith(NameDirGamePatchTorrent))
							{
								num4 = 11;
								num5 = num4;
								break;
							}
							goto case 158;
						case 154:
							num7 = 0;
							num4 = 174;
							num5 = num4;
							break;
						case 11:
							num4 = 147;
							num5 = num4;
							break;
						case 147:
							if (!eval_a.Files[num6].DirectoryName.EndsWith("fastresume"))
							{
								num4 = 90;
								num5 = num4;
								break;
							}
							goto case 158;
						case 94:
							{
								eval_d = true;
								num4 = 80;
								num5 = num4;
								break;
							}
							IL_1c22:
							num12++;
							num4 = 181;
							num5 = num4;
							break;
							IL_0b99:
							num10++;
							num4 = 5;
							num5 = num4;
							break;
							end_IL_0352:
							break;
						}
					}
				};
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 1;
							num3 = num;
							continue;
						}
						break;
					case 1:
						((IDisposable)webClient).Dispose();
						num = 2;
						num3 = num;
						continue;
					case 2:
						break;
					}
					break;
				}
			}
		}

		internal void eval_b(object A_0, AsyncCompletedEventArgs A_1)
		{
			int num2;
			short num;
			try
			{
				num = 0;
				num2 = num;
				switch (num2)
				{
				default:
					switch (0)
					{
					default:
						while (true)
						{
							switch (num2)
							{
							case 3:
								if (eval_a.dy.Length == 0L)
								{
									num = 5;
									num2 = num;
								}
								else
								{
									eval_a.dy = new FileInfo(DirLocal + "\\DIRECTORY.log");
									num = 7;
									num2 = num;
								}
								continue;
							case 6:
								eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									short num32 = 24398;
									short num33 = num32;
									num32 = 24398;
									switch (num33 == num32)
									{
									default:
										num32 = 0;
										_ = num32;
										num32 = 1;
										if (num32 != 0)
										{
										}
										num32 = 0;
										if (num32 != 0)
										{
										}
										MessageBoxWindow.Show(eval_a, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										break;
									}
								});
								num = 11;
								num2 = num;
								continue;
							case 7:
								if (eval_a.dy.Length == 0L)
								{
									num = 14;
									num2 = num;
								}
								else
								{
									num = 8;
									num2 = num;
								}
								continue;
							case 9:
							case 11:
								num = 2;
								num2 = num;
								continue;
							case 2:
								return;
							case 10:
							case 12:
								num = 0;
								num2 = num;
								continue;
							case 0:
								return;
							case 14:
								UpdateStatus = false;
								num = 13;
								num2 = num;
								continue;
							case 13:
								if (Langve == "RU")
								{
									num = 6;
									num2 = num;
									continue;
								}
								eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									short num34 = 20700;
									short num35 = num34;
									num34 = 20700;
									switch (num35 == num34)
									{
									default:
										num34 = 0;
										_ = num34;
										num34 = 1;
										if (num34 != 0)
										{
										}
										num34 = 0;
										if (num34 != 0)
										{
										}
										MessageBoxWindow.Show(eval_a, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										break;
									}
								});
								num = 9;
								num2 = num;
								continue;
							case 4:
								eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									short num36 = -11754;
									short num37 = num36;
									num36 = -11754;
									switch (num37 == num36)
									{
									default:
										num36 = 0;
										_ = num36;
										num36 = 1;
										if (num36 != 0)
										{
										}
										num36 = 0;
										if (num36 != 0)
										{
										}
										MessageBoxWindow.Show(eval_a, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										break;
									}
								});
								num = 12;
								num2 = num;
								continue;
							case 5:
								UpdateStatus = false;
								num = 1;
								num2 = num;
								continue;
							case 1:
								if (!(Langve == "RU"))
								{
									eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
									{
										short num38 = 1;
										if (num38 != 0)
										{
										}
										num38 = 1526;
										short num39 = num38;
										num38 = 1526;
										switch (num39 == num38)
										{
										default:
											num38 = 0;
											_ = num38;
											break;
										case true:
											break;
										}
										num38 = 0;
										if (num38 != 0)
										{
										}
										MessageBoxWindow.Show(eval_a, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									});
									num = 10;
									num2 = num;
								}
								else
								{
									num = 4;
									num2 = num;
								}
								continue;
							case 8:
								goto end_IL_0028;
							}
							goto case 0;
							continue;
							end_IL_0028:
							break;
						}
						break;
					case 0:
						eval_a.dy = new FileInfo(DirLocal + "\\FILE.log");
						num = 3;
						num2 = num;
						goto default;
					}
					break;
				}
			}
			catch
			{
			}
			eval_a.eval_d4.Clear();
			eval_a.d3.Clear();
			eval_a.d6.Clear();
			num = 184;
			num2 = num;
			int num4 = default(int);
			int num7 = default(int);
			int num9 = default(int);
			int num8 = default(int);
			int num16 = default(int);
			int num10 = default(int);
			string text = default(string);
			int num5 = default(int);
			int num3 = default(int);
			string text2 = default(string);
			int num6 = default(int);
			string text3 = default(string);
			int num21 = default(int);
			int num15 = default(int);
			string text4 = default(string);
			int num11 = default(int);
			int num18 = default(int);
			string text6 = default(string);
			int num17 = default(int);
			string text5 = default(string);
			int num13 = default(int);
			int num12 = default(int);
			DirectoryInfo directoryInfo4 = default(DirectoryInfo);
			int num14 = default(int);
			int num19 = default(int);
			string text7 = default(string);
			StreamReader streamReader2 = default(StreamReader);
			StreamReader streamReader = default(StreamReader);
			string fILEDELLDIR = default(string);
			while (true)
			{
				switch (num2)
				{
				case 101:
				case 174:
					num = 115;
					num2 = num;
					break;
				case 115:
					switch (0)
					{
					default:
						goto end_IL_0352;
					case 0:
						break;
					}
					goto default;
				default:
					if (num4 >= eval_a.d6.Count)
					{
						num = 20;
						num2 = num;
					}
					else
					{
						num = 33;
						num2 = num;
					}
					break;
				case 53:
					num = 171;
					num2 = num;
					break;
				case 171:
					if (!eval_a.eval_d2[num7].DIRDELLDIR.StartsWith(NameDirGamePatchTorrent))
					{
						num = 76;
						num2 = num;
						break;
					}
					goto IL_0b99;
				case 5:
				case 8:
					num = 168;
					num2 = num;
					break;
				case 168:
					if (num7 >= eval_a.eval_d2.Count)
					{
						num = 117;
						num2 = num;
					}
					else
					{
						num = 100;
						num2 = num;
					}
					break;
				case 79:
					num = 18;
					num2 = num;
					break;
				case 18:
					eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
					{
						short num22 = 31069;
						short num23 = num22;
						num22 = 31069;
						switch (num23 == num22)
						{
						default:
							num22 = 0;
							_ = num22;
							num22 = 0;
							if (num22 != 0)
							{
							}
							num22 = 1;
							if (num22 != 0)
							{
							}
							eval_a.eval_fo.Value++;
							break;
						}
					});
					num = 89;
					num2 = num;
					break;
				case 179:
					num = 24;
					num2 = num;
					break;
				case 24:
					if (!eval_a.eval_d1[num9].FILEDELLDIR.EndsWith(MainWindow.m_eval_ab + ".exe"))
					{
						num = 7;
						num2 = num;
						break;
					}
					goto IL_1c22;
				case 20:
					text5 = string.Empty;
					num8 = 0;
					num = 26;
					num2 = num;
					break;
				case 185:
					num = 3;
					num2 = num;
					break;
				case 3:
					eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
					{
						short num28 = -24546;
						short num29 = num28;
						num28 = -24546;
						switch (num29 == num28)
						{
						default:
							num28 = 0;
							_ = num28;
							num28 = 0;
							if (num28 != 0)
							{
							}
							num28 = 1;
							if (num28 != 0)
							{
							}
							eval_a.eval_fo.Value++;
							break;
						}
					});
					num = 43;
					num2 = num;
					break;
				case 2:
					num16++;
					num = 58;
					num2 = num;
					break;
				case 27:
					if (Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num8]))
					{
						num = 97;
						num2 = num;
						break;
					}
					goto case 107;
				case 81:
					text = eval_a.Files[num10].DirectoryName + "\\" + eval_a.Files[num10].Name;
					text = "\\" + text.Replace(eval_a.Directory_game + "\\", "");
					eval_e = false;
					num5 = 0;
					num = 45;
					num2 = num;
					break;
				case 183:
					text2 = eval_a.Files[num3].DirectoryName + "\\" + eval_a.Files[num3].Name;
					text2 = text2.Replace(eval_a.Directory_game + "\\", string.Empty);
					text2 = "\\" + text2;
					eval_e = false;
					num6 = 0;
					num = 56;
					num2 = num;
					break;
				case 17:
					if (text3 == eval_a.d5[num21].DIRS)
					{
						num = 94;
						num2 = num;
						break;
					}
					goto case 80;
				case 138:
					eval_a.eval_d1.Add(new DELLETEDFILE
					{
						FILEDELLDIR = eval_a.Directory_game + "\\" + text2,
						NAMEDELLDIR = eval_a.Files[num3].Name
					});
					num = 158;
					num2 = num;
					break;
				case 116:
					eval_d = true;
					num = 165;
					num2 = num;
					break;
				case 10:
					if (text5 == eval_a.d3[num16].FILEEXIST)
					{
						num = 82;
						num2 = num;
						break;
					}
					goto case 2;
				case 92:
				case 149:
					num = 177;
					num2 = num;
					break;
				case 177:
					if (num21 < eval_a.d5.Count)
					{
						num = 17;
						num2 = num;
					}
					else
					{
						num = 127;
						num2 = num;
					}
					break;
				case 159:
					num = 187;
					num2 = num;
					break;
				case 107:
					num8++;
					num = 6;
					num2 = num;
					break;
				case 69:
					num = 112;
					num2 = num;
					break;
				case 112:
					if (!eval_a.d6[num15].EndsWith(eval_a.m_eval_ag))
					{
						num = 135;
						num2 = num;
						break;
					}
					goto case 15;
				case 21:
					if (!fILEDELLDIR.EndsWith("cache"))
					{
						num = 23;
						num2 = num;
						break;
					}
					goto IL_1c22;
				case 96:
				case 131:
					num = 62;
					num2 = num;
					break;
				case 62:
					if (num10 >= eval_a.Files.Length)
					{
						num = 145;
						num2 = num;
					}
					else
					{
						num = 70;
						num2 = num;
					}
					break;
				case 32:
				case 38:
					num = 128;
					num2 = num;
					break;
				case 128:
					if (num3 >= eval_a.Files.Length)
					{
						num = 121;
						num2 = num;
					}
					else
					{
						num = 122;
						num2 = num;
					}
					break;
				case 4:
					num5++;
					num = 46;
					num2 = num;
					break;
				case 54:
					if (text4 != eval_a.Directory_game + "\\cache")
					{
						num = 51;
						num2 = num;
						break;
					}
					goto case 98;
				case 30:
					num = 162;
					num2 = num;
					break;
				case 162:
					if (text3 != eval_a.Directory_game + "\\" + NameDirGamePatchTorrent)
					{
						num = 137;
						num2 = num;
						break;
					}
					goto case 114;
				case 114:
					num11++;
					num = 19;
					num2 = num;
					break;
				case 70:
					if (eval_a.Files[num10].DirectoryName != eval_a.Directory_game + "\\" + eval_a.m_eval_ag)
					{
						num = 185;
						num2 = num;
						break;
					}
					goto case 102;
				case 123:
				case 140:
					num = 36;
					num2 = num;
					break;
				case 36:
					if (num18 >= eval_a.Diles.Length)
					{
						num = 108;
						num2 = num;
						break;
					}
					eval_d = false;
					text6 = eval_a.Diles[num18].FullName;
					num = 106;
					num2 = num;
					break;
				case 148:
					num = 161;
					num2 = num;
					break;
				case 161:
					if (text6 != eval_a.Directory_game + "\\" + NameDirGamePatchTorrent)
					{
						num = 169;
						num2 = num;
						break;
					}
					goto case 40;
				case 85:
				{
					DirectoryInfo directoryInfo = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num17]);
					eval_a.Files = directoryInfo.GetFiles("*", SearchOption.TopDirectoryOnly);
					num10 = 0;
					num = 131;
					num2 = num;
					break;
				}
				case 155:
					eval_a.eval_d2.Add(new DELLETEDDIR
					{
						DIRDELLDIR = text4
					});
					num = 98;
					num2 = num;
					break;
				case 91:
					text5 = eval_a.Files[num13].DirectoryName + "\\" + eval_a.Files[num13].Name;
					text5 = "\\" + text5.Replace(eval_a.Directory_game + "\\", "");
					eval_e = false;
					num16 = 0;
					num = 105;
					num2 = num;
					break;
				case 127:
					num = 175;
					num2 = num;
					break;
				case 175:
					if (!eval_d)
					{
						num = 143;
						num2 = num;
						break;
					}
					goto case 114;
				case 102:
					num10++;
					num = 96;
					num2 = num;
					break;
				case 158:
					num3++;
					num = 38;
					num2 = num;
					break;
				case 89:
					if (!eval_a.Files[num13].DirectoryName.EndsWith("cache"))
					{
						num = 75;
						num2 = num;
						break;
					}
					goto case 163;
				case 35:
					num12++;
					num = 65;
					num2 = num;
					break;
				case 52:
					try
					{
						Directory.Delete(eval_a.Directory_game + "\\" + eval_a.eval_d2[num7].DIRDELLDIR);
					}
					catch
					{
					}
					goto IL_0b99;
				case 122:
					eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
					{
						short num30 = 1;
						if (num30 != 0)
						{
						}
						num30 = 4199;
						short num31 = num30;
						num30 = 4199;
						switch (num31 == num30)
						{
						default:
							num30 = 0;
							_ = num30;
							break;
						case true:
							break;
						}
						num30 = 0;
						if (num30 != 0)
						{
						}
						eval_a.eval_fo.Value++;
					});
					num = 64;
					num2 = num;
					break;
				case 9:
					if (text == eval_a.d3[num5].FILEEXIST)
					{
						num = 34;
						num2 = num;
						break;
					}
					goto case 4;
				case 120:
					num = 142;
					num2 = num;
					break;
				case 37:
					if (text3 != eval_a.Directory_game + "\\cache")
					{
						num = 30;
						num2 = num;
						break;
					}
					goto case 114;
				case 173:
					if (Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num15]))
					{
						num = 69;
						num2 = num;
						break;
					}
					goto case 15;
				case 137:
					text3 = text3.Replace(eval_a.Directory_game + "\\", string.Empty);
					num21 = 0;
					num = 149;
					num2 = num;
					break;
				case 43:
					if (!eval_a.Files[num10].DirectoryName.EndsWith("cache"))
					{
						num = 60;
						num2 = num;
						break;
					}
					goto case 102;
				case 22:
					if (GameLicense)
					{
						num = 154;
						num2 = num;
						break;
					}
					directoryInfo4 = new DirectoryInfo(eval_a.Directory_game + "\\");
					eval_a.Diles = directoryInfo4.GetDirectories("*", SearchOption.AllDirectories);
					num18 = 0;
					num = 123;
					num2 = num;
					break;
				case 47:
					text = string.Empty;
					num17 = 0;
					num = 14;
					num2 = num;
					break;
				case 1:
					if (Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num17]))
					{
						num = 85;
						num2 = num;
						break;
					}
					goto case 145;
				case 13:
				case 146:
					num = 48;
					num2 = num;
					break;
				case 48:
					if (num14 >= eval_a.d5.Count)
					{
						num = 170;
						num2 = num;
					}
					else
					{
						num = 152;
						num2 = num;
					}
					break;
				case 160:
					num = 42;
					num2 = num;
					break;
				case 42:
					if (!eval_a.Files[num13].DirectoryName.EndsWith("fastresume"))
					{
						num = 41;
						num2 = num;
						break;
					}
					goto case 163;
				case 109:
					eval_d = true;
					num = 35;
					num2 = num;
					break;
				case 165:
					num14++;
					num = 146;
					num2 = num;
					break;
				case 100:
					if (!eval_a.eval_d2[num7].DIRDELLDIR.StartsWith("cache"))
					{
						num = 53;
						num2 = num;
						break;
					}
					goto IL_0b99;
				case 170:
					num = 111;
					num2 = num;
					break;
				case 111:
					if (!eval_d)
					{
						num = 155;
						num2 = num;
						break;
					}
					goto case 98;
				case 83:
					num = 86;
					num2 = num;
					break;
				case 86:
					if (!eval_a.Files[num10].DirectoryName.EndsWith("fastresume"))
					{
						num = 182;
						num2 = num;
						break;
					}
					goto case 102;
				case 150:
					num = 103;
					num2 = num;
					break;
				case 103:
					if (!eval_e)
					{
						num = 138;
						num2 = num;
						break;
					}
					goto case 158;
				case 119:
					num15 = 0;
					num = 55;
					num2 = num;
					break;
				case 90:
					num = 186;
					num2 = num;
					break;
				case 186:
					if (!eval_a.Files[num3].DirectoryName.EndsWith("metadata"))
					{
						num = 183;
						num2 = num;
						break;
					}
					goto case 158;
				case 77:
				{
					DirectoryInfo directoryInfo5 = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num4]);
					eval_a.Diles = directoryInfo5.GetDirectories("*", SearchOption.TopDirectoryOnly);
					num11 = 0;
					num = 59;
					num2 = num;
					break;
				}
				case 16:
					if (text2 == eval_a.d3[num6].FILEEXIST)
					{
						num = 29;
						num2 = num;
						break;
					}
					goto case 71;
				case 29:
					eval_e = true;
					num = 71;
					num2 = num;
					break;
				case 57:
				case 141:
					num = 124;
					num2 = num;
					break;
				case 124:
					if (num19 < eval_a.Diles.Length)
					{
						eval_d = false;
						text4 = eval_a.Diles[num19].FullName;
						num = 54;
						num2 = num;
					}
					else
					{
						num = 15;
						num2 = num;
					}
					break;
				case 60:
					num = 99;
					num2 = num;
					break;
				case 99:
					if (!eval_a.Files[num10].DirectoryName.EndsWith(NameDirGamePatchTorrent))
					{
						num = 83;
						num2 = num;
						break;
					}
					goto case 102;
				case 40:
					num18++;
					num = 140;
					num2 = num;
					break;
				case 133:
					num = 28;
					num2 = num;
					break;
				case 28:
					if (!fILEDELLDIR.EndsWith("cache\\fastresume"))
					{
						num = 157;
						num2 = num;
						break;
					}
					goto IL_1c22;
				case 117:
					eval_a.eval_ba();
					num = 153;
					num2 = num;
					break;
				case 153:
					return;
				case 129:
					num = 118;
					num2 = num;
					break;
				case 118:
					if (!eval_a.d6[num4].EndsWith(eval_a.m_eval_ag))
					{
						num = 77;
						num2 = num;
						break;
					}
					goto case 49;
				case 71:
					num6++;
					num = 61;
					num2 = num;
					break;
				case 58:
				case 105:
					num = 73;
					num2 = num;
					break;
				case 73:
					if (num16 < eval_a.d3.Count)
					{
						num = 10;
						num2 = num;
					}
					else
					{
						num = 50;
						num2 = num;
					}
					break;
				case 49:
					num = 0;
					_ = num;
					num4++;
					num = 101;
					num2 = num;
					break;
				case 144:
					try
					{
						File.Delete(eval_a.eval_d1[num9].FILEDELLDIR);
					}
					catch
					{
					}
					goto IL_1c22;
				case 106:
					if (text6 != eval_a.Directory_game + "\\cache")
					{
						num = 148;
						num2 = num;
						break;
					}
					goto case 40;
				case 108:
					text2 = string.Empty;
					eval_a.Files = directoryInfo4.GetFiles("*", SearchOption.AllDirectories);
					num3 = 0;
					num = 32;
					num2 = num;
					break;
				case 82:
					eval_e = true;
					num = 2;
					num2 = num;
					break;
				case 184:
					try
					{
						switch (0)
						{
						default:
							while (true)
							{
								switch (num2)
								{
								case 1:
									try
									{
										num = 3;
										num2 = num;
										while (true)
										{
											switch (num2)
											{
											case 3:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											case 2:
												if (!string.IsNullOrEmpty(text7))
												{
													num = 6;
													num2 = num;
													continue;
												}
												goto default;
											case 6:
												eval_a.d3.Add(new FILEINFO
												{
													FILEEXIST = text7.Split('|')[0],
													FILENEWMD5 = text7.Split('|')[1]
												});
												eval_c++;
												num = 5;
												num2 = num;
												continue;
											default:
												num = 4;
												num2 = num;
												continue;
											case 4:
												if ((text7 = streamReader2.ReadLine()) != null)
												{
													num = 2;
													num2 = num;
												}
												else
												{
													num = 0;
													num2 = num;
												}
												continue;
											case 0:
												num = 1;
												num2 = num;
												continue;
											case 1:
												break;
											}
											break;
										}
									}
									finally
									{
										num = 2;
										num2 = num;
										while (true)
										{
											switch (num2)
											{
											case 2:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (streamReader2 != null)
												{
													num = 1;
													num2 = num;
													continue;
												}
												break;
											case 1:
												((IDisposable)streamReader2).Dispose();
												num = 0;
												num2 = num;
												continue;
											case 0:
												break;
											}
											break;
										}
									}
									goto IL_20ae;
								case 2:
								{
									try
									{
										num = 3;
										num2 = num;
										while (true)
										{
											switch (num2)
											{
											case 3:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											case 2:
												if (!string.IsNullOrEmpty(text7))
												{
													num = 6;
													num2 = num;
													continue;
												}
												goto default;
											default:
												num = 5;
												num2 = num;
												continue;
											case 5:
												if ((text7 = streamReader.ReadLine()) != null)
												{
													num = 2;
													num2 = num;
												}
												else
												{
													num = 4;
													num2 = num;
												}
												continue;
											case 6:
												eval_a.d6.Add(text7);
												eval_a.d5.Add(new DIRINFO
												{
													DIRS = text7
												});
												num = 0;
												num2 = num;
												continue;
											case 4:
												num = 1;
												num2 = num;
												continue;
											case 1:
												break;
											}
											break;
										}
									}
									finally
									{
										num = 2;
										num2 = num;
										while (true)
										{
											switch (num2)
											{
											case 2:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (streamReader != null)
												{
													num = 1;
													num2 = num;
													continue;
												}
												break;
											case 1:
												((IDisposable)streamReader).Dispose();
												num = 0;
												num2 = num;
												continue;
											case 0:
												break;
											}
											break;
										}
									}
									text7 = string.Empty;
									streamReader2 = new StreamReader(DirLocal + "\\FILE.log");
									num = 3682;
									short num20 = num;
									num = 3682;
									switch (num20 == num)
									{
									default:
										num = 0;
										if (num != 0)
										{
										}
										num = 1;
										num2 = num;
										continue;
									case false:
									case true:
										break;
									}
									goto IL_20ae;
								}
								case 0:
									goto end_IL_1c9a;
									IL_20ae:
									eval_a.eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
									{
										short num26 = -2589;
										short num27 = num26;
										num26 = -2589;
										switch (num27 == num26)
										{
										default:
											num26 = 0;
											_ = num26;
											num26 = 1;
											if (num26 != 0)
											{
											}
											num26 = 0;
											if (num26 != 0)
											{
											}
											eval_a.eval_fo.Maximum = eval_c + 1;
											break;
										}
									});
									num = 0;
									num2 = num;
									continue;
								}
								goto case 0;
								continue;
								end_IL_1c9a:
								break;
							}
							break;
						case 0:
							text7 = string.Empty;
							streamReader = new StreamReader(DirLocal + "\\DIRECTORY.log");
							num = 2;
							num2 = num;
							goto default;
						}
					}
					catch (Exception ex)
					{
						eval_u CS_0024_003C_003E8__locals0 = new eval_u
						{
							eval_b = this
						};
						Exception a = ex;
						CS_0024_003C_003E8__locals0.a = a;
						UpdateStatus = false;
						eval_a.fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
						{
							short num24 = 1;
							if (num24 != 0)
							{
							}
							num24 = 7801;
							short num25 = num24;
							num24 = 7801;
							switch (num25 == num24)
							{
							default:
								num24 = 0;
								_ = num24;
								break;
							case true:
								break;
							}
							num24 = 0;
							if (num24 != 0)
							{
							}
							MessageBoxWindow.Show(CS_0024_003C_003E8__locals0.eval_b.eval_a, "[ReadFileUpdate] : " + CS_0024_003C_003E8__locals0.a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						});
						return;
					}
					num = 25;
					num2 = num;
					break;
				case 34:
					eval_e = true;
					num = 4;
					num2 = num;
					break;
				case 7:
					num = 67;
					num2 = num;
					break;
				case 67:
					if (!eval_a.eval_d1[num9].FILEDELLDIR.EndsWith("client.ini"))
					{
						num = 144;
						num2 = num;
						break;
					}
					goto IL_1c22;
				case 50:
					num = 63;
					num2 = num;
					break;
				case 63:
					if (!eval_e)
					{
						num = 68;
						num2 = num;
						break;
					}
					goto case 163;
				case 145:
					num17++;
					num = 72;
					num2 = num;
					break;
				case 41:
					num = 110;
					num2 = num;
					break;
				case 110:
					if (!eval_a.Files[num13].DirectoryName.EndsWith("metadata"))
					{
						num = 91;
						num2 = num;
						break;
					}
					goto case 163;
				case 64:
					if (!eval_a.Files[num3].DirectoryName.EndsWith("cache"))
					{
						num = 78;
						num2 = num;
						break;
					}
					goto case 158;
				case 163:
					num13++;
					num = 74;
					num2 = num;
					break;
				case 15:
					num15++;
					num = 31;
					num2 = num;
					break;
				case 14:
				case 72:
					num = 104;
					num2 = num;
					break;
				case 104:
					if (num17 < eval_a.d6.Count)
					{
						num = 1;
						num2 = num;
					}
					else
					{
						num = 120;
						num2 = num;
					}
					break;
				case 51:
					num = 167;
					num2 = num;
					break;
				case 167:
					if (text4 != eval_a.Directory_game + "\\" + NameDirGamePatchTorrent)
					{
						num = 84;
						num2 = num;
						break;
					}
					goto case 98;
				case 97:
				{
					DirectoryInfo directoryInfo3 = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num8]);
					eval_a.Files = directoryInfo3.GetFiles("*", SearchOption.TopDirectoryOnly);
					num13 = 0;
					num = 12;
					num2 = num;
					break;
				}
				case 136:
					num7 = 0;
					num = 8;
					num2 = num;
					break;
				case 88:
					num = 87;
					num2 = num;
					break;
				case 87:
					if (!eval_d)
					{
						num = 113;
						num2 = num;
						break;
					}
					goto case 40;
				case 68:
					eval_a.eval_d1.Add(new DELLETEDFILE
					{
						FILEDELLDIR = eval_a.Directory_game + "\\" + text5,
						NAMEDELLDIR = eval_a.Files[num13].Name
					});
					num = 163;
					num2 = num;
					break;
				case 182:
					num = 130;
					num2 = num;
					break;
				case 130:
					if (!eval_a.Files[num10].DirectoryName.EndsWith("metadata"))
					{
						num = 81;
						num2 = num;
						break;
					}
					goto case 102;
				case 143:
					eval_a.eval_d2.Add(new DELLETEDDIR
					{
						DIRDELLDIR = text3
					});
					num = 114;
					num2 = num;
					break;
				case 134:
					if (text6 == eval_a.d5[num12].DIRS)
					{
						num = 109;
						num2 = num;
						break;
					}
					goto case 35;
				case 45:
				case 46:
					num = 139;
					num2 = num;
					break;
				case 139:
					if (num5 < eval_a.d3.Count)
					{
						num = 9;
						num2 = num;
					}
					else
					{
						num = 176;
						num2 = num;
					}
					break;
				case 80:
					num21++;
					num = 92;
					num2 = num;
					break;
				case 75:
					num = 66;
					num2 = num;
					break;
				case 66:
					if (!eval_a.Files[num13].DirectoryName.EndsWith(NameDirGamePatchTorrent))
					{
						num = 160;
						num2 = num;
						break;
					}
					goto case 163;
				case 135:
				{
					DirectoryInfo directoryInfo2 = new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.d6[num15]);
					eval_a.Diles = directoryInfo2.GetDirectories("*", SearchOption.TopDirectoryOnly);
					num19 = 0;
					num = 141;
					num2 = num;
					break;
				}
				case 56:
				case 61:
					num = 178;
					num2 = num;
					break;
				case 178:
					if (num6 < eval_a.d3.Count)
					{
						num = 16;
						num2 = num;
					}
					else
					{
						num = 150;
						num2 = num;
					}
					break;
				case 6:
				case 26:
					num = 44;
					num2 = num;
					break;
				case 44:
					if (num8 < eval_a.d6.Count)
					{
						num = 27;
						num2 = num;
					}
					else
					{
						num = 159;
						num2 = num;
					}
					break;
				case 176:
					num = 164;
					num2 = num;
					break;
				case 164:
					if (!eval_e)
					{
						num = 180;
						num2 = num;
						break;
					}
					goto case 102;
				case 180:
					num = 1;
					if (num != 0)
					{
					}
					eval_a.eval_d1.Add(new DELLETEDFILE
					{
						FILEDELLDIR = eval_a.Directory_game + "\\" + text,
						NAMEDELLDIR = eval_a.Files[num10].Name
					});
					num = 102;
					num2 = num;
					break;
				case 113:
					eval_a.eval_d2.Add(new DELLETEDDIR
					{
						DIRDELLDIR = text6
					});
					num = 40;
					num2 = num;
					break;
				case 33:
					if (!Directory.Exists(eval_a.Directory_game + "\\" + eval_a.d6[num4]))
					{
						goto case 49;
					}
					num = 129;
					num2 = num;
					break;
				case 157:
					num = 172;
					num2 = num;
					break;
				case 172:
					if (!fILEDELLDIR.EndsWith("cache\\metadata"))
					{
						num = 179;
						num2 = num;
						break;
					}
					goto IL_1c22;
				case 84:
					text4 = text4.Replace(eval_a.Directory_game + "\\", string.Empty);
					num14 = 0;
					num = 13;
					num2 = num;
					break;
				case 169:
					text6 = text6.Replace(eval_a.Directory_game + "\\", string.Empty);
					num12 = 0;
					num = 166;
					num2 = num;
					break;
				case 39:
					if (eval_a.Files[num13].DirectoryName != eval_a.Directory_game + "\\" + eval_a.m_eval_ag)
					{
						num = 79;
						num2 = num;
						break;
					}
					goto case 163;
				case 31:
				case 55:
					num = 132;
					num2 = num;
					break;
				case 132:
					if (num15 < eval_a.d6.Count)
					{
						num = 173;
						num2 = num;
					}
					else
					{
						num = 47;
						num2 = num;
					}
					break;
				case 65:
				case 166:
					num = 95;
					num2 = num;
					break;
				case 95:
					if (num12 < eval_a.d5.Count)
					{
						num = 134;
						num2 = num;
					}
					else
					{
						num = 88;
						num2 = num;
					}
					break;
				case 121:
				case 142:
				case 187:
					num9 = 0;
					num = 151;
					num2 = num;
					break;
				case 12:
				case 74:
					num = 0;
					num2 = num;
					break;
				case 0:
					if (num13 < eval_a.Files.Length)
					{
						num = 39;
						num2 = num;
					}
					else
					{
						num = 107;
						num2 = num;
					}
					break;
				case 152:
					if (text4 == eval_a.d5[num14].DIRS)
					{
						num = 116;
						num2 = num;
						break;
					}
					goto case 165;
				case 23:
					num = 156;
					num2 = num;
					break;
				case 156:
					if (!fILEDELLDIR.EndsWith(NameDirGamePatchTorrent))
					{
						num = 133;
						num2 = num;
						break;
					}
					goto IL_1c22;
				case 19:
				case 59:
					num = 126;
					num2 = num;
					break;
				case 126:
					if (num11 < eval_a.Diles.Length)
					{
						eval_d = false;
						text3 = eval_a.Diles[num11].FullName;
						num = 37;
						num2 = num;
					}
					else
					{
						num = 49;
						num2 = num;
					}
					break;
				case 151:
				case 181:
					num = 93;
					num2 = num;
					break;
				case 93:
					if (num9 < eval_a.eval_d1.Count)
					{
						fILEDELLDIR = eval_a.eval_d1[num9].FILEDELLDIR;
						fILEDELLDIR = fILEDELLDIR.Replace(eval_a.eval_d1[num9].NAMEDELLDIR, "");
						num = 21;
						num2 = num;
					}
					else
					{
						num = 136;
						num2 = num;
					}
					break;
				case 98:
					num19++;
					num = 57;
					num2 = num;
					break;
				case 76:
					try
					{
						CleanFilesAndDirectories(new DirectoryInfo(eval_a.Directory_game + "\\" + eval_a.eval_d2[num7].DIRDELLDIR));
					}
					catch
					{
					}
					num = 52;
					num2 = num;
					break;
				case 25:
					if (eval_a.m_eval_b6)
					{
						num = 22;
						num2 = num;
					}
					else
					{
						num = 119;
						num2 = num;
					}
					break;
				case 78:
					num = 125;
					num2 = num;
					break;
				case 125:
					if (!eval_a.Files[num3].DirectoryName.EndsWith(NameDirGamePatchTorrent))
					{
						num = 11;
						num2 = num;
						break;
					}
					goto case 158;
				case 154:
					num4 = 0;
					num = 174;
					num2 = num;
					break;
				case 11:
					num = 147;
					num2 = num;
					break;
				case 147:
					if (!eval_a.Files[num3].DirectoryName.EndsWith("fastresume"))
					{
						num = 90;
						num2 = num;
						break;
					}
					goto case 158;
				case 94:
					{
						eval_d = true;
						num = 80;
						num2 = num;
						break;
					}
					IL_1c22:
					num9++;
					num = 181;
					num2 = num;
					break;
					IL_0b99:
					num7++;
					num = 5;
					num2 = num;
					break;
					end_IL_0352:
					break;
				}
			}
		}

		internal void eval_o()
		{
			short num = -11754;
			short num2 = num;
			num = -11754;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_a, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}

		internal void eval_n()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 1526;
			short num2 = num;
			num = 1526;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_a, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}

		internal void eval_m()
		{
			short num = 24398;
			short num2 = num;
			num = 24398;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_a, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}

		internal void eval_l()
		{
			short num = 20700;
			short num2 = num;
			num = 20700;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_a, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}

		internal void eval_k()
		{
			short num = -2589;
			short num2 = num;
			num = -2589;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_a.eval_fo.Maximum = eval_c + 1;
		}

		internal void eval_j()
		{
			short num = -24546;
			short num2 = num;
			num = -24546;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_a.eval_fo.Value++;
		}

		internal void eval_i()
		{
			short num = 31069;
			short num2 = num;
			num = 31069;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_a.eval_fo.Value++;
		}

		internal void eval_b()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 4199;
			short num2 = num;
			num = 4199;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_a.eval_fo.Value++;
		}
	}

	[CompilerGenerated]
	private sealed class eval_u
	{
		public Exception a;

		public eval_t eval_b;

		internal void eval_a()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 7801;
			short num2 = num;
			num = 7801;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_b.eval_a, "[ReadFileUpdate] : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
	}

	[CompilerGenerated]
	private sealed class eval_v
	{
		public Exception a;

		public MainWindow eval_b;

		internal void eval_c()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 10377;
			short num2 = num;
			num = 10377;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_b, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}

		internal void eval_a()
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 3784;
			short num2 = num;
			num = 3784;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_b, "Launcher blocks a third-party program or antivirus, add to the exception! " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
	}

	[CompilerGenerated]
	private sealed class eval_w
	{
		public Exception a;

		public MainWindow eval_b;

		internal void eval_c()
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 32248;
			short num2 = num;
			num = 32248;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_b, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! LoadFileResume : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}

		internal void eval_a()
		{
			short num = 0;
			_ = num;
			num = 7346;
			short num2 = num;
			num = 7346;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_b, "Launcher blocks a third-party program or antivirus, add to the exception! LoadFileResume : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
	}

	[CompilerGenerated]
	private sealed class eval_x
	{
		public Exception a;

		public MainWindow eval_b;

		internal void eval_a()
		{
			short num = 0;
			_ = num;
			num = 30602;
			short num2 = num;
			num = 30602;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(eval_b, "StatusFile : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
	}

	[CompilerGenerated]
	private sealed class eval_y
	{
		public string eval_a;

		public MainWindow eval_b;

		internal void eval_c()
		{
			short num;
			try
			{
				num = 0;
				switch (num)
				{
				default:
				{
					num = 10;
					int num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 10:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (eval_a.Contains("WRITEVER"))
							{
								num = 5;
								num2 = num;
								continue;
							}
							goto IL_06b4;
						case 11:
							num = 4;
							num2 = num;
							continue;
						case 18:
							num = 15;
							num2 = num;
							continue;
						case 15:
							if (Langve == "RU")
							{
								num = 3;
								num2 = num;
								continue;
							}
							eval_b.eval_fr.Content = "Ready to play.";
							MessageBoxWindow.Show(eval_b, "The process of updating the game is completed successfully, successful survival on our servers.", name_messege, MessageBoxButton.OK, MessageBoxImage.Asterisk);
							num = 8;
							num2 = num;
							continue;
						case 3:
						{
							num = 16546;
							short num3 = num;
							num = 16546;
							switch (num3 == num)
							{
							default:
								num = 0;
								if (num != 0)
								{
								}
								eval_b.eval_fr.Content = "Готов к игре.";
								MessageBoxWindow.Show(eval_b, "Процесс обновления игры завершен успешно,удачного выживания на наших серверах.", name_messege, MessageBoxButton.OK, MessageBoxImage.Asterisk);
								num = 6;
								num2 = num;
								continue;
							case false:
							case true:
								break;
							}
							goto IL_027d;
						}
						case 23:
							eval_b.eval_f0.AppendText(eval_a.Split(',')[1] + "\r\n");
							num = 0;
							num2 = num;
							continue;
						case 6:
						case 8:
							eval_b.eval_ec = true;
							num = 11;
							num2 = num;
							continue;
						case 17:
							eval_b.eval_fz.AppendText(eval_a.Split(',')[1] + "\r\n");
							num = 20;
							num2 = num;
							continue;
						case 12:
							if (!eval_b.eval_ec)
							{
								num = 18;
								num2 = num;
								continue;
							}
							goto case 11;
						case 25:
							try
							{
								File.Delete(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
							}
							catch (Exception ex6)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(eval_b, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [Sedding #1]" + ex6.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(eval_b, "Launcher blocks a third-party program or antivirus, add to the exception! [Sedding #1]" + ex6.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_0696;
						case 0:
							num = 22;
							num2 = num;
							continue;
						case 22:
							if (eval_a.Contains("Engine"))
							{
								num = 17;
								num2 = num;
								continue;
							}
							goto case 20;
						case 21:
							eval_b.eval_ho.IsEnabled = true;
							eval_b.eval_fq.Content = "";
							eval_b.eval_fo.Value = 0.0;
							eval_b.eval_fp.Content = "";
							eval_b.eval_fs.Content = "";
							eval_b.BoxServer.IsEnabled = true;
							num = 16;
							num2 = num;
							continue;
						case 5:
							eval_b.eval_b8();
							num = 26;
							num2 = num;
							continue;
						case 26:
							if (!eval_b.DownloadMods)
							{
								num = 1;
								num2 = num;
							}
							else
							{
								num = 2;
								num2 = num;
							}
							continue;
						case 14:
							if (File.Exists(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log"))
							{
								num = 25;
								num2 = num;
								continue;
							}
							goto IL_0696;
						case 1:
							try
							{
								StreamWriter streamWriter2 = new StreamWriter(Directory_Launcher + "\\client.ini");
								try
								{
									streamWriter2.WriteLine(Updateclient);
									streamWriter2.Close();
								}
								finally
								{
									num = 1;
									if (num != 0)
									{
									}
									num = 0;
									num2 = num;
									while (true)
									{
										switch (num2)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (streamWriter2 != null)
											{
												num = 2;
												num2 = num;
												continue;
											}
											break;
										case 2:
											((IDisposable)streamWriter2).Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											break;
										}
										break;
									}
								}
							}
							catch (Exception ex5)
							{
								if (!(Langve == "RU"))
								{
									MessageBoxWindow.Show(eval_b, "Launcher blocks a third-party program or antivirus, add to the exception! [write_local_v]" + ex5.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(eval_b, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [write_local_v]" + ex5.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_0508;
						case 19:
							if (eval_a.Contains("DownloadAsync"))
							{
								num = 23;
								num2 = num;
								continue;
							}
							goto case 0;
						case 4:
							try
							{
								SystemSleep.RestoreForCurrentThread();
								SystemSleep.ResetIdle();
							}
							catch (Exception ex4)
							{
								MessageBoxWindow.Show(eval_b, " [RestoreForCurrentThread #0] - " + ex4.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Asterisk);
							}
							goto IL_06b4;
						case 13:
							try
							{
								File.Copy(DirLocal + "\\FILE.log", Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
							}
							catch (Exception ex3)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(eval_b, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [Sedding #2]" + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(eval_b, "Launcher blocks a third-party program or antivirus, add to the exception! [Sedding #2]" + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							num = 7;
							num2 = num;
							continue;
						case 7:
							try
							{
								File.Delete(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName);
							}
							catch (Exception ex2)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(eval_b, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [Sedding #3]" + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(eval_b, "Launcher blocks a third-party program or antivirus, add to the exception! [Sedding #3]" + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_027d;
						case 2:
							try
							{
								StreamWriter streamWriter = new StreamWriter(Directory_Launcher + "\\mods.ini");
								try
								{
									streamWriter.WriteLine(Updatemods);
									streamWriter.Close();
								}
								finally
								{
									num = 0;
									num2 = num;
									while (true)
									{
										switch (num2)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (streamWriter != null)
											{
												num = 2;
												num2 = num;
												continue;
											}
											break;
										case 2:
											((IDisposable)streamWriter).Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											break;
										}
										break;
									}
								}
							}
							catch (Exception ex)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(eval_b, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [write_local_v]" + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(eval_b, "Launcher blocks a third-party program or antivirus, add to the exception! [write_local_v]" + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_0508;
						case 20:
							num = 9;
							num2 = num;
							continue;
						case 9:
							if (eval_a.Contains("StopedUpload"))
							{
								num = 21;
								num2 = num;
								continue;
							}
							break;
						case 16:
							break;
						case 24:
							goto end_IL_003d;
							IL_027d:
							eval_b.eval_ho.IsEnabled = true;
							eval_b.eval_fq.Content = "";
							eval_b.eval_fo.Value = 0.0;
							eval_b.eval_fp.Content = "";
							eval_b.eval_fs.Content = "";
							eval_b.BoxServer.IsEnabled = true;
							UpdateStatus = false;
							CheckGameFileServer = false;
							num = 12;
							num2 = num;
							continue;
							IL_0508:
							eval_b.DownloadMods = false;
							num = 14;
							num2 = num;
							continue;
							IL_06b4:
							num = 19;
							num2 = num;
							continue;
							IL_0696:
							num = 13;
							num2 = num;
							continue;
						}
						num = 24;
						num2 = num;
						continue;
						end_IL_003d:
						break;
					}
					break;
				}
				}
			}
			catch (Exception ex7)
			{
				eval_b.eval_fz.AppendText("UpdateStatus_Message : " + ex7.Message + "\r\n");
			}
			num = 0;
			_ = num;
		}
	}

	[CompilerGenerated]
	private sealed class eval_z
	{
		public CancellationTokenSource eval_a;

		public Task b;

		internal void eval_b(object A_0, ConsoleCancelEventArgs A_1)
		{
			short num = 0;
			_ = num;
			num = 9915;
			short num2 = num;
			num = 9915;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_a.Cancel();
			b.Wait();
		}

		internal void eval_b(object A_0, EventArgs A_1)
		{
			short num = 0;
			_ = num;
			num = -12560;
			short num2 = num;
			num = -12560;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_a.Cancel();
			b.Wait();
		}

		internal void eval_c(object A_0, UnhandledExceptionEventArgs A_1)
		{
			short num = 0;
			_ = num;
			num = -11905;
			short num2 = num;
			num = -11905;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			Console.WriteLine(A_1.ExceptionObject);
			eval_a.Cancel();
			b.Wait();
		}

		internal void eval_b(object A_0, UnhandledExceptionEventArgs A_1)
		{
			short num = 0;
			_ = num;
			num = -30110;
			short num2 = num;
			num = -30110;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			Console.WriteLine(A_1.ExceptionObject);
			eval_a.Cancel();
			b.Wait();
		}
	}

	[CompilerGenerated]
	private sealed class eval_aa
	{
		public string eval_a;

		public MainWindow eval_b;

		internal void eval_c(object A_0, AsyncCompletedEventArgs A_1)
		{
			short num = 0;
			switch (num)
			{
			default:
			{
				num = 243;
				int num2 = num;
				bool flag = default(bool);
				string iMGTOP = default(string);
				IEnumerator enumerator = default(IEnumerator);
				IDisposable disposable = default(IDisposable);
				int num3 = default(int);
				int num7 = default(int);
				int num4 = default(int);
				int num9 = default(int);
				int num8 = default(int);
				int num6 = default(int);
				int num5 = default(int);
				while (true)
				{
					switch (num2)
					{
					case 243:
						switch (0)
						{
						default:
							goto end_IL_0040;
						case 0:
							break;
						}
						goto default;
					default:
						if (File.Exists(DirLocal + "\\stats_" + eval_a + ".xml"))
						{
							num = 258;
							num2 = num;
							break;
						}
						return;
					case 258:
						num = 189;
						num2 = num;
						break;
					case 189:
						if (new FileInfo(DirLocal + "\\stats_" + eval_a + ".xml").Length != 0L)
						{
							num = 162;
							num2 = num;
							break;
						}
						eval_b.eval_fm.UserCountKillZ.Content = "";
						eval_b.eval_fm.UserCountALL.Content = "";
						eval_b.eval_fm.UserCountDistancion.Content = "";
						eval_b.eval_fm.UserCountShoot.Content = "";
						eval_b.eval_fm.UserCountTime.Content = "";
						eval_b.eval_fm.UserCountAnimalls.Content = "";
						eval_b.eval_fm.UserCountKills.Content = "";
						eval_b.eval_fm.LError.Visibility = Visibility.Visible;
						num = 64;
						num2 = num;
						break;
					case 162:
						eval_b.eval_ay();
						eval_b.eval_eu.Clear();
						eval_b.eval_dm.Load(DirLocal + "\\stats_" + eval_a + ".xml");
						flag = false;
						iMGTOP = string.Empty;
						enumerator = eval_b.eval_dm.SelectNodes("/server/ALL/player").GetEnumerator();
						num = 123;
						num2 = num;
						break;
					case 123:
						try
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 2;
									num2 = num;
									continue;
								case 2:
									if (enumerator.MoveNext())
									{
										XmlNode xmlNode3 = (XmlNode)enumerator.Current;
										List<eval_a> eval_eu3 = eval_b.eval_eu;
										eval_a obj3 = new eval_a();
										obj3.eval_q(xmlNode3.SelectSingleNode("Uid").InnerText);
										obj3.eval_p(xmlNode3.SelectSingleNode("Bal").InnerText);
										obj3.eval_o(xmlNode3.SelectSingleNode("Name").InnerText);
										obj3.eval_n(xmlNode3.SelectSingleNode("DistTrav").InnerText);
										obj3.eval_m(xmlNode3.SelectSingleNode("DistTraved").InnerText);
										obj3.eval_l(xmlNode3.SelectSingleNode("longestShot").InnerText);
										obj3.eval_j(xmlNode3.SelectSingleNode("zKillCount").InnerText);
										obj3.eval_h(xmlNode3.SelectSingleNode("timeSurviv").InnerText);
										obj3.eval_c(xmlNode3.SelectSingleNode("timeSurvived").InnerText);
										obj3.eval_b(xmlNode3.SelectSingleNode("KilledCount").InnerText);
										obj3.eval_a(xmlNode3.SelectSingleNode("AnimalsKilledCount").InnerText);
										eval_eu3.Add(obj3);
										num = 1;
										num2 = num;
									}
									else
									{
										num = 4;
										num2 = num;
									}
									continue;
								case 4:
									num = 3;
									num2 = num;
									continue;
								case 3:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 0:
										if (disposable != null)
										{
											num = 1;
											num2 = num;
											continue;
										}
										goto end_IL_075c;
									case 1:
										disposable.Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										goto end_IL_075c;
									}
									goto case 0;
									continue;
									end_IL_075c:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 0;
								num2 = num;
								goto default;
							}
						}
						num3 = 0;
						num = 244;
						num2 = num;
						break;
					case 124:
						if (num3 + 1 <= 30)
						{
							num = 149;
							num2 = num;
							break;
						}
						goto case 102;
					case 149:
						num = 139;
						num2 = num;
						break;
					case 139:
						if (!string.IsNullOrEmpty(eval_b.eval_eu[num3].eval_o()))
						{
							num = 109;
							num2 = num;
							break;
						}
						goto case 161;
					case 109:
						iMGTOP = string.Empty;
						num = 147;
						num2 = num;
						break;
					case 147:
						if (num3 + 1 == 1)
						{
							num = 241;
							num2 = num;
							break;
						}
						goto case 67;
					case 241:
						iMGTOP = "pack://application:,,/Design/gold.png";
						num = 67;
						num2 = num;
						break;
					case 67:
						num = 145;
						num2 = num;
						break;
					case 145:
						if (num3 + 1 == 2)
						{
							num = 137;
							num2 = num;
							break;
						}
						goto case 264;
					case 137:
						iMGTOP = "pack://application:,,/Design/silver.png";
						num = 264;
						num2 = num;
						break;
					case 264:
						num = 71;
						num2 = num;
						break;
					case 71:
						if (num3 + 1 == 3)
						{
							num = 92;
							num2 = num;
							break;
						}
						goto case 136;
					case 92:
						iMGTOP = "pack://application:,,/Design/bronze.png";
						num = 136;
						num2 = num;
						break;
					case 136:
						num = 203;
						num2 = num;
						break;
					case 203:
						if (num3 + 1 != 1)
						{
							num = 198;
							num2 = num;
							break;
						}
						goto IL_0b8e;
					case 198:
						num = 34;
						num2 = num;
						break;
					case 34:
						if (num3 + 1 != 2)
						{
							num = 13;
							num2 = num;
							break;
						}
						goto IL_0b8e;
					case 13:
						num = 239;
						num2 = num;
						break;
					case 239:
						if (num3 + 1 != 3)
						{
							num = 25;
							num2 = num;
							break;
						}
						goto IL_0b8e;
					case 25:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num3 + 1).ToString(),
							LName = eval_b.eval_eu[num3].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num3].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num3].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num3].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num3].eval_h().Replace(" ", string.Empty),
							LKillAnimal_ = eval_b.eval_eu[num3].eval_a(),
							LKillCount_ = eval_b.eval_eu[num3].eval_b()
						};
						eval_b.eval_fm.BoxALL.Items.Add(eval_b.eval_et);
						num = 226;
						num2 = num;
						break;
					case 161:
					case 226:
						eval_b.eval_et.LAnimalCount.Opacity = 90.0;
						eval_b.eval_et.LKillCount.Opacity = 90.0;
						eval_b.eval_et.LDistTrav.Opacity = 90.0;
						eval_b.eval_et.LlongestShot.Opacity = 90.0;
						eval_b.eval_et.LzKillCount.Opacity = 90.0;
						eval_b.eval_et.LtimeSurviv.Opacity = 90.0;
						num = 102;
						num2 = num;
						break;
					case 102:
						num = 113;
						num2 = num;
						break;
					case 113:
						if (eval_b.UID_SC == eval_b.eval_eu[num3].eval_q())
						{
							num = 130;
							num2 = num;
							break;
						}
						goto case 1;
					case 130:
						flag = true;
						num = 201;
						num2 = num;
						break;
					case 201:
						if (Langve == "RU")
						{
							num = 155;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.UserCountALL.Content = "Your position : " + (num3 + 1);
							num = 1;
							num2 = num;
						}
						break;
					case 155:
						eval_b.eval_fm.UserCountALL.Content = "Ваша позиция : " + (num3 + 1);
						num = 36;
						num2 = num;
						break;
					case 1:
					case 36:
						num3++;
						num = 148;
						num2 = num;
						break;
					case 148:
					case 244:
						num = 208;
						num2 = num;
						break;
					case 208:
						if (num3 < eval_b.eval_eu.Count)
						{
							num = 124;
							num2 = num;
						}
						else
						{
							num = 238;
							num2 = num;
						}
						break;
					case 238:
						num = 114;
						num2 = num;
						break;
					case 114:
						if (!flag)
						{
							num = 39;
							num2 = num;
							break;
						}
						goto IL_1032;
					case 39:
						num = 218;
						num2 = num;
						break;
					case 218:
						eval_b.eval_fm.UserCountALL.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
						num = 163;
						num2 = num;
						break;
					case 163:
						num = 1;
						if (num == 0)
						{
						}
						goto IL_1032;
					case 41:
						try
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 1;
									num2 = num;
									continue;
								case 1:
								{
									if (!enumerator.MoveNext())
									{
										num = 2;
										num2 = num;
										continue;
									}
									XmlNode xmlNode6 = (XmlNode)enumerator.Current;
									List<eval_a> eval_eu6 = eval_b.eval_eu;
									eval_a obj6 = new eval_a();
									obj6.eval_q(xmlNode6.SelectSingleNode("Uid").InnerText);
									obj6.eval_p(xmlNode6.SelectSingleNode("Bal").InnerText);
									obj6.eval_o(xmlNode6.SelectSingleNode("Name").InnerText);
									obj6.eval_n(xmlNode6.SelectSingleNode("DistTrav").InnerText);
									obj6.eval_m(xmlNode6.SelectSingleNode("DistTraved").InnerText);
									obj6.eval_l(xmlNode6.SelectSingleNode("longestShot").InnerText);
									obj6.eval_j(xmlNode6.SelectSingleNode("zKillCount").InnerText);
									obj6.eval_h(xmlNode6.SelectSingleNode("timeSurviv").InnerText);
									obj6.eval_c(xmlNode6.SelectSingleNode("timeSurvived").InnerText);
									obj6.eval_b(xmlNode6.SelectSingleNode("KilledCount").InnerText);
									obj6.eval_a(xmlNode6.SelectSingleNode("AnimalsKilledCount").InnerText);
									eval_eu6.Add(obj6);
									num = 4;
									num2 = num;
									continue;
								}
								case 2:
									num = 3;
									num2 = num;
									continue;
								case 3:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 0:
										if (disposable != null)
										{
											num = 1;
											num2 = num;
											continue;
										}
										goto end_IL_1255;
									case 1:
										disposable.Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										goto end_IL_1255;
									}
									goto case 0;
									continue;
									end_IL_1255:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 0;
								num2 = num;
								goto default;
							}
						}
						num7 = 0;
						num = 251;
						num2 = num;
						break;
					case 6:
						if (num7 + 1 <= 30)
						{
							num = 215;
							num2 = num;
							break;
						}
						goto case 211;
					case 215:
						num = 210;
						num2 = num;
						break;
					case 210:
						if (!string.IsNullOrEmpty(eval_b.eval_eu[num7].eval_o()))
						{
							num = 220;
							num2 = num;
							break;
						}
						goto case 20;
					case 220:
						iMGTOP = string.Empty;
						num = 176;
						num2 = num;
						break;
					case 176:
						if (num7 + 1 == 1)
						{
							num = 14;
							num2 = num;
							break;
						}
						goto case 206;
					case 14:
						iMGTOP = "pack://application:,,/Design/gold.png";
						num = 206;
						num2 = num;
						break;
					case 206:
						num = 254;
						num2 = num;
						break;
					case 254:
						if (num7 + 1 == 2)
						{
							num = 153;
							num2 = num;
							break;
						}
						goto case 172;
					case 153:
						iMGTOP = "pack://application:,,/Design/silver.png";
						num = 172;
						num2 = num;
						break;
					case 172:
						num = 168;
						num2 = num;
						break;
					case 168:
						if (num7 + 1 == 3)
						{
							num = 62;
							num2 = num;
							break;
						}
						goto case 159;
					case 62:
						iMGTOP = "pack://application:,,/Design/bronze.png";
						num = 159;
						num2 = num;
						break;
					case 159:
						num = 33;
						num2 = num;
						break;
					case 33:
						if (num7 + 1 != 1)
						{
							num = 165;
							num2 = num;
							break;
						}
						goto IL_1687;
					case 165:
						num = 125;
						num2 = num;
						break;
					case 125:
						if (num7 + 1 != 2)
						{
							num = 170;
							num2 = num;
							break;
						}
						goto IL_1687;
					case 170:
						num = 52;
						num2 = num;
						break;
					case 52:
						if (num7 + 1 != 3)
						{
							num = 144;
							num2 = num;
							break;
						}
						goto IL_1687;
					case 144:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num7 + 1).ToString(),
							LName = eval_b.eval_eu[num7].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num7].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num7].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num7].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num7].eval_h().Replace(" ", string.Empty),
							LKillAnimal_ = eval_b.eval_eu[num7].eval_a(),
							LKillCount_ = eval_b.eval_eu[num7].eval_b()
						};
						eval_b.eval_fm.BoxDistancion.Items.Add(eval_b.eval_et);
						num = 20;
						num2 = num;
						break;
					case 20:
					case 265:
						eval_b.eval_et.LDistTrav.Opacity = 90.0;
						num = 211;
						num2 = num;
						break;
					case 211:
						num = 131;
						num2 = num;
						break;
					case 131:
						if (eval_b.UID_SC == eval_b.eval_eu[num7].eval_q())
						{
							num = 245;
							num2 = num;
							break;
						}
						goto case 88;
					case 245:
						flag = true;
						num = 9;
						num2 = num;
						break;
					case 9:
						if (Langve == "RU")
						{
							num = 81;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.UserCountDistancion.Content = "Your position : " + (num7 + 1);
							num = 105;
							num2 = num;
						}
						break;
					case 81:
						eval_b.eval_fm.UserCountDistancion.Content = "Ваша позиция : " + (num7 + 1);
						num = 88;
						num2 = num;
						break;
					case 88:
					case 105:
						num7++;
						num = 4;
						num2 = num;
						break;
					case 4:
					case 251:
						num = 173;
						num2 = num;
						break;
					case 173:
						if (num7 < eval_b.eval_eu.Count)
						{
							num = 6;
							num2 = num;
						}
						else
						{
							num = 118;
							num2 = num;
						}
						break;
					case 118:
						num = 103;
						num2 = num;
						break;
					case 103:
						if (!flag)
						{
							num = 30;
							num2 = num;
							break;
						}
						goto case 233;
					case 30:
						num = 83;
						num2 = num;
						break;
					case 83:
						eval_b.eval_fm.UserCountDistancion.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
						num = 233;
						num2 = num;
						break;
					case 233:
						eval_b.eval_eu.Clear();
						flag = false;
						enumerator = eval_b.eval_dm.SelectNodes("/server/LongestShot/player").GetEnumerator();
						num = 69;
						num2 = num;
						break;
					case 69:
						try
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 2;
									num2 = num;
									continue;
								case 2:
									if (enumerator.MoveNext())
									{
										XmlNode xmlNode = (XmlNode)enumerator.Current;
										List<eval_a> eval_eu = eval_b.eval_eu;
										eval_a obj = new eval_a();
										obj.eval_q(xmlNode.SelectSingleNode("Uid").InnerText);
										obj.eval_p(xmlNode.SelectSingleNode("Bal").InnerText);
										obj.eval_o(xmlNode.SelectSingleNode("Name").InnerText);
										obj.eval_n(xmlNode.SelectSingleNode("DistTrav").InnerText);
										obj.eval_m(xmlNode.SelectSingleNode("DistTraved").InnerText);
										obj.eval_l(xmlNode.SelectSingleNode("longestShot").InnerText);
										obj.eval_j(xmlNode.SelectSingleNode("zKillCount").InnerText);
										obj.eval_h(xmlNode.SelectSingleNode("timeSurviv").InnerText);
										obj.eval_c(xmlNode.SelectSingleNode("timeSurvived").InnerText);
										obj.eval_b(xmlNode.SelectSingleNode("KilledCount").InnerText);
										obj.eval_a(xmlNode.SelectSingleNode("AnimalsKilledCount").InnerText);
										eval_eu.Add(obj);
										num = 1;
										num2 = num;
									}
									else
									{
										num = 4;
										num2 = num;
									}
									continue;
								case 4:
									num = 3;
									num2 = num;
									continue;
								case 3:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 0:
										if (disposable != null)
										{
											num = 1;
											num2 = num;
											continue;
										}
										goto end_IL_1c97;
									case 1:
										disposable.Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										goto end_IL_1c97;
									}
									goto case 0;
									continue;
									end_IL_1c97:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 0;
								num2 = num;
								goto default;
							}
						}
						num4 = 0;
						num = 178;
						num2 = num;
						break;
					case 29:
						if (num4 + 1 <= 30)
						{
							num = 235;
							num2 = num;
							break;
						}
						goto case 107;
					case 235:
						num = 3;
						num2 = num;
						break;
					case 3:
						if (!string.IsNullOrEmpty(eval_b.eval_eu[num4].eval_o()))
						{
							num = 24;
							num2 = num;
							break;
						}
						goto case 122;
					case 24:
						iMGTOP = string.Empty;
						num = 66;
						num2 = num;
						break;
					case 66:
						if (num4 + 1 == 1)
						{
							num = 143;
							num2 = num;
							break;
						}
						goto case 61;
					case 143:
						iMGTOP = "pack://application:,,/Design/gold.png";
						num = 61;
						num2 = num;
						break;
					case 61:
						num = 129;
						num2 = num;
						break;
					case 129:
						if (num4 + 1 == 2)
						{
							num = 106;
							num2 = num;
							break;
						}
						goto case 150;
					case 106:
						iMGTOP = "pack://application:,,/Design/silver.png";
						num = 150;
						num2 = num;
						break;
					case 150:
						num = 177;
						num2 = num;
						break;
					case 177:
						if (num4 + 1 == 3)
						{
							num = 37;
							num2 = num;
							break;
						}
						goto case 54;
					case 37:
						iMGTOP = "pack://application:,,/Design/bronze.png";
						num = 54;
						num2 = num;
						break;
					case 54:
						num = 0;
						_ = num;
						num = 194;
						num2 = num;
						break;
					case 194:
						if (num4 + 1 != 1)
						{
							num = 142;
							num2 = num;
							break;
						}
						goto IL_20e8;
					case 142:
						num = 234;
						num2 = num;
						break;
					case 234:
						if (num4 + 1 != 2)
						{
							num = 255;
							num2 = num;
							break;
						}
						goto IL_20e8;
					case 255:
						num = 48;
						num2 = num;
						break;
					case 48:
						if (num4 + 1 != 3)
						{
							num = 183;
							num2 = num;
							break;
						}
						goto IL_20e8;
					case 183:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num4 + 1).ToString(),
							LName = eval_b.eval_eu[num4].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num4].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num4].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num4].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num4].eval_h().Replace(" ", string.Empty),
							LKillAnimal_ = eval_b.eval_eu[num4].eval_a(),
							LKillCount_ = eval_b.eval_eu[num4].eval_b()
						};
						eval_b.eval_fm.BoxShoot.Items.Add(eval_b.eval_et);
						num = 222;
						num2 = num;
						break;
					case 122:
					case 222:
						eval_b.eval_et.LlongestShot.Opacity = 90.0;
						num = 107;
						num2 = num;
						break;
					case 107:
						num = 110;
						num2 = num;
						break;
					case 110:
						if (eval_b.UID_SC == eval_b.eval_eu[num4].eval_q())
						{
							num = 171;
							num2 = num;
							break;
						}
						goto case 21;
					case 171:
						flag = true;
						num = 246;
						num2 = num;
						break;
					case 246:
						if (Langve == "RU")
						{
							num = 205;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.UserCountShoot.Content = "Your position : " + (num4 + 1);
							num = 21;
							num2 = num;
						}
						break;
					case 205:
						eval_b.eval_fm.UserCountShoot.Content = "Ваша позиция : " + (num4 + 1);
						num = 252;
						num2 = num;
						break;
					case 21:
					case 252:
						num4++;
						num = 156;
						num2 = num;
						break;
					case 156:
					case 178:
						num = 85;
						num2 = num;
						break;
					case 85:
						if (num4 < eval_b.eval_eu.Count)
						{
							num = 29;
							num2 = num;
						}
						else
						{
							num = 49;
							num2 = num;
						}
						break;
					case 49:
						num = 75;
						num2 = num;
						break;
					case 75:
						if (!flag)
						{
							num = 231;
							num2 = num;
							break;
						}
						goto case 214;
					case 231:
						num = 19;
						num2 = num;
						break;
					case 19:
						eval_b.eval_fm.UserCountShoot.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
						num = 214;
						num2 = num;
						break;
					case 214:
						eval_b.eval_eu.Clear();
						flag = false;
						enumerator = eval_b.eval_dm.SelectNodes("/server/Time/player").GetEnumerator();
						num = 89;
						num2 = num;
						break;
					case 89:
						try
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 2;
									num2 = num;
									continue;
								case 2:
									if (enumerator.MoveNext())
									{
										XmlNode xmlNode7 = (XmlNode)enumerator.Current;
										List<eval_a> eval_eu7 = eval_b.eval_eu;
										eval_a obj7 = new eval_a();
										obj7.eval_q(xmlNode7.SelectSingleNode("Uid").InnerText);
										obj7.eval_p(xmlNode7.SelectSingleNode("Bal").InnerText);
										obj7.eval_o(xmlNode7.SelectSingleNode("Name").InnerText);
										obj7.eval_n(xmlNode7.SelectSingleNode("DistTrav").InnerText);
										obj7.eval_m(xmlNode7.SelectSingleNode("DistTraved").InnerText);
										obj7.eval_l(xmlNode7.SelectSingleNode("longestShot").InnerText);
										obj7.eval_j(xmlNode7.SelectSingleNode("zKillCount").InnerText);
										obj7.eval_h(xmlNode7.SelectSingleNode("timeSurviv").InnerText);
										obj7.eval_c(xmlNode7.SelectSingleNode("timeSurvived").InnerText);
										obj7.eval_b(xmlNode7.SelectSingleNode("KilledCount").InnerText);
										obj7.eval_a(xmlNode7.SelectSingleNode("AnimalsKilledCount").InnerText);
										eval_eu7.Add(obj7);
										num = 1;
										num2 = num;
									}
									else
									{
										num = 4;
										num2 = num;
									}
									continue;
								case 4:
									num = 3;
									num2 = num;
									continue;
								case 3:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 0:
										if (disposable != null)
										{
											num = 1;
											num2 = num;
											continue;
										}
										goto end_IL_26f7;
									case 1:
										disposable.Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										goto end_IL_26f7;
									}
									goto case 0;
									continue;
									end_IL_26f7:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 0;
								num2 = num;
								goto default;
							}
						}
						num9 = 0;
						num = 132;
						num2 = num;
						break;
					case 196:
						if (num9 + 1 <= 30)
						{
							num = 46;
							num2 = num;
							break;
						}
						goto case 93;
					case 46:
						num = 38;
						num2 = num;
						break;
					case 38:
						if (!string.IsNullOrEmpty(eval_b.eval_eu[num9].eval_o()))
						{
							num = 204;
							num2 = num;
							break;
						}
						goto case 2;
					case 204:
						iMGTOP = string.Empty;
						num = 82;
						num2 = num;
						break;
					case 82:
						if (num9 + 1 == 1)
						{
							num = 227;
							num2 = num;
							break;
						}
						goto case 22;
					case 227:
						iMGTOP = "pack://application:,,/Design/gold.png";
						num = 22;
						num2 = num;
						break;
					case 22:
						num = 74;
						num2 = num;
						break;
					case 74:
						if (num9 + 1 == 2)
						{
							num = 80;
							num2 = num;
							break;
						}
						goto case 72;
					case 80:
						iMGTOP = "pack://application:,,/Design/silver.png";
						num = 72;
						num2 = num;
						break;
					case 72:
						num = 256;
						num2 = num;
						break;
					case 256:
						if (num9 + 1 == 3)
						{
							num = 51;
							num2 = num;
							break;
						}
						goto case 44;
					case 51:
						iMGTOP = "pack://application:,,/Design/bronze.png";
						num = 44;
						num2 = num;
						break;
					case 44:
						num = 55;
						num2 = num;
						break;
					case 55:
						if (num9 + 1 != 1)
						{
							num = 257;
							num2 = num;
							break;
						}
						goto IL_2b6f;
					case 257:
						num = 249;
						num2 = num;
						break;
					case 249:
					{
						if (num9 + 1 == 2)
						{
							goto IL_2b6f;
						}
						num = 15426;
						short num10 = num;
						num = 15426;
						switch (num10 == num)
						{
						default:
							num = 0;
							if (num != 0)
							{
							}
							num = 10;
							num2 = num;
							goto end_IL_0040;
						case false:
						case true:
							break;
						}
						goto IL_38da;
					}
					case 10:
						num = 217;
						num2 = num;
						break;
					case 217:
						if (num9 + 1 != 3)
						{
							num = 192;
							num2 = num;
							break;
						}
						goto IL_2b6f;
					case 192:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num9 + 1).ToString(),
							LName = eval_b.eval_eu[num9].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num9].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num9].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num9].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num9].eval_h().Replace(" ", string.Empty),
							LKillAnimal_ = eval_b.eval_eu[num9].eval_a(),
							LKillCount_ = eval_b.eval_eu[num9].eval_b()
						};
						eval_b.eval_fm.BoxTime.Items.Add(eval_b.eval_et);
						num = 5;
						num2 = num;
						break;
					case 2:
					case 5:
						eval_b.eval_et.LtimeSurviv.Opacity = 90.0;
						num = 93;
						num2 = num;
						break;
					case 93:
						num = 202;
						num2 = num;
						break;
					case 202:
						if (eval_b.UID_SC == eval_b.eval_eu[num9].eval_q())
						{
							num = 59;
							num2 = num;
							break;
						}
						goto case 31;
					case 59:
						flag = true;
						num = 50;
						num2 = num;
						break;
					case 50:
						if (Langve == "RU")
						{
							num = 134;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.UserCountTime.Content = "Your position : " + (num9 + 1);
							num = 57;
							num2 = num;
						}
						break;
					case 134:
						eval_b.eval_fm.UserCountTime.Content = "Ваша позиция : " + (num9 + 1);
						num = 31;
						num2 = num;
						break;
					case 31:
					case 57:
						num9++;
						num = 18;
						num2 = num;
						break;
					case 18:
					case 132:
						num = 104;
						num2 = num;
						break;
					case 104:
						if (num9 < eval_b.eval_eu.Count)
						{
							num = 196;
							num2 = num;
						}
						else
						{
							num = 224;
							num2 = num;
						}
						break;
					case 224:
						num = 115;
						num2 = num;
						break;
					case 115:
						if (!flag)
						{
							num = 135;
							num2 = num;
							break;
						}
						goto case 100;
					case 135:
						num = 127;
						num2 = num;
						break;
					case 127:
						eval_b.eval_fm.UserCountTime.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
						num = 100;
						num2 = num;
						break;
					case 100:
						eval_b.eval_eu.Clear();
						flag = false;
						enumerator = eval_b.eval_dm.SelectNodes("/server/ZKilled/player").GetEnumerator();
						num = 138;
						num2 = num;
						break;
					case 138:
						try
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 2;
									num2 = num;
									continue;
								case 2:
									if (enumerator.MoveNext())
									{
										XmlNode xmlNode5 = (XmlNode)enumerator.Current;
										List<eval_a> eval_eu5 = eval_b.eval_eu;
										eval_a obj5 = new eval_a();
										obj5.eval_q(xmlNode5.SelectSingleNode("Uid").InnerText);
										obj5.eval_p(xmlNode5.SelectSingleNode("Bal").InnerText);
										obj5.eval_o(xmlNode5.SelectSingleNode("Name").InnerText);
										obj5.eval_n(xmlNode5.SelectSingleNode("DistTrav").InnerText);
										obj5.eval_m(xmlNode5.SelectSingleNode("DistTraved").InnerText);
										obj5.eval_l(xmlNode5.SelectSingleNode("longestShot").InnerText);
										obj5.eval_j(xmlNode5.SelectSingleNode("zKillCount").InnerText);
										obj5.eval_h(xmlNode5.SelectSingleNode("timeSurviv").InnerText);
										obj5.eval_c(xmlNode5.SelectSingleNode("timeSurvived").InnerText);
										obj5.eval_b(xmlNode5.SelectSingleNode("KilledCount").InnerText);
										obj5.eval_a(xmlNode5.SelectSingleNode("AnimalsKilledCount").InnerText);
										eval_eu5.Add(obj5);
										num = 1;
										num2 = num;
									}
									else
									{
										num = 4;
										num2 = num;
									}
									continue;
								case 4:
									num = 3;
									num2 = num;
									continue;
								case 3:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 0:
										if (disposable != null)
										{
											num = 1;
											num2 = num;
											continue;
										}
										goto end_IL_317b;
									case 1:
										disposable.Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										goto end_IL_317b;
									}
									goto case 0;
									continue;
									end_IL_317b:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 0;
								num2 = num;
								goto default;
							}
						}
						num8 = 0;
						num = 250;
						num2 = num;
						break;
					case 28:
						if (num8 + 1 <= 30)
						{
							num = 42;
							num2 = num;
							break;
						}
						goto case 58;
					case 42:
						num = 186;
						num2 = num;
						break;
					case 186:
						if (!string.IsNullOrEmpty(eval_b.eval_eu[num8].eval_o()))
						{
							num = 187;
							num2 = num;
							break;
						}
						goto case 195;
					case 187:
						iMGTOP = string.Empty;
						num = 179;
						num2 = num;
						break;
					case 179:
						if (num8 + 1 == 1)
						{
							num = 260;
							num2 = num;
							break;
						}
						goto case 84;
					case 260:
						iMGTOP = "pack://application:,,/Design/gold.png";
						num = 84;
						num2 = num;
						break;
					case 84:
						num = 119;
						num2 = num;
						break;
					case 119:
						if (num8 + 1 == 2)
						{
							num = 90;
							num2 = num;
							break;
						}
						goto case 16;
					case 90:
						iMGTOP = "pack://application:,,/Design/silver.png";
						num = 16;
						num2 = num;
						break;
					case 16:
						num = 126;
						num2 = num;
						break;
					case 126:
						if (num8 + 1 == 3)
						{
							num = 23;
							num2 = num;
							break;
						}
						goto case 240;
					case 23:
						iMGTOP = "pack://application:,,/Design/bronze.png";
						num = 240;
						num2 = num;
						break;
					case 240:
						num = 146;
						num2 = num;
						break;
					case 146:
						if (num8 + 1 != 1)
						{
							num = 185;
							num2 = num;
							break;
						}
						goto IL_35a9;
					case 185:
						num = 184;
						num2 = num;
						break;
					case 184:
						if (num8 + 1 != 2)
						{
							num = 56;
							num2 = num;
							break;
						}
						goto IL_35a9;
					case 56:
						num = 11;
						num2 = num;
						break;
					case 11:
						if (num8 + 1 != 3)
						{
							num = 219;
							num2 = num;
							break;
						}
						goto IL_35a9;
					case 219:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num8 + 1).ToString(),
							LName = eval_b.eval_eu[num8].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num8].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num8].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num8].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num8].eval_h().Replace(" ", string.Empty),
							LKillAnimal_ = eval_b.eval_eu[num8].eval_a(),
							LKillCount_ = eval_b.eval_eu[num8].eval_b()
						};
						eval_b.eval_fm.BoxKillZ.Items.Add(eval_b.eval_et);
						num = 199;
						num2 = num;
						break;
					case 195:
					case 199:
						eval_b.eval_et.LzKillCount.Opacity = 90.0;
						num = 58;
						num2 = num;
						break;
					case 58:
						num = 140;
						num2 = num;
						break;
					case 140:
						if (eval_b.UID_SC == eval_b.eval_eu[num8].eval_q())
						{
							num = 175;
							num2 = num;
							break;
						}
						goto case 96;
					case 175:
						flag = true;
						num = 91;
						num2 = num;
						break;
					case 91:
						if (Langve == "RU")
						{
							num = 262;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.UserCountKillZ.Content = "Your position : " + (num8 + 1);
							num = 164;
							num2 = num;
						}
						break;
					case 262:
						eval_b.eval_fm.UserCountKillZ.Content = "Ваша позиция : " + (num8 + 1);
						num = 96;
						num2 = num;
						break;
					case 96:
					case 164:
						num8++;
						num = 108;
						num2 = num;
						break;
					case 108:
					case 250:
						num = 26;
						num2 = num;
						break;
					case 26:
						if (num8 < eval_b.eval_eu.Count)
						{
							num = 28;
							num2 = num;
							break;
						}
						goto IL_38da;
					case 197:
						num = 242;
						num2 = num;
						break;
					case 242:
						if (!flag)
						{
							num = 112;
							num2 = num;
							break;
						}
						goto case 232;
					case 112:
						num = 182;
						num2 = num;
						break;
					case 182:
						eval_b.eval_fm.UserCountKillZ.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
						num = 232;
						num2 = num;
						break;
					case 232:
						eval_b.eval_eu.Clear();
						flag = false;
						enumerator = eval_b.eval_dm.SelectNodes("/server/AnimalsKilled/player").GetEnumerator();
						num = 212;
						num2 = num;
						break;
					case 212:
						try
						{
							num = 2;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 2:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 0;
									num2 = num;
									continue;
								case 0:
									if (enumerator.MoveNext())
									{
										XmlNode xmlNode4 = (XmlNode)enumerator.Current;
										List<eval_a> eval_eu4 = eval_b.eval_eu;
										eval_a obj4 = new eval_a();
										obj4.eval_q(xmlNode4.SelectSingleNode("Uid").InnerText);
										obj4.eval_p(xmlNode4.SelectSingleNode("Bal").InnerText);
										obj4.eval_o(xmlNode4.SelectSingleNode("Name").InnerText);
										obj4.eval_n(xmlNode4.SelectSingleNode("DistTrav").InnerText);
										obj4.eval_m(xmlNode4.SelectSingleNode("DistTraved").InnerText);
										obj4.eval_l(xmlNode4.SelectSingleNode("longestShot").InnerText);
										obj4.eval_j(xmlNode4.SelectSingleNode("zKillCount").InnerText);
										obj4.eval_h(xmlNode4.SelectSingleNode("timeSurviv").InnerText);
										obj4.eval_c(xmlNode4.SelectSingleNode("timeSurvived").InnerText);
										obj4.eval_b(xmlNode4.SelectSingleNode("KilledCount").InnerText);
										obj4.eval_a(xmlNode4.SelectSingleNode("AnimalsKilledCount").InnerText);
										eval_eu4.Add(obj4);
										num = 3;
										num2 = num;
									}
									else
									{
										num = 4;
										num2 = num;
									}
									continue;
								case 4:
									num = 1;
									num2 = num;
									continue;
								case 1:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 1:
										if (disposable != null)
										{
											num = 2;
											num2 = num;
											continue;
										}
										goto end_IL_3bbd;
									case 2:
										disposable.Dispose();
										num = 0;
										num2 = num;
										continue;
									case 0:
										goto end_IL_3bbd;
									}
									goto case 0;
									continue;
									end_IL_3bbd:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 1;
								num2 = num;
								goto default;
							}
						}
						num6 = 0;
						num = 160;
						num2 = num;
						break;
					case 0:
						if (num6 + 1 <= 30)
						{
							num = 259;
							num2 = num;
							break;
						}
						goto case 120;
					case 259:
						num = 133;
						num2 = num;
						break;
					case 133:
						if (!string.IsNullOrEmpty(eval_b.eval_eu[num6].eval_o()))
						{
							num = 236;
							num2 = num;
							break;
						}
						goto case 98;
					case 236:
						iMGTOP = string.Empty;
						num = 200;
						num2 = num;
						break;
					case 200:
						if (num6 + 1 == 1)
						{
							num = 190;
							num2 = num;
							break;
						}
						goto case 8;
					case 190:
						iMGTOP = "pack://application:,,/Design/gold.png";
						num = 8;
						num2 = num;
						break;
					case 8:
						num = 47;
						num2 = num;
						break;
					case 47:
						if (num6 + 1 == 2)
						{
							num = 43;
							num2 = num;
							break;
						}
						goto case 111;
					case 43:
						iMGTOP = "pack://application:,,/Design/silver.png";
						num = 111;
						num2 = num;
						break;
					case 111:
						num = 97;
						num2 = num;
						break;
					case 97:
						if (num6 + 1 == 3)
						{
							num = 247;
							num2 = num;
							break;
						}
						goto case 63;
					case 247:
						iMGTOP = "pack://application:,,/Design/bronze.png";
						num = 63;
						num2 = num;
						break;
					case 63:
						num = 45;
						num2 = num;
						break;
					case 45:
						if (num6 + 1 != 1)
						{
							num = 221;
							num2 = num;
							break;
						}
						goto IL_3fe5;
					case 221:
						num = 167;
						num2 = num;
						break;
					case 167:
						if (num6 + 1 != 2)
						{
							num = 32;
							num2 = num;
							break;
						}
						goto IL_3fe5;
					case 32:
						num = 193;
						num2 = num;
						break;
					case 193:
						if (num6 + 1 != 3)
						{
							num = 141;
							num2 = num;
							break;
						}
						goto IL_3fe5;
					case 141:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num6 + 1).ToString(),
							LName = eval_b.eval_eu[num6].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num6].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num6].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num6].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num6].eval_h().Replace(" ", string.Empty),
							LKillAnimal_ = eval_b.eval_eu[num6].eval_a(),
							LKillCount_ = eval_b.eval_eu[num6].eval_b()
						};
						eval_b.eval_fm.BoxAnimall.Items.Add(eval_b.eval_et);
						num = 98;
						num2 = num;
						break;
					case 98:
					case 225:
						eval_b.eval_et.LAnimalCount.Opacity = 90.0;
						num = 120;
						num2 = num;
						break;
					case 120:
						num = 181;
						num2 = num;
						break;
					case 181:
						if (eval_b.UID_SC == eval_b.eval_eu[num6].eval_q())
						{
							num = 117;
							num2 = num;
							break;
						}
						goto case 17;
					case 117:
						flag = true;
						num = 76;
						num2 = num;
						break;
					case 76:
						if (Langve == "RU")
						{
							num = 209;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.UserCountAnimalls.Content = "Your position : " + (num6 + 1);
							num = 17;
							num2 = num;
						}
						break;
					case 209:
						eval_b.eval_fm.UserCountAnimalls.Content = "Ваша позиция : " + (num6 + 1);
						num = 237;
						num2 = num;
						break;
					case 17:
					case 237:
						num6++;
						num = 87;
						num2 = num;
						break;
					case 87:
					case 160:
						num = 60;
						num2 = num;
						break;
					case 60:
						if (num6 < eval_b.eval_eu.Count)
						{
							num = 0;
							num2 = num;
						}
						else
						{
							num = 188;
							num2 = num;
						}
						break;
					case 188:
						num = 78;
						num2 = num;
						break;
					case 78:
						if (!flag)
						{
							num = 77;
							num2 = num;
							break;
						}
						goto case 101;
					case 77:
						num = 180;
						num2 = num;
						break;
					case 180:
						eval_b.eval_fm.UserCountAnimalls.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
						num = 101;
						num2 = num;
						break;
					case 101:
						eval_b.eval_eu.Clear();
						flag = false;
						enumerator = eval_b.eval_dm.SelectNodes("/server/Kills/player").GetEnumerator();
						num = 35;
						num2 = num;
						break;
					case 35:
						try
						{
							num = 2;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 2:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 0;
									num2 = num;
									continue;
								case 0:
									if (enumerator.MoveNext())
									{
										XmlNode xmlNode2 = (XmlNode)enumerator.Current;
										List<eval_a> eval_eu2 = eval_b.eval_eu;
										eval_a obj2 = new eval_a();
										obj2.eval_q(xmlNode2.SelectSingleNode("Uid").InnerText);
										obj2.eval_p(xmlNode2.SelectSingleNode("Bal").InnerText);
										obj2.eval_o(xmlNode2.SelectSingleNode("Name").InnerText);
										obj2.eval_n(xmlNode2.SelectSingleNode("DistTrav").InnerText);
										obj2.eval_m(xmlNode2.SelectSingleNode("DistTraved").InnerText);
										obj2.eval_l(xmlNode2.SelectSingleNode("longestShot").InnerText);
										obj2.eval_j(xmlNode2.SelectSingleNode("zKillCount").InnerText);
										obj2.eval_h(xmlNode2.SelectSingleNode("timeSurviv").InnerText);
										obj2.eval_c(xmlNode2.SelectSingleNode("timeSurvived").InnerText);
										obj2.eval_b(xmlNode2.SelectSingleNode("KilledCount").InnerText);
										obj2.eval_a(xmlNode2.SelectSingleNode("AnimalsKilledCount").InnerText);
										eval_eu2.Add(obj2);
										num = 3;
										num2 = num;
									}
									else
									{
										num = 4;
										num2 = num;
									}
									continue;
								case 4:
									num = 1;
									num2 = num;
									continue;
								case 1:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 1:
										if (disposable != null)
										{
											num = 2;
											num2 = num;
											continue;
										}
										goto end_IL_45ec;
									case 2:
										disposable.Dispose();
										num = 0;
										num2 = num;
										continue;
									case 0:
										goto end_IL_45ec;
									}
									goto case 0;
									continue;
									end_IL_45ec:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 1;
								num2 = num;
								goto default;
							}
						}
						num5 = 0;
						num = 152;
						num2 = num;
						break;
					case 216:
						if (num5 + 1 <= 30)
						{
							num = 12;
							num2 = num;
							break;
						}
						goto case 207;
					case 12:
						num = 158;
						num2 = num;
						break;
					case 158:
						if (!string.IsNullOrEmpty(eval_b.eval_eu[num5].eval_o()))
						{
							num = 253;
							num2 = num;
							break;
						}
						goto case 27;
					case 253:
						iMGTOP = string.Empty;
						num = 70;
						num2 = num;
						break;
					case 70:
						if (num5 + 1 == 1)
						{
							num = 154;
							num2 = num;
							break;
						}
						goto case 169;
					case 154:
						iMGTOP = "pack://application:,,/Design/gold.png";
						num = 169;
						num2 = num;
						break;
					case 169:
						num = 53;
						num2 = num;
						break;
					case 53:
						if (num5 + 1 == 2)
						{
							num = 191;
							num2 = num;
							break;
						}
						goto case 65;
					case 191:
						iMGTOP = "pack://application:,,/Design/silver.png";
						num = 65;
						num2 = num;
						break;
					case 65:
						num = 79;
						num2 = num;
						break;
					case 79:
						if (num5 + 1 == 3)
						{
							num = 99;
							num2 = num;
							break;
						}
						goto case 229;
					case 99:
						iMGTOP = "pack://application:,,/Design/bronze.png";
						num = 229;
						num2 = num;
						break;
					case 229:
						num = 228;
						num2 = num;
						break;
					case 228:
						if (num5 + 1 != 1)
						{
							num = 68;
							num2 = num;
							break;
						}
						goto IL_4a1b;
					case 68:
						num = 261;
						num2 = num;
						break;
					case 261:
						if (num5 + 1 != 2)
						{
							num = 86;
							num2 = num;
							break;
						}
						goto IL_4a1b;
					case 86:
						num = 128;
						num2 = num;
						break;
					case 128:
						if (num5 + 1 != 3)
						{
							num = 263;
							num2 = num;
							break;
						}
						goto IL_4a1b;
					case 263:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num5 + 1).ToString(),
							LName = eval_b.eval_eu[num5].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num5].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num5].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num5].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num5].eval_h().Replace(" ", string.Empty),
							LKillAnimal_ = eval_b.eval_eu[num5].eval_a(),
							LKillCount_ = eval_b.eval_eu[num5].eval_b()
						};
						eval_b.eval_fm.BoxKills.Items.Add(eval_b.eval_et);
						num = 121;
						num2 = num;
						break;
					case 27:
					case 121:
						eval_b.eval_et.LKillCount.Opacity = 90.0;
						num = 207;
						num2 = num;
						break;
					case 207:
						num = 94;
						num2 = num;
						break;
					case 94:
						if (eval_b.UID_SC == eval_b.eval_eu[num5].eval_q())
						{
							num = 73;
							num2 = num;
							break;
						}
						goto case 151;
					case 73:
						flag = true;
						num = 95;
						num2 = num;
						break;
					case 95:
						if (Langve == "RU")
						{
							num = 213;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.UserCountKillZ.Content = "Your position : " + (num5 + 1);
							num = 174;
							num2 = num;
						}
						break;
					case 213:
						eval_b.eval_fm.UserCountKillZ.Content = "Ваша позиция : " + (num5 + 1);
						num = 151;
						num2 = num;
						break;
					case 151:
					case 174:
						num5++;
						num = 40;
						num2 = num;
						break;
					case 40:
					case 152:
						num = 230;
						num2 = num;
						break;
					case 230:
						if (num5 < eval_b.eval_eu.Count)
						{
							num = 216;
							num2 = num;
						}
						else
						{
							num = 223;
							num2 = num;
						}
						break;
					case 223:
						num = 15;
						num2 = num;
						break;
					case 15:
						if (!flag)
						{
							num = 166;
							num2 = num;
							break;
						}
						goto case 248;
					case 166:
						num = 116;
						num2 = num;
						break;
					case 116:
						eval_b.eval_fm.UserCountKills.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
						num = 248;
						num2 = num;
						break;
					case 248:
						eval_b.eval_eu.Clear();
						return;
					case 64:
						if (Langve == "RU")
						{
							num = 7;
							num2 = num;
						}
						else
						{
							eval_b.eval_fm.LError.Content = "Statistics are not installed on this server!";
							num = 157;
							num2 = num;
						}
						break;
					case 7:
						eval_b.eval_fm.LError.Content = "Статистика не установлена на данный сервер!";
						return;
					case 157:
						return;
						IL_4a1b:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num5 + 1).ToString(),
							LName = eval_b.eval_eu[num5].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num5].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num5].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num5].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num5].eval_h().Replace(" ", string.Empty),
							IMGTOP = iMGTOP,
							LKillAnimal_ = eval_b.eval_eu[num5].eval_a(),
							LKillCount_ = eval_b.eval_eu[num5].eval_b()
						};
						eval_b.eval_fm.BoxKills.Items.Add(eval_b.eval_et);
						eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
						eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
						num = 27;
						num2 = num;
						break;
						IL_3fe5:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num6 + 1).ToString(),
							LName = eval_b.eval_eu[num6].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num6].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num6].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num6].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num6].eval_h().Replace(" ", string.Empty),
							IMGTOP = iMGTOP,
							LKillAnimal_ = eval_b.eval_eu[num6].eval_a(),
							LKillCount_ = eval_b.eval_eu[num6].eval_b()
						};
						eval_b.eval_fm.BoxAnimall.Items.Add(eval_b.eval_et);
						eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
						eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
						num = 225;
						num2 = num;
						break;
						IL_0b8e:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num3 + 1).ToString(),
							LName = eval_b.eval_eu[num3].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num3].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num3].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num3].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num3].eval_h().Replace(" ", string.Empty),
							IMGTOP = iMGTOP,
							LKillAnimal_ = eval_b.eval_eu[num3].eval_a(),
							LKillCount_ = eval_b.eval_eu[num3].eval_b()
						};
						eval_b.eval_fm.BoxALL.Items.Add(eval_b.eval_et);
						eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
						eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
						num = 161;
						num2 = num;
						break;
						IL_1687:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num7 + 1).ToString(),
							LName = eval_b.eval_eu[num7].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num7].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num7].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num7].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num7].eval_h().Replace(" ", string.Empty),
							IMGTOP = iMGTOP,
							LKillAnimal_ = eval_b.eval_eu[num7].eval_a(),
							LKillCount_ = eval_b.eval_eu[num7].eval_b()
						};
						eval_b.eval_fm.BoxDistancion.Items.Add(eval_b.eval_et);
						eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
						eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
						num = 265;
						num2 = num;
						break;
						IL_35a9:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num8 + 1).ToString(),
							LName = eval_b.eval_eu[num8].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num8].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num8].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num8].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num8].eval_h().Replace(" ", string.Empty),
							IMGTOP = iMGTOP,
							LKillAnimal_ = eval_b.eval_eu[num8].eval_a(),
							LKillCount_ = eval_b.eval_eu[num8].eval_b()
						};
						eval_b.eval_fm.BoxKillZ.Items.Add(eval_b.eval_et);
						eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
						eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
						num = 195;
						num2 = num;
						break;
						IL_38da:
						num = 197;
						num2 = num;
						break;
						IL_2b6f:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num9 + 1).ToString(),
							LName = eval_b.eval_eu[num9].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num9].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num9].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num9].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num9].eval_h().Replace(" ", string.Empty),
							IMGTOP = iMGTOP,
							LKillAnimal_ = eval_b.eval_eu[num9].eval_a(),
							LKillCount_ = eval_b.eval_eu[num9].eval_b()
						};
						eval_b.eval_fm.BoxTime.Items.Add(eval_b.eval_et);
						eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
						eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
						num = 2;
						num2 = num;
						break;
						IL_1032:
						eval_b.eval_eu.Clear();
						flag = false;
						enumerator = eval_b.eval_dm.SelectNodes("/server/Distans/player").GetEnumerator();
						num = 41;
						num2 = num;
						break;
						IL_20e8:
						eval_b.eval_et = new StatsLine
						{
							LNUMBER_ = (num4 + 1).ToString(),
							LName = eval_b.eval_eu[num4].eval_o(),
							LDistTrav_ = eval_b.eval_eu[num4].eval_n(),
							LlongestShot_ = eval_b.eval_eu[num4].eval_l(),
							LzKillCount_ = eval_b.eval_eu[num4].eval_j(),
							LtimeSurviv_ = eval_b.eval_eu[num4].eval_h().Replace(" ", string.Empty),
							IMGTOP = iMGTOP,
							LKillAnimal_ = eval_b.eval_eu[num4].eval_a(),
							LKillCount_ = eval_b.eval_eu[num4].eval_b()
						};
						eval_b.eval_fm.BoxShoot.Items.Add(eval_b.eval_et);
						eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
						eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
						num = 122;
						num2 = num;
						break;
						end_IL_0040:
						break;
					}
				}
			}
			}
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ab : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = -28621;
			short num2 = num;
			num = -28621;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				switch (num)
				{
				}
				int num3 = eval_a;
				MainWindow mainWindow = eval_c;
				try
				{
					num = 4;
					int num4 = num;
					TaskAwaiter awaiter = default(TaskAwaiter);
					while (true)
					{
						switch (num4)
						{
						case 10:
							goto end_IL_00da;
						case 4:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num3 != 0)
							{
								num = 1;
								num4 = num;
								continue;
							}
							awaiter = this.m_eval_d;
							this.m_eval_d = default(TaskAwaiter);
							num3 = (eval_a = -1);
							num = 6;
							num4 = num;
							continue;
						case 1:
							num = 5;
							num4 = num;
							continue;
						case 5:
							if (Internet.CheckConnection())
							{
								num = 11;
								num4 = num;
								continue;
							}
							break;
						case 0:
							num3 = (eval_a = 0);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 9;
							num4 = num;
							continue;
						case 9:
							goto end_IL_00ba;
						case 6:
							awaiter.GetResult();
							num = 2;
							num4 = num;
							continue;
						case 3:
							mainWindow.ShopGenerateUrl(Connectip, Connectport);
							num = 7;
							num4 = num;
							continue;
						case 11:
							num = 8;
							num4 = num;
							continue;
						case 8:
							if (Enable_Shop)
							{
								num = 3;
								num4 = num;
								continue;
							}
							goto case 7;
						case 7:
							mainWindow.c9.Stop();
							awaiter = mainWindow.StartGAME().GetAwaiter();
							num = 12;
							num4 = num;
							continue;
						case 12:
							if (!awaiter.IsCompleted)
							{
								num = 0;
								num4 = num;
								continue;
							}
							goto case 6;
						case 2:
							break;
						}
						num = 10;
						num4 = num;
						continue;
						end_IL_00da:
						break;
					}
					goto case false;
					end_IL_00ba:;
				}
				catch (Exception exception)
				{
					eval_a = -2;
					eval_b.SetException(exception);
				}
				break;
			}
			case false:
			case true:
				eval_a = -2;
				eval_b.SetResult();
				break;
			}
			num = 1;
			if (num == 0)
			{
			}
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 0;
			_ = num;
			num = -31764;
			short num2 = num;
			num = -31764;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ac : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = -19242;
			short num2 = num;
			num = -19242;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				switch (num)
				{
				}
				int num3 = eval_a;
				MainWindow CS_0024_003C_003E8__locals0 = eval_c;
				try
				{
					try
					{
						num = 20;
						int num4 = num;
						TaskAwaiter awaiter = default(TaskAwaiter);
						WebClient webClient = default(WebClient);
						MessageBoxResult messageBoxResult = default(MessageBoxResult);
						while (true)
						{
							switch (num4)
							{
							case 20:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (num3 != 0)
								{
									num = 5;
									num4 = num;
									continue;
								}
								awaiter = this.m_eval_d;
								this.m_eval_d = default(TaskAwaiter);
								num3 = (eval_a = -1);
								num = 19;
								num4 = num;
								continue;
							case 22:
								num3 = (eval_a = 0);
								this.m_eval_d = awaiter;
								eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
								num = 3;
								num4 = num;
								continue;
							case 3:
								return;
							case 10:
								num = 14;
								num4 = num;
								continue;
							case 14:
								if (Langve == "RU")
								{
									num = 11;
									num4 = num;
								}
								else
								{
									CS_0024_003C_003E8__locals0.Norificons("Verifying game files... may take some time.");
									num = 6;
									num4 = num;
								}
								continue;
							case 21:
								try
								{
									Uri address = new Uri(URL_ClearClient + CS_0024_003C_003E8__locals0.m_eval_o + URL_ClearClientDIR);
									webClient.DownloadFileAsync(address, DirLocal + "\\FILE.log");
									webClient.DownloadFileCompleted += [AsyncStateMachine(typeof(eval_c))] (object A_0, AsyncCompletedEventArgs A_1) =>
									{
										short num5 = 5360;
										short num6 = num5;
										num5 = 5360;
										switch (num6 == num5)
										{
										default:
										{
											num5 = 1;
											if (num5 != 0)
											{
											}
											num5 = 0;
											if (num5 != 0)
											{
											}
											num5 = 0;
											_ = num5;
											eval_c stateMachine = default(eval_c);
											stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
											stateMachine.eval_c = CS_0024_003C_003E8__locals0;
											stateMachine.eval_a = -1;
											stateMachine.eval_b.Start(ref stateMachine);
											break;
										}
										}
									};
								}
								finally
								{
									num = 0;
									num4 = num;
									while (true)
									{
										switch (num4)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (num3 < 0)
											{
												num = 3;
												num4 = num;
												continue;
											}
											break;
										case 4:
											((IDisposable)webClient).Dispose();
											num = 2;
											num4 = num;
											continue;
										case 2:
											break;
										case 3:
											num = 1;
											num4 = num;
											continue;
										case 1:
											if (webClient != null)
											{
												num = 4;
												num4 = num;
												continue;
											}
											break;
										}
										break;
									}
								}
								goto IL_034e;
							case 5:
								num = 1;
								num4 = num;
								continue;
							case 1:
								if (!UpdateStatus)
								{
									num = 12;
									num4 = num;
									continue;
								}
								break;
							case 23:
								messageBoxResult = MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Вы уверены что хотите проверить файлы модификации данного сервера?", name_messege, MessageBoxButton.YesNo);
								num = 27;
								num4 = num;
								continue;
							case 8:
							case 27:
								num = 0;
								num4 = num;
								continue;
							case 0:
								if (messageBoxResult == MessageBoxResult.Yes)
								{
									num = 9;
									num4 = num;
									continue;
								}
								CS_0024_003C_003E8__locals0.BoxServer.IsEnabled = true;
								UpdateStatus = false;
								num = 24;
								num4 = num;
								continue;
							case 9:
								num = 15;
								num4 = num;
								continue;
							case 15:
								if (!File.Exists(Directory_Launcher + "\\mods.ini"))
								{
									num = 25;
									num4 = num;
									continue;
								}
								goto IL_04e6;
							case 19:
								awaiter.GetResult();
								new DirectoryInfo(CS_0024_003C_003E8__locals0.Directory_game + "\\");
								new XmlDocument();
								webClient = new WebClient();
								num = 21;
								num4 = num;
								continue;
							case 18:
								if (!CS_0024_003C_003E8__locals0.m_eval_b6)
								{
									num = 16;
									num4 = num;
									continue;
								}
								goto case 10;
							case 16:
								CS_0024_003C_003E8__locals0.DownloadMods = true;
								CS_0024_003C_003E8__locals0.eval_b8();
								num = 10;
								num4 = num;
								continue;
							case 13:
								UpdateStatus = true;
								CheckGameMods = true;
								num = 4;
								num4 = num;
								continue;
							case 4:
								if (!(Langve == "RU"))
								{
									messageBoxResult = MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Are you sure you want to check the modification files for this server?", name_messege, MessageBoxButton.YesNo);
									num = 8;
									num4 = num;
								}
								else
								{
									num = 23;
									num4 = num;
								}
								continue;
							case 25:
								try
								{
									StreamWriter streamWriter = new StreamWriter(Directory_Launcher + "\\mods.ini");
									try
									{
										streamWriter.WriteLine("1.0");
										streamWriter.Close();
									}
									finally
									{
										num = 0;
										num4 = num;
										while (true)
										{
											switch (num4)
											{
											case 0:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num3 < 0)
												{
													num = 3;
													num4 = num;
													continue;
												}
												break;
											case 4:
												((IDisposable)streamWriter).Dispose();
												num = 2;
												num4 = num;
												continue;
											case 2:
												break;
											case 3:
												num = 1;
												num4 = num;
												continue;
											case 1:
												if (streamWriter != null)
												{
													num = 4;
													num4 = num;
													continue;
												}
												break;
											}
											break;
										}
									}
								}
								catch (Exception ex)
								{
									MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, ex.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								goto IL_04e6;
							case 24:
								goto end_IL_0105;
							case 12:
								num = 28;
								num4 = num;
								continue;
							case 28:
								if (!CheckGameMods)
								{
									num = 13;
									num4 = num;
									continue;
								}
								goto IL_034e;
							case 11:
								CS_0024_003C_003E8__locals0.Norificons("Проверка файлов игры... может занять некоторое время.");
								num = 26;
								num4 = num;
								continue;
							case 6:
							case 26:
								awaiter = Task.Delay(10).GetAwaiter();
								num = 2;
								num4 = num;
								continue;
							case 2:
								if (!awaiter.IsCompleted)
								{
									num = 22;
									num4 = num;
									continue;
								}
								goto case 19;
							case 7:
								break;
							case 17:
								goto end_IL_0105;
								IL_034e:
								CheckGameMods = false;
								num = 7;
								num4 = num;
								continue;
								IL_04e6:
								num = 18;
								num4 = num;
								continue;
							}
							num = 17;
							num4 = num;
							continue;
							end_IL_0105:
							break;
						}
					}
					catch (Exception ex2)
					{
						if (!(Langve == "RU"))
						{
							MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Launcher blocks a third-party program or antivirus, add to the exception! CheckGameFileExist : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						else
						{
							MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! CheckGameFileExist : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						UpdateStatus = false;
						CheckGameFileServer = false;
						CS_0024_003C_003E8__locals0.BoxServer.IsEnabled = true;
					}
				}
				catch (Exception exception)
				{
					eval_a = -2;
					eval_b.SetException(exception);
					return;
				}
				break;
			}
			case false:
			case true:
				break;
			}
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 0;
			_ = num;
			num = 3078;
			short num2 = num;
			num = 3078;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ad : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private WebClient m_eval_d;

		private TaskAwaiter eval_e;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow CS_0024_003C_003E8__locals0 = eval_c;
			try
			{
				num = 1;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				while (true)
				{
					switch (num3)
					{
					case 4:
						goto end_IL_0090;
					case 1:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 0;
							num3 = num;
							continue;
						}
						goto case 7;
					case 0:
						num = 6;
						num3 = num;
						continue;
					case 6:
						if (!CheckGameMods)
						{
							num = 3;
							num3 = num;
							continue;
						}
						break;
					case 5:
						try
						{
							num = 9;
							num3 = num;
							while (true)
							{
								short num4;
								switch (num3)
								{
								case 9:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 != 0)
									{
										num = 3;
										num3 = num;
										continue;
									}
									goto case 6;
								case 0:
									try
									{
										num = 0;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 0:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 != 0)
												{
													num = 1;
													num3 = num;
													continue;
												}
												awaiter = eval_e;
												eval_e = default(TaskAwaiter);
												num2 = (eval_a = -1);
												num = 6;
												num3 = num;
												continue;
											case 1:
											{
												Uri address = new Uri(URL_ClearClient + CS_0024_003C_003E8__locals0.m_eval_o + URL_ClearClientDIR);
												this.m_eval_d.DownloadFileAsync(address, DirLocal + "\\FILE.log");
												this.m_eval_d.DownloadProgressChanged += CS_0024_003C_003E8__locals0.ProgressChanged_CheckGameFileExist;
												this.m_eval_d.DownloadFileCompleted += [AsyncStateMachine(typeof(eval_d))] (object A_0, AsyncCompletedEventArgs A_1) =>
												{
													short num5 = -18248;
													short num6 = num5;
													num5 = -18248;
													switch (num6 == num5)
													{
													default:
													{
														num5 = 1;
														if (num5 != 0)
														{
														}
														num5 = 0;
														if (num5 != 0)
														{
														}
														num5 = 0;
														_ = num5;
														eval_d stateMachine = default(eval_d);
														stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
														stateMachine.eval_c = CS_0024_003C_003E8__locals0;
														stateMachine.eval_a = -1;
														stateMachine.eval_b.Start(ref stateMachine);
														break;
													}
													}
												};
												awaiter = Task.Delay(10).GetAwaiter();
												num = 5;
												num3 = num;
												continue;
											}
											case 5:
												if (!awaiter.IsCompleted)
												{
													num = 2;
													num3 = num;
													continue;
												}
												break;
											case 2:
												num2 = (eval_a = 0);
												eval_e = awaiter;
												eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
												num = 4;
												num3 = num;
												continue;
											case 4:
												goto end_IL_01bc;
											case 6:
												break;
											case 3:
												goto IL_0816;
											}
											awaiter.GetResult();
											num = 3;
											num3 = num;
											continue;
											end_IL_01bc:
											break;
										}
									}
									finally
									{
										num = 4;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 4:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 < 0)
												{
													num = 1;
													num3 = num;
													continue;
												}
												break;
											case 3:
												((IDisposable)this.m_eval_d).Dispose();
												num = 0;
												num3 = num;
												continue;
											case 0:
												break;
											case 1:
												num = 2;
												num3 = num;
												continue;
											case 2:
												if (this.m_eval_d != null)
												{
													num = 3;
													num3 = num;
													continue;
												}
												break;
											}
											break;
										}
									}
									goto IL_0935;
								case 7:
									num = 2;
									num3 = num;
									continue;
								case 2:
									if (Langve == "RU")
									{
										num = 1;
										num3 = num;
									}
									else
									{
										CS_0024_003C_003E8__locals0.Norificons("Verifying game files... may take some time.");
										num = 12;
										num3 = num;
									}
									continue;
								case 3:
									num = 11;
									num3 = num;
									continue;
								case 11:
									if (!File.Exists(Directory_Launcher + "\\mods.ini"))
									{
										goto IL_0473;
									}
									goto IL_0492;
								case 5:
									if (!CS_0024_003C_003E8__locals0.m_eval_b6)
									{
										num = 14;
										num3 = num;
										continue;
									}
									goto case 7;
								case 14:
									CS_0024_003C_003E8__locals0.DownloadMods = true;
									CS_0024_003C_003E8__locals0.eval_b8();
									num = 7;
									num3 = num;
									continue;
								case 6:
									num = 0;
									num3 = num;
									continue;
								case 1:
									CS_0024_003C_003E8__locals0.Norificons("Проверка файлов игры... может занять некоторое время.");
									num = 13;
									num3 = num;
									continue;
								case 15:
									CS_0024_003C_003E8__locals0.eval_ie.Content = "Проверка файлов игры,это может занять некоторое время...";
									num = 4;
									num3 = num;
									continue;
								case 16:
									try
									{
										StreamWriter streamWriter = new StreamWriter(Directory_Launcher + "\\mods.ini");
										try
										{
											streamWriter.WriteLine("1.0");
											streamWriter.Close();
										}
										finally
										{
											num = 4;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 4:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 < 0)
													{
														num = 1;
														num3 = num;
														continue;
													}
													break;
												case 3:
													((IDisposable)streamWriter).Dispose();
													num = 0;
													num3 = num;
													continue;
												case 0:
													break;
												case 1:
													num = 2;
													num3 = num;
													continue;
												case 2:
													if (streamWriter != null)
													{
														num = 3;
														num3 = num;
														continue;
													}
													break;
												}
												break;
											}
										}
									}
									catch (Exception ex)
									{
										MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, ex.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									}
									goto IL_0492;
								case 12:
								case 13:
								{
									CS_0024_003C_003E8__locals0.eval_id.Visibility = Visibility.Visible;
									DoubleAnimation animation = new DoubleAnimation
									{
										From = 0.0,
										To = 1.0,
										Duration = new Duration(TimeSpan.FromSeconds(CS_0024_003C_003E8__locals0.m_eval_ah)),
										AutoReverse = false
									};
									CS_0024_003C_003E8__locals0.eval_id.BeginAnimation(UIElement.OpacityProperty, animation);
									num = 17;
									num3 = num;
									continue;
								}
								case 17:
									if (!(Langve == "RU"))
									{
										CS_0024_003C_003E8__locals0.eval_ie.Content = "Verifying game files, this may take some time...";
										num = 8;
										num3 = num;
									}
									else
									{
										num = 15;
										num3 = num;
									}
									continue;
								case 4:
								case 8:
									CS_0024_003C_003E8__locals0.eval_c6++;
									new DirectoryInfo(CS_0024_003C_003E8__locals0.Directory_game + "\\");
									new XmlDocument();
									this.m_eval_d = new WebClient();
									num = 6;
									num3 = num;
									continue;
								case 10:
									break;
									IL_0816:
									this.m_eval_d = null;
									num = 10;
									num3 = num;
									continue;
									IL_0492:
									num = -14141;
									num4 = num;
									num = -14141;
									switch (num4 == num)
									{
									case false:
									case true:
										break;
									default:
										num = 0;
										if (num != 0)
										{
										}
										num = 5;
										num3 = num;
										continue;
									}
									goto IL_0473;
									IL_0473:
									num = 16;
									num3 = num;
									continue;
								}
								break;
							}
						}
						catch (Exception ex2)
						{
							if (!(Langve == "RU"))
							{
								MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Launcher blocks a third-party program or antivirus, add to the exception! CheckGameFileExist : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							}
							else
							{
								MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! CheckGameFileExist : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							}
							CS_0024_003C_003E8__locals0.BoxServer.IsEnabled = true;
						}
						CheckGameMods = false;
						num = 2;
						num3 = num;
						continue;
					case 7:
						num = 5;
						num3 = num;
						continue;
					case 3:
						CheckGameMods = true;
						num = 7;
						num3 = num;
						continue;
					case 2:
						break;
					}
					num = 4;
					num3 = num;
					continue;
					end_IL_0090:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				goto IL_0935;
			}
			num = 0;
			_ = num;
			eval_a = -2;
			eval_b.SetResult();
			goto IL_0935;
			IL_0935:
			num = 1;
			if (num == 0)
			{
			}
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 20983;
			short num2 = num;
			num = 20983;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ae : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			switch (num)
			{
			}
			num = 0;
			_ = num;
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				TaskAwaiter awaiter = default(TaskAwaiter);
				while (true)
				{
					IL_0097:
					num = 9;
					int num3 = num;
					while (true)
					{
						switch (num3)
						{
						case 9:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num2 != 0)
							{
								num = 8;
								num3 = num;
								continue;
							}
							awaiter = this.m_eval_d;
							this.m_eval_d = default(TaskAwaiter);
							num2 = (eval_a = -1);
							num = 7;
							num3 = num;
							continue;
						case 0:
							num2 = (eval_a = 0);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 10;
							num3 = num;
							continue;
						case 10:
							return;
						case 8:
							num = 2;
							num3 = num;
							continue;
						case 2:
							if (Langve == "RU")
							{
								num = 3;
								num3 = num;
							}
							else
							{
								mainWindow.Norificons("Preparing to launch...");
								num = 1;
								num3 = num;
							}
							continue;
						case 1:
						case 6:
							awaiter = mainWindow.eval_bu().GetAwaiter();
							num = 5;
							num3 = num;
							continue;
						case 5:
							if (!awaiter.IsCompleted)
							{
								num = 0;
								num3 = num;
								continue;
							}
							goto case 7;
						case 3:
							mainWindow.Norificons("Подготовка к запуску...");
							num = 6;
							num3 = num;
							continue;
						case 7:
						{
							awaiter.GetResult();
							num = -3250;
							short num4 = num;
							num = -3250;
							switch (num4 == num)
							{
							case false:
							case true:
								break;
							default:
								num = 0;
								if (num != 0)
								{
								}
								num = 4;
								num3 = num;
								continue;
							}
							break;
						}
						case 4:
							goto end_IL_00b7;
						}
						goto IL_0097;
						continue;
						end_IL_00b7:
						break;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 10823;
			short num2 = num;
			num = 10823;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_af : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private string m_eval_d;

		private FileInfo[] eval_e;

		private int eval_f;

		private TaskAwaiter eval_g;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 0;
			_ = num;
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 20;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				string path = default(string);
				while (true)
				{
					DirectoryInfo directoryInfo;
					switch (num3)
					{
					case 20:
					{
						num = -9133;
						short num4 = num;
						num = -9133;
						switch (num4 == num)
						{
						case false:
						case true:
							goto IL_0196;
						}
						num = 0;
						if (num != 0)
						{
						}
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					}
					default:
						if (num2 != 0)
						{
							num = 8;
							num3 = num;
							continue;
						}
						awaiter = eval_g;
						eval_g = default(TaskAwaiter);
						num2 = (eval_a = -1);
						num = 5;
						num3 = num;
						continue;
					case 15:
						mainWindow.Norificons("Файлы удалены успешно - " + this.m_eval_d);
						num = 19;
						num3 = num;
						continue;
					case 16:
						goto IL_0196;
					case 0:
					case 10:
						num = 21;
						num3 = num;
						continue;
					case 21:
						if (eval_f >= eval_e.Length)
						{
							num = 1;
							num3 = num;
						}
						else
						{
							awaiter = Task.Delay(5).GetAwaiter();
							num = 4;
							num3 = num;
						}
						continue;
					case 1:
						num = 1;
						if (num != 0)
						{
						}
						num = 18;
						num3 = num;
						continue;
					case 7:
						num2 = (eval_a = 0);
						eval_g = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						num = 3;
						num3 = num;
						continue;
					case 3:
						return;
					case 17:
						num = 12;
						num3 = num;
						continue;
					case 12:
						if (!(Langve == "RU"))
						{
							mainWindow.Norificons("Files deleted successfully - " + this.m_eval_d);
							num = 2;
							num3 = num;
						}
						else
						{
							num = 15;
							num3 = num;
						}
						continue;
					case 2:
					case 19:
						eval_e = null;
						num = 14;
						num3 = num;
						continue;
					case 5:
						awaiter.GetResult();
						num = 9;
						num3 = num;
						continue;
					case 9:
						if (eval_e[eval_f].Name != "MapMarkersCache.json")
						{
							num = 11;
							num3 = num;
							continue;
						}
						goto IL_04f2;
					case 8:
						this.m_eval_d = string.Empty;
						path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "DayZ");
						num = 13;
						num3 = num;
						continue;
					case 13:
						if (Directory.Exists(path))
						{
							num = 16;
							num3 = num;
							continue;
						}
						break;
					case 4:
						if (!awaiter.IsCompleted)
						{
							num = 7;
							num3 = num;
							continue;
						}
						goto case 5;
					case 11:
						try
						{
							File.Delete(eval_e[eval_f].FullName);
							this.m_eval_d = this.m_eval_d + eval_e[eval_f].Name + ",";
						}
						catch
						{
						}
						goto IL_04f2;
					case 18:
						if (!string.IsNullOrEmpty(this.m_eval_d))
						{
							num = 17;
							num3 = num;
							continue;
						}
						goto case 2;
					case 14:
						break;
					case 6:
						goto end_IL_00e4;
						IL_0196:
						directoryInfo = new DirectoryInfo(path);
						eval_e = directoryInfo.GetFiles("*", SearchOption.TopDirectoryOnly);
						eval_f = 0;
						num = 10;
						num3 = num;
						continue;
						IL_04f2:
						eval_f++;
						num = 0;
						num3 = num;
						continue;
					}
					num = 6;
					num3 = num;
					continue;
					end_IL_00e4:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				this.m_eval_d = null;
				eval_b.SetException(exception);
				return;
			}
			eval_a = -2;
			this.m_eval_d = null;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -14102;
			short num2 = num;
			num = -14102;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ag : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				TaskAwaiter awaiter = default(TaskAwaiter);
				while (true)
				{
					try
					{
						num = 14;
						int num3 = num;
						while (true)
						{
							switch (num3)
							{
							case 14:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (num2 != 0)
								{
									num = 13;
									num3 = num;
									continue;
								}
								awaiter = this.m_eval_d;
								this.m_eval_d = default(TaskAwaiter);
								num2 = (eval_a = -1);
								num = 0;
								num3 = num;
								continue;
							case 10:
								File.Delete(Directory_Launcher + "\\launcher\\setting.xml");
								num = 15;
								num3 = num;
								continue;
							case 7:
								Directory.Delete(Directory_Launcher + "\\launcher");
								num = 3;
								num3 = num;
								continue;
							case 2:
								File.Delete(Directory_Launcher + "\\client.pbo");
								num = 6;
								num3 = num;
								continue;
							case 12:
								num2 = (eval_a = 0);
								this.m_eval_d = awaiter;
								eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
								num = 9;
								num3 = num;
								continue;
							case 9:
								goto end_IL_0093;
							case 15:
								num = 8;
								num3 = num;
								continue;
							case 8:
								if (Directory.Exists(Directory_Launcher + "\\launcher"))
								{
									num = 7;
									num3 = num;
									continue;
								}
								break;
							case 6:
								num = 5;
								num3 = num;
								continue;
							case 5:
								if (File.Exists(Directory_Launcher + "\\launcher\\setting.xml"))
								{
									num = 10;
									num3 = num;
									continue;
								}
								goto case 15;
							case 13:
								awaiter = Task.Delay(1000).GetAwaiter();
								num = 4;
								num3 = num;
								continue;
							case 4:
								if (!awaiter.IsCompleted)
								{
									num = 12;
									num3 = num;
									continue;
								}
								goto case 0;
							case 0:
								awaiter.GetResult();
								num = 11;
								num3 = num;
								continue;
							case 11:
								if (File.Exists(Directory_Launcher + "\\client.pbo"))
								{
									num = 2;
									num3 = num;
									continue;
								}
								goto case 6;
							case 3:
								break;
							case 1:
								goto IL_0367;
							}
							num = 1;
							num3 = num;
							continue;
							end_IL_0093:
							break;
						}
					}
					catch (Exception)
					{
						mainWindow.cc();
						goto IL_0367;
					}
					break;
					IL_0367:
					num = -3080;
					short num4 = num;
					num = -3080;
					switch (num4 == num)
					{
					case false:
					case true:
						continue;
					}
					num = 0;
					if (num == 0)
					{
					}
					goto IL_0044;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
			}
			goto IL_03ce;
			IL_03ce:
			num = 1;
			if (num == 0)
			{
			}
			return;
			IL_0044:
			num = 0;
			_ = num;
			eval_a = -2;
			eval_b.SetResult();
			goto IL_03ce;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = -10525;
			short num2 = num;
			num = -10525;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ah : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private string m_eval_d;

		private FolderBrowserDialog eval_e;

		private TaskAwaiter eval_f;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = -1850;
				short num3 = num;
				num = -1850;
				switch (num3 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					try
					{
						num = 4;
						int num4 = num;
						TaskAwaiter awaiter = default(TaskAwaiter);
						string fileName = default(string);
						bool flag = default(bool);
						char c = default(char);
						string text = default(string);
						int num7 = default(int);
						char[] array2 = default(char[]);
						int num6 = default(int);
						string[] array = default(string[]);
						while (true)
						{
							switch (num4)
							{
							case 4:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (num2 != 0)
								{
									num = 1;
									num4 = num;
									continue;
								}
								goto case 2;
							case 0:
								try
								{
									num = 2;
									num4 = num;
									while (true)
									{
										switch (num4)
										{
										case 2:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (num2 != 0)
											{
												num = 17;
												num4 = num;
												continue;
											}
											awaiter = eval_f;
											eval_f = default(TaskAwaiter);
											num2 = (eval_a = -1);
											num = 15;
											num4 = num;
											continue;
										case 23:
											mainWindow.eval_hl.Content = "";
											num = 31;
											num4 = num;
											continue;
										case 31:
											if (Langve == "RU")
											{
												num = 40;
												num4 = num;
												continue;
											}
											MessageBoxWindow.Show(mainWindow, "The final folder of the game should have a name " + mainWindow.m_eval_aa + ", change the name of the game folder to " + mainWindow.m_eval_aa + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											num = 45;
											num4 = num;
											continue;
										case 34:
											if (mainWindow.m_eval_b6)
											{
												num = 20;
												num4 = num;
												continue;
											}
											break;
										case 17:
											num = 38;
											num4 = num;
											continue;
										case 38:
											if (Langve == "RU")
											{
												num = 39;
												num4 = num;
												continue;
											}
											eval_e.Description = "Specify the path of the installed game The folder name must have a name (for license " + mainWindow.m_eval_aa + ", for pirate " + mainWindow.m_eval_z + ") :";
											num = 25;
											num4 = num;
											continue;
										case 32:
											if (eval_e.SelectedPath.EndsWith(mainWindow.m_eval_z))
											{
												num = 12;
												num4 = num;
											}
											else
											{
												num = 3;
												num4 = num;
											}
											continue;
										case 51:
											this.m_eval_d = eval_e.SelectedPath;
											num = 10;
											num4 = num;
											continue;
										case 26:
											Directory.CreateDirectory(eval_e.SelectedPath + "\\" + mainWindow.m_eval_z);
											num = 28;
											num4 = num;
											continue;
										case 40:
											MessageBoxWindow.Show(mainWindow, "Конечная папка игры должна иметь имя " + mainWindow.m_eval_aa + ",смените имя папки игры на " + mainWindow.m_eval_aa + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											num = 27;
											num4 = num;
											continue;
										case 14:
										case 52:
											num = 33;
											num4 = num;
											continue;
										case 33:
											goto end_IL_0162;
										case 41:
											num2 = (eval_a = 0);
											eval_f = awaiter;
											eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
											num = 16;
											num4 = num;
											continue;
										case 16:
											return;
										case 15:
											awaiter.GetResult();
											fileName = Path.GetFileName(this.m_eval_d);
											num = 54;
											num4 = num;
											continue;
										case 54:
											if (!GameLicense)
											{
												num = 30;
												num4 = num;
												continue;
											}
											goto case 49;
										case 0:
										case 8:
											num = 29;
											num4 = num;
											continue;
										case 29:
										{
											if (fileName.ToString() != mainWindow.m_eval_z)
											{
												num = 53;
												num4 = num;
												continue;
											}
											RegistryKey registryKey2 = Registry.CurrentUser.CreateSubKey(Name_form);
											registryKey2.SetValue("DIRECTORYGAME", this.m_eval_d);
											registryKey2.Close();
											mainWindow.eval_ce = false;
											mainWindow.eval_b6();
											num = 49;
											num4 = num;
											continue;
										}
										case 13:
											this.m_eval_d = eval_e.SelectedPath + mainWindow.m_eval_z;
											num = 6;
											num4 = num;
											continue;
										case 12:
											this.m_eval_d = eval_e.SelectedPath;
											num = 21;
											num4 = num;
											continue;
										case 49:
											num = 46;
											num4 = num;
											continue;
										case 46:
											if (GameLicense)
											{
												num = 11;
												num4 = num;
												continue;
											}
											break;
										case 28:
											this.m_eval_d = eval_e.SelectedPath + "\\" + mainWindow.m_eval_z;
											num = 35;
											num4 = num;
											continue;
										case 35:
											if (this.m_eval_d.EndsWith(":\\\\" + mainWindow.m_eval_z))
											{
												num = 13;
												num4 = num;
											}
											else
											{
												this.m_eval_d = eval_e.SelectedPath + "\\" + mainWindow.m_eval_z;
												num = 47;
												num4 = num;
											}
											continue;
										case 3:
											if (!Directory.Exists(eval_e.SelectedPath + "\\" + mainWindow.m_eval_z))
											{
												num = 26;
												num4 = num;
												continue;
											}
											goto case 28;
										case 24:
											num = 9;
											num4 = num;
											continue;
										case 9:
											if (Langve == "RU")
											{
												num = 56;
												num4 = num;
											}
											else
											{
												MessageBoxWindow.Show(mainWindow, "The path to the game folder should not contain spaces!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												num = 0;
												num4 = num;
											}
											continue;
										case 39:
											eval_e.Description = "Укажите путь установленной игры! Имя папки должно иметь имя (для лицензии " + mainWindow.m_eval_aa + ", для пиратки " + mainWindow.m_eval_z + ") :";
											num = 37;
											num4 = num;
											continue;
										case 36:
											if (flag)
											{
												num = 24;
												num4 = num;
												continue;
											}
											goto case 0;
										case 30:
											flag = false;
											num = 19;
											num4 = num;
											continue;
										case 19:
											try
											{
												switch (0)
												{
												default:
													while (true)
													{
														switch (num4)
														{
														case 2:
															if (c.ToString() == text)
															{
																num = 7;
																num4 = num;
																continue;
															}
															goto case 6;
														case 0:
														case 4:
															num = 9;
															num4 = num;
															continue;
														case 9:
															if (num7 < array2.Length)
															{
																c = array2[num7];
																num = 2;
																num4 = num;
															}
															else
															{
																num = 5;
																num4 = num;
															}
															continue;
														case 7:
															flag = true;
															num = 6;
															num4 = num;
															continue;
														case 5:
															num6++;
															num = 11;
															num4 = num;
															continue;
														case 1:
														case 11:
															num = 10;
															num4 = num;
															continue;
														case 10:
															if (num6 < array.Length)
															{
																text = array[num6];
																array2 = mainWindow.Directory_game.ToCharArray();
																num7 = 0;
																num = 0;
																num4 = num;
															}
															else
															{
																num = 8;
																num4 = num;
															}
															continue;
														case 6:
															num7++;
															num = 4;
															num4 = num;
															continue;
														case 8:
															num = 3;
															num4 = num;
															continue;
														case 3:
															goto end_IL_08f4;
														}
														goto case 0;
														continue;
														end_IL_08f4:
														break;
													}
													break;
												case 0:
													array = new string[1] { " " };
													num6 = 0;
													num = 1;
													num4 = num;
													goto default;
												}
											}
											catch
											{
											}
											num = 36;
											num4 = num;
											continue;
										case 42:
											num = 44;
											num4 = num;
											continue;
										case 44:
											if (!string.IsNullOrWhiteSpace(eval_e.SelectedPath))
											{
												num = 50;
												num4 = num;
												continue;
											}
											break;
										case 27:
										case 45:
											num = 22;
											num4 = num;
											continue;
										case 22:
											goto end_IL_0162;
										case 6:
										case 10:
										case 21:
										case 47:
											mainWindow.Directory_game = this.m_eval_d;
											mainWindow.eval_hl.Content = this.m_eval_d;
											awaiter = mainWindow.eval_bt().GetAwaiter();
											num = 55;
											num4 = num;
											continue;
										case 55:
											if (!awaiter.IsCompleted)
											{
												num = 41;
												num4 = num;
												continue;
											}
											goto case 15;
										case 50:
											num = 7;
											num4 = num;
											continue;
										case 7:
											if (!eval_e.SelectedPath.EndsWith(mainWindow.m_eval_aa))
											{
												num = 32;
												num4 = num;
											}
											else
											{
												num = 51;
												num4 = num;
											}
											continue;
										case 11:
											num = 4;
											num4 = num;
											continue;
										case 4:
											if (!(fileName.ToString() != mainWindow.m_eval_aa))
											{
												mainWindow.eval_hl.Content = this.m_eval_d;
												RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
												registryKey.SetValue("DIRECTORYGAME", this.m_eval_d);
												registryKey.Close();
												num = 34;
												num4 = num;
											}
											else
											{
												num = 23;
												num4 = num;
											}
											continue;
										case 25:
										case 37:
											num = 48;
											num4 = num;
											continue;
										case 48:
										{
											DialogResult num5 = eval_e.ShowDialog();
											eval_e.ShowNewFolderButton = true;
											if (num5 == System.Windows.Forms.DialogResult.OK)
											{
												num = 42;
												num4 = num;
												continue;
											}
											break;
										}
										case 56:
											MessageBoxWindow.Show(mainWindow, "Путь к папке игры не должен содержать пробелы!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											num = 8;
											num4 = num;
											continue;
										case 1:
											MessageBoxWindow.Show(mainWindow, "Конечная папка игры должна иметь имя " + mainWindow.m_eval_z + ",смените имя папки игры на " + mainWindow.m_eval_z + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											num = 14;
											num4 = num;
											continue;
										case 20:
											mainWindow.eval_ce = false;
											mainWindow.eval_b6();
											num = 43;
											num4 = num;
											continue;
										case 53:
											num = 5;
											num4 = num;
											continue;
										case 5:
											if (!(Langve == "RU"))
											{
												MessageBoxWindow.Show(mainWindow, "The final folder of the game should have a name " + mainWindow.m_eval_z + ", change the name of the game folder to " + mainWindow.m_eval_z + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												num = 52;
												num4 = num;
											}
											else
											{
												num = 1;
												num4 = num;
											}
											continue;
										case 43:
											break;
										case 18:
											goto IL_101a;
										}
										num = 18;
										num4 = num;
										continue;
										end_IL_0162:
										break;
									}
								}
								finally
								{
									num = 2;
									num4 = num;
									while (true)
									{
										switch (num4)
										{
										case 2:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (num2 < 0)
											{
												num = 0;
												num4 = num;
												continue;
											}
											break;
										case 0:
											num = 4;
											num4 = num;
											continue;
										case 4:
											if (eval_e != null)
											{
												num = 1;
												num4 = num;
												continue;
											}
											break;
										case 1:
											((IDisposable)eval_e).Dispose();
											num = 3;
											num4 = num;
											continue;
										case 3:
											break;
										}
										break;
									}
								}
								break;
							case 2:
								num = 0;
								num4 = num;
								continue;
							case 1:
								this.m_eval_d = string.Empty;
								eval_e = new FolderBrowserDialog();
								num = 2;
								num4 = num;
								continue;
							case 3:
								break;
								IL_101a:
								this.m_eval_d = null;
								eval_e = null;
								num = 3;
								num4 = num;
								continue;
							}
							break;
						}
					}
					catch
					{
						if (Langve == "RU")
						{
							MessageBoxWindow.Show(mainWindow, "Произошла ошибка", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						else
						{
							MessageBoxWindow.Show(mainWindow, "Error", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
					}
					break;
				case false:
				case true:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 4303;
			short num2 = num;
			num = 4303;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ai : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private string m_eval_d;

		private FolderBrowserDialog eval_e;

		private TaskAwaiter eval_f;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				try
				{
					num = 2;
					int num3 = num;
					TaskAwaiter awaiter = default(TaskAwaiter);
					bool flag = default(bool);
					int num6 = default(int);
					int num5 = default(int);
					char[] array2 = default(char[]);
					char c = default(char);
					string text = default(string);
					string[] array = default(string[]);
					while (true)
					{
						switch (num3)
						{
						case 3:
							break;
						case 2:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num2 != 0)
							{
								num = 0;
								num3 = num;
								continue;
							}
							goto case 1;
						case 4:
							try
							{
								num = 1;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 != 0)
										{
											num = 2;
											num3 = num;
											continue;
										}
										goto case 8;
									case 10:
										num = 9;
										num3 = num;
										continue;
									case 9:
										if (mainWindow.fa.Visibility != 0)
										{
											num = 5;
											num3 = num;
											continue;
										}
										goto case 8;
									case 2:
										eval_e.Description = "Specify the path to install the game or already installed game! | Укажите путь для установки игры либо уже установленной игре!) :";
										num = 6;
										num3 = num;
										continue;
									case 6:
									{
										DialogResult num7 = eval_e.ShowDialog();
										eval_e.ShowNewFolderButton = true;
										if (num7 == System.Windows.Forms.DialogResult.OK)
										{
											num = 11;
											num3 = num;
											continue;
										}
										goto IL_016a;
									}
									case 11:
										num = 0;
										num3 = num;
										continue;
									case 0:
										if (!string.IsNullOrWhiteSpace(eval_e.SelectedPath))
										{
											num = 10;
											num3 = num;
											continue;
										}
										goto IL_016a;
									case 5:
									{
										mainWindow.fa.Visibility = Visibility.Visible;
										DoubleAnimation animation = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(2.0)),
											AutoReverse = false
										};
										mainWindow.fa.BeginAnimation(UIElement.OpacityProperty, animation);
										num = 8;
										num3 = num;
										continue;
									}
									case 8:
										num = 4;
										num3 = num;
										continue;
									case 4:
										try
										{
											num = 18;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 12:
													goto end_IL_0337;
												case 16:
													goto end_IL_0337;
												case 18:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 != 0)
													{
														num = 33;
														num3 = num;
														continue;
													}
													awaiter = eval_f;
													eval_f = default(TaskAwaiter);
													num2 = (eval_a = -1);
													num = 22;
													num3 = num;
													continue;
												case 10:
													num = 3;
													num3 = num;
													continue;
												case 3:
												{
													if (Path.GetFileName(this.m_eval_d).ToString() != mainWindow.m_eval_aa)
													{
														num = 8;
														num3 = num;
														continue;
													}
													RegistryKey registryKey2 = Registry.CurrentUser.CreateSubKey(Name_form);
													registryKey2.SetValue("DIRECTORYGAME", this.m_eval_d);
													registryKey2.Close();
													num = 45;
													num3 = num;
													continue;
												}
												case 47:
													flag = false;
													num = 39;
													num3 = num;
													continue;
												case 22:
													awaiter.GetResult();
													num = 36;
													num3 = num;
													continue;
												case 36:
													if (!GameLicense)
													{
														num = 47;
														num3 = num;
														continue;
													}
													goto case 7;
												case 28:
													MessageBoxWindow.Show(mainWindow, "Конечная папка игры должна иметь имя " + mainWindow.m_eval_z + ",смените имя папки игры на " + mainWindow.m_eval_z + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													num = 0;
													num3 = num;
													continue;
												case 4:
												case 11:
												case 15:
												case 21:
													mainWindow.eval_hl.Content = this.m_eval_d;
													mainWindow.Directory_game = this.m_eval_d;
													awaiter = mainWindow.eval_bt().GetAwaiter();
													num = 13;
													num3 = num;
													continue;
												case 13:
													if (!awaiter.IsCompleted)
													{
														num = 35;
														num3 = num;
														continue;
													}
													goto case 22;
												case 23:
													this.m_eval_d = eval_e.SelectedPath + "\\" + mainWindow.m_eval_z;
													num = 41;
													num3 = num;
													continue;
												case 41:
													if (this.m_eval_d.EndsWith(":\\\\" + mainWindow.m_eval_z))
													{
														num = 19;
														num3 = num;
													}
													else
													{
														this.m_eval_d = eval_e.SelectedPath + "\\" + mainWindow.m_eval_z;
														num = 4;
														num3 = num;
													}
													continue;
												case 29:
													MessageBoxWindow.Show(mainWindow, "Конечная папка игры должна иметь имя " + mainWindow.m_eval_aa + ",смените имя папки игры на " + mainWindow.m_eval_aa + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													num = 32;
													num3 = num;
													continue;
												case 19:
													this.m_eval_d = eval_e.SelectedPath + mainWindow.m_eval_z;
													num = 11;
													num3 = num;
													continue;
												case 35:
													num2 = (eval_a = 0);
													eval_f = awaiter;
													eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
													num = 14;
													num3 = num;
													continue;
												case 14:
													return;
												case 33:
													num = 26;
													num3 = num;
													continue;
												case 26:
													if (eval_e.SelectedPath.EndsWith(mainWindow.m_eval_aa))
													{
														num = 48;
														num3 = num;
													}
													else
													{
														num = 2;
														num3 = num;
													}
													continue;
												case 46:
													MessageBoxWindow.Show(mainWindow, "Путь к папке игры не должен содержать пробелы!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													num = 37;
													num3 = num;
													continue;
												case 39:
													try
													{
														switch (0)
														{
														default:
															while (true)
															{
																switch (num3)
																{
																case 6:
																	num6++;
																	num = 10;
																	num3 = num;
																	continue;
																case 8:
																	num5++;
																	num = 3;
																	num3 = num;
																	continue;
																case 5:
																case 10:
																	num = 11;
																	num3 = num;
																	continue;
																case 11:
																	if (num6 >= array2.Length)
																	{
																		num = 8;
																		num3 = num;
																	}
																	else
																	{
																		c = array2[num6];
																		num = 9;
																		num3 = num;
																	}
																	continue;
																case 0:
																	flag = true;
																	num = 6;
																	num3 = num;
																	continue;
																case 9:
																	if (c.ToString() == text)
																	{
																		num = 0;
																		num3 = num;
																		continue;
																	}
																	goto case 6;
																case 2:
																case 3:
																	num = 4;
																	num3 = num;
																	continue;
																case 4:
																	if (num5 < array.Length)
																	{
																		text = array[num5];
																		array2 = mainWindow.Directory_game.ToCharArray();
																		num6 = 0;
																		num = 5;
																		num3 = num;
																		continue;
																	}
																	goto IL_09a0;
																case 7:
																{
																	num = -22819;
																	short num4 = num;
																	num = -22819;
																	switch (num4 == num)
																	{
																	case false:
																	case true:
																		break;
																	default:
																		num = 0;
																		if (num != 0)
																		{
																		}
																		num = 1;
																		num3 = num;
																		continue;
																	}
																	goto IL_09a0;
																}
																case 1:
																	goto end_IL_07fd;
																	IL_09a0:
																	num = 7;
																	num3 = num;
																	continue;
																}
																goto case 0;
																continue;
																end_IL_07fd:
																break;
															}
															break;
														case 0:
															array = new string[1] { " " };
															num5 = 0;
															num = 2;
															num3 = num;
															goto default;
														}
													}
													catch
													{
													}
													num = 5;
													num3 = num;
													continue;
												case 7:
													num = 42;
													num3 = num;
													continue;
												case 42:
													if (GameLicense)
													{
														num = 10;
														num3 = num;
														continue;
													}
													break;
												case 1:
												case 32:
													num = 16;
													num3 = num;
													continue;
												case 20:
													this.m_eval_d = eval_e.SelectedPath;
													num = 15;
													num3 = num;
													continue;
												case 48:
													this.m_eval_d = eval_e.SelectedPath;
													num = 21;
													num3 = num;
													continue;
												case 45:
													if (mainWindow.m_eval_b6)
													{
														num = 25;
														num3 = num;
														continue;
													}
													break;
												case 38:
													Directory.CreateDirectory(eval_e.SelectedPath + "\\" + mainWindow.m_eval_z);
													num = 23;
													num3 = num;
													continue;
												case 8:
													mainWindow.eval_hl.Content = "";
													num = 6;
													num3 = num;
													continue;
												case 6:
													if (Langve == "RU")
													{
														num = 29;
														num3 = num;
														continue;
													}
													MessageBoxWindow.Show(mainWindow, "The final folder of the game should have a name " + mainWindow.m_eval_aa + ", change the name of the game folder to " + mainWindow.m_eval_aa + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													num = 1;
													num3 = num;
													continue;
												case 2:
													if (eval_e.SelectedPath.EndsWith(mainWindow.m_eval_z))
													{
														num = 20;
														num3 = num;
													}
													else
													{
														num = 43;
														num3 = num;
													}
													continue;
												case 5:
													if (flag)
													{
														num = 40;
														num3 = num;
														continue;
													}
													goto case 31;
												case 0:
												case 27:
													num = 12;
													num3 = num;
													continue;
												case 40:
													num = 34;
													num3 = num;
													continue;
												case 34:
													if (!(Langve == "RU"))
													{
														MessageBoxWindow.Show(mainWindow, "The path to the game folder should not contain spaces!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
														num = 31;
														num3 = num;
													}
													else
													{
														num = 46;
														num3 = num;
													}
													continue;
												case 25:
													mainWindow.eval_ce = true;
													mainWindow.eval_a7();
													mainWindow.eval_b6();
													num = 17;
													num3 = num;
													continue;
												case 43:
													if (!Directory.Exists(eval_e.SelectedPath + "\\" + mainWindow.m_eval_z))
													{
														num = 38;
														num3 = num;
														continue;
													}
													goto case 23;
												case 44:
													num = 9;
													num3 = num;
													continue;
												case 9:
													if (!(Langve == "RU"))
													{
														MessageBoxWindow.Show(mainWindow, "The final folder of the game should have a name " + mainWindow.m_eval_z + ", change the name of the game folder to " + mainWindow.m_eval_z + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
														num = 27;
														num3 = num;
													}
													else
													{
														num = 28;
														num3 = num;
													}
													continue;
												case 31:
												case 37:
													num = 24;
													num3 = num;
													continue;
												case 24:
													if (!(Path.GetFileName(this.m_eval_d).ToString() != mainWindow.m_eval_z))
													{
														RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
														registryKey.SetValue("DIRECTORYGAME", this.m_eval_d);
														registryKey.Close();
														mainWindow.eval_ce = true;
														mainWindow.eval_a7();
														mainWindow.eval_b6();
														num = 7;
														num3 = num;
													}
													else
													{
														num = 44;
														num3 = num;
													}
													continue;
												case 17:
													break;
												case 30:
													goto end_IL_0118;
												}
												num = 30;
												num3 = num;
												continue;
												end_IL_0337:
												break;
											}
										}
										catch (Exception ex)
										{
											MessageBoxWindow.Show(mainWindow, "DirectoryNewGameFolder : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											break;
										}
										goto end_IL_00bd;
									case 7:
										break;
									case 3:
										goto end_IL_0116;
										IL_016a:
										mainWindow.Close_launcher();
										num = 7;
										num3 = num;
										continue;
										end_IL_0118:
										break;
									}
									num = 3;
									num3 = num;
									continue;
									end_IL_0116:
									break;
								}
							}
							finally
							{
								num = 3;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 3:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 < 0)
										{
											num = 4;
											num3 = num;
											continue;
										}
										break;
									case 1:
										((IDisposable)eval_e).Dispose();
										num = 2;
										num3 = num;
										continue;
									case 2:
										break;
									case 4:
										num = 0;
										num3 = num;
										continue;
									case 0:
										if (eval_e != null)
										{
											num = 1;
											num3 = num;
											continue;
										}
										break;
									}
									break;
								}
							}
							this.m_eval_d = null;
							eval_e = null;
							num = 3;
							num3 = num;
							continue;
						case 1:
							num = 4;
							num3 = num;
							continue;
						case 0:
							{
								this.m_eval_d = string.Empty;
								mainWindow.df.Close();
								eval_e = new FolderBrowserDialog();
								num = 1;
								num3 = num;
								continue;
							}
							end_IL_00bd:
							break;
						}
						break;
					}
				}
				catch (Exception ex2)
				{
					System.Windows.MessageBox.Show("DirectoryNewGameFolder : " + ex2.Message);
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			num = 0;
			_ = num;
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 0;
			_ = num;
			num = -24492;
			short num2 = num;
			num = -24492;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[CompilerGenerated]
	private sealed class eval_aj<a> : IEnumerable<a>, IEnumerable, IEnumerator<a>, IDisposable, IEnumerator where a : DependencyObject
	{
		private int m_eval_a;

		private a m_eval_b;

		private int m_eval_c;

		private DependencyObject m_eval_d;

		public DependencyObject eval_e;

		private int m_eval_f;

		private DependencyObject m_eval_g;

		private IEnumerator<a> m_eval_h;

		[DebuggerHidden]
		public eval_aj(int A_0)
		{
			this.eval_a = A_0;
			this.eval_c = Environment.CurrentManagedThreadId;
		}

		[DebuggerHidden]
		private void eval_b()
		{
			int num = default(int);
			int num2 = default(int);
			switch (0)
			{
			default:
				while (true)
				{
					short num3;
					switch (num)
					{
					case 0:
						num3 = 0;
						_ = num3;
						if (num2 != -3)
						{
							num3 = 1;
							if (num3 != 0)
							{
							}
							num3 = 1;
							num = num3;
							continue;
						}
						goto case 3;
					case 2:
						try
						{
							return;
						}
						finally
						{
							eval_a();
						}
					case 3:
					{
						num3 = -1973;
						short num4 = num3;
						num3 = -1973;
						switch (num4 == num3)
						{
						case false:
						case true:
							break;
						default:
							goto IL_00ee;
						}
						goto case 0;
					}
					case 1:
						num3 = 4;
						num = num3;
						continue;
					case 4:
						{
							if (num2 == 2)
							{
								num3 = 3;
								num = num3;
								continue;
							}
							return;
						}
						IL_00ee:
						num3 = 0;
						if (num3 != 0)
						{
						}
						num3 = 2;
						num = num3;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
			{
				num2 = this.eval_a;
				short num3 = 0;
				num = num3;
				goto default;
			}
			}
		}

		void IDisposable.Dispose()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_b
			this.eval_b();
		}

		private bool eval_c()
		{
			bool result = default(bool);
			short num;
			try
			{
				num = 0;
				int num2 = num;
				switch (num2)
				{
				default:
				{
					int num4 = default(int);
					switch (0)
					{
					default:
					{
						a val = default(a);
						while (true)
						{
							switch (num2)
							{
							case 11:
								switch (num4)
								{
								default:
									num = 8;
									num2 = num;
									break;
								case 2:
									this.eval_a = -3;
									num = 6;
									num2 = num;
									break;
								case 1:
									this.eval_a = -1;
									num = 13;
									num2 = num;
									break;
								case 0:
									this.eval_a = -1;
									num = 16;
									num2 = num;
									break;
								}
								continue;
							case 2:
								this.eval_f = 0;
								num = 7;
								num2 = num;
								continue;
							case 16:
								if (this.eval_d != null)
								{
									num = 2;
									num2 = num;
									continue;
								}
								goto case 12;
							case 3:
								goto end_IL_0027;
							case 4:
							case 7:
								num = 14;
								num2 = num;
								continue;
							case 14:
								if (this.eval_f >= VisualTreeHelper.GetChildrenCount(this.eval_d))
								{
									num = 12;
									num2 = num;
								}
								else
								{
									this.eval_g = VisualTreeHelper.GetChild(this.eval_d, this.eval_f);
									num = 1;
									num2 = num;
								}
								continue;
							case 0:
								this.eval_b = val;
								this.eval_a = 1;
								result = true;
								num = 5;
								num2 = num;
								continue;
							case 5:
								goto end_IL_0027;
							case 1:
								if (this.eval_g != null)
								{
									num = 10;
									num2 = num;
									continue;
								}
								goto case 13;
							case 6:
							case 19:
								num = 9;
								num2 = num;
								continue;
							case 9:
								if (this.eval_h.MoveNext())
								{
									a current = this.eval_h.Current;
									this.eval_b = current;
									this.eval_a = 2;
									result = true;
									num = 3;
									num2 = num;
								}
								else
								{
									num = 20;
									num2 = num;
								}
								continue;
							case 20:
							{
								num = -23080;
								short num3 = num;
								num = -23080;
								switch (num3 == num)
								{
								case false:
								case true:
									break;
								default:
									num = 0;
									if (num != 0)
									{
									}
									eval_a();
									this.eval_h = null;
									this.eval_g = null;
									this.eval_f++;
									num = 4;
									num2 = num;
									continue;
								}
								goto case 14;
							}
							case 13:
								this.eval_h = eval_a<a>(this.eval_g).GetEnumerator();
								this.eval_a = -3;
								num = 19;
								num2 = num;
								continue;
							case 8:
								result = false;
								num = 17;
								num2 = num;
								continue;
							case 17:
								goto end_IL_0027;
							case 10:
								val = this.eval_g as a;
								num = 18;
								num2 = num;
								continue;
							case 18:
								if (val != null)
								{
									num = 0;
									num2 = num;
									continue;
								}
								goto case 13;
							case 12:
								result = false;
								num = 15;
								num2 = num;
								continue;
							case 15:
								goto end_IL_0027;
							}
							goto case 0;
							continue;
							end_IL_0027:
							break;
						}
						break;
					}
					case 0:
						num4 = this.eval_a;
						num = 11;
						num2 = num;
						goto default;
					}
					break;
				}
				}
			}
			catch
			{
				//try-fault
				eval_b();
				throw;
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			return result;
		}

		bool IEnumerator.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_c
			return this.eval_c();
		}

		private void eval_a()
		{
			int num2 = default(int);
			while (true)
			{
				short num = 1;
				if (num != 0)
				{
				}
				switch (0)
				{
				default:
					while (true)
					{
						switch (num2)
						{
						case 0:
							goto IL_005d;
						case 1:
							this.eval_h.Dispose();
							num = 2;
							num2 = num;
							continue;
						case 2:
							return;
						}
						break;
						IL_005d:
						num = -23554;
						short num3 = num;
						num = -23554;
						switch (num3 == num)
						{
						case false:
						case true:
							break;
						default:
							num = 0;
							_ = num;
							num = 0;
							if (num != 0)
							{
							}
							if (this.eval_h != null)
							{
								num = 1;
								num2 = num;
								continue;
							}
							return;
						}
						goto end_IL_0027;
					}
					goto case 0;
				case 0:
					{
						this.eval_a = -1;
						num = 0;
						num2 = num;
						goto default;
					}
					end_IL_0027:
					break;
				}
			}
		}

		[SpecialName]
		[DebuggerHidden]
		private a eval_d()
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -1768;
			short num2 = num;
			num = -1768;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return this.eval_b;
			}
		}

		a IEnumerator<a>.get_Current()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			return this.eval_d();
		}

		[DebuggerHidden]
		private void eval_f()
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 9487;
			short num2 = num;
			num = 9487;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				throw new NotSupportedException();
			}
		}

		void IEnumerator.Reset()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_f
			this.eval_f();
		}

		[SpecialName]
		[DebuggerHidden]
		private object eval_g()
		{
			short num = 0;
			_ = num;
			num = -17530;
			short num2 = num;
			num = -17530;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.eval_b;
			}
		}

		object IEnumerator.get_Current()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_g
			return this.eval_g();
		}

		[DebuggerHidden]
		private IEnumerator<a> eval_h()
		{
			short num = 1;
			int num2 = num;
			eval_aj<a> eval_aj = default(eval_aj<a>);
			while (true)
			{
				switch (num2)
				{
				case 1:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
				{
					num = -21684;
					short num3 = num;
					num = -21684;
					switch (num3 == num)
					{
					case false:
					case true:
						goto end_IL_0020;
					}
					num = 0;
					if (num != 0)
					{
					}
					if (this.eval_a == -2)
					{
						num = 0;
						num2 = num;
						continue;
					}
					goto IL_00ab;
				}
				case 0:
					num = 5;
					num2 = num;
					continue;
				case 5:
					if (this.eval_c == Environment.CurrentManagedThreadId)
					{
						num = 4;
						num2 = num;
						continue;
					}
					goto IL_00ab;
				case 4:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					this.eval_a = 0;
					eval_aj = this;
					num = 3;
					num2 = num;
					continue;
				case 2:
				case 3:
					break;
					IL_00ab:
					eval_aj = new eval_aj<a>(0);
					num = 2;
					num2 = num;
					continue;
					end_IL_0020:
					break;
				}
				break;
			}
			eval_aj.eval_d = eval_e;
			return eval_aj;
		}

		IEnumerator<a> IEnumerable<a>.GetEnumerator()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_h
			return this.eval_h();
		}

		[DebuggerHidden]
		private IEnumerator eval_i()
		{
			short num = 0;
			_ = num;
			num = 12552;
			short num2 = num;
			num = 12552;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_h();
			}
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_i
			return this.eval_i();
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ak : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			_ = num;
			num = 13877;
			short num2 = num;
			num = 13877;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				switch (num)
				{
				}
				break;
			case false:
			case true:
				break;
			}
			int num3 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				try
				{
					num = 18;
					int num4 = num;
					TaskAwaiter awaiter = default(TaskAwaiter);
					string[] array2 = default(string[]);
					byte[] array = default(byte[]);
					while (true)
					{
						switch (num4)
						{
						case 18:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num3 != 0)
							{
								num = 11;
								num4 = num;
								continue;
							}
							awaiter = this.m_eval_d;
							this.m_eval_d = default(TaskAwaiter);
							num3 = (eval_a = -1);
							num = 3;
							num4 = num;
							continue;
						case 25:
							mainWindow.eval_cx.Close();
							mainWindow.eval_cw.Close();
							num = 15;
							num4 = num;
							continue;
						case 15:
							if (Langve == "RU")
							{
								num = 0;
								num4 = num;
								continue;
							}
							mainWindow.fv.Content = "Your account : Error";
							mainWindow.iv.Content = "Your account : Error";
							num = 16;
							num4 = num;
							continue;
						case 2:
							num3 = (eval_a = 0);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 10;
							num4 = num;
							continue;
						case 10:
							return;
						case 26:
							mainWindow.fv.Content = "Ваш счет : 0 руб.";
							mainWindow.iv.Content = "Ваш счет : 0 руб.";
							num = 20;
							num4 = num;
							continue;
						case 19:
							mainWindow.eval_cx.Close();
							mainWindow.eval_cw.Close();
							num = 5;
							num4 = num;
							continue;
						case 5:
							if (Langve == "RU")
							{
								num = 8;
								num4 = num;
								continue;
							}
							mainWindow.fv.Content = "Your account : " + array2[1].ToString() + " rub.";
							mainWindow.iv.Content = "Your account : " + array2[1].ToString() + " rub.";
							num = 12;
							num4 = num;
							continue;
						case 16:
						case 27:
							awaiter = Task.Delay(5).GetAwaiter();
							num = 23;
							num4 = num;
							continue;
						case 23:
							if (!awaiter.IsCompleted)
							{
								num = 2;
								num4 = num;
								continue;
							}
							break;
						case 12:
						case 13:
							num = 4;
							num4 = num;
							continue;
						case 4:
							if (array2[0] == "UPCNNOFILE")
							{
								num = 9;
								num4 = num;
								continue;
							}
							goto case 14;
						case 11:
						{
							string s = mainWindow.UID_SC + mainWindow.SoundCardID();
							string text = mainWindow.UID_SC;
							s = BitConverter.ToString(mainWindow.dp.ComputeHash(Encoding.UTF8.GetBytes(s))).Replace("-", string.Empty).ToLower();
							mainWindow.gj.Content = text;
							mainWindow.eval_ip.Content = text;
							_ = string.Empty;
							mainWindow.eval_cw = new TcpClient(mainWindow.m_eval_t, mainWindow.m_eval_u);
							array = Encoding.UTF8.GetBytes("UPCIN," + text + "," + s);
							mainWindow.eval_cx = mainWindow.eval_cw.GetStream();
							num = 1;
							num4 = num;
							continue;
						}
						case 1:
							if (mainWindow.eval_cw.Connected)
							{
								num = 21;
								num4 = num;
								continue;
							}
							goto case 7;
						case 7:
						{
							array = new byte[256000];
							int count = mainWindow.eval_cx.Read(array, 0, array.Length);
							array2 = Encoding.UTF8.GetString(array, 0, count).ToString().Split(',');
							num = 6;
							num4 = num;
							continue;
						}
						case 6:
							if (array2[0] == "UPCN")
							{
								num = 19;
								num4 = num;
								continue;
							}
							goto case 12;
						case 8:
							mainWindow.fv.Content = "Ваш счет : " + array2[1].ToString() + " руб.";
							mainWindow.iv.Content = "Ваш счет : " + array2[1].ToString() + " руб.";
							num = 13;
							num4 = num;
							continue;
						case 0:
							mainWindow.fv.Content = "Ваш счет : Ошибка";
							mainWindow.iv.Content = "Ваш счет : Ошибка";
							num = 27;
							num4 = num;
							continue;
						case 9:
							mainWindow.eval_cx.Close();
							mainWindow.eval_cw.Close();
							num = 22;
							num4 = num;
							continue;
						case 22:
							if (Langve == "RU")
							{
								num = 26;
								num4 = num;
								continue;
							}
							mainWindow.fv.Content = "Your account : 0 rub.";
							mainWindow.iv.Content = "Your account : 0 rub.";
							num = 14;
							num4 = num;
							continue;
						case 14:
						case 20:
							num = 24;
							num4 = num;
							continue;
						case 24:
							if (array2[0] == "UPCNERROR")
							{
								num = 25;
								num4 = num;
								continue;
							}
							goto case 16;
						case 21:
							mainWindow.eval_cx.Write(array, 0, array.Length);
							num = 7;
							num4 = num;
							continue;
						case 3:
							break;
						case 17:
							goto end_IL_0105;
						}
						awaiter.GetResult();
						mainWindow.eval_fu.IsEnabled = true;
						num = 17;
						num4 = num;
						continue;
						end_IL_0105:
						break;
					}
				}
				catch
				{
					try
					{
						mainWindow.eval_cx.Close();
					}
					catch
					{
					}
					try
					{
						mainWindow.eval_cw.Close();
					}
					catch
					{
					}
					if (Langve == "RU")
					{
						mainWindow.fv.Content = "Ваш счет : Ошибка";
						mainWindow.iv.Content = "Ваш счет : Ошибка";
					}
					else
					{
						mainWindow.fv.Content = "Your account : Error";
						mainWindow.iv.Content = "Your account : Error";
					}
					mainWindow.eval_fu.IsEnabled = true;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 0;
			_ = num;
			num = 8436;
			short num2 = num;
			num = 8436;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_al : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private bool m_eval_d;

		private TaskAwaiter eval_e;

		private void eval_d()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow CS_0024_003C_003E8__locals0 = eval_c;
			try
			{
				num = 15;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				bool flag = default(bool);
				int num5 = default(int);
				char[] array = default(char[]);
				char c = default(char);
				int num4 = default(int);
				string[] array2 = default(string[]);
				string text2 = default(string);
				string text = default(string);
				StreamReader streamReader = default(StreamReader);
				while (true)
				{
					switch (num3)
					{
					case 15:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if ((uint)num2 > 1u)
						{
							num = 12;
							num3 = num;
							continue;
						}
						goto case 24;
					case 0:
						if (!awaiter.IsCompleted)
						{
							num = 10;
							num3 = num;
							continue;
						}
						goto case 20;
					case 3:
						CS_0024_003C_003E8__locals0.eval_av();
						CS_0024_003C_003E8__locals0.eval_at();
						num = 17;
						num3 = num;
						continue;
					case 17:
						if (Langve == "RU")
						{
							num = 4;
							num3 = num;
						}
						else
						{
							CS_0024_003C_003E8__locals0.Norificons("Connected successfully ...");
							num = 6;
							num3 = num;
						}
						continue;
					case 21:
						try
						{
							num = 19;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 19:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 != 0)
									{
										num = 14;
										num3 = num;
										continue;
									}
									awaiter = eval_e;
									eval_e = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 23;
									num3 = num;
									continue;
								case 24:
									if (flag)
									{
										num = 34;
										num3 = num;
										continue;
									}
									goto case 21;
								case 17:
									flag = false;
									num = 4;
									num3 = num;
									continue;
								case 4:
									try
									{
										switch (0)
										{
										default:
											while (true)
											{
												switch (num3)
												{
												case 4:
													flag = true;
													num = 11;
													num3 = num;
													continue;
												case 5:
												case 7:
													num = 2;
													num3 = num;
													continue;
												case 2:
													if (num5 >= array.Length)
													{
														num = 8;
														num3 = num;
													}
													else
													{
														c = array[num5];
														num = 3;
														num3 = num;
													}
													continue;
												case 0:
												case 1:
													num = 10;
													num3 = num;
													continue;
												case 10:
													if (num4 < array2.Length)
													{
														text2 = array2[num4];
														array = CS_0024_003C_003E8__locals0.Directory_game.ToCharArray();
														num5 = 0;
														num = 7;
														num3 = num;
													}
													else
													{
														num = 6;
														num3 = num;
													}
													continue;
												case 11:
													num5++;
													num = 5;
													num3 = num;
													continue;
												case 3:
													if (c.ToString() == text2)
													{
														num = 4;
														num3 = num;
														continue;
													}
													goto case 11;
												case 8:
													num4++;
													num = 0;
													num3 = num;
													continue;
												case 6:
													num = 9;
													num3 = num;
													continue;
												case 9:
													goto end_IL_0389;
												}
												goto case 0;
												continue;
												end_IL_0389:
												break;
											}
											break;
										case 0:
											array2 = new string[1] { " " };
											num4 = 0;
											num = 1;
											num3 = num;
											goto default;
										}
									}
									catch
									{
									}
									num = 24;
									num3 = num;
									continue;
								case 0:
								case 8:
									num = 32;
									num3 = num;
									continue;
								case 32:
									if (!GameLicense)
									{
										num = 17;
										num3 = num;
										continue;
									}
									goto case 21;
								case 23:
									awaiter.GetResult();
									awaiter = CS_0024_003C_003E8__locals0.bz().GetAwaiter();
									num = 3;
									num3 = num;
									continue;
								case 3:
									if (!awaiter.IsCompleted)
									{
										num = 27;
										num3 = num;
										continue;
									}
									goto case 5;
								case 14:
									num = 10;
									num3 = num;
									continue;
								case 10:
									if (num2 != 1)
									{
										num = 11;
										num3 = num;
										continue;
									}
									awaiter = eval_e;
									eval_e = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 5;
									num3 = num;
									continue;
								case 13:
									try
									{
										while (true)
										{
											StreamWriter streamWriter2 = new StreamWriter(Directory_Launcher + "\\mods.ini");
											try
											{
												streamWriter2.WriteLine(Updatemods);
												streamWriter2.Close();
											}
											finally
											{
												num = 4;
												num3 = num;
												while (true)
												{
													switch (num3)
													{
													case 4:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (num2 < 0)
														{
															num = 0;
															num3 = num;
															continue;
														}
														break;
													case 2:
														((IDisposable)streamWriter2).Dispose();
														num = 3;
														num3 = num;
														continue;
													case 3:
														break;
													case 0:
														num = 1;
														num3 = num;
														continue;
													case 1:
														if (streamWriter2 != null)
														{
															num = 2;
															num3 = num;
															continue;
														}
														break;
													}
													break;
												}
											}
											num = 18220;
											short num6 = num;
											num = 18220;
											switch (num6 == num)
											{
											case false:
											case true:
												continue;
											}
											num = 0;
											if (num == 0)
											{
											}
											break;
										}
									}
									catch (Exception ex2)
									{
										MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, ex2.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									}
									goto IL_0f2b;
								case 21:
								case 31:
									awaiter = CS_0024_003C_003E8__locals0.eval_bt().GetAwaiter();
									num = 9;
									num3 = num;
									continue;
								case 9:
									if (!awaiter.IsCompleted)
									{
										num = 2;
										num3 = num;
										continue;
									}
									goto case 23;
								case 25:
									text = "";
									streamReader = new StreamReader(Directory_Launcher + "\\client.ini");
									num = 18;
									num3 = num;
									continue;
								case 6:
									MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Конечная папка игры должна иметь имя " + CS_0024_003C_003E8__locals0.NameDirGamePatch + ",смените имя папки игры на " + CS_0024_003C_003E8__locals0.NameDirGamePatch + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									num = 8;
									num3 = num;
									continue;
								case 11:
								{
									DoubleAnimation doubleAnimation = new DoubleAnimation
									{
										From = 1.0,
										To = 0.0,
										Duration = new Duration(TimeSpan.FromSeconds(0.5)),
										AutoReverse = false
									};
									doubleAnimation.Completed += delegate
									{
										short num7 = -25149;
										short num8 = num7;
										num7 = -25149;
										switch (num8 == num7)
										{
										default:
										{
											num7 = 1;
											if (num7 != 0)
											{
											}
											num7 = 0;
											if (num7 != 0)
											{
											}
											num7 = 0;
											_ = num7;
											CS_0024_003C_003E8__locals0.df.eval_c.Visibility = Visibility.Hidden;
											CS_0024_003C_003E8__locals0.df.Close();
											CS_0024_003C_003E8__locals0.fa.Visibility = Visibility.Visible;
											DoubleAnimation animation = new DoubleAnimation
											{
												From = 0.0,
												To = 1.0,
												Duration = new Duration(TimeSpan.FromSeconds(0.5)),
												AutoReverse = false
											};
											CS_0024_003C_003E8__locals0.fa.BeginAnimation(UIElement.OpacityProperty, animation);
											break;
										}
										}
									};
									CS_0024_003C_003E8__locals0.df.eval_c.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
									this.m_eval_d = true;
									CS_0024_003C_003E8__locals0.Directory_game = Loadsetting;
									num = 33;
									num3 = num;
									continue;
								}
								case 33:
									if (Path.GetFileName(Loadsetting).ToString() != CS_0024_003C_003E8__locals0.NameDirGamePatch)
									{
										num = 30;
										num3 = num;
										continue;
									}
									goto case 0;
								case 18:
									try
									{
										num = 1;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 1:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											case 5:
												CS_0024_003C_003E8__locals0.eval_ew.Stop();
												CS_0024_003C_003E8__locals0.eval_fo.Value = 0.0;
												CS_0024_003C_003E8__locals0.eval_be();
												num = 11;
												num3 = num;
												continue;
											case 2:
												if (Enable_UploadGame)
												{
													num = 8;
													num3 = num;
													continue;
												}
												goto default;
											default:
												num = 7;
												num3 = num;
												continue;
											case 7:
												if ((text = streamReader.ReadLine()) == null)
												{
													num = 10;
													num3 = num;
												}
												else
												{
													num = 3;
													num3 = num;
												}
												continue;
											case 4:
												num = 6;
												num3 = num;
												continue;
											case 6:
												if (!(text != Updateclient))
												{
													CS_0024_003C_003E8__locals0.Loc_client = text;
													CS_0024_003C_003E8__locals0.BoxServer.IsEnabled = true;
													num = 2;
													num3 = num;
												}
												else
												{
													num = 5;
													num3 = num;
												}
												continue;
											case 3:
												if (!string.IsNullOrEmpty(text))
												{
													num = 4;
													num3 = num;
													continue;
												}
												goto default;
											case 8:
												CS_0024_003C_003E8__locals0.eval_bg();
												num = 0;
												num3 = num;
												continue;
											case 10:
												streamReader.Close();
												streamReader.Dispose();
												num = 9;
												num3 = num;
												continue;
											case 9:
												break;
											}
											break;
										}
									}
									finally
									{
										num = 4;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 4:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 < 0)
												{
													num = 0;
													num3 = num;
													continue;
												}
												break;
											case 0:
												num = 3;
												num3 = num;
												continue;
											case 3:
												if (streamReader != null)
												{
													num = 1;
													num3 = num;
													continue;
												}
												break;
											case 1:
												((IDisposable)streamReader).Dispose();
												num = 2;
												num3 = num;
												continue;
											case 2:
												break;
											}
											break;
										}
									}
									break;
								case 7:
									MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Путь к папке игры не должен содержать пробелы!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									num = 21;
									num3 = num;
									continue;
								case 26:
									if (!File.Exists(Directory_Launcher + "\\mods.ini"))
									{
										num = 13;
										num3 = num;
										continue;
									}
									goto IL_0f2b;
								case 30:
									num = 28;
									num3 = num;
									continue;
								case 28:
									if (!(Langve == "RU"))
									{
										MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "The final folder of the game should have a name " + CS_0024_003C_003E8__locals0.NameDirGamePatch + ", change the name of the game folder to " + CS_0024_003C_003E8__locals0.NameDirGamePatch + "!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 0;
										num3 = num;
									}
									else
									{
										num = 6;
										num3 = num;
									}
									continue;
								case 2:
									num2 = (eval_a = 0);
									eval_e = awaiter;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
									num = 20;
									num3 = num;
									continue;
								case 20:
									return;
								case 12:
									try
									{
										StreamWriter streamWriter = new StreamWriter(Directory_Launcher + "\\client.ini");
										try
										{
											streamWriter.WriteLine(Updateclient);
											streamWriter.Close();
										}
										finally
										{
											num = 4;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 4:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 < 0)
													{
														num = 0;
														num3 = num;
														continue;
													}
													break;
												case 2:
													((IDisposable)streamWriter).Dispose();
													num = 3;
													num3 = num;
													continue;
												case 3:
													break;
												case 0:
													num = 1;
													num3 = num;
													continue;
												case 1:
													if (streamWriter != null)
													{
														num = 2;
														num3 = num;
														continue;
													}
													break;
												}
												break;
											}
										}
									}
									catch (Exception ex)
									{
										MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, ex.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									}
									goto IL_0d0f;
								case 27:
									num2 = (eval_a = 1);
									eval_e = awaiter;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
									num = 15;
									num3 = num;
									continue;
								case 15:
									return;
								case 29:
									if (this.m_eval_d)
									{
										num = 25;
										num3 = num;
										continue;
									}
									break;
								case 5:
									awaiter.GetResult();
									num = 16;
									num3 = num;
									continue;
								case 16:
									if (!File.Exists(Directory_Launcher + "\\client.ini"))
									{
										num = 12;
										num3 = num;
										continue;
									}
									goto IL_0d0f;
								case 34:
									num = 1;
									num3 = num;
									continue;
								case 1:
									if (!(Langve == "RU"))
									{
										MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "The path to the game folder should not contain spaces!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 31;
										num3 = num;
									}
									else
									{
										num = 7;
										num3 = num;
									}
									continue;
								case 22:
									goto end_IL_026e;
									IL_0d0f:
									num = 26;
									num3 = num;
									continue;
									IL_0f2b:
									num = 29;
									num3 = num;
									continue;
								}
								num = 22;
								num3 = num;
								continue;
								end_IL_026e:
								break;
							}
						}
						catch (Exception ex3)
						{
							MessageBoxWindow.Show(CS_0024_003C_003E8__locals0, "Load Game : " + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						goto case 2;
					case 10:
						num2 = (eval_a = 2);
						eval_e = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						num = 8;
						num3 = num;
						continue;
					case 8:
						return;
					case 20:
						awaiter.GetResult();
						CS_0024_003C_003E8__locals0.eval_bl();
						num = 7;
						num3 = num;
						continue;
					case 14:
						num = 1;
						num3 = num;
						continue;
					case 1:
						if (Directory.Exists(Loadsetting))
						{
							num = 18;
							num3 = num;
						}
						else
						{
							CS_0024_003C_003E8__locals0.eval_b5();
							num = 2;
							num3 = num;
						}
						continue;
					case 12:
						num = 16;
						num3 = num;
						continue;
					case 16:
						if (num2 == 2)
						{
							awaiter = eval_e;
							eval_e = default(TaskAwaiter);
							num2 = (eval_a = -1);
							num = 20;
							num3 = num;
						}
						else
						{
							num = 5;
							num3 = num;
						}
						continue;
					case 4:
						CS_0024_003C_003E8__locals0.Norificons("Подключен успешно ...");
						num = 9;
						num3 = num;
						continue;
					case 6:
					case 9:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "DIRECTORYGAME", null);
						num = 13;
						num3 = num;
						continue;
					case 13:
						if (Loadsetting == null)
						{
							CS_0024_003C_003E8__locals0.eval_b5();
							num = 11;
							num3 = num;
						}
						else
						{
							num = 14;
							num3 = num;
						}
						continue;
					case 18:
						CS_0024_003C_003E8__locals0.eval_hl.Content = Loadsetting;
						this.m_eval_d = false;
						num = 24;
						num3 = num;
						continue;
					case 2:
					case 11:
						CS_0024_003C_003E8__locals0.RefreshServerList();
						num = 23;
						num3 = num;
						continue;
					case 24:
						num = 21;
						num3 = num;
						continue;
					case 5:
						num = 22;
						num3 = num;
						continue;
					case 22:
						if (!Internet.CheckConnection())
						{
							awaiter = Task.Delay(2000).GetAwaiter();
							num = 0;
							num3 = num;
						}
						else
						{
							num = 3;
							num3 = num;
						}
						continue;
					case 7:
					case 23:
						num = 19;
						num3 = num;
						continue;
					case 19:
						break;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -27998;
			short num2 = num;
			num = -27998;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_am : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public string eval_c;

		public MainWindow eval_d;

		private eval_aa m_eval_e;

		private TaskAwaiter eval_f;

		private void eval_e()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 1358;
			short num2 = num;
			num = 1358;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 0;
				switch (num)
				{
				}
				break;
			case false:
			case true:
				break;
			}
			int num3 = eval_a;
			MainWindow mainWindow = eval_d;
			try
			{
				num = 0;
				int num4 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				WebClient webClient = default(WebClient);
				while (true)
				{
					switch (num4)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num3 != 0)
						{
							num = 10;
							num4 = num;
							continue;
						}
						goto case 5;
					case 4:
						try
						{
							GC.Collect();
							GC.WaitForPendingFinalizers();
						}
						catch
						{
						}
						num = 8;
						num4 = num;
						continue;
					case 5:
						num = 2;
						num4 = num;
						continue;
					case 1:
						FirstRunStatistic = true;
						num = 7;
						num4 = num;
						continue;
					case 6:
						if (mainWindow.eval_fm.ThreeDots.Visibility == Visibility.Visible)
						{
							num = 9;
							num4 = num;
							continue;
						}
						goto case 1;
					case 2:
						try
						{
							num = 9;
							num4 = num;
							while (true)
							{
								switch (num4)
								{
								case 9:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num3 != 0)
									{
										num = 7;
										num4 = num;
										continue;
									}
									awaiter = eval_f;
									eval_f = default(TaskAwaiter);
									num3 = (eval_a = -1);
									num = 1;
									num4 = num;
									continue;
								case 8:
									num3 = (eval_a = 0);
									eval_f = awaiter;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
									num = 6;
									num4 = num;
									continue;
								case 6:
									return;
								case 7:
									mainWindow.eval_fm.LError.Visibility = Visibility.Hidden;
									awaiter = Task.Delay(5).GetAwaiter();
									num = 5;
									num4 = num;
									continue;
								case 5:
									if (!awaiter.IsCompleted)
									{
										num = 8;
										num4 = num;
										continue;
									}
									goto case 1;
								case 1:
									awaiter.GetResult();
									num = 3;
									num4 = num;
									continue;
								case 3:
									if (this.m_eval_e.eval_a != "0")
									{
										num = 0;
										num4 = num;
										continue;
									}
									break;
								case 4:
									try
									{
										Uri address = new Uri(mainWindow.HTTP + mainWindow.m_eval_s + ":" + mainWindow.m_eval_o + "/LAUNCHER/STATS_" + this.m_eval_e.eval_a + "_TopALL.xml");
										webClient.DownloadFileAsync(address, DirLocal + "\\stats_" + this.m_eval_e.eval_a + ".xml");
										webClient.DownloadFileCompleted += delegate
										{
											short num5 = 0;
											switch (num5)
											{
											default:
											{
												num5 = 243;
												int num6 = num5;
												bool flag = default(bool);
												string iMGTOP = default(string);
												IEnumerator enumerator = default(IEnumerator);
												IDisposable disposable = default(IDisposable);
												int num7 = default(int);
												int num11 = default(int);
												int num8 = default(int);
												int num13 = default(int);
												int num12 = default(int);
												int num10 = default(int);
												int num9 = default(int);
												while (true)
												{
													switch (num6)
													{
													case 243:
														switch (0)
														{
														default:
															goto end_IL_0040;
														case 0:
															break;
														}
														goto default;
													default:
														if (!File.Exists(DirLocal + "\\stats_" + this.m_eval_e.eval_a + ".xml"))
														{
															return;
														}
														num5 = 258;
														num6 = num5;
														break;
													case 258:
														num5 = 189;
														num6 = num5;
														break;
													case 189:
														if (new FileInfo(DirLocal + "\\stats_" + this.m_eval_e.eval_a + ".xml").Length != 0L)
														{
															num5 = 162;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountKillZ.Content = "";
															this.m_eval_e.eval_b.eval_fm.UserCountALL.Content = "";
															this.m_eval_e.eval_b.eval_fm.UserCountDistancion.Content = "";
															this.m_eval_e.eval_b.eval_fm.UserCountShoot.Content = "";
															this.m_eval_e.eval_b.eval_fm.UserCountTime.Content = "";
															this.m_eval_e.eval_b.eval_fm.UserCountAnimalls.Content = "";
															this.m_eval_e.eval_b.eval_fm.UserCountKills.Content = "";
															this.m_eval_e.eval_b.eval_fm.LError.Visibility = Visibility.Visible;
															num5 = 64;
															num6 = num5;
														}
														break;
													case 162:
														this.m_eval_e.eval_b.eval_ay();
														this.m_eval_e.eval_b.eval_eu.Clear();
														this.m_eval_e.eval_b.eval_dm.Load(DirLocal + "\\stats_" + this.m_eval_e.eval_a + ".xml");
														flag = false;
														iMGTOP = string.Empty;
														enumerator = this.m_eval_e.eval_b.eval_dm.SelectNodes("/server/ALL/player").GetEnumerator();
														num5 = 123;
														num6 = num5;
														break;
													case 123:
														try
														{
															num5 = 0;
															num6 = num5;
															while (true)
															{
																switch (num6)
																{
																case 0:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num5 = 2;
																	num6 = num5;
																	continue;
																case 2:
																	if (enumerator.MoveNext())
																	{
																		XmlNode xmlNode3 = (XmlNode)enumerator.Current;
																		List<eval_a> eval_eu3 = this.m_eval_e.eval_b.eval_eu;
																		eval_a obj5 = new eval_a();
																		obj5.eval_q(xmlNode3.SelectSingleNode("Uid").InnerText);
																		obj5.eval_p(xmlNode3.SelectSingleNode("Bal").InnerText);
																		obj5.eval_o(xmlNode3.SelectSingleNode("Name").InnerText);
																		obj5.eval_n(xmlNode3.SelectSingleNode("DistTrav").InnerText);
																		obj5.eval_m(xmlNode3.SelectSingleNode("DistTraved").InnerText);
																		obj5.eval_l(xmlNode3.SelectSingleNode("longestShot").InnerText);
																		obj5.eval_j(xmlNode3.SelectSingleNode("zKillCount").InnerText);
																		obj5.eval_h(xmlNode3.SelectSingleNode("timeSurviv").InnerText);
																		obj5.eval_c(xmlNode3.SelectSingleNode("timeSurvived").InnerText);
																		obj5.eval_b(xmlNode3.SelectSingleNode("KilledCount").InnerText);
																		obj5.eval_a(xmlNode3.SelectSingleNode("AnimalsKilledCount").InnerText);
																		eval_eu3.Add(obj5);
																		num5 = 1;
																		num6 = num5;
																	}
																	else
																	{
																		num5 = 4;
																		num6 = num5;
																	}
																	continue;
																case 4:
																	num5 = 3;
																	num6 = num5;
																	continue;
																case 3:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num6)
																	{
																	case 0:
																		if (disposable != null)
																		{
																			num5 = 1;
																			num6 = num5;
																			continue;
																		}
																		goto end_IL_075c;
																	case 1:
																		disposable.Dispose();
																		num5 = 2;
																		num6 = num5;
																		continue;
																	case 2:
																		goto end_IL_075c;
																	}
																	goto case 0;
																	continue;
																	end_IL_075c:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num5 = 0;
																num6 = num5;
																goto default;
															}
														}
														num7 = 0;
														num5 = 244;
														num6 = num5;
														break;
													case 124:
														if (num7 + 1 <= 30)
														{
															num5 = 149;
															num6 = num5;
															break;
														}
														goto case 102;
													case 149:
														num5 = 139;
														num6 = num5;
														break;
													case 139:
														if (!string.IsNullOrEmpty(this.m_eval_e.eval_b.eval_eu[num7].eval_o()))
														{
															num5 = 109;
															num6 = num5;
															break;
														}
														goto case 161;
													case 109:
														iMGTOP = string.Empty;
														num5 = 147;
														num6 = num5;
														break;
													case 147:
														if (num7 + 1 == 1)
														{
															num5 = 241;
															num6 = num5;
															break;
														}
														goto case 67;
													case 241:
														iMGTOP = "pack://application:,,/Design/gold.png";
														num5 = 67;
														num6 = num5;
														break;
													case 67:
														num5 = 145;
														num6 = num5;
														break;
													case 145:
														if (num7 + 1 == 2)
														{
															num5 = 137;
															num6 = num5;
															break;
														}
														goto case 264;
													case 137:
														iMGTOP = "pack://application:,,/Design/silver.png";
														num5 = 264;
														num6 = num5;
														break;
													case 264:
														num5 = 71;
														num6 = num5;
														break;
													case 71:
														if (num7 + 1 == 3)
														{
															num5 = 92;
															num6 = num5;
															break;
														}
														goto case 136;
													case 92:
														iMGTOP = "pack://application:,,/Design/bronze.png";
														num5 = 136;
														num6 = num5;
														break;
													case 136:
														num5 = 203;
														num6 = num5;
														break;
													case 203:
														if (num7 + 1 != 1)
														{
															num5 = 198;
															num6 = num5;
															break;
														}
														goto IL_0b8e;
													case 198:
														num5 = 34;
														num6 = num5;
														break;
													case 34:
														if (num7 + 1 != 2)
														{
															num5 = 13;
															num6 = num5;
															break;
														}
														goto IL_0b8e;
													case 13:
														num5 = 239;
														num6 = num5;
														break;
													case 239:
														if (num7 + 1 != 3)
														{
															num5 = 25;
															num6 = num5;
															break;
														}
														goto IL_0b8e;
													case 25:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num7 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num7].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num7].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num7].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num7].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num7].eval_h().Replace(" ", string.Empty),
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num7].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num7].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxALL.Items.Add(this.m_eval_e.eval_b.eval_et);
														num5 = 226;
														num6 = num5;
														break;
													case 161:
													case 226:
														this.m_eval_e.eval_b.eval_et.LAnimalCount.Opacity = 90.0;
														this.m_eval_e.eval_b.eval_et.LKillCount.Opacity = 90.0;
														this.m_eval_e.eval_b.eval_et.LDistTrav.Opacity = 90.0;
														this.m_eval_e.eval_b.eval_et.LlongestShot.Opacity = 90.0;
														this.m_eval_e.eval_b.eval_et.LzKillCount.Opacity = 90.0;
														this.m_eval_e.eval_b.eval_et.LtimeSurviv.Opacity = 90.0;
														num5 = 102;
														num6 = num5;
														break;
													case 102:
														num5 = 113;
														num6 = num5;
														break;
													case 113:
														if (this.m_eval_e.eval_b.UID_SC == this.m_eval_e.eval_b.eval_eu[num7].eval_q())
														{
															num5 = 130;
															num6 = num5;
															break;
														}
														goto case 1;
													case 130:
														flag = true;
														num5 = 201;
														num6 = num5;
														break;
													case 201:
														if (Langve == "RU")
														{
															num5 = 155;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountALL.Content = "Your position : " + (num7 + 1);
															num5 = 1;
															num6 = num5;
														}
														break;
													case 155:
														this.m_eval_e.eval_b.eval_fm.UserCountALL.Content = "Ваша позиция : " + (num7 + 1);
														num5 = 36;
														num6 = num5;
														break;
													case 1:
													case 36:
														num7++;
														num5 = 148;
														num6 = num5;
														break;
													case 148:
													case 244:
														num5 = 208;
														num6 = num5;
														break;
													case 208:
														if (num7 < this.m_eval_e.eval_b.eval_eu.Count)
														{
															num5 = 124;
															num6 = num5;
														}
														else
														{
															num5 = 238;
															num6 = num5;
														}
														break;
													case 238:
														num5 = 114;
														num6 = num5;
														break;
													case 114:
														if (!flag)
														{
															num5 = 39;
															num6 = num5;
															break;
														}
														goto IL_1032;
													case 39:
														num5 = 218;
														num6 = num5;
														break;
													case 218:
														this.m_eval_e.eval_b.eval_fm.UserCountALL.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
														num5 = 163;
														num6 = num5;
														break;
													case 163:
														num5 = 1;
														if (num5 == 0)
														{
														}
														goto IL_1032;
													case 41:
														try
														{
															num5 = 0;
															num6 = num5;
															while (true)
															{
																switch (num6)
																{
																case 0:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num5 = 1;
																	num6 = num5;
																	continue;
																case 1:
																	if (!enumerator.MoveNext())
																	{
																		num5 = 2;
																		num6 = num5;
																	}
																	else
																	{
																		XmlNode xmlNode6 = (XmlNode)enumerator.Current;
																		List<eval_a> eval_eu6 = this.m_eval_e.eval_b.eval_eu;
																		eval_a obj8 = new eval_a();
																		obj8.eval_q(xmlNode6.SelectSingleNode("Uid").InnerText);
																		obj8.eval_p(xmlNode6.SelectSingleNode("Bal").InnerText);
																		obj8.eval_o(xmlNode6.SelectSingleNode("Name").InnerText);
																		obj8.eval_n(xmlNode6.SelectSingleNode("DistTrav").InnerText);
																		obj8.eval_m(xmlNode6.SelectSingleNode("DistTraved").InnerText);
																		obj8.eval_l(xmlNode6.SelectSingleNode("longestShot").InnerText);
																		obj8.eval_j(xmlNode6.SelectSingleNode("zKillCount").InnerText);
																		obj8.eval_h(xmlNode6.SelectSingleNode("timeSurviv").InnerText);
																		obj8.eval_c(xmlNode6.SelectSingleNode("timeSurvived").InnerText);
																		obj8.eval_b(xmlNode6.SelectSingleNode("KilledCount").InnerText);
																		obj8.eval_a(xmlNode6.SelectSingleNode("AnimalsKilledCount").InnerText);
																		eval_eu6.Add(obj8);
																		num5 = 4;
																		num6 = num5;
																	}
																	continue;
																case 2:
																	num5 = 3;
																	num6 = num5;
																	continue;
																case 3:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num6)
																	{
																	case 0:
																		if (disposable != null)
																		{
																			num5 = 1;
																			num6 = num5;
																			continue;
																		}
																		goto end_IL_1255;
																	case 1:
																		disposable.Dispose();
																		num5 = 2;
																		num6 = num5;
																		continue;
																	case 2:
																		goto end_IL_1255;
																	}
																	goto case 0;
																	continue;
																	end_IL_1255:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num5 = 0;
																num6 = num5;
																goto default;
															}
														}
														num11 = 0;
														num5 = 251;
														num6 = num5;
														break;
													case 6:
														if (num11 + 1 <= 30)
														{
															num5 = 215;
															num6 = num5;
															break;
														}
														goto case 211;
													case 215:
														num5 = 210;
														num6 = num5;
														break;
													case 210:
														if (!string.IsNullOrEmpty(this.m_eval_e.eval_b.eval_eu[num11].eval_o()))
														{
															num5 = 220;
															num6 = num5;
															break;
														}
														goto case 20;
													case 220:
														iMGTOP = string.Empty;
														num5 = 176;
														num6 = num5;
														break;
													case 176:
														if (num11 + 1 == 1)
														{
															num5 = 14;
															num6 = num5;
															break;
														}
														goto case 206;
													case 14:
														iMGTOP = "pack://application:,,/Design/gold.png";
														num5 = 206;
														num6 = num5;
														break;
													case 206:
														num5 = 254;
														num6 = num5;
														break;
													case 254:
														if (num11 + 1 == 2)
														{
															num5 = 153;
															num6 = num5;
															break;
														}
														goto case 172;
													case 153:
														iMGTOP = "pack://application:,,/Design/silver.png";
														num5 = 172;
														num6 = num5;
														break;
													case 172:
														num5 = 168;
														num6 = num5;
														break;
													case 168:
														if (num11 + 1 == 3)
														{
															num5 = 62;
															num6 = num5;
															break;
														}
														goto case 159;
													case 62:
														iMGTOP = "pack://application:,,/Design/bronze.png";
														num5 = 159;
														num6 = num5;
														break;
													case 159:
														num5 = 33;
														num6 = num5;
														break;
													case 33:
														if (num11 + 1 != 1)
														{
															num5 = 165;
															num6 = num5;
															break;
														}
														goto IL_1687;
													case 165:
														num5 = 125;
														num6 = num5;
														break;
													case 125:
														if (num11 + 1 != 2)
														{
															num5 = 170;
															num6 = num5;
															break;
														}
														goto IL_1687;
													case 170:
														num5 = 52;
														num6 = num5;
														break;
													case 52:
														if (num11 + 1 != 3)
														{
															num5 = 144;
															num6 = num5;
															break;
														}
														goto IL_1687;
													case 144:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num11 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num11].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num11].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num11].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num11].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num11].eval_h().Replace(" ", string.Empty),
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num11].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num11].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxDistancion.Items.Add(this.m_eval_e.eval_b.eval_et);
														num5 = 20;
														num6 = num5;
														break;
													case 20:
													case 265:
														this.m_eval_e.eval_b.eval_et.LDistTrav.Opacity = 90.0;
														num5 = 211;
														num6 = num5;
														break;
													case 211:
														num5 = 131;
														num6 = num5;
														break;
													case 131:
														if (this.m_eval_e.eval_b.UID_SC == this.m_eval_e.eval_b.eval_eu[num11].eval_q())
														{
															num5 = 245;
															num6 = num5;
															break;
														}
														goto case 88;
													case 245:
														flag = true;
														num5 = 9;
														num6 = num5;
														break;
													case 9:
														if (Langve == "RU")
														{
															num5 = 81;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountDistancion.Content = "Your position : " + (num11 + 1);
															num5 = 105;
															num6 = num5;
														}
														break;
													case 81:
														this.m_eval_e.eval_b.eval_fm.UserCountDistancion.Content = "Ваша позиция : " + (num11 + 1);
														num5 = 88;
														num6 = num5;
														break;
													case 88:
													case 105:
														num11++;
														num5 = 4;
														num6 = num5;
														break;
													case 4:
													case 251:
														num5 = 173;
														num6 = num5;
														break;
													case 173:
														if (num11 < this.m_eval_e.eval_b.eval_eu.Count)
														{
															num5 = 6;
															num6 = num5;
														}
														else
														{
															num5 = 118;
															num6 = num5;
														}
														break;
													case 118:
														num5 = 103;
														num6 = num5;
														break;
													case 103:
														if (!flag)
														{
															num5 = 30;
															num6 = num5;
															break;
														}
														goto case 233;
													case 30:
														num5 = 83;
														num6 = num5;
														break;
													case 83:
														this.m_eval_e.eval_b.eval_fm.UserCountDistancion.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
														num5 = 233;
														num6 = num5;
														break;
													case 233:
														this.m_eval_e.eval_b.eval_eu.Clear();
														flag = false;
														enumerator = this.m_eval_e.eval_b.eval_dm.SelectNodes("/server/LongestShot/player").GetEnumerator();
														num5 = 69;
														num6 = num5;
														break;
													case 69:
														try
														{
															num5 = 0;
															num6 = num5;
															while (true)
															{
																switch (num6)
																{
																case 0:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num5 = 2;
																	num6 = num5;
																	continue;
																case 2:
																	if (enumerator.MoveNext())
																	{
																		XmlNode xmlNode = (XmlNode)enumerator.Current;
																		List<eval_a> eval_eu = this.m_eval_e.eval_b.eval_eu;
																		eval_a obj3 = new eval_a();
																		obj3.eval_q(xmlNode.SelectSingleNode("Uid").InnerText);
																		obj3.eval_p(xmlNode.SelectSingleNode("Bal").InnerText);
																		obj3.eval_o(xmlNode.SelectSingleNode("Name").InnerText);
																		obj3.eval_n(xmlNode.SelectSingleNode("DistTrav").InnerText);
																		obj3.eval_m(xmlNode.SelectSingleNode("DistTraved").InnerText);
																		obj3.eval_l(xmlNode.SelectSingleNode("longestShot").InnerText);
																		obj3.eval_j(xmlNode.SelectSingleNode("zKillCount").InnerText);
																		obj3.eval_h(xmlNode.SelectSingleNode("timeSurviv").InnerText);
																		obj3.eval_c(xmlNode.SelectSingleNode("timeSurvived").InnerText);
																		obj3.eval_b(xmlNode.SelectSingleNode("KilledCount").InnerText);
																		obj3.eval_a(xmlNode.SelectSingleNode("AnimalsKilledCount").InnerText);
																		eval_eu.Add(obj3);
																		num5 = 1;
																		num6 = num5;
																	}
																	else
																	{
																		num5 = 4;
																		num6 = num5;
																	}
																	continue;
																case 4:
																	num5 = 3;
																	num6 = num5;
																	continue;
																case 3:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num6)
																	{
																	case 0:
																		if (disposable != null)
																		{
																			num5 = 1;
																			num6 = num5;
																			continue;
																		}
																		goto end_IL_1c97;
																	case 1:
																		disposable.Dispose();
																		num5 = 2;
																		num6 = num5;
																		continue;
																	case 2:
																		goto end_IL_1c97;
																	}
																	goto case 0;
																	continue;
																	end_IL_1c97:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num5 = 0;
																num6 = num5;
																goto default;
															}
														}
														num8 = 0;
														num5 = 178;
														num6 = num5;
														break;
													case 29:
														if (num8 + 1 <= 30)
														{
															num5 = 235;
															num6 = num5;
															break;
														}
														goto case 107;
													case 235:
														num5 = 3;
														num6 = num5;
														break;
													case 3:
														if (!string.IsNullOrEmpty(this.m_eval_e.eval_b.eval_eu[num8].eval_o()))
														{
															num5 = 24;
															num6 = num5;
															break;
														}
														goto case 122;
													case 24:
														iMGTOP = string.Empty;
														num5 = 66;
														num6 = num5;
														break;
													case 66:
														if (num8 + 1 == 1)
														{
															num5 = 143;
															num6 = num5;
															break;
														}
														goto case 61;
													case 143:
														iMGTOP = "pack://application:,,/Design/gold.png";
														num5 = 61;
														num6 = num5;
														break;
													case 61:
														num5 = 129;
														num6 = num5;
														break;
													case 129:
														if (num8 + 1 == 2)
														{
															num5 = 106;
															num6 = num5;
															break;
														}
														goto case 150;
													case 106:
														iMGTOP = "pack://application:,,/Design/silver.png";
														num5 = 150;
														num6 = num5;
														break;
													case 150:
														num5 = 177;
														num6 = num5;
														break;
													case 177:
														if (num8 + 1 == 3)
														{
															num5 = 37;
															num6 = num5;
															break;
														}
														goto case 54;
													case 37:
														iMGTOP = "pack://application:,,/Design/bronze.png";
														num5 = 54;
														num6 = num5;
														break;
													case 54:
														num5 = 0;
														_ = num5;
														num5 = 194;
														num6 = num5;
														break;
													case 194:
														if (num8 + 1 != 1)
														{
															num5 = 142;
															num6 = num5;
															break;
														}
														goto IL_20e8;
													case 142:
														num5 = 234;
														num6 = num5;
														break;
													case 234:
														if (num8 + 1 != 2)
														{
															num5 = 255;
															num6 = num5;
															break;
														}
														goto IL_20e8;
													case 255:
														num5 = 48;
														num6 = num5;
														break;
													case 48:
														if (num8 + 1 != 3)
														{
															num5 = 183;
															num6 = num5;
															break;
														}
														goto IL_20e8;
													case 183:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num8 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num8].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num8].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num8].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num8].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num8].eval_h().Replace(" ", string.Empty),
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num8].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num8].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxShoot.Items.Add(this.m_eval_e.eval_b.eval_et);
														num5 = 222;
														num6 = num5;
														break;
													case 122:
													case 222:
														this.m_eval_e.eval_b.eval_et.LlongestShot.Opacity = 90.0;
														num5 = 107;
														num6 = num5;
														break;
													case 107:
														num5 = 110;
														num6 = num5;
														break;
													case 110:
														if (this.m_eval_e.eval_b.UID_SC == this.m_eval_e.eval_b.eval_eu[num8].eval_q())
														{
															num5 = 171;
															num6 = num5;
															break;
														}
														goto case 21;
													case 171:
														flag = true;
														num5 = 246;
														num6 = num5;
														break;
													case 246:
														if (Langve == "RU")
														{
															num5 = 205;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountShoot.Content = "Your position : " + (num8 + 1);
															num5 = 21;
															num6 = num5;
														}
														break;
													case 205:
														this.m_eval_e.eval_b.eval_fm.UserCountShoot.Content = "Ваша позиция : " + (num8 + 1);
														num5 = 252;
														num6 = num5;
														break;
													case 21:
													case 252:
														num8++;
														num5 = 156;
														num6 = num5;
														break;
													case 156:
													case 178:
														num5 = 85;
														num6 = num5;
														break;
													case 85:
														if (num8 < this.m_eval_e.eval_b.eval_eu.Count)
														{
															num5 = 29;
															num6 = num5;
														}
														else
														{
															num5 = 49;
															num6 = num5;
														}
														break;
													case 49:
														num5 = 75;
														num6 = num5;
														break;
													case 75:
														if (!flag)
														{
															num5 = 231;
															num6 = num5;
															break;
														}
														goto case 214;
													case 231:
														num5 = 19;
														num6 = num5;
														break;
													case 19:
														this.m_eval_e.eval_b.eval_fm.UserCountShoot.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
														num5 = 214;
														num6 = num5;
														break;
													case 214:
														this.m_eval_e.eval_b.eval_eu.Clear();
														flag = false;
														enumerator = this.m_eval_e.eval_b.eval_dm.SelectNodes("/server/Time/player").GetEnumerator();
														num5 = 89;
														num6 = num5;
														break;
													case 89:
														try
														{
															num5 = 0;
															num6 = num5;
															while (true)
															{
																switch (num6)
																{
																case 0:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num5 = 2;
																	num6 = num5;
																	continue;
																case 2:
																	if (enumerator.MoveNext())
																	{
																		XmlNode xmlNode7 = (XmlNode)enumerator.Current;
																		List<eval_a> eval_eu7 = this.m_eval_e.eval_b.eval_eu;
																		eval_a obj9 = new eval_a();
																		obj9.eval_q(xmlNode7.SelectSingleNode("Uid").InnerText);
																		obj9.eval_p(xmlNode7.SelectSingleNode("Bal").InnerText);
																		obj9.eval_o(xmlNode7.SelectSingleNode("Name").InnerText);
																		obj9.eval_n(xmlNode7.SelectSingleNode("DistTrav").InnerText);
																		obj9.eval_m(xmlNode7.SelectSingleNode("DistTraved").InnerText);
																		obj9.eval_l(xmlNode7.SelectSingleNode("longestShot").InnerText);
																		obj9.eval_j(xmlNode7.SelectSingleNode("zKillCount").InnerText);
																		obj9.eval_h(xmlNode7.SelectSingleNode("timeSurviv").InnerText);
																		obj9.eval_c(xmlNode7.SelectSingleNode("timeSurvived").InnerText);
																		obj9.eval_b(xmlNode7.SelectSingleNode("KilledCount").InnerText);
																		obj9.eval_a(xmlNode7.SelectSingleNode("AnimalsKilledCount").InnerText);
																		eval_eu7.Add(obj9);
																		num5 = 1;
																		num6 = num5;
																	}
																	else
																	{
																		num5 = 4;
																		num6 = num5;
																	}
																	continue;
																case 4:
																	num5 = 3;
																	num6 = num5;
																	continue;
																case 3:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num6)
																	{
																	case 0:
																		if (disposable != null)
																		{
																			num5 = 1;
																			num6 = num5;
																			continue;
																		}
																		goto end_IL_26f7;
																	case 1:
																		disposable.Dispose();
																		num5 = 2;
																		num6 = num5;
																		continue;
																	case 2:
																		goto end_IL_26f7;
																	}
																	goto case 0;
																	continue;
																	end_IL_26f7:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num5 = 0;
																num6 = num5;
																goto default;
															}
														}
														num13 = 0;
														num5 = 132;
														num6 = num5;
														break;
													case 196:
														if (num13 + 1 <= 30)
														{
															num5 = 46;
															num6 = num5;
															break;
														}
														goto case 93;
													case 46:
														num5 = 38;
														num6 = num5;
														break;
													case 38:
														if (!string.IsNullOrEmpty(this.m_eval_e.eval_b.eval_eu[num13].eval_o()))
														{
															num5 = 204;
															num6 = num5;
															break;
														}
														goto case 2;
													case 204:
														iMGTOP = string.Empty;
														num5 = 82;
														num6 = num5;
														break;
													case 82:
														if (num13 + 1 == 1)
														{
															num5 = 227;
															num6 = num5;
															break;
														}
														goto case 22;
													case 227:
														iMGTOP = "pack://application:,,/Design/gold.png";
														num5 = 22;
														num6 = num5;
														break;
													case 22:
														num5 = 74;
														num6 = num5;
														break;
													case 74:
														if (num13 + 1 == 2)
														{
															num5 = 80;
															num6 = num5;
															break;
														}
														goto case 72;
													case 80:
														iMGTOP = "pack://application:,,/Design/silver.png";
														num5 = 72;
														num6 = num5;
														break;
													case 72:
														num5 = 256;
														num6 = num5;
														break;
													case 256:
														if (num13 + 1 == 3)
														{
															num5 = 51;
															num6 = num5;
															break;
														}
														goto case 44;
													case 51:
														iMGTOP = "pack://application:,,/Design/bronze.png";
														num5 = 44;
														num6 = num5;
														break;
													case 44:
														num5 = 55;
														num6 = num5;
														break;
													case 55:
														if (num13 + 1 != 1)
														{
															num5 = 257;
															num6 = num5;
															break;
														}
														goto IL_2b6f;
													case 257:
														num5 = 249;
														num6 = num5;
														break;
													case 249:
													{
														if (num13 + 1 == 2)
														{
															goto IL_2b6f;
														}
														num5 = 15426;
														short num14 = num5;
														num5 = 15426;
														switch (num14 == num5)
														{
														default:
															num5 = 0;
															if (num5 != 0)
															{
															}
															num5 = 10;
															num6 = num5;
															goto end_IL_0040;
														case false:
														case true:
															break;
														}
														goto IL_38da;
													}
													case 10:
														num5 = 217;
														num6 = num5;
														break;
													case 217:
														if (num13 + 1 != 3)
														{
															num5 = 192;
															num6 = num5;
															break;
														}
														goto IL_2b6f;
													case 192:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num13 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num13].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num13].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num13].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num13].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num13].eval_h().Replace(" ", string.Empty),
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num13].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num13].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxTime.Items.Add(this.m_eval_e.eval_b.eval_et);
														num5 = 5;
														num6 = num5;
														break;
													case 2:
													case 5:
														this.m_eval_e.eval_b.eval_et.LtimeSurviv.Opacity = 90.0;
														num5 = 93;
														num6 = num5;
														break;
													case 93:
														num5 = 202;
														num6 = num5;
														break;
													case 202:
														if (this.m_eval_e.eval_b.UID_SC == this.m_eval_e.eval_b.eval_eu[num13].eval_q())
														{
															num5 = 59;
															num6 = num5;
															break;
														}
														goto case 31;
													case 59:
														flag = true;
														num5 = 50;
														num6 = num5;
														break;
													case 50:
														if (Langve == "RU")
														{
															num5 = 134;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountTime.Content = "Your position : " + (num13 + 1);
															num5 = 57;
															num6 = num5;
														}
														break;
													case 134:
														this.m_eval_e.eval_b.eval_fm.UserCountTime.Content = "Ваша позиция : " + (num13 + 1);
														num5 = 31;
														num6 = num5;
														break;
													case 31:
													case 57:
														num13++;
														num5 = 18;
														num6 = num5;
														break;
													case 18:
													case 132:
														num5 = 104;
														num6 = num5;
														break;
													case 104:
														if (num13 < this.m_eval_e.eval_b.eval_eu.Count)
														{
															num5 = 196;
															num6 = num5;
														}
														else
														{
															num5 = 224;
															num6 = num5;
														}
														break;
													case 224:
														num5 = 115;
														num6 = num5;
														break;
													case 115:
														if (!flag)
														{
															num5 = 135;
															num6 = num5;
															break;
														}
														goto case 100;
													case 135:
														num5 = 127;
														num6 = num5;
														break;
													case 127:
														this.m_eval_e.eval_b.eval_fm.UserCountTime.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
														num5 = 100;
														num6 = num5;
														break;
													case 100:
														this.m_eval_e.eval_b.eval_eu.Clear();
														flag = false;
														enumerator = this.m_eval_e.eval_b.eval_dm.SelectNodes("/server/ZKilled/player").GetEnumerator();
														num5 = 138;
														num6 = num5;
														break;
													case 138:
														try
														{
															num5 = 0;
															num6 = num5;
															while (true)
															{
																switch (num6)
																{
																case 0:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num5 = 2;
																	num6 = num5;
																	continue;
																case 2:
																	if (enumerator.MoveNext())
																	{
																		XmlNode xmlNode5 = (XmlNode)enumerator.Current;
																		List<eval_a> eval_eu5 = this.m_eval_e.eval_b.eval_eu;
																		eval_a obj7 = new eval_a();
																		obj7.eval_q(xmlNode5.SelectSingleNode("Uid").InnerText);
																		obj7.eval_p(xmlNode5.SelectSingleNode("Bal").InnerText);
																		obj7.eval_o(xmlNode5.SelectSingleNode("Name").InnerText);
																		obj7.eval_n(xmlNode5.SelectSingleNode("DistTrav").InnerText);
																		obj7.eval_m(xmlNode5.SelectSingleNode("DistTraved").InnerText);
																		obj7.eval_l(xmlNode5.SelectSingleNode("longestShot").InnerText);
																		obj7.eval_j(xmlNode5.SelectSingleNode("zKillCount").InnerText);
																		obj7.eval_h(xmlNode5.SelectSingleNode("timeSurviv").InnerText);
																		obj7.eval_c(xmlNode5.SelectSingleNode("timeSurvived").InnerText);
																		obj7.eval_b(xmlNode5.SelectSingleNode("KilledCount").InnerText);
																		obj7.eval_a(xmlNode5.SelectSingleNode("AnimalsKilledCount").InnerText);
																		eval_eu5.Add(obj7);
																		num5 = 1;
																		num6 = num5;
																	}
																	else
																	{
																		num5 = 4;
																		num6 = num5;
																	}
																	continue;
																case 4:
																	num5 = 3;
																	num6 = num5;
																	continue;
																case 3:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num6)
																	{
																	case 0:
																		if (disposable != null)
																		{
																			num5 = 1;
																			num6 = num5;
																			continue;
																		}
																		goto end_IL_317b;
																	case 1:
																		disposable.Dispose();
																		num5 = 2;
																		num6 = num5;
																		continue;
																	case 2:
																		goto end_IL_317b;
																	}
																	goto case 0;
																	continue;
																	end_IL_317b:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num5 = 0;
																num6 = num5;
																goto default;
															}
														}
														num12 = 0;
														num5 = 250;
														num6 = num5;
														break;
													case 28:
														if (num12 + 1 <= 30)
														{
															num5 = 42;
															num6 = num5;
															break;
														}
														goto case 58;
													case 42:
														num5 = 186;
														num6 = num5;
														break;
													case 186:
														if (!string.IsNullOrEmpty(this.m_eval_e.eval_b.eval_eu[num12].eval_o()))
														{
															num5 = 187;
															num6 = num5;
															break;
														}
														goto case 195;
													case 187:
														iMGTOP = string.Empty;
														num5 = 179;
														num6 = num5;
														break;
													case 179:
														if (num12 + 1 == 1)
														{
															num5 = 260;
															num6 = num5;
															break;
														}
														goto case 84;
													case 260:
														iMGTOP = "pack://application:,,/Design/gold.png";
														num5 = 84;
														num6 = num5;
														break;
													case 84:
														num5 = 119;
														num6 = num5;
														break;
													case 119:
														if (num12 + 1 == 2)
														{
															num5 = 90;
															num6 = num5;
															break;
														}
														goto case 16;
													case 90:
														iMGTOP = "pack://application:,,/Design/silver.png";
														num5 = 16;
														num6 = num5;
														break;
													case 16:
														num5 = 126;
														num6 = num5;
														break;
													case 126:
														if (num12 + 1 == 3)
														{
															num5 = 23;
															num6 = num5;
															break;
														}
														goto case 240;
													case 23:
														iMGTOP = "pack://application:,,/Design/bronze.png";
														num5 = 240;
														num6 = num5;
														break;
													case 240:
														num5 = 146;
														num6 = num5;
														break;
													case 146:
														if (num12 + 1 != 1)
														{
															num5 = 185;
															num6 = num5;
															break;
														}
														goto IL_35a9;
													case 185:
														num5 = 184;
														num6 = num5;
														break;
													case 184:
														if (num12 + 1 != 2)
														{
															num5 = 56;
															num6 = num5;
															break;
														}
														goto IL_35a9;
													case 56:
														num5 = 11;
														num6 = num5;
														break;
													case 11:
														if (num12 + 1 != 3)
														{
															num5 = 219;
															num6 = num5;
															break;
														}
														goto IL_35a9;
													case 219:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num12 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num12].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num12].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num12].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num12].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num12].eval_h().Replace(" ", string.Empty),
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num12].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num12].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxKillZ.Items.Add(this.m_eval_e.eval_b.eval_et);
														num5 = 199;
														num6 = num5;
														break;
													case 195:
													case 199:
														this.m_eval_e.eval_b.eval_et.LzKillCount.Opacity = 90.0;
														num5 = 58;
														num6 = num5;
														break;
													case 58:
														num5 = 140;
														num6 = num5;
														break;
													case 140:
														if (this.m_eval_e.eval_b.UID_SC == this.m_eval_e.eval_b.eval_eu[num12].eval_q())
														{
															num5 = 175;
															num6 = num5;
															break;
														}
														goto case 96;
													case 175:
														flag = true;
														num5 = 91;
														num6 = num5;
														break;
													case 91:
														if (Langve == "RU")
														{
															num5 = 262;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountKillZ.Content = "Your position : " + (num12 + 1);
															num5 = 164;
															num6 = num5;
														}
														break;
													case 262:
														this.m_eval_e.eval_b.eval_fm.UserCountKillZ.Content = "Ваша позиция : " + (num12 + 1);
														num5 = 96;
														num6 = num5;
														break;
													case 96:
													case 164:
														num12++;
														num5 = 108;
														num6 = num5;
														break;
													case 108:
													case 250:
														num5 = 26;
														num6 = num5;
														break;
													case 26:
														if (num12 < this.m_eval_e.eval_b.eval_eu.Count)
														{
															num5 = 28;
															num6 = num5;
															break;
														}
														goto IL_38da;
													case 197:
														num5 = 242;
														num6 = num5;
														break;
													case 242:
														if (!flag)
														{
															num5 = 112;
															num6 = num5;
															break;
														}
														goto case 232;
													case 112:
														num5 = 182;
														num6 = num5;
														break;
													case 182:
														this.m_eval_e.eval_b.eval_fm.UserCountKillZ.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
														num5 = 232;
														num6 = num5;
														break;
													case 232:
														this.m_eval_e.eval_b.eval_eu.Clear();
														flag = false;
														enumerator = this.m_eval_e.eval_b.eval_dm.SelectNodes("/server/AnimalsKilled/player").GetEnumerator();
														num5 = 212;
														num6 = num5;
														break;
													case 212:
														try
														{
															num5 = 2;
															num6 = num5;
															while (true)
															{
																switch (num6)
																{
																case 2:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num5 = 0;
																	num6 = num5;
																	continue;
																case 0:
																	if (enumerator.MoveNext())
																	{
																		XmlNode xmlNode4 = (XmlNode)enumerator.Current;
																		List<eval_a> eval_eu4 = this.m_eval_e.eval_b.eval_eu;
																		eval_a obj6 = new eval_a();
																		obj6.eval_q(xmlNode4.SelectSingleNode("Uid").InnerText);
																		obj6.eval_p(xmlNode4.SelectSingleNode("Bal").InnerText);
																		obj6.eval_o(xmlNode4.SelectSingleNode("Name").InnerText);
																		obj6.eval_n(xmlNode4.SelectSingleNode("DistTrav").InnerText);
																		obj6.eval_m(xmlNode4.SelectSingleNode("DistTraved").InnerText);
																		obj6.eval_l(xmlNode4.SelectSingleNode("longestShot").InnerText);
																		obj6.eval_j(xmlNode4.SelectSingleNode("zKillCount").InnerText);
																		obj6.eval_h(xmlNode4.SelectSingleNode("timeSurviv").InnerText);
																		obj6.eval_c(xmlNode4.SelectSingleNode("timeSurvived").InnerText);
																		obj6.eval_b(xmlNode4.SelectSingleNode("KilledCount").InnerText);
																		obj6.eval_a(xmlNode4.SelectSingleNode("AnimalsKilledCount").InnerText);
																		eval_eu4.Add(obj6);
																		num5 = 3;
																		num6 = num5;
																	}
																	else
																	{
																		num5 = 4;
																		num6 = num5;
																	}
																	continue;
																case 4:
																	num5 = 1;
																	num6 = num5;
																	continue;
																case 1:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num6)
																	{
																	case 1:
																		if (disposable != null)
																		{
																			num5 = 2;
																			num6 = num5;
																			continue;
																		}
																		goto end_IL_3bbd;
																	case 2:
																		disposable.Dispose();
																		num5 = 0;
																		num6 = num5;
																		continue;
																	case 0:
																		goto end_IL_3bbd;
																	}
																	goto case 0;
																	continue;
																	end_IL_3bbd:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num5 = 1;
																num6 = num5;
																goto default;
															}
														}
														num10 = 0;
														num5 = 160;
														num6 = num5;
														break;
													case 0:
														if (num10 + 1 <= 30)
														{
															num5 = 259;
															num6 = num5;
															break;
														}
														goto case 120;
													case 259:
														num5 = 133;
														num6 = num5;
														break;
													case 133:
														if (!string.IsNullOrEmpty(this.m_eval_e.eval_b.eval_eu[num10].eval_o()))
														{
															num5 = 236;
															num6 = num5;
															break;
														}
														goto case 98;
													case 236:
														iMGTOP = string.Empty;
														num5 = 200;
														num6 = num5;
														break;
													case 200:
														if (num10 + 1 == 1)
														{
															num5 = 190;
															num6 = num5;
															break;
														}
														goto case 8;
													case 190:
														iMGTOP = "pack://application:,,/Design/gold.png";
														num5 = 8;
														num6 = num5;
														break;
													case 8:
														num5 = 47;
														num6 = num5;
														break;
													case 47:
														if (num10 + 1 == 2)
														{
															num5 = 43;
															num6 = num5;
															break;
														}
														goto case 111;
													case 43:
														iMGTOP = "pack://application:,,/Design/silver.png";
														num5 = 111;
														num6 = num5;
														break;
													case 111:
														num5 = 97;
														num6 = num5;
														break;
													case 97:
														if (num10 + 1 == 3)
														{
															num5 = 247;
															num6 = num5;
															break;
														}
														goto case 63;
													case 247:
														iMGTOP = "pack://application:,,/Design/bronze.png";
														num5 = 63;
														num6 = num5;
														break;
													case 63:
														num5 = 45;
														num6 = num5;
														break;
													case 45:
														if (num10 + 1 != 1)
														{
															num5 = 221;
															num6 = num5;
															break;
														}
														goto IL_3fe5;
													case 221:
														num5 = 167;
														num6 = num5;
														break;
													case 167:
														if (num10 + 1 != 2)
														{
															num5 = 32;
															num6 = num5;
															break;
														}
														goto IL_3fe5;
													case 32:
														num5 = 193;
														num6 = num5;
														break;
													case 193:
														if (num10 + 1 != 3)
														{
															num5 = 141;
															num6 = num5;
															break;
														}
														goto IL_3fe5;
													case 141:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num10 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num10].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num10].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num10].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num10].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num10].eval_h().Replace(" ", string.Empty),
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num10].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num10].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxAnimall.Items.Add(this.m_eval_e.eval_b.eval_et);
														num5 = 98;
														num6 = num5;
														break;
													case 98:
													case 225:
														this.m_eval_e.eval_b.eval_et.LAnimalCount.Opacity = 90.0;
														num5 = 120;
														num6 = num5;
														break;
													case 120:
														num5 = 181;
														num6 = num5;
														break;
													case 181:
														if (this.m_eval_e.eval_b.UID_SC == this.m_eval_e.eval_b.eval_eu[num10].eval_q())
														{
															num5 = 117;
															num6 = num5;
															break;
														}
														goto case 17;
													case 117:
														flag = true;
														num5 = 76;
														num6 = num5;
														break;
													case 76:
														if (Langve == "RU")
														{
															num5 = 209;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountAnimalls.Content = "Your position : " + (num10 + 1);
															num5 = 17;
															num6 = num5;
														}
														break;
													case 209:
														this.m_eval_e.eval_b.eval_fm.UserCountAnimalls.Content = "Ваша позиция : " + (num10 + 1);
														num5 = 237;
														num6 = num5;
														break;
													case 17:
													case 237:
														num10++;
														num5 = 87;
														num6 = num5;
														break;
													case 87:
													case 160:
														num5 = 60;
														num6 = num5;
														break;
													case 60:
														if (num10 < this.m_eval_e.eval_b.eval_eu.Count)
														{
															num5 = 0;
															num6 = num5;
														}
														else
														{
															num5 = 188;
															num6 = num5;
														}
														break;
													case 188:
														num5 = 78;
														num6 = num5;
														break;
													case 78:
														if (!flag)
														{
															num5 = 77;
															num6 = num5;
															break;
														}
														goto case 101;
													case 77:
														num5 = 180;
														num6 = num5;
														break;
													case 180:
														this.m_eval_e.eval_b.eval_fm.UserCountAnimalls.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
														num5 = 101;
														num6 = num5;
														break;
													case 101:
														this.m_eval_e.eval_b.eval_eu.Clear();
														flag = false;
														enumerator = this.m_eval_e.eval_b.eval_dm.SelectNodes("/server/Kills/player").GetEnumerator();
														num5 = 35;
														num6 = num5;
														break;
													case 35:
														try
														{
															num5 = 2;
															num6 = num5;
															while (true)
															{
																switch (num6)
																{
																case 2:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num5 = 0;
																	num6 = num5;
																	continue;
																case 0:
																	if (enumerator.MoveNext())
																	{
																		XmlNode xmlNode2 = (XmlNode)enumerator.Current;
																		List<eval_a> eval_eu2 = this.m_eval_e.eval_b.eval_eu;
																		eval_a obj4 = new eval_a();
																		obj4.eval_q(xmlNode2.SelectSingleNode("Uid").InnerText);
																		obj4.eval_p(xmlNode2.SelectSingleNode("Bal").InnerText);
																		obj4.eval_o(xmlNode2.SelectSingleNode("Name").InnerText);
																		obj4.eval_n(xmlNode2.SelectSingleNode("DistTrav").InnerText);
																		obj4.eval_m(xmlNode2.SelectSingleNode("DistTraved").InnerText);
																		obj4.eval_l(xmlNode2.SelectSingleNode("longestShot").InnerText);
																		obj4.eval_j(xmlNode2.SelectSingleNode("zKillCount").InnerText);
																		obj4.eval_h(xmlNode2.SelectSingleNode("timeSurviv").InnerText);
																		obj4.eval_c(xmlNode2.SelectSingleNode("timeSurvived").InnerText);
																		obj4.eval_b(xmlNode2.SelectSingleNode("KilledCount").InnerText);
																		obj4.eval_a(xmlNode2.SelectSingleNode("AnimalsKilledCount").InnerText);
																		eval_eu2.Add(obj4);
																		num5 = 3;
																		num6 = num5;
																	}
																	else
																	{
																		num5 = 4;
																		num6 = num5;
																	}
																	continue;
																case 4:
																	num5 = 1;
																	num6 = num5;
																	continue;
																case 1:
																	break;
																}
																break;
															}
														}
														finally
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num6)
																	{
																	case 1:
																		if (disposable != null)
																		{
																			num5 = 2;
																			num6 = num5;
																			continue;
																		}
																		goto end_IL_45ec;
																	case 2:
																		disposable.Dispose();
																		num5 = 0;
																		num6 = num5;
																		continue;
																	case 0:
																		goto end_IL_45ec;
																	}
																	goto case 0;
																	continue;
																	end_IL_45ec:
																	break;
																}
																break;
															case 0:
																disposable = enumerator as IDisposable;
																num5 = 1;
																num6 = num5;
																goto default;
															}
														}
														num9 = 0;
														num5 = 152;
														num6 = num5;
														break;
													case 216:
														if (num9 + 1 <= 30)
														{
															num5 = 12;
															num6 = num5;
															break;
														}
														goto case 207;
													case 12:
														num5 = 158;
														num6 = num5;
														break;
													case 158:
														if (!string.IsNullOrEmpty(this.m_eval_e.eval_b.eval_eu[num9].eval_o()))
														{
															num5 = 253;
															num6 = num5;
															break;
														}
														goto case 27;
													case 253:
														iMGTOP = string.Empty;
														num5 = 70;
														num6 = num5;
														break;
													case 70:
														if (num9 + 1 == 1)
														{
															num5 = 154;
															num6 = num5;
															break;
														}
														goto case 169;
													case 154:
														iMGTOP = "pack://application:,,/Design/gold.png";
														num5 = 169;
														num6 = num5;
														break;
													case 169:
														num5 = 53;
														num6 = num5;
														break;
													case 53:
														if (num9 + 1 == 2)
														{
															num5 = 191;
															num6 = num5;
															break;
														}
														goto case 65;
													case 191:
														iMGTOP = "pack://application:,,/Design/silver.png";
														num5 = 65;
														num6 = num5;
														break;
													case 65:
														num5 = 79;
														num6 = num5;
														break;
													case 79:
														if (num9 + 1 == 3)
														{
															num5 = 99;
															num6 = num5;
															break;
														}
														goto case 229;
													case 99:
														iMGTOP = "pack://application:,,/Design/bronze.png";
														num5 = 229;
														num6 = num5;
														break;
													case 229:
														num5 = 228;
														num6 = num5;
														break;
													case 228:
														if (num9 + 1 != 1)
														{
															num5 = 68;
															num6 = num5;
															break;
														}
														goto IL_4a1b;
													case 68:
														num5 = 261;
														num6 = num5;
														break;
													case 261:
														if (num9 + 1 != 2)
														{
															num5 = 86;
															num6 = num5;
															break;
														}
														goto IL_4a1b;
													case 86:
														num5 = 128;
														num6 = num5;
														break;
													case 128:
														if (num9 + 1 != 3)
														{
															num5 = 263;
															num6 = num5;
															break;
														}
														goto IL_4a1b;
													case 263:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num9 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num9].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num9].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num9].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num9].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num9].eval_h().Replace(" ", string.Empty),
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num9].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num9].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxKills.Items.Add(this.m_eval_e.eval_b.eval_et);
														num5 = 121;
														num6 = num5;
														break;
													case 27:
													case 121:
														this.m_eval_e.eval_b.eval_et.LKillCount.Opacity = 90.0;
														num5 = 207;
														num6 = num5;
														break;
													case 207:
														num5 = 94;
														num6 = num5;
														break;
													case 94:
														if (this.m_eval_e.eval_b.UID_SC == this.m_eval_e.eval_b.eval_eu[num9].eval_q())
														{
															num5 = 73;
															num6 = num5;
															break;
														}
														goto case 151;
													case 73:
														flag = true;
														num5 = 95;
														num6 = num5;
														break;
													case 95:
														if (Langve == "RU")
														{
															num5 = 213;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.UserCountKillZ.Content = "Your position : " + (num9 + 1);
															num5 = 174;
															num6 = num5;
														}
														break;
													case 213:
														this.m_eval_e.eval_b.eval_fm.UserCountKillZ.Content = "Ваша позиция : " + (num9 + 1);
														num5 = 151;
														num6 = num5;
														break;
													case 151:
													case 174:
														num9++;
														num5 = 40;
														num6 = num5;
														break;
													case 40:
													case 152:
														num5 = 230;
														num6 = num5;
														break;
													case 230:
														if (num9 < this.m_eval_e.eval_b.eval_eu.Count)
														{
															num5 = 216;
															num6 = num5;
														}
														else
														{
															num5 = 223;
															num6 = num5;
														}
														break;
													case 223:
														num5 = 15;
														num6 = num5;
														break;
													case 15:
														if (!flag)
														{
															num5 = 166;
															num6 = num5;
															break;
														}
														goto case 248;
													case 166:
														num5 = 116;
														num6 = num5;
														break;
													case 116:
														this.m_eval_e.eval_b.eval_fm.UserCountKills.Content = ((Langve == "RU") ? "Вас нет в 100 ближайших." : "You are not in the next 100.");
														num5 = 248;
														num6 = num5;
														break;
													case 248:
														this.m_eval_e.eval_b.eval_eu.Clear();
														return;
													case 64:
														if (Langve == "RU")
														{
															num5 = 7;
															num6 = num5;
														}
														else
														{
															this.m_eval_e.eval_b.eval_fm.LError.Content = "Statistics are not installed on this server!";
															num5 = 157;
															num6 = num5;
														}
														break;
													case 7:
														this.m_eval_e.eval_b.eval_fm.LError.Content = "Статистика не установлена на данный сервер!";
														return;
													case 157:
														return;
														IL_4a1b:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num9 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num9].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num9].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num9].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num9].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num9].eval_h().Replace(" ", string.Empty),
															IMGTOP = iMGTOP,
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num9].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num9].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxKills.Items.Add(this.m_eval_e.eval_b.eval_et);
														this.m_eval_e.eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
														this.m_eval_e.eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
														num5 = 27;
														num6 = num5;
														break;
														IL_3fe5:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num10 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num10].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num10].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num10].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num10].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num10].eval_h().Replace(" ", string.Empty),
															IMGTOP = iMGTOP,
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num10].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num10].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxAnimall.Items.Add(this.m_eval_e.eval_b.eval_et);
														this.m_eval_e.eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
														this.m_eval_e.eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
														num5 = 225;
														num6 = num5;
														break;
														IL_0b8e:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num7 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num7].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num7].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num7].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num7].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num7].eval_h().Replace(" ", string.Empty),
															IMGTOP = iMGTOP,
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num7].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num7].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxALL.Items.Add(this.m_eval_e.eval_b.eval_et);
														this.m_eval_e.eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
														this.m_eval_e.eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
														num5 = 161;
														num6 = num5;
														break;
														IL_1687:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num11 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num11].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num11].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num11].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num11].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num11].eval_h().Replace(" ", string.Empty),
															IMGTOP = iMGTOP,
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num11].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num11].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxDistancion.Items.Add(this.m_eval_e.eval_b.eval_et);
														this.m_eval_e.eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
														this.m_eval_e.eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
														num5 = 265;
														num6 = num5;
														break;
														IL_35a9:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num12 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num12].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num12].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num12].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num12].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num12].eval_h().Replace(" ", string.Empty),
															IMGTOP = iMGTOP,
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num12].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num12].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxKillZ.Items.Add(this.m_eval_e.eval_b.eval_et);
														this.m_eval_e.eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
														this.m_eval_e.eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
														num5 = 195;
														num6 = num5;
														break;
														IL_38da:
														num5 = 197;
														num6 = num5;
														break;
														IL_2b6f:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num13 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num13].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num13].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num13].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num13].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num13].eval_h().Replace(" ", string.Empty),
															IMGTOP = iMGTOP,
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num13].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num13].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxTime.Items.Add(this.m_eval_e.eval_b.eval_et);
														this.m_eval_e.eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
														this.m_eval_e.eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
														num5 = 2;
														num6 = num5;
														break;
														IL_1032:
														this.m_eval_e.eval_b.eval_eu.Clear();
														flag = false;
														enumerator = this.m_eval_e.eval_b.eval_dm.SelectNodes("/server/Distans/player").GetEnumerator();
														num5 = 41;
														num6 = num5;
														break;
														IL_20e8:
														this.m_eval_e.eval_b.eval_et = new StatsLine
														{
															LNUMBER_ = (num8 + 1).ToString(),
															LName = this.m_eval_e.eval_b.eval_eu[num8].eval_o(),
															LDistTrav_ = this.m_eval_e.eval_b.eval_eu[num8].eval_n(),
															LlongestShot_ = this.m_eval_e.eval_b.eval_eu[num8].eval_l(),
															LzKillCount_ = this.m_eval_e.eval_b.eval_eu[num8].eval_j(),
															LtimeSurviv_ = this.m_eval_e.eval_b.eval_eu[num8].eval_h().Replace(" ", string.Empty),
															IMGTOP = iMGTOP,
															LKillAnimal_ = this.m_eval_e.eval_b.eval_eu[num8].eval_a(),
															LKillCount_ = this.m_eval_e.eval_b.eval_eu[num8].eval_b()
														};
														this.m_eval_e.eval_b.eval_fm.BoxShoot.Items.Add(this.m_eval_e.eval_b.eval_et);
														this.m_eval_e.eval_b.eval_et.Imall.Visibility = Visibility.Hidden;
														this.m_eval_e.eval_b.eval_et.LNUMBER.Visibility = Visibility.Hidden;
														num5 = 122;
														num6 = num5;
														break;
														end_IL_0040:
														break;
													}
												}
											}
											}
										};
									}
									finally
									{
										num = 0;
										num4 = num;
										while (true)
										{
											switch (num4)
											{
											case 0:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num3 < 0)
												{
													num = 2;
													num4 = num;
													continue;
												}
												break;
											case 4:
												((IDisposable)webClient).Dispose();
												num = 1;
												num4 = num;
												continue;
											case 1:
												break;
											case 2:
												num = 3;
												num4 = num;
												continue;
											case 3:
												if (webClient != null)
												{
													num = 4;
													num4 = num;
													continue;
												}
												break;
											}
											break;
										}
									}
									break;
								case 0:
									webClient = new WebClient();
									num = 4;
									num4 = num;
									continue;
								case 2:
									goto end_IL_0210;
								}
								num = 2;
								num4 = num;
								continue;
								end_IL_0210:
								break;
							}
						}
						catch
						{
						}
						num = 6;
						num4 = num;
						continue;
					case 7:
						num = 4;
						num4 = num;
						continue;
					case 9:
						mainWindow.eval_fm.ThreeDots.Visibility = Visibility.Hidden;
						num = 1;
						num4 = num;
						continue;
					case 10:
						this.m_eval_e = new eval_aa();
						this.m_eval_e.eval_a = eval_c;
						this.m_eval_e.eval_b = eval_d;
						num = 3;
						num4 = num;
						continue;
					case 3:
						if (!FirstRunStatistic)
						{
							num = 5;
							num4 = num;
							continue;
						}
						goto case 7;
					case 8:
						break;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				this.m_eval_e = null;
				eval_b.SetException(exception);
				return;
			}
			eval_a = -2;
			this.m_eval_e = null;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_e
			this.eval_e();
		}

		[DebuggerHidden]
		private void eval_e(IAsyncStateMachine A_0)
		{
			short num = 0;
			_ = num;
			num = -24613;
			short num2 = num;
			num = -24613;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_e
			this.eval_e(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_an : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		public CancellationToken d;

		private ClientEngine eval_e;

		private TaskAwaiter eval_f;

		[global::eval_b(new byte[] { 0, 1 })]
		private IEnumerator<TorrentManager> eval_g;

		private TorrentManager eval_h;

		private Task eval_i;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 8;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				Task task2 = default(Task);
				Task task = default(Task);
				while (true)
				{
					switch (num3)
					{
					case 8:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if ((uint)num2 > 3u)
						{
							num = 0;
							num3 = num;
							continue;
						}
						goto case 10;
					case 10:
						num = 4;
						num3 = num;
						continue;
					case 5:
						mainWindow.eval_bw();
						num = 9;
						num3 = num;
						continue;
					case 9:
						if (Langve == "RU")
						{
							num = 7;
							num3 = num;
							continue;
						}
						MessageBoxWindow.Show(mainWindow, "Error, the launcher could not download the necessary files " + Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName + ", try restarting the launcher and try again.", name_messege);
						num = 6;
						num3 = num;
						continue;
					case 12:
					{
						try
						{
							num = 0;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (mainWindow.eval_eb != 0)
									{
										num = 2;
										num3 = num;
									}
									else
									{
										mainWindow.eval_eb = 0;
										num = 3;
										num3 = num;
									}
									continue;
								case 2:
									mainWindow.eval_eb *= 1024;
									num = 1;
									num3 = num;
									continue;
								case 1:
								case 3:
									num = 4;
									num3 = num;
									continue;
								case 4:
									break;
								}
								break;
							}
						}
						catch
						{
							mainWindow.eval_eb = 0;
						}
						EngineSettingsBuilder engineSettingsBuilder = new EngineSettingsBuilder
						{
							MaximumConnections = 500,
							MaximumDownloadRate = mainWindow.eval_ea,
							MaximumUploadRate = mainWindow.eval_eb,
							ListenEndPoints = new Dictionary<string, IPEndPoint>
							{
								{
									"ipv4",
									new IPEndPoint(IPAddress.Any, 55123)
								},
								{
									"ipv6",
									new IPEndPoint(IPAddress.IPv6Any, 55123)
								}
							},
							DhtEndPoint = new IPEndPoint(IPAddress.Any, 55123),
							HttpStreamingPrefix = mainWindow.HTTP + $"127.0.0.1:{55125}/",
							MaximumHalfOpenConnections = 100,
							AllowedEncryption = new List<EncryptionType> { EncryptionType.PlainText }
						};
						eval_e = new ClientEngine(engineSettingsBuilder.ToSettings());
						num = 10;
						num3 = num;
						continue;
					}
					case 4:
						try
						{
							num = 14;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 14:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									switch (num2)
									{
									case 2:
									case 3:
										goto IL_02d2;
									case 0:
										goto IL_04f8;
									case 1:
										goto IL_05f9;
									}
									num = 9;
									num3 = num;
									continue;
								case 13:
									goto IL_02d2;
								case 15:
									try
									{
										num = 1;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 1:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 != 0)
												{
													num = 2;
													num3 = num;
													continue;
												}
												awaiter = eval_f;
												eval_f = default(TaskAwaiter);
												num2 = (eval_a = -1);
												num = 3;
												num3 = num;
												continue;
											case 2:
												awaiter = task2.GetAwaiter();
												num = 4;
												num3 = num;
												continue;
											case 4:
												if (!awaiter.IsCompleted)
												{
													num = 0;
													num3 = num;
													continue;
												}
												goto case 3;
											case 0:
												num2 = (eval_a = 0);
												eval_f = awaiter;
												eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
												num = 5;
												num3 = num;
												continue;
											case 5:
												break;
											case 3:
												awaiter.GetResult();
												num = 6;
												num3 = num;
												continue;
											case 6:
											{
												num = -24989;
												short num4 = num;
												num = -24989;
												switch (num4 == num)
												{
												case false:
												case true:
													continue;
												}
												num = 0;
												if (num == 0)
												{
												}
												goto IL_057b;
											}
											}
											break;
										}
									}
									catch (OperationCanceledException)
									{
										goto IL_057b;
									}
									goto IL_12f2;
								case 12:
									task2 = new StandardDownloader(eval_e).UploadAsync(d, torrentsPath, downloadsPath, InfoHeshF, Md5F, IfStopedUload, Langve);
									num = 7;
									num3 = num;
									continue;
								case 6:
									mainWindow.eval_fz.AppendText("DHT cache has been written to disk.\r\n");
									num = 10;
									num3 = num;
									continue;
								case 7:
									goto IL_04f8;
								case 9:
									num = 4;
									num3 = num;
									continue;
								case 4:
									if (eval_e.Settings.AllowPortForwarding)
									{
										num = 8;
										num3 = num;
										continue;
									}
									goto case 5;
								case 2:
									goto IL_05f9;
								case 17:
									if (eval_e.Settings.AutoSaveLoadDhtCache)
									{
										num = 6;
										num3 = num;
										continue;
									}
									goto case 10;
								case 16:
									try
									{
										num = 1;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 6:
												goto end_IL_0686;
											case 1:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 != 1)
												{
													num = 2;
													num3 = num;
													continue;
												}
												awaiter = eval_f;
												eval_f = default(TaskAwaiter);
												num2 = (eval_a = -1);
												num = 5;
												num3 = num;
												continue;
											case 0:
												num2 = (eval_a = 1);
												eval_f = awaiter;
												eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
												num = 3;
												num3 = num;
												continue;
											case 3:
												goto end_IL_0666;
											case 2:
												awaiter = task.GetAwaiter();
												num = 4;
												num3 = num;
												continue;
											case 4:
												if (!awaiter.IsCompleted)
												{
													num = 0;
													num3 = num;
													continue;
												}
												break;
											case 5:
												break;
											}
											awaiter.GetResult();
											num = 6;
											num3 = num;
											continue;
											end_IL_0686:
											break;
										}
										goto IL_057b;
										end_IL_0666:;
									}
									catch (OperationCanceledException)
									{
										goto IL_057b;
									}
									goto IL_12f2;
								case 19:
									mainWindow.eval_fz.AppendText("uPnP and NAT-PMP port mappings have been removed\r\n");
									num = 11;
									num3 = num;
									continue;
								case 8:
									mainWindow.eval_fz.AppendText("uPnP or NAT-PMP port mappings will be created for any ports needed by MonoTorrent\r\n");
									num = 5;
									num3 = num;
									continue;
								case 5:
									num = 3;
									num3 = num;
									continue;
								case 3:
									if (mainWindow.DownloadA)
									{
										task = new StandardDownloader(eval_e).DownloadAsync(d, torrentsPath, downloadsPath, LoadResume, Langve, UpdateStatus, mainWindow.m_eval_b6, ListFileModsDownload, mainWindow.DownloadMods, CheckGameFileServer);
										num = 2;
										num3 = num;
									}
									else
									{
										num = 12;
										num3 = num;
									}
									continue;
								case 10:
									num = 18;
									num3 = num;
									continue;
								case 18:
									if (eval_e.Settings.AllowPortForwarding)
									{
										num = 19;
										num3 = num;
										continue;
									}
									break;
								case 1:
									try
									{
										num = 19;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 17:
												break;
											case 19:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 != 2)
												{
													num = 8;
													num3 = num;
													continue;
												}
												awaiter = eval_f;
												eval_f = default(TaskAwaiter);
												num2 = (eval_a = -1);
												num = 3;
												num3 = num;
												continue;
											case 8:
												num = 14;
												num3 = num;
												continue;
											case 14:
												if (num2 != 3)
												{
													num = 9;
													num3 = num;
													continue;
												}
												awaiter = eval_f;
												eval_f = default(TaskAwaiter);
												num2 = (eval_a = -1);
												num = 4;
												num3 = num;
												continue;
											case 9:
												num = 5;
												num3 = num;
												continue;
											case 12:
												if (!awaiter.IsCompleted)
												{
													num = 20;
													num3 = num;
													continue;
												}
												goto case 3;
											case 20:
												num2 = (eval_a = 2);
												eval_f = awaiter;
												eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
												num = 11;
												num3 = num;
												continue;
											case 11:
												goto end_IL_0890;
											case 3:
												awaiter.GetResult();
												num = 18;
												num3 = num;
												continue;
											case 7:
											case 18:
												num = 2;
												num3 = num;
												continue;
											case 2:
												if (eval_h.State != 0)
												{
													mainWindow.eval_fz.AppendText($"{eval_h.Torrent.Name} is {eval_h.State}" + "\r\n");
													awaiter = Task.WhenAll(eval_i, Task.Delay(250)).GetAwaiter();
													num = 12;
													num3 = num;
												}
												else
												{
													num = 6;
													num3 = num;
												}
												continue;
											case 6:
												awaiter = eval_i.GetAwaiter();
												num = 21;
												num3 = num;
												continue;
											case 21:
												if (!awaiter.IsCompleted)
												{
													num = 22;
													num3 = num;
													continue;
												}
												goto case 4;
											case 22:
												num2 = (eval_a = 3);
												eval_f = awaiter;
												eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
												num = 1;
												num3 = num;
												continue;
											case 1:
												goto end_IL_0890;
											case 4:
												awaiter.GetResult();
												num = 13;
												num3 = num;
												continue;
											case 13:
												if (eval_e.Settings.AutoSaveLoadFastResume)
												{
													num = 16;
													num3 = num;
													continue;
												}
												goto case 15;
											case 16:
												num = 10;
												num3 = num;
												continue;
											case 10:
												mainWindow.eval_fz.AppendText("FastResume data for " + (eval_h.Torrent?.Name ?? eval_h.InfoHashes.V1?.ToHex() ?? eval_h.InfoHashes.V2?.ToHex()) + " has been written to disk.\r\n");
												num = 15;
												num3 = num;
												continue;
											case 15:
												eval_i = null;
												eval_h = null;
												num = 0;
												num3 = num;
												continue;
											case 0:
											case 5:
												num = 23;
												num3 = num;
												continue;
											case 23:
												if (eval_g.MoveNext())
												{
													eval_h = eval_g.Current;
													eval_i = eval_h.StopAsync();
													num = 7;
													num3 = num;
												}
												else
												{
													num = 24;
													num3 = num;
												}
												continue;
											case 24:
												num = 17;
												num3 = num;
												continue;
											}
											break;
										}
										goto IL_0615;
										end_IL_0890:;
									}
									finally
									{
										num = 0;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 0:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 < 0)
												{
													num = 2;
													num3 = num;
													continue;
												}
												break;
											case 4:
												eval_g.Dispose();
												num = 1;
												num3 = num;
												continue;
											case 1:
												break;
											case 2:
												num = 3;
												num3 = num;
												continue;
											case 3:
												if (eval_g != null)
												{
													num = 4;
													num3 = num;
													continue;
												}
												break;
											}
											break;
										}
									}
									goto IL_12f2;
								case 11:
									break;
								case 0:
									goto end_IL_0248;
									IL_0615:
									eval_g = null;
									num = 17;
									num3 = num;
									continue;
									IL_05f9:
									num = 16;
									num3 = num;
									continue;
									IL_04f8:
									num = 15;
									num3 = num;
									continue;
									IL_02d2:
									num = 1;
									num3 = num;
									continue;
									IL_057b:
									eval_g = eval_e.Torrents.GetEnumerator();
									num = 13;
									num3 = num;
									continue;
								}
								num = 0;
								num3 = num;
								continue;
								end_IL_0248:
								break;
							}
						}
						finally
						{
							num = 0;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 < 0)
									{
										num = 2;
										num3 = num;
										continue;
									}
									break;
								case 2:
									num = 1;
									num3 = num;
									continue;
								case 1:
									if (eval_e != null)
									{
										num = 3;
										num3 = num;
										continue;
									}
									break;
								case 3:
									((IDisposable)eval_e).Dispose();
									num = 4;
									num3 = num;
									continue;
								case 4:
									break;
								}
								break;
							}
						}
						eval_e = null;
						num = 13;
						num3 = num;
						continue;
					case 0:
						mainWindow.eval_ec = false;
						mainWindow.dy = new FileInfo(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName);
						num = 3;
						num3 = num;
						continue;
					case 3:
						if (mainWindow.dy.Length != 0L)
						{
							num = 11;
							num3 = num;
						}
						else
						{
							num = 5;
							num3 = num;
						}
						continue;
					case 7:
						MessageBoxWindow.Show(mainWindow, "Ошибка, лаунчеру не удалось скачать нужные файлы " + Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName + ", попробуйте перезапустить лаунчер и повторить попытку.", name_messege);
						num = 2;
						num3 = num;
						continue;
					case 2:
					case 6:
						mainWindow.BoxServer.IsEnabled = true;
						num = 1;
						num3 = num;
						continue;
					case 1:
						break;
					case 11:
						try
						{
							num = 0;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (mainWindow.eval_ea != 0)
									{
										num = 2;
										num3 = num;
									}
									else
									{
										mainWindow.eval_ea = 0;
										num = 1;
										num3 = num;
									}
									continue;
								case 2:
									mainWindow.eval_ea *= 1024;
									num = 3;
									num3 = num;
									continue;
								case 1:
								case 3:
									num = 4;
									num3 = num;
									continue;
								case 4:
									break;
								}
								break;
							}
						}
						catch
						{
							mainWindow.eval_ea = 0;
						}
						num = 12;
						num3 = num;
						continue;
					case 13:
						break;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				goto IL_12f2;
			}
			eval_a = -2;
			eval_b.SetResult();
			goto IL_12f2;
			IL_12f2:
			num = 0;
			_ = num;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 26508;
			short num2 = num;
			num = 26508;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ao : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private string[] m_eval_d;

		private TaskAwaiter<string> eval_e;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 0;
			_ = num;
			int num2 = eval_a;
			MainWindow CS_0024_003C_003E8__locals0 = eval_c;
			try
			{
				num = 3;
				int num3 = num;
				TaskAwaiter<string> awaiter = default(TaskAwaiter<string>);
				string path = default(string);
				string result2 = default(string);
				byte[] array = default(byte[]);
				string result = default(string);
				string text = default(string);
				while (true)
				{
					switch (num3)
					{
					case 3:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if ((uint)num2 > 3u)
						{
							num = 2;
							num3 = num;
							continue;
						}
						goto case 1;
					case 2:
						num = 6;
						num3 = num;
						continue;
					case 6:
						if (CS_0024_003C_003E8__locals0.UID_SC != "---")
						{
							num = 5;
							num3 = num;
							continue;
						}
						break;
					case 1:
						num = 4;
						num3 = num;
						continue;
					case 4:
					{
						num = 15531;
						short num4 = num;
						num = 15531;
						switch (num4 == num)
						{
						default:
							num = 0;
							if (num != 0)
							{
							}
							try
							{
								num = 50;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 50:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										switch (num2)
										{
										default:
											num = 40;
											num3 = num;
											break;
										case 0:
											awaiter = eval_e;
											eval_e = default(TaskAwaiter<string>);
											num2 = (eval_a = -1);
											num = 2;
											num3 = num;
											break;
										case 1:
											awaiter = eval_e;
											eval_e = default(TaskAwaiter<string>);
											num2 = (eval_a = -1);
											num = 27;
											num3 = num;
											break;
										case 3:
											awaiter = eval_e;
											eval_e = default(TaskAwaiter<string>);
											num2 = (eval_a = -1);
											num = 5;
											num3 = num;
											break;
										case 2:
											awaiter = eval_e;
											eval_e = default(TaskAwaiter<string>);
											num2 = (eval_a = -1);
											num = 8;
											num3 = num;
											break;
										}
										continue;
									case 39:
										CS_0024_003C_003E8__locals0.eval_bw();
										awaiter = System.Windows.Winservr.System.SetWR(System.Windows.Winservr.System.Out(this.m_eval_d[2], "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345", int.Parse(this.m_eval_d[4])).ToString()).GetAwaiter();
										num = 6;
										num3 = num;
										continue;
									case 6:
										if (!awaiter.IsCompleted)
										{
											num = 3;
											num3 = num;
											continue;
										}
										goto case 2;
									case 24:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num3)
													{
													case 6:
														if (File.Exists(path))
														{
															num = 7;
															num3 = num;
															continue;
														}
														goto case 0;
													case 2:
														System.Windows.MessageBox.Show("Администратор сбросил Ваш steam_id,после запустите лаунчер и можете запустить игру.");
														num = 1;
														num3 = num;
														continue;
													case 7:
														File.Delete(path);
														num = 0;
														num3 = num;
														continue;
													case 0:
														num = 4;
														num3 = num;
														continue;
													case 4:
														if (!(Langve == "RU"))
														{
															System.Windows.MessageBox.Show("The administrator has reset your steam_id, then launch the launcher and you can start the game.");
															num = 3;
															num3 = num;
														}
														else
														{
															num = 2;
															num3 = num;
														}
														continue;
													case 1:
													case 3:
														CS_0024_003C_003E8__locals0.eval_im.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
														{
															short num9 = 6702;
															short num10 = num9;
															num9 = 6702;
															switch (num10 == num9)
															{
															default:
																num9 = 1;
																if (num9 != 0)
																{
																}
																num9 = 0;
																_ = num9;
																num9 = 0;
																if (num9 != 0)
																{
																}
																CS_0024_003C_003E8__locals0.Close_launcher();
																break;
															}
														});
														num = 5;
														num3 = num;
														continue;
													case 5:
														goto end_IL_0308;
													}
													goto case 0;
													continue;
													end_IL_0308:
													break;
												}
												break;
											case 0:
												CS_0024_003C_003E8__locals0.m_eval_ca.Stop();
												CS_0024_003C_003E8__locals0.eval_bw();
												path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), CS_0024_003C_003E8__locals0.m_eval_aj);
												num = 6;
												num3 = num;
												goto default;
											}
										}
										catch (Exception ex2)
										{
											CS_0024_003C_003E8__locals0.eval_bw();
											System.Windows.MessageBox.Show("UIDRESET Net:" + ex2.Message);
											CS_0024_003C_003E8__locals0.Close_launcher();
										}
										goto IL_0ca0;
									case 46:
										num = 15;
										num3 = num;
										continue;
									case 15:
										if (this.m_eval_d[6] == CS_0024_003C_003E8__locals0.UID_SC)
										{
											num = 14;
											num3 = num;
											continue;
										}
										break;
									case 7:
										CS_0024_003C_003E8__locals0.eval_k("SetWR2 : ERROR " + result2);
										num = 23;
										num3 = num;
										continue;
									case 40:
										CS_0024_003C_003E8__locals0.eval_dq = new TcpClient(Connectip, connectudp);
										array = Encoding.UTF8.GetBytes("CL00," + CS_0024_003C_003E8__locals0.MESSAGES + ",");
										CS_0024_003C_003E8__locals0.dr = CS_0024_003C_003E8__locals0.eval_dq.GetStream();
										num = 28;
										num3 = num;
										continue;
									case 28:
										if (CS_0024_003C_003E8__locals0.eval_dq.Connected)
										{
											num = 33;
											num3 = num;
											continue;
										}
										goto case 9;
									case 16:
										CS_0024_003C_003E8__locals0.dr.Close();
										CS_0024_003C_003E8__locals0.eval_dq.Close();
										num = 31;
										num3 = num;
										continue;
									case 31:
										if (this.m_eval_d[1] == "True")
										{
											num = 39;
											num3 = num;
											continue;
										}
										goto IL_0e7c;
									case 51:
									{
										CS_0024_003C_003E8__locals0.dr.Close();
										CS_0024_003C_003E8__locals0.eval_dq.Close();
										CS_0024_003C_003E8__locals0.CharsLauncher = this.m_eval_d[2];
										int a_2 = Convert.ToInt32(this.m_eval_d[1]);
										CS_0024_003C_003E8__locals0.eval_a(a_2);
										CS_0024_003C_003E8__locals0.eval_im.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num7;
											if (Langve == "RU")
											{
												while (true)
												{
													num7 = 0;
													_ = num7;
													num7 = -9577;
													short num8 = num7;
													num7 = -9577;
													switch (num8 == num7)
													{
													case false:
													case true:
														break;
													default:
														num7 = 0;
														if (num7 != 0)
														{
														}
														CS_0024_003C_003E8__locals0.eval_im.Content = "Коннект к [SM] : Успешно , не закрывайте лаунчер!";
														return;
													}
												}
											}
											num7 = 1;
											if (num7 != 0)
											{
											}
											CS_0024_003C_003E8__locals0.eval_im.Content = "Connect to [SM]: Successfully , do not close the launcher!";
										});
										num = 35;
										num3 = num;
										continue;
									}
									case 5:
										result = awaiter.GetResult();
										num = 4;
										num3 = num;
										continue;
									case 4:
										if (!string.IsNullOrEmpty(result))
										{
											num = 1;
											num3 = num;
											continue;
										}
										goto case 0;
									case 27:
										result2 = awaiter.GetResult();
										num = 53;
										num3 = num;
										continue;
									case 53:
										if (!string.IsNullOrEmpty(result2))
										{
											num = 7;
											num3 = num;
											continue;
										}
										goto case 23;
									case 8:
										result = awaiter.GetResult();
										num = 20;
										num3 = num;
										continue;
									case 20:
										if (!string.IsNullOrEmpty(result))
										{
											num = 41;
											num3 = num;
											continue;
										}
										goto case 37;
									case 45:
										CS_0024_003C_003E8__locals0.eval_k("SetWR1 : ERROR " + result2);
										num = 22;
										num3 = num;
										continue;
									case 35:
										num = 36;
										num3 = num;
										continue;
									case 36:
										if (this.m_eval_d[0] == "SV0B")
										{
											num = 16;
											num3 = num;
											continue;
										}
										goto IL_0e7c;
									case 0:
										num = 18;
										num3 = num;
										continue;
									case 18:
										if (this.m_eval_d[0] == "UIDRESET")
										{
											num = 19;
											num3 = num;
											continue;
										}
										goto IL_0ca0;
									case 22:
										Thread.Sleep(2000);
										awaiter = System.Windows.Winservr.System.SetWR(System.Windows.Winservr.System.Out(this.m_eval_d[3], "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345", int.Parse(this.m_eval_d[4])).ToString()).GetAwaiter();
										num = 26;
										num3 = num;
										continue;
									case 26:
										if (!awaiter.IsCompleted)
										{
											num = 25;
											num3 = num;
											continue;
										}
										goto case 27;
									case 2:
										result2 = awaiter.GetResult();
										num = 32;
										num3 = num;
										continue;
									case 32:
										if (!string.IsNullOrEmpty(result2))
										{
											num = 45;
											num3 = num;
											continue;
										}
										goto case 22;
									case 3:
										num2 = (eval_a = 0);
										eval_e = awaiter;
										eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
										num = 49;
										num3 = num;
										continue;
									case 49:
										return;
									case 47:
										num2 = (eval_a = 2);
										eval_e = awaiter;
										eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
										num = 21;
										num3 = num;
										continue;
									case 21:
										return;
									case 33:
										CS_0024_003C_003E8__locals0.dr.Write(array, 0, array.Length);
										num = 9;
										num3 = num;
										continue;
									case 29:
										CS_0024_003C_003E8__locals0.dr.Close();
										CS_0024_003C_003E8__locals0.eval_dq.Close();
										awaiter = System.Windows.Winservr.System.SetWR(System.Windows.Winservr.System.Out(this.m_eval_d[1], "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345", int.Parse(this.m_eval_d[3])).ToString()).GetAwaiter();
										num = 52;
										num3 = num;
										continue;
									case 52:
										if (!awaiter.IsCompleted)
										{
											num = 47;
											num3 = num;
											continue;
										}
										goto case 8;
									case 23:
										Thread.Sleep(2000);
										num = 12;
										num3 = num;
										continue;
									case 1:
										CS_0024_003C_003E8__locals0.eval_k("IPRESET2 : ERROR " + result);
										num = 0;
										num3 = num;
										continue;
									case 12:
										try
										{
											num = 5;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 5:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (Directory.Exists(CS_0024_003C_003E8__locals0.Directory_game))
													{
														num = 3;
														num3 = num;
														continue;
													}
													break;
												case 2:
												{
													DirectoryInfo a_ = new DirectoryInfo(CS_0024_003C_003E8__locals0.Directory_game + "\\");
													CS_0024_003C_003E8__locals0.eval_b(a_);
													CleanFilesAndDirectories(new DirectoryInfo(CS_0024_003C_003E8__locals0.Directory_game + "\\"));
													num = 1;
													num3 = num;
													continue;
												}
												case 3:
													num = 0;
													num3 = num;
													continue;
												case 0:
													if (CS_0024_003C_003E8__locals0.Directory_game.EndsWith(CS_0024_003C_003E8__locals0.m_eval_z))
													{
														num = 2;
														num3 = num;
														continue;
													}
													break;
												case 1:
													break;
												case 4:
													goto end_IL_0b46;
												}
												CS_0024_003C_003E8__locals0.eval_im.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
												{
													short num13 = 1;
													if (num13 != 0)
													{
													}
													num13 = -17230;
													short num14 = num13;
													num13 = -17230;
													switch (num14 == num13)
													{
													default:
														num13 = 0;
														_ = num13;
														num13 = 0;
														if (num13 != 0)
														{
														}
														CS_0024_003C_003E8__locals0.Close_launcher();
														break;
													}
												});
												num = 4;
												num3 = num;
												continue;
												end_IL_0b46:
												break;
											}
										}
										catch (Exception ex)
										{
											CS_0024_003C_003E8__locals0.eval_k("BAN Net:" + ex.Message);
											CS_0024_003C_003E8__locals0.eval_im.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
											{
												short num11 = -21711;
												short num12 = num11;
												num11 = -21711;
												switch (num12 == num11)
												{
												default:
													num11 = 1;
													if (num11 != 0)
													{
													}
													num11 = 0;
													_ = num11;
													num11 = 0;
													if (num11 != 0)
													{
													}
													CS_0024_003C_003E8__locals0.Close_launcher();
													break;
												}
											});
										}
										goto IL_0e7c;
									case 30:
										if (this.m_eval_d[5] == CS_0024_003C_003E8__locals0.UID_SC)
										{
											num = 10;
											num3 = num;
											continue;
										}
										goto case 46;
									case 9:
										array = new byte[256000];
										num = 17;
										num3 = num;
										continue;
									case 10:
										CS_0024_003C_003E8__locals0.dr.Close();
										CS_0024_003C_003E8__locals0.eval_dq.Close();
										CS_0024_003C_003E8__locals0.eval_em = new Thread(CS_0024_003C_003E8__locals0.ScreenCapture)
										{
											IsBackground = true
										};
										CS_0024_003C_003E8__locals0.eval_em.Start();
										num = 46;
										num3 = num;
										continue;
									case 25:
										num2 = (eval_a = 1);
										eval_e = awaiter;
										eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
										num = 11;
										num3 = num;
										continue;
									case 11:
										return;
									case 43:
										if (this.m_eval_d[0] == "SV02")
										{
											num = 51;
											num3 = num;
											continue;
										}
										goto case 35;
									case 17:
										try
										{
											int count = CS_0024_003C_003E8__locals0.dr.Read(array, 0, array.Length);
											text = Encoding.UTF8.GetString(array, 0, count);
										}
										catch
										{
										}
										this.m_eval_d = text.ToString().Split(',');
										num = 43;
										num3 = num;
										continue;
									case 38:
										if (this.m_eval_d[0] == "IPRESET")
										{
											num = 29;
											num3 = num;
											continue;
										}
										goto case 0;
									case 48:
										num2 = (eval_a = 3);
										eval_e = awaiter;
										eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
										num = 13;
										num3 = num;
										continue;
									case 13:
										return;
									case 14:
										CS_0024_003C_003E8__locals0.dr.Close();
										CS_0024_003C_003E8__locals0.eval_dq.Close();
										num = 34;
										num3 = num;
										continue;
									case 37:
										Thread.Sleep(2000);
										awaiter = System.Windows.Winservr.System.SetWR(System.Windows.Winservr.System.Out(this.m_eval_d[2], "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345", int.Parse(this.m_eval_d[3])).ToString()).GetAwaiter();
										num = 42;
										num3 = num;
										continue;
									case 42:
										if (!awaiter.IsCompleted)
										{
											num = 48;
											num3 = num;
											continue;
										}
										goto case 5;
									case 19:
										CS_0024_003C_003E8__locals0.dr.Close();
										CS_0024_003C_003E8__locals0.eval_dq.Close();
										num = 24;
										num3 = num;
										continue;
									case 41:
										CS_0024_003C_003E8__locals0.eval_k("IPRESET1 : ERROR " + result);
										num = 37;
										num3 = num;
										continue;
									case 34:
										break;
									case 44:
										goto end_IL_0161;
										IL_0ca0:
										num = 30;
										num3 = num;
										continue;
										IL_0e7c:
										num = 38;
										num3 = num;
										continue;
									}
									this.m_eval_d = null;
									num = 44;
									num3 = num;
									continue;
									end_IL_0161:
									break;
								}
							}
							catch
							{
								try
								{
									CS_0024_003C_003E8__locals0.dr.Close();
								}
								catch
								{
								}
								try
								{
									CS_0024_003C_003E8__locals0.eval_dq.Close();
								}
								catch
								{
								}
								CS_0024_003C_003E8__locals0.eval_im.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									if (Langve == "RU")
									{
										while (true)
										{
											short num5 = 0;
											_ = num5;
											num5 = -23188;
											short num6 = num5;
											num5 = -23188;
											switch (num6 == num5)
											{
											case false:
											case true:
												break;
											default:
												num5 = 0;
												if (num5 != 0)
												{
												}
												num5 = 1;
												if (num5 != 0)
												{
												}
												CS_0024_003C_003E8__locals0.eval_im.Content = "Коннект к [SM] : Нет подключения.Попытка подключения...";
												return;
											}
										}
									}
									CS_0024_003C_003E8__locals0.eval_im.Content = "Connect to [SM]: No connection.Attempt to connect...";
								});
							}
							break;
						case false:
						case true:
							break;
						}
						break;
					}
					case 5:
						CS_0024_003C_003E8__locals0.Message_user = Name_players_local + "," + CS_0024_003C_003E8__locals0.an + "," + CS_0024_003C_003E8__locals0.UID_SC + "," + CS_0024_003C_003E8__locals0.GUID_SC + "," + CS_0024_003C_003E8__locals0.Launcher_ + "," + CS_0024_003C_003E8__locals0.CharsLauncher + "," + CS_0024_003C_003E8__locals0.MC + "," + CS_0024_003C_003E8__locals0.TxtSMD;
						CS_0024_003C_003E8__locals0.MESSAGES = System.Windows.Winservr.System.In(CS_0024_003C_003E8__locals0.Message_user, "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345");
						Thread.Sleep(1000);
						text = string.Empty;
						num = 1;
						num3 = num;
						continue;
					case 0:
						goto end_IL_00b7;
					}
					num = 0;
					num3 = num;
					continue;
					end_IL_00b7:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -12480;
			short num2 = num;
			num = -12480;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				break;
			case true:
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ap : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			_ = num;
			num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 16;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				FileStream fileStream = default(FileStream);
				string text2 = default(string);
				string text3 = default(string);
				byte[] array4 = default(byte[]);
				byte b2 = default(byte);
				long num9 = default(long);
				byte[] array3 = default(byte[]);
				string text4 = default(string);
				int num7 = default(int);
				RegistryKey registryKey = default(RegistryKey);
				StringBuilder stringBuilder = default(StringBuilder);
				byte[] array = default(byte[]);
				byte b = default(byte);
				long num5 = default(long);
				byte[] array2 = default(byte[]);
				int num6 = default(int);
				string text = default(string);
				StreamReader streamReader = default(StreamReader);
				while (true)
				{
					switch (num3)
					{
					case 6:
						goto end_IL_008e;
					case 16:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 12;
							num3 = num;
							continue;
						}
						goto case 7;
					case 3:
						awaiter.GetResult();
						num = 17;
						num3 = num;
						continue;
					case 4:
						try
						{
							num = 8;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 8:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 != 0)
									{
										num = 9;
										num3 = num;
										continue;
									}
									awaiter = this.m_eval_d;
									this.m_eval_d = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 2;
									num3 = num;
									continue;
								case 2:
									awaiter.GetResult();
									_ = string.Empty;
									num = 7;
									num3 = num;
									continue;
								case 7:
								{
									string fileName = Path.GetFileName(mainWindow.eval_hl.Content.ToString());
									if (fileName == mainWindow.m_eval_aa)
									{
										GameLicense = true;
										URL_DIRFastClientDIR = mainWindow.m_eval_al + "DayZ/fastresume.log";
										URL_DIRClearClientDIR = mainWindow.m_eval_al + "DayZ/DIRECTORY.log";
										URL_ClearClientDIR = mainWindow.m_eval_al + "DayZ/FILE.log";
										URL_TORRENT_DIR = mainWindow.m_eval_al + "DayZ/" + mainWindow.m_eval_ae;
										TorrentName = mainWindow.m_eval_ae;
										mainWindow.NameDirGamePatch = mainWindow.m_eval_aa;
									}
									if (fileName == mainWindow.m_eval_z)
									{
										num = 0;
										num3 = num;
										continue;
									}
									break;
								}
								case 4:
									num2 = (eval_a = 0);
									this.m_eval_d = awaiter;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
									num = 1;
									num3 = num;
									continue;
								case 1:
									goto end_IL_0140;
								case 0:
									GameLicense = false;
									URL_DIRFastClientDIR = mainWindow.m_eval_al + "fastresume.log";
									URL_DIRClearClientDIR = mainWindow.m_eval_al + "DIRECTORY.log";
									URL_ClearClientDIR = mainWindow.m_eval_al + "FILE.log";
									URL_TORRENT_DIR = mainWindow.m_eval_al + mainWindow.m_eval_af;
									TorrentName = mainWindow.m_eval_af;
									mainWindow.NameDirGamePatch = mainWindow.m_eval_z;
									num = 3;
									num3 = num;
									continue;
								case 9:
									awaiter = Task.Delay(1).GetAwaiter();
									num = 5;
									num3 = num;
									continue;
								case 5:
									if (!awaiter.IsCompleted)
									{
										num = 4;
										num3 = num;
										continue;
									}
									goto case 2;
								case 3:
									break;
								case 6:
									goto IL_0fb5;
								}
								num = 6;
								num3 = num;
								continue;
								end_IL_0140:
								break;
							}
						}
						catch (Exception ex)
						{
							MessageBoxWindow.Show(mainWindow, "PUIDGUID! " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							goto IL_0fb5;
						}
						goto end_IL_006e;
					case 1:
						num2 = (eval_a = 1);
						this.m_eval_d = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						num = 14;
						num3 = num;
						continue;
					case 14:
						goto end_IL_006e;
					case 11:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num3)
									{
									case 0:
										try
										{
											StreamReader streamReader2 = new StreamReader(fileStream);
											try
											{
												num = 36;
												num3 = num;
												while (true)
												{
													switch (num3)
													{
													case 36:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													case 9:
														if (!string.IsNullOrEmpty(text2))
														{
															num = 10;
															num3 = num;
															continue;
														}
														goto default;
													case 7:
														num = 32;
														num3 = num;
														continue;
													case 32:
														if (text3.Contains("]"))
														{
															num = 37;
															num3 = num;
															continue;
														}
														goto case 27;
													case 13:
														if (Regex.IsMatch(text3, "^7656119([0-9]{10})$"))
														{
															num = 11;
															num3 = num;
														}
														else
														{
															num = 8;
															num3 = num;
														}
														continue;
													case 4:
														array4[b2++] = (byte)(num9 & 0xFF);
														num = 34;
														num3 = num;
														continue;
													case 34:
														if ((num9 >>= 8) <= 0)
														{
															num = 16;
															num3 = num;
															continue;
														}
														goto case 4;
													case 35:
													{
														long num8 = Convert.ToInt64(mainWindow.IdSteam64);
														num9 = num8;
														mainWindow.UIDG = num8.ToString();
														array4 = new byte[10] { 66, 69, 0, 0, 0, 0, 0, 0, 0, 0 };
														b2 = 2;
														num = 4;
														num3 = num;
														continue;
													}
													case 25:
														num = 26;
														num3 = num;
														continue;
													case 26:
														if (text3 != "ERROR ?")
														{
															num = 35;
															num3 = num;
															continue;
														}
														goto default;
													case 28:
														text3 = SteamIDConvert.Steam2ToSteam64(text3).ToString();
														num = 33;
														num3 = num;
														continue;
													case 0:
														text3 = SteamIDConvert.Steam32ToSteam64(text3).ToString();
														num = 31;
														num3 = num;
														continue;
													case 10:
														num = 18;
														num3 = num;
														continue;
													case 18:
														if (text2.Contains("RecvMsgClientLogOnResponse"))
														{
															num = 1;
															num3 = num;
															continue;
														}
														goto default;
													case 1:
														num = 22;
														num3 = num;
														continue;
													case 22:
														if (text2.Contains("OK"))
														{
															num = 23;
															num3 = num;
															continue;
														}
														goto default;
													case 2:
													case 20:
													case 31:
													case 33:
														mainWindow.IdSteam64 = text3;
														num = 6;
														num3 = num;
														continue;
													case 6:
														if (!string.IsNullOrEmpty(mainWindow.IdSteam64))
														{
															num = 25;
															num3 = num;
															continue;
														}
														mainWindow.gg.Content = "...";
														mainWindow.gd.Content = "...";
														mainWindow.GUID_SC = "---";
														mainWindow.UID_SC = "---";
														num = 24;
														num3 = num;
														continue;
													case 8:
														if (Regex.IsMatch(text3, "^U:1:([0-9]{1,10})$"))
														{
															num = 0;
															num3 = num;
														}
														else
														{
															text3 = $"ERROR ?";
															num = 2;
															num3 = num;
														}
														continue;
													case 11:
														mainWindow.IdSteam64 = text3;
														num = 20;
														num3 = num;
														continue;
													case 27:
														num = 14;
														num3 = num;
														continue;
													case 14:
														if (!Regex.IsMatch(text3, "^STEAM_0:[0-1]:([0-9]{1,10})$"))
														{
															num = 13;
															num3 = num;
														}
														else
														{
															num = 28;
															num3 = num;
														}
														continue;
													case 16:
														array3 = new MD5CryptoServiceProvider().ComputeHash(array4);
														text4 = string.Empty;
														num7 = 0;
														num = 3;
														num3 = num;
														continue;
													case 37:
														text3 = text3.Replace("]", "").Replace("[", string.Empty);
														num = 27;
														num3 = num;
														continue;
													case 3:
													case 29:
														num = 19;
														num3 = num;
														continue;
													case 19:
														if (num7 < array3.Length)
														{
															text4 += array3[num7].ToString("x2");
															num7++;
															num = 29;
															num3 = num;
														}
														else
														{
															num = 12;
															num3 = num;
														}
														continue;
													case 12:
														mainWindow.GUID_SC = text4;
														mainWindow.UID_SC = mainWindow.IdSteam64;
														mainWindow.gg.Content = mainWindow.IdSteam64;
														mainWindow.gd.Content = mainWindow.GUID_SC;
														num = 15;
														num3 = num;
														continue;
													case 23:
														text3 = text2.Split(')')[1].Split(']')[0].Replace(" : ", string.Empty) + "]";
														num = 21;
														num3 = num;
														continue;
													case 21:
														if (!text3.Contains("["))
														{
															num = 7;
															num3 = num;
															continue;
														}
														goto case 37;
													default:
														num = 5;
														num3 = num;
														continue;
													case 5:
														if ((text2 = streamReader2.ReadLine()) != null)
														{
															num = 9;
															num3 = num;
														}
														else
														{
															num = 30;
															num3 = num;
														}
														continue;
													case 30:
														num = 17;
														num3 = num;
														continue;
													case 17:
														break;
													}
													break;
												}
											}
											finally
											{
												num = 0;
												num3 = num;
												while (true)
												{
													switch (num3)
													{
													case 0:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (num2 < 0)
														{
															num = 2;
															num3 = num;
															continue;
														}
														break;
													case 3:
														((IDisposable)streamReader2).Dispose();
														num = 4;
														num3 = num;
														continue;
													case 4:
														break;
													case 2:
														num = 1;
														num3 = num;
														continue;
													case 1:
														if (streamReader2 != null)
														{
															num = 3;
															num3 = num;
															continue;
														}
														break;
													}
													break;
												}
											}
										}
										finally
										{
											num = 0;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 0:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 < 0)
													{
														num = 2;
														num3 = num;
														continue;
													}
													break;
												case 2:
													num = 4;
													num3 = num;
													continue;
												case 4:
													if (fileStream != null)
													{
														num = 1;
														num3 = num;
														continue;
													}
													break;
												case 1:
													((IDisposable)fileStream).Dispose();
													num = 3;
													num3 = num;
													continue;
												case 3:
													break;
												}
												break;
											}
										}
										num = 1;
										num3 = num;
										continue;
									case 2:
										try
										{
											num = 1;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 1:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (registryKey != null)
													{
														num = 3;
														num3 = num;
														continue;
													}
													break;
												case 3:
													mainWindow.SteamPatch = (string)registryKey.GetValue("InstallPath");
													num = 2;
													num3 = num;
													continue;
												case 2:
													break;
												case 0:
													goto end_IL_0d77;
												}
												num = 0;
												num3 = num;
												continue;
												end_IL_0d77:
												break;
											}
										}
										finally
										{
											num = 0;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 0:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 < 0)
													{
														num = 2;
														num3 = num;
														continue;
													}
													break;
												case 3:
													((IDisposable)registryKey).Dispose();
													num = 4;
													num3 = num;
													continue;
												case 4:
													break;
												case 2:
													num = 1;
													num3 = num;
													continue;
												case 1:
													if (registryKey != null)
													{
														num = 3;
														num3 = num;
														continue;
													}
													break;
												}
												break;
											}
										}
										fileStream = File.Open(mainWindow.SteamPatch + "\\logs\\connection_log.txt", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
										num = 0;
										num3 = num;
										continue;
									case 1:
										goto end_IL_044f;
									}
									goto case 0;
									continue;
									end_IL_044f:
									break;
								}
								break;
							case 0:
								text2 = string.Empty;
								registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\WOW6432Node\\Valve\\Steam");
								num = 2;
								num3 = num;
								goto default;
							}
						}
						catch (Exception ex2)
						{
							mainWindow.GUID_SC = "---";
							mainWindow.UID_SC = "---";
							MessageBoxWindow.Show(mainWindow, "SteamPatch! " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							mainWindow.gg.Content = "...";
							mainWindow.gd.Content = "...";
						}
						break;
					case 17:
						num = 15;
						num3 = num;
						continue;
					case 15:
						if (GameLicense)
						{
							num = 11;
							num3 = num;
							continue;
						}
						break;
					case 9:
						mainWindow.eval_bm();
						num = 2;
						num3 = num;
						continue;
					case 12:
						num = 8;
						num3 = num;
						continue;
					case 8:
						if (num2 != 1)
						{
							num = 7;
							num3 = num;
							continue;
						}
						awaiter = this.m_eval_d;
						this.m_eval_d = default(TaskAwaiter);
						num2 = (eval_a = -1);
						num = 3;
						num3 = num;
						continue;
					case 5:
						if (mainWindow.eval_fe.Visibility == Visibility.Hidden)
						{
							num = 9;
							num3 = num;
							continue;
						}
						goto case 2;
					case 7:
						num = 4;
						num3 = num;
						continue;
					case 2:
						num = 0;
						num3 = num;
						continue;
					case 0:
						if (!GameLicense)
						{
							num = 10;
							num3 = num;
							continue;
						}
						goto case 17;
					case 13:
						if (!awaiter.IsCompleted)
						{
							num = 1;
							num3 = num;
							continue;
						}
						goto case 3;
					case 10:
						{
							try
							{
								num = 2;
								num3 = num;
								while (true)
								{
									switch (num3)
									{
									case 2:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_aj)))
										{
											num = 10;
											num3 = num;
											continue;
										}
										mainWindow.gg.Content = "...";
										mainWindow.gd.Content = "...";
										mainWindow.GUID_SC = "---";
										mainWindow.UID_SC = "---";
										num = 7;
										num3 = num;
										continue;
									case 12:
										mainWindow.GUID_SC = stringBuilder.ToString();
										mainWindow.UID_SC = mainWindow.eval_db;
										mainWindow.gg.Content = mainWindow.eval_db;
										mainWindow.gd.Content = mainWindow.GUID_SC;
										num = 0;
										num3 = num;
										continue;
									case 4:
										array[b++] = (byte)(num5 & 0xFF);
										num = 5;
										num3 = num;
										continue;
									case 5:
										if ((num5 >>= 8) <= 0)
										{
											num = 9;
											num3 = num;
											continue;
										}
										goto case 4;
									case 9:
										array2 = new MD5CryptoServiceProvider().ComputeHash(array);
										stringBuilder = new StringBuilder();
										num6 = 0;
										num = 13;
										num3 = num;
										continue;
									case 8:
									case 13:
										num = 15;
										num3 = num;
										continue;
									case 15:
										if (num6 < array2.Length)
										{
											stringBuilder.Append(array2[num6].ToString("x2"));
											num6++;
											num = 8;
											num3 = num;
										}
										else
										{
											num = 12;
											num3 = num;
										}
										continue;
									case 10:
										text = string.Empty;
										streamReader = new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_aj));
										num = 14;
										num3 = num;
										continue;
									case 1:
										num5 = Convert.ToInt64(mainWindow.eval_db);
										array = new byte[10] { 66, 69, 0, 0, 0, 0, 0, 0, 0, 0 };
										b = 2;
										num = 4;
										num3 = num;
										continue;
									case 11:
										if (string.IsNullOrEmpty(mainWindow.eval_db))
										{
											mainWindow.gg.Content = "...";
											mainWindow.gd.Content = "...";
											mainWindow.GUID_SC = "---";
											mainWindow.UID_SC = "---";
											num = 6;
											num3 = num;
										}
										else
										{
											num = 1;
											num3 = num;
										}
										continue;
									case 14:
										try
										{
											while (true)
											{
												IL_144d:
												num = 2;
												num3 = num;
												while (true)
												{
													switch (num3)
													{
													case 2:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													case 1:
														if (!string.IsNullOrEmpty(text))
														{
															num = 5;
															num3 = num;
															continue;
														}
														goto default;
													case 6:
														try
														{
															streamReader.Dispose();
														}
														catch
														{
														}
														num = 4;
														num3 = num;
														continue;
													default:
														num = 7;
														num3 = num;
														continue;
													case 7:
														if ((text = streamReader.ReadLine()) != null)
														{
															num = 1;
															num3 = num;
														}
														else
														{
															num = 0;
															num3 = num;
														}
														continue;
													case 0:
														streamReader.Close();
														num = 6;
														num3 = num;
														continue;
													case 5:
													{
														mainWindow.eval_db = text;
														num = 32303;
														short num4 = num;
														num = 32303;
														switch (num4 == num)
														{
														case false:
														case true:
															break;
														default:
															num = 0;
															if (num != 0)
															{
															}
															num = 3;
															num3 = num;
															continue;
														}
														break;
													}
													case 4:
														goto end_IL_146d;
													}
													goto IL_144d;
													continue;
													end_IL_146d:
													break;
												}
												break;
											}
										}
										finally
										{
											num = 0;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 0:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 < 0)
													{
														num = 2;
														num3 = num;
														continue;
													}
													break;
												case 2:
													num = 4;
													num3 = num;
													continue;
												case 4:
													if (streamReader != null)
													{
														num = 1;
														num3 = num;
														continue;
													}
													break;
												case 1:
													((IDisposable)streamReader).Dispose();
													num = 3;
													num3 = num;
													continue;
												case 3:
													break;
												}
												break;
											}
										}
										num = 11;
										num3 = num;
										continue;
									case 0:
									case 6:
									case 7:
										num = 3;
										num3 = num;
										continue;
									case 3:
										break;
									}
									break;
								}
							}
							catch
							{
								mainWindow.GUID_SC = "---";
								mainWindow.UID_SC = "---";
								mainWindow.gg.Content = "...";
								mainWindow.gd.Content = "...";
							}
							awaiter = mainWindow.eval_a4().GetAwaiter();
							num = 13;
							num3 = num;
							continue;
						}
						IL_0fb5:
						num = 5;
						num3 = num;
						continue;
					}
					num = 6;
					num3 = num;
					continue;
					end_IL_008e:
					break;
				}
				goto IL_0056;
				end_IL_006e:;
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
			}
			goto IL_1706;
			IL_1706:
			num = 1;
			if (num == 0)
			{
			}
			return;
			IL_0056:
			eval_a = -2;
			eval_b.SetResult();
			goto IL_1706;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 20009;
			short num2 = num;
			num = 20009;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_aq : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 20768;
			short num2 = num;
			num = 20768;
			switch (num2 == num)
			{
			default:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				switch (num)
				{
				}
				int num3 = eval_a;
				MainWindow mainWindow = eval_c;
				try
				{
					num = 14;
					int num4 = num;
					TaskAwaiter awaiter = default(TaskAwaiter);
					while (true)
					{
						switch (num4)
						{
						case 9:
							break;
						case 14:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num3 != 0)
							{
								num = 12;
								num4 = num;
								continue;
							}
							awaiter = this.m_eval_d;
							this.m_eval_d = default(TaskAwaiter);
							num3 = (eval_a = -1);
							num = 13;
							num4 = num;
							continue;
						case 15:
						case 17:
							num = 6;
							num4 = num;
							continue;
						case 7:
							num = 0;
							num4 = num;
							continue;
						case 0:
							if (File.Exists(Directory_Launcher + "\\setting.xml"))
							{
								num = 10;
								num4 = num;
							}
							else
							{
								awaiter = System.Windows.Winservr.System.UnPack(Directory_Launcher).GetAwaiter();
								num = 8;
								num4 = num;
							}
							continue;
						case 8:
							if (!awaiter.IsCompleted)
							{
								num = 16;
								num4 = num;
								continue;
							}
							goto case 2;
						case 10:
							awaiter = System.Windows.Winservr.System.Pack(Directory_Launcher).GetAwaiter();
							num = 4;
							num4 = num;
							continue;
						case 4:
							if (!awaiter.IsCompleted)
							{
								num = 11;
								num4 = num;
								continue;
							}
							goto case 13;
						case 6:
							try
							{
								mainWindow.eval_cb();
							}
							catch (Exception ex)
							{
								System.Windows.MessageBox.Show("ERROR ReadFileSetting :" + ex.Message);
							}
							num = 9;
							num4 = num;
							continue;
						case 2:
							awaiter.GetResult();
							num = 15;
							num4 = num;
							continue;
						case 12:
							num = 1;
							num4 = num;
							continue;
						case 1:
							if (num3 == 1)
							{
								awaiter = this.m_eval_d;
								this.m_eval_d = default(TaskAwaiter);
								num3 = (eval_a = -1);
								num = 2;
								num4 = num;
							}
							else
							{
								num = 7;
								num4 = num;
							}
							continue;
						case 11:
							num3 = (eval_a = 0);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 3;
							num4 = num;
							continue;
						case 3:
							goto end_IL_00b6;
						case 13:
							awaiter.GetResult();
							num = 17;
							num4 = num;
							continue;
						case 16:
							num3 = (eval_a = 1);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 5;
							num4 = num;
							continue;
						case 5:
							goto end_IL_00b6;
						}
						break;
					}
					goto case false;
					end_IL_00b6:;
				}
				catch (Exception exception)
				{
					eval_a = -2;
					eval_b.SetException(exception);
				}
				break;
			}
			case false:
			case true:
				eval_a = -2;
				eval_b.SetResult();
				break;
			}
			num = 0;
			_ = num;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 21319;
			short num2 = num;
			num = 21319;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ar : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 12;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				IEnumerator enumerator = default(IEnumerator);
				IDisposable disposable = default(IDisposable);
				string text = default(string);
				while (true)
				{
					switch (num3)
					{
					case 2:
						goto end_IL_00b7;
					case 11:
						goto end_IL_00b7;
					case 12:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 4;
							num3 = num;
							continue;
						}
						awaiter = this.m_eval_d;
						this.m_eval_d = default(TaskAwaiter);
						num2 = (eval_a = -1);
						num = 14;
						num3 = num;
						continue;
					case 10:
					{
						XmlDocument xmlDocument = new XmlDocument();
						xmlDocument.Load(Directory_Launcher + "\\launcher\\setting.xml");
						enumerator = xmlDocument.SelectNodes("/launcher").GetEnumerator();
						num = 0;
						num3 = num;
						continue;
					}
					case 8:
						if (mainWindow.m_eval_am)
						{
							num = 6;
							num3 = num;
							continue;
						}
						goto IL_04ce;
					case 7:
						mainWindow.ir.Visibility = Visibility.Hidden;
						mainWindow.eval_ix.Visibility = Visibility.Hidden;
						mainWindow.eval_iw.Visibility = Visibility.Hidden;
						mainWindow.ft.Visibility = Visibility.Hidden;
						mainWindow.it.Visibility = Visibility.Hidden;
						mainWindow.eval_dj.BShop.Visibility = Visibility.Hidden;
						num = 3;
						num3 = num;
						continue;
					case 0:
						try
						{
							num = 1;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 1:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									num = 3;
									num3 = num;
									continue;
								case 3:
								{
									if (!enumerator.MoveNext())
									{
										num = 2;
										num3 = num;
										continue;
									}
									XmlNode xmlNode = (XmlNode)enumerator.Current;
									mainWindow.HTTP = xmlNode.SelectSingleNode("http").InnerText;
									mainWindow.m_eval_r = xmlNode.SelectSingleNode("web").InnerText;
									mainWindow.m_eval_o = xmlNode.SelectSingleNode("protweb").InnerText;
									mainWindow.m_eval_p = xmlNode.SelectSingleNode("protweb2").InnerText;
									mainWindow.m_eval_q = xmlNode.SelectSingleNode("ip").InnerText;
									mainWindow.m_eval_w = xmlNode.SelectSingleNode("http").InnerText;
									mainWindow.m_eval_s = xmlNode.SelectSingleNode("ip").InnerText;
									mainWindow.m_eval_t = xmlNode.SelectSingleNode("ip").InnerText;
									mainWindow.m_eval_u = Convert.ToInt32(xmlNode.SelectSingleNode("shop").InnerText);
									mainWindow.m_eval_v = Convert.ToInt32(xmlNode.SelectSingleNode("nocd").InnerText);
									num = 0;
									num3 = num;
									continue;
								}
								case 2:
									num = 4;
									num3 = num;
									continue;
								case 4:
									break;
								}
								break;
							}
						}
						finally
						{
							num = 1;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 1:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 < 0)
									{
										num = 3;
										num3 = num;
										continue;
									}
									break;
								case 3:
									disposable = enumerator as IDisposable;
									num = 2;
									num3 = num;
									continue;
								case 2:
									if (disposable != null)
									{
										num = 0;
										num3 = num;
										continue;
									}
									break;
								case 0:
									disposable.Dispose();
									num = 4;
									num3 = num;
									continue;
								case 4:
									break;
								}
								break;
							}
						}
						mainWindow.cc();
						mainWindow.LKL = Directory_Launcher + "\\" + Name_form + ".exe";
						num = 8;
						num3 = num;
						continue;
					case 9:
						if (!Enable_Shop)
						{
							num = 7;
							num3 = num;
							continue;
						}
						break;
					case 6:
						try
						{
							num = 1;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 1:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if ((string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "DIRECTORYGAME", null) == null)
									{
										num = 0;
										num3 = num;
										continue;
									}
									break;
								case 0:
									try
									{
										switch (0)
										{
										default:
											while (true)
											{
												switch (num3)
												{
												case 0:
													if (Directory.Exists(text))
													{
														num = 2;
														num3 = num;
														continue;
													}
													goto case 1;
												case 2:
												{
													RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
													registryKey.SetValue("DIRECTORYGAME", text);
													registryKey.Close();
													num = 1;
													num3 = num;
													continue;
												}
												case 1:
													num = 3;
													num3 = num;
													continue;
												case 3:
													goto end_IL_0731;
												}
												goto case 0;
												continue;
												end_IL_0731:
												break;
											}
											break;
										case 0:
											text = Directory_Launcher.Replace(MainWindow.m_eval_ab, mainWindow.m_eval_z);
											num = 0;
											num3 = num;
											goto default;
										}
									}
									catch (Exception ex)
									{
										System.Windows.MessageBox.Show(ex.Message + " !-=dirreplly=-");
									}
									break;
								case 2:
								{
									num = -30696;
									short num4 = num;
									num = -30696;
									switch (num4 == num)
									{
									case false:
									case true:
										break;
									default:
										num = 0;
										if (num == 0)
										{
										}
										goto end_IL_06d9;
									}
									goto case 1;
								}
								}
								num = 2;
								num3 = num;
								continue;
								end_IL_06d9:
								break;
							}
						}
						catch (Exception ex2)
						{
							System.Windows.MessageBox.Show(ex2.Message + " !-=dirreplly2=-");
						}
						goto IL_04ce;
					case 13:
						if (!awaiter.IsCompleted)
						{
							num = 1;
							num3 = num;
							continue;
						}
						goto case 14;
					case 4:
						num = 5;
						num3 = num;
						continue;
					case 5:
						if (!File.Exists(Directory_Launcher + "\\launcher\\setting.xml"))
						{
							awaiter = Task.Delay(1000).GetAwaiter();
							num = 13;
							num3 = num;
						}
						else
						{
							num = 10;
							num3 = num;
						}
						continue;
					case 1:
						num2 = (eval_a = 0);
						this.m_eval_d = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						num = 15;
						num3 = num;
						continue;
					case 15:
						return;
					case 14:
						awaiter.GetResult();
						mainWindow.eval_cb();
						num = 2;
						num3 = num;
						continue;
					case 3:
						break;
						IL_04ce:
						mainWindow.eval_b8();
						mainWindow.eval_b3();
						mainWindow.c9.Tick += mainWindow.eval_a4;
						mainWindow.m_eval_cb.Tick += mainWindow.eval_a7;
						mainWindow.m_eval_cb.Interval = new TimeSpan(0, 0, 10);
						mainWindow.m_eval_b9.Tick += mainWindow.eval_a6;
						mainWindow.m_eval_b9.Interval = new TimeSpan(0, 0, 2);
						mainWindow.m_eval_ca.Tick += mainWindow.eval_a5;
						mainWindow.m_eval_ca.Interval = new TimeSpan(0, 0, 1);
						mainWindow.eval_eh.Tick += mainWindow.eval_az;
						mainWindow.eval_eh.Interval = new TimeSpan(0, 0, 1);
						mainWindow.eval_dw.Tick += mainWindow.eval_a3;
						mainWindow.eval_dw.Interval = new TimeSpan(0, 2, 0);
						mainWindow.eo.Tick += mainWindow.ay;
						mainWindow.eo.Interval = new TimeSpan(0, 15, 0);
						mainWindow.eval_d7.Tick += mainWindow.eval_a2;
						mainWindow.eval_d7.Interval = new TimeSpan(0, 0, 3);
						mainWindow.eval_ew.Tick += mainWindow.eval_ax;
						mainWindow.eval_ew.Interval = new TimeSpan(0, 5, 0);
						mainWindow.eval_ex.Tick += mainWindow.eval_aw;
						mainWindow.eval_ex.Interval = new TimeSpan(0, 30, 0);
						mainWindow.eval_ew.Start();
						num = 9;
						num3 = num;
						continue;
					}
					mainWindow.eval_bp();
					num = 11;
					num3 = num;
					continue;
					end_IL_00b7:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			num = 0;
			_ = num;
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -23572;
			short num2 = num;
			num = -23572;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_as : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private int m_eval_d;

		private TaskAwaiter eval_e;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = -21297;
				short num3 = num;
				num = -21297;
				TaskAwaiter awaiter = default(TaskAwaiter);
				string path2 = default(string);
				string[] array = default(string[]);
				byte[] array2 = default(byte[]);
				string path = default(string);
				string text = default(string);
				StreamReader streamReader = default(StreamReader);
				bool flag = default(bool);
				StreamWriter streamWriter2 = default(StreamWriter);
				StreamWriter streamWriter = default(StreamWriter);
				int num4;
				int num5 = default(int);
				switch (num3 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 12;
					num4 = num;
					goto IL_00d7;
				case false:
				case true:
					{
						num = 3;
						num4 = num;
						goto IL_00d7;
					}
					IL_00d7:
					while (true)
					{
						switch (num4)
						{
						case 11:
							goto end_IL_00d7;
						case 12:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num2 != 0)
							{
								num = 4;
								num4 = num;
								continue;
							}
							goto case 10;
						case 0:
							if (!awaiter.IsCompleted)
							{
								num = 8;
								num4 = num;
								continue;
							}
							goto case 3;
						case 10:
							num = 6;
							num4 = num;
							continue;
						case 2:
							try
							{
								mainWindow.eval_dq.Close();
							}
							catch
							{
							}
							awaiter = mainWindow.eval_a4().GetAwaiter();
							num = 0;
							num4 = num;
							continue;
						case 6:
							try
							{
								num = 8;
								num4 = num;
								while (true)
								{
									switch (num4)
									{
									case 8:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (num2 != 0)
										{
											num = 31;
											num4 = num;
											continue;
										}
										awaiter = eval_e;
										eval_e = default(TaskAwaiter);
										num2 = (eval_a = -1);
										num = 28;
										num4 = num;
										continue;
									case 30:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num4)
													{
													case 5:
														if (File.Exists(path2))
														{
															num = 4;
															num4 = num;
															continue;
														}
														goto case 2;
													case 7:
														System.Windows.MessageBox.Show("Администратор сбросил Ваш steam_id,после запустите лаунчер и можете запустить игру.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
														num = 3;
														num4 = num;
														continue;
													case 2:
														num = 0;
														num4 = num;
														continue;
													case 0:
														if (!(Langve == "RU"))
														{
															System.Windows.MessageBox.Show("The administrator has reset your steam_id, then launch the launcher and you can start the game.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
															num = 1;
															num4 = num;
														}
														else
														{
															num = 7;
															num4 = num;
														}
														continue;
													case 4:
														File.Delete(path2);
														num = 2;
														num4 = num;
														continue;
													case 1:
													case 3:
														mainWindow.Close_launcher();
														num = 6;
														num4 = num;
														continue;
													case 6:
														goto end_IL_02d1;
													}
													goto case 0;
													continue;
													end_IL_02d1:
													break;
												}
												break;
											case 0:
												mainWindow.m_eval_ca.Stop();
												mainWindow.eval_bw();
												path2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_aj);
												num = 5;
												num4 = num;
												goto default;
											}
										}
										catch (Exception ex4)
										{
											mainWindow.eval_bw();
											System.Windows.MessageBox.Show("UIDRESET Net:" + ex4.Message);
											mainWindow.Close_launcher();
										}
										goto IL_0fe9;
									case 29:
										if (array[0] == "UIDWREROR")
										{
											num = 20;
											num4 = num;
											continue;
										}
										goto case 0;
									case 27:
									{
										array2 = new byte[256000];
										int count = mainWindow.dr.Read(array2, 0, array2.Length);
										array = Encoding.UTF8.GetString(array2, 0, count).ToString().Split(',');
										mainWindow.eval_ee = true;
										num = 1;
										num4 = num;
										continue;
									}
									case 1:
										if (!(Langve == "RU"))
										{
											mainWindow.Norificons("Connected successfully ...");
											num = 13;
											num4 = num;
										}
										else
										{
											num = 10;
											num4 = num;
										}
										continue;
									case 0:
										num = 14;
										num4 = num;
										continue;
									case 14:
										if (array[0] == "UIDWRNULL")
										{
											num = 7;
											num4 = num;
											continue;
										}
										goto case 19;
									case 10:
										mainWindow.Norificons("Подключен успешно ...");
										num = 23;
										num4 = num;
										continue;
									case 13:
									case 23:
										num = 21;
										num4 = num;
										continue;
									case 21:
										if (array[0] == "UIDRESET")
										{
											num = 26;
											num4 = num;
											continue;
										}
										goto IL_0fe9;
									case 34:
										mainWindow.dr.Write(array2, 0, array2.Length);
										num = 27;
										num4 = num;
										continue;
									case 12:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num4)
													{
													case 2:
														if (File.Exists(path))
														{
															num = 0;
															num4 = num;
														}
														else
														{
															num = 1;
															num4 = num;
														}
														continue;
													case 4:
														try
														{
															num = 3;
															num4 = num;
															while (true)
															{
																switch (num4)
																{
																case 3:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	num = 10;
																	num4 = num;
																	continue;
																case 10:
																	if ((text = streamReader.ReadLine()) == null)
																	{
																		num = 9;
																		num4 = num;
																	}
																	else
																	{
																		num = 7;
																		num4 = num;
																	}
																	continue;
																case 9:
																	streamReader.Close();
																	num = 2;
																	num4 = num;
																	continue;
																case 11:
																	flag = true;
																	num = 8;
																	num4 = num;
																	continue;
																case 2:
																	try
																	{
																		streamReader.Dispose();
																	}
																	catch
																	{
																	}
																	num = 1;
																	num4 = num;
																	continue;
																case 1:
																	if (!flag)
																	{
																		num = 4;
																		num4 = num;
																		continue;
																	}
																	break;
																case 4:
																	try
																	{
																		num = 5;
																		num4 = num;
																		while (true)
																		{
																			switch (num4)
																			{
																			case 5:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			default:
																				if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ai)))
																				{
																					num = 4;
																					num4 = num;
																					continue;
																				}
																				goto case 3;
																			case 4:
																				Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ai));
																				num = 3;
																				num4 = num;
																				continue;
																			case 3:
																				num = 1;
																				num4 = num;
																				continue;
																			case 1:
																				if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ak)))
																				{
																					num = 0;
																					num4 = num;
																					continue;
																				}
																				goto case 7;
																			case 0:
																				Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ak));
																				num = 7;
																				num4 = num;
																				continue;
																			case 7:
																				streamWriter2 = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_aj));
																				num = 2;
																				num4 = num;
																				continue;
																			case 2:
																				try
																				{
																					streamWriter2.WriteLine(array[1]);
																					streamWriter2.Close();
																					try
																					{
																						streamWriter2.Dispose();
																					}
																					catch
																					{
																					}
																					mainWindow.gg.Content = array[1];
																					mainWindow.eval_ip.Content = array[1];
																				}
																				finally
																				{
																					num = 2;
																					num4 = num;
																					while (true)
																					{
																						switch (num4)
																						{
																						case 2:
																							switch (0)
																							{
																							default:
																								continue;
																							case 0:
																								break;
																							}
																							goto default;
																						default:
																							if (num2 < 0)
																							{
																								num = 0;
																								num4 = num;
																								continue;
																							}
																							break;
																						case 0:
																							num = 1;
																							num4 = num;
																							continue;
																						case 1:
																							if (streamWriter2 != null)
																							{
																								num = 4;
																								num4 = num;
																								continue;
																							}
																							break;
																						case 4:
																							((IDisposable)streamWriter2).Dispose();
																							num = 3;
																							num4 = num;
																							continue;
																						case 3:
																							break;
																						}
																						break;
																					}
																				}
																				num = 6;
																				num4 = num;
																				continue;
																			case 6:
																				break;
																			}
																			break;
																		}
																	}
																	catch (Exception ex2)
																	{
																		MessageBoxWindow.Show(mainWindow, "#SUID1 : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
																		mainWindow.Close_launcher();
																	}
																	break;
																case 0:
																	num = 12;
																	num4 = num;
																	continue;
																case 12:
																	if (!(text == array[1]))
																	{
																		flag = false;
																		num = 6;
																		num4 = num;
																	}
																	else
																	{
																		num = 11;
																		num4 = num;
																	}
																	continue;
																case 7:
																	if (!string.IsNullOrEmpty(text))
																	{
																		num = 0;
																		num4 = num;
																		continue;
																	}
																	goto default;
																case 5:
																	goto end_IL_073b;
																}
																num = 5;
																num4 = num;
																continue;
																end_IL_073b:
																break;
															}
														}
														finally
														{
															num = 2;
															num4 = num;
															while (true)
															{
																switch (num4)
																{
																case 2:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	if (num2 < 0)
																	{
																		num = 0;
																		num4 = num;
																		continue;
																	}
																	break;
																case 3:
																	((IDisposable)streamReader).Dispose();
																	num = 1;
																	num4 = num;
																	continue;
																case 1:
																	break;
																case 0:
																	num = 4;
																	num4 = num;
																	continue;
																case 4:
																	if (streamReader != null)
																	{
																		num = 3;
																		num4 = num;
																		continue;
																	}
																	break;
																}
																break;
															}
														}
														goto IL_0efe;
													case 1:
														try
														{
															num = 5;
															num4 = num;
															while (true)
															{
																switch (num4)
																{
																case 5:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ai)))
																	{
																		num = 4;
																		num4 = num;
																		continue;
																	}
																	goto case 3;
																case 4:
																	Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ai));
																	num = 3;
																	num4 = num;
																	continue;
																case 0:
																	streamWriter = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_aj));
																	num = 1;
																	num4 = num;
																	continue;
																case 2:
																	Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ak));
																	num = 0;
																	num4 = num;
																	continue;
																case 1:
																	try
																	{
																		streamWriter.WriteLine(array[1]);
																		streamWriter.Close();
																		try
																		{
																			streamWriter.Dispose();
																		}
																		catch
																		{
																		}
																		mainWindow.gg.Content = array[1];
																		mainWindow.eval_ip.Content = array[1];
																	}
																	finally
																	{
																		num = 2;
																		num4 = num;
																		while (true)
																		{
																			switch (num4)
																			{
																			case 2:
																				switch (0)
																				{
																				default:
																					continue;
																				case 0:
																					break;
																				}
																				goto default;
																			default:
																				if (num2 < 0)
																				{
																					num = 0;
																					num4 = num;
																					continue;
																				}
																				break;
																			case 3:
																				((IDisposable)streamWriter).Dispose();
																				num = 1;
																				num4 = num;
																				continue;
																			case 1:
																				break;
																			case 0:
																				num = 4;
																				num4 = num;
																				continue;
																			case 4:
																				if (streamWriter != null)
																				{
																					num = 3;
																					num4 = num;
																					continue;
																				}
																				break;
																			}
																			break;
																		}
																	}
																	num = 6;
																	num4 = num;
																	continue;
																case 3:
																	num = 7;
																	num4 = num;
																	continue;
																case 7:
																	if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ak)))
																	{
																		num = 2;
																		num4 = num;
																		continue;
																	}
																	goto case 0;
																case 6:
																	break;
																}
																break;
															}
														}
														catch (Exception ex)
														{
															MessageBoxWindow.Show(mainWindow, "#SUID2 : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
															mainWindow.Close_launcher();
														}
														goto IL_0efe;
													case 0:
														flag = false;
														streamReader = new StreamReader(path);
														num = 4;
														num4 = num;
														continue;
													case 3:
														goto end_IL_0660;
														IL_0efe:
														num = 3;
														num4 = num;
														continue;
													}
													goto case 0;
													continue;
													end_IL_0660:
													break;
												}
												break;
											case 0:
												eval_a(new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_ai) + "\\"));
												text = string.Empty;
												path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), mainWindow.m_eval_aj);
												num = 2;
												num4 = num;
												goto default;
											}
										}
										catch (Exception ex3)
										{
											MessageBoxWindow.Show(mainWindow, "#SUID3 : " + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											mainWindow.Close_launcher();
										}
										goto IL_046d;
									case 31:
										awaiter = Task.Delay(1000).GetAwaiter();
										num = 24;
										num4 = num;
										continue;
									case 24:
										if (!awaiter.IsCompleted)
										{
											num = 33;
											num4 = num;
											continue;
										}
										goto case 28;
									case 18:
										mainWindow.UidToPlayer = array[1];
										num = 12;
										num4 = num;
										continue;
									case 9:
									case 17:
										mainWindow.Close_launcher();
										num = 0;
										num4 = num;
										continue;
									case 25:
										if (array[0] == "UIDEXIST")
										{
											num = 3;
											num4 = num;
											continue;
										}
										goto IL_046d;
									case 19:
										num = 5;
										num4 = num;
										continue;
									case 5:
										if (array[0] == "UIDWROK")
										{
											num = 15;
											num4 = num;
											continue;
										}
										break;
									case 33:
										num2 = (eval_a = 0);
										eval_e = awaiter;
										eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
										num = 32;
										num4 = num;
										continue;
									case 32:
										goto end_IL_0211;
									case 15:
										mainWindow.dr.Close();
										mainWindow.eval_dq.Close();
										num = 16;
										num4 = num;
										continue;
									case 26:
										mainWindow.dr.Close();
										mainWindow.eval_dq.Close();
										num = 30;
										num4 = num;
										continue;
									case 3:
										mainWindow.dr.Close();
										mainWindow.eval_dq.Close();
										num = 22;
										num4 = num;
										continue;
									case 22:
										if (array[3] == mainWindow.MC)
										{
											num = 18;
											num4 = num;
											continue;
										}
										goto IL_046d;
									case 28:
										awaiter.GetResult();
										mainWindow.eval_dq = new TcpClient(mainWindow.m_eval_q, mainWindow.m_eval_v);
										array2 = Encoding.UTF8.GetBytes("UIDEXIT," + mainWindow.MC + "," + mainWindow.UID_SC + "," + mainWindow.GUID_SC);
										mainWindow.dr = mainWindow.eval_dq.GetStream();
										num = 6;
										num4 = num;
										continue;
									case 6:
										if (mainWindow.eval_dq.Connected)
										{
											num = 34;
											num4 = num;
											continue;
										}
										goto case 27;
									case 4:
										MessageBoxWindow.Show(mainWindow, "Произошла ошибка UG : " + array[1], name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 9;
										num4 = num;
										continue;
									case 20:
										mainWindow.dr.Close();
										mainWindow.eval_dq.Close();
										num = 11;
										num4 = num;
										continue;
									case 11:
										if (!(Langve == "RU"))
										{
											MessageBoxWindow.Show(mainWindow, "An error has occurred UG : " + array[1], name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											num = 17;
											num4 = num;
										}
										else
										{
											num = 4;
											num4 = num;
										}
										continue;
									case 7:
										mainWindow.dr.Close();
										mainWindow.eval_dq.Close();
										num = 19;
										num4 = num;
										continue;
									case 16:
										break;
									case 2:
										goto IL_1404;
										IL_0fe9:
										num = 25;
										num4 = num;
										continue;
										IL_046d:
										num = 29;
										num4 = num;
										continue;
									}
									num = 2;
									num4 = num;
									continue;
									end_IL_0211:
									break;
								}
							}
							catch
							{
								this.m_eval_d = 1;
								goto IL_1404;
							}
							goto end_IL_006e;
						case 8:
							num2 = (eval_a = 1);
							eval_e = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 14;
							num4 = num;
							continue;
						case 14:
							goto end_IL_006e;
						case 3:
							awaiter.GetResult();
							num = 9;
							num4 = num;
							continue;
						case 7:
							if (num5 == 1)
							{
								num = 13;
								num4 = num;
								continue;
							}
							goto case 9;
						case 4:
							num = 1;
							num4 = num;
							continue;
						case 1:
							if (num2 == 1)
							{
								awaiter = eval_e;
								eval_e = default(TaskAwaiter);
								num2 = (eval_a = -1);
								break;
							}
							num = 5;
							num4 = num;
							continue;
						case 5:
							_ = string.Empty;
							this.m_eval_d = 0;
							num = 10;
							num4 = num;
							continue;
						case 13:
							mainWindow.eval_ee = false;
							num = 15;
							num4 = num;
							continue;
						case 15:
							try
							{
								mainWindow.dr.Close();
							}
							catch
							{
							}
							num = 2;
							num4 = num;
							continue;
						case 9:
							{
								num = 11;
								num4 = num;
								continue;
							}
							IL_1404:
							num5 = this.m_eval_d;
							num = 7;
							num4 = num;
							continue;
						}
						goto case false;
						continue;
						end_IL_00d7:
						break;
					}
					break;
				}
				goto IL_0056;
				end_IL_006e:;
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
			}
			goto IL_1546;
			IL_1546:
			num = 0;
			_ = num;
			return;
			IL_0056:
			eval_a = -2;
			eval_b.SetResult();
			goto IL_1546;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 20245;
			short num2 = num;
			num = 20245;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_at : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 10;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				string text3 = default(string);
				string text4 = default(string);
				string text2 = default(string);
				string text5 = default(string);
				string text6 = default(string);
				string text7 = default(string);
				string text8 = default(string);
				string text9 = default(string);
				string text10 = default(string);
				string text = default(string);
				string text11 = default(string);
				string arguments = default(string);
				bool? isChecked = default(bool?);
				bool flag2 = default(bool);
				bool flag = default(bool);
				string text12 = default(string);
				string item = default(string);
				string text13 = default(string);
				StreamReader streamReader = default(StreamReader);
				StreamWriter streamWriter = default(StreamWriter);
				FileInfo fileInfo = default(FileInfo);
				int num6 = default(int);
				int num5 = default(int);
				FileInfo[] files = default(FileInfo[]);
				while (true)
				{
					switch (num3)
					{
					case 2:
						break;
					case 10:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 5;
							num3 = num;
							continue;
						}
						awaiter = this.m_eval_d;
						this.m_eval_d = default(TaskAwaiter);
						num2 = (eval_a = -1);
						num = 9;
						num3 = num;
						continue;
					case 3:
						try
						{
							num = 7;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 7:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 != 1)
									{
										num = 18;
										num3 = num;
										continue;
									}
									awaiter = this.m_eval_d;
									this.m_eval_d = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 56;
									num3 = num;
									continue;
								case 25:
									text3 = text4 + text2 + text5 + text6 + text7 + text8 + text9 + text10 + text + text11;
									num = 62;
									num3 = num;
									continue;
								case 18:
								{
									DirectoryInfo a_ = new DirectoryInfo(mainWindow.Directory_game + "\\");
									mainWindow.eval_b(a_);
									arguments = "";
									text3 = "";
									text4 = "";
									text2 = "";
									text5 = "";
									text6 = "";
									text7 = "";
									text8 = "";
									text9 = "";
									text10 = "";
									text = "";
									text11 = "";
									isChecked = mainWindow.eval_g5.IsChecked;
									flag2 = true;
									num = 2;
									num3 = num;
									continue;
								}
								case 2:
									if (isChecked == flag2)
									{
										num = 50;
										num3 = num;
										continue;
									}
									goto case 4;
								case 3:
									text7 = " -high";
									num = 8;
									num3 = num;
									continue;
								case 41:
									text6 = " -skipIntro";
									num = 53;
									num3 = num;
									continue;
								case 40:
									text8 = " -noLogs";
									num = 6;
									num3 = num;
									continue;
								case 13:
									awaiter = mainWindow.eval_bt().GetAwaiter();
									num = 10;
									num3 = num;
									continue;
								case 10:
									if (!awaiter.IsCompleted)
									{
										num = 43;
										num3 = num;
										continue;
									}
									goto case 56;
								case 61:
									num = 57;
									num3 = num;
									continue;
								case 57:
									if (Langve == "RU")
									{
										num = 12;
										num3 = num;
									}
									else
									{
										mainWindow.Norificons("The game is loading ...");
										num = 60;
										num3 = num;
									}
									continue;
								case 9:
									num = 17;
									num3 = num;
									continue;
								case 17:
									if (mainWindow.eval_g1.Content.ToString() != "---")
									{
										num = 31;
										num3 = num;
										continue;
									}
									goto case 25;
								case 31:
									text = " -exThreads=" + mainWindow.eval_g1.Content.ToString();
									num = 25;
									num3 = num;
									continue;
								case 55:
									num = 54;
									num3 = num;
									continue;
								case 54:
									if (!flag)
									{
										num = 37;
										num3 = num;
										continue;
									}
									goto IL_173c;
								case 38:
									num = 28;
									num3 = num;
									continue;
								case 28:
									if (mainWindow.g0.Content.ToString() != "---")
									{
										num = 44;
										num3 = num;
										continue;
									}
									goto case 36;
								case 8:
									isChecked = mainWindow.eval_ha.IsChecked;
									flag2 = true;
									num = 1;
									num3 = num;
									continue;
								case 1:
									if (isChecked == flag2)
									{
										num = 40;
										num3 = num;
										continue;
									}
									goto case 6;
								case 20:
									text11 = " -nocharmenu";
									num = 38;
									num3 = num;
									continue;
								case 6:
									isChecked = mainWindow.eval_hj.IsChecked;
									flag2 = true;
									num = 22;
									num3 = num;
									continue;
								case 22:
									if (isChecked == flag2)
									{
										num = 20;
										num3 = num;
										continue;
									}
									goto case 38;
								case 44:
									text10 = " -cpuCount=" + mainWindow.g0.Content.ToString();
									num = 36;
									num3 = num;
									continue;
								case 29:
									arguments = "0 2 -name=" + Name_players_local + " " + Mod_in + " -connect=" + Connectip + " -port=" + Connectport + text3;
									Process.Start(new ProcessStartInfo
									{
										FileName = mainWindow.Directory_game + "\\" + mainWindow.m_eval_y + ".exe",
										Arguments = arguments,
										WorkingDirectory = mainWindow.Directory_game + "\\"
									});
									num = 42;
									num3 = num;
									continue;
								case 50:
									text4 = " -noPause";
									num = 4;
									num3 = num;
									continue;
								case 35:
									mainWindow.eval_bv();
									num = 5;
									num3 = num;
									continue;
								case 21:
									text9 = " -maxMem=" + mainWindow.gz.Content.ToString();
									num = 9;
									num3 = num;
									continue;
								case 11:
									num = 51;
									num3 = num;
									continue;
								case 51:
									if (!flag)
									{
										num = 61;
										num3 = num;
										continue;
									}
									break;
								case 62:
									try
									{
										switch (0)
										{
										default:
											while (true)
											{
												switch (num3)
												{
												case 8:
													if (File.Exists(text12 + "chars.DayZProfile"))
													{
														num = 6;
														num3 = num;
														continue;
													}
													goto case 1;
												case 10:
													try
													{
														switch (0)
														{
														default:
															while (true)
															{
																switch (num3)
																{
																case 27:
																{
																	isChecked = mainWindow.eval_hk.IsChecked;
																	flag2 = false;
																	num = 13331;
																	short num4 = num;
																	num = 13331;
																	switch (num4 == num)
																	{
																	default:
																		num = 0;
																		if (num != 0)
																		{
																		}
																		num = 25;
																		num3 = num;
																		continue;
																	case false:
																	case true:
																		break;
																	}
																	goto case 15;
																}
																case 25:
																	if (isChecked == flag2)
																	{
																		num = 3;
																		num3 = num;
																		continue;
																	}
																	goto case 23;
																case 14:
																	item = text13.Split('=')[0].ToString().Replace(" ", string.Empty) + "=0;";
																	num = 23;
																	num3 = num;
																	continue;
																case 12:
																	if (!GameLicense)
																	{
																		num = 27;
																		num3 = num;
																		continue;
																	}
																	goto case 4;
																case 23:
																	isChecked = mainWindow.eval_hk.IsChecked;
																	flag2 = true;
																	num = 8;
																	num3 = num;
																	continue;
																case 8:
																	if (isChecked == flag2)
																	{
																		num = 7;
																		num3 = num;
																		continue;
																	}
																	goto case 4;
																case 17:
																	num = 2;
																	num3 = num;
																	continue;
																case 2:
																	if (mainWindow.eval_hd.Content.ToString() != "---")
																	{
																		num = 10;
																		num3 = num;
																		continue;
																	}
																	item = text13.Split('=')[0].ToString().Replace(" ", string.Empty) + "=2200;";
																	num = 18;
																	num3 = num;
																	continue;
																case 26:
																	num = 11;
																	num3 = num;
																	continue;
																case 11:
																	if (mainWindow.eval_hh.Content.ToString() != "---")
																	{
																		num = 28;
																		num3 = num;
																		continue;
																	}
																	item = text13.Split('=')[0].ToString().Replace(" ", string.Empty) + "=1400.8242;";
																	num = 5;
																	num3 = num;
																	continue;
																case 28:
																	item = text13.Split('=')[0].ToString().Replace(" ", string.Empty) + "=" + mainWindow.eval_hh.Content.ToString() + ".8242;";
																	num = 9;
																	num3 = num;
																	continue;
																case 13:
																case 18:
																	num = 6;
																	num3 = num;
																	continue;
																case 6:
																	if (text13.Split('=')[0].ToString().Replace(" ", string.Empty) == "preferredObjectViewDistance")
																	{
																		num = 26;
																		num3 = num;
																		continue;
																	}
																	goto case 5;
																case 19:
																	item = text13.Split('=')[0].ToString().Replace(" ", string.Empty) + "=1;";
																	num = 4;
																	num3 = num;
																	continue;
																case 10:
																	item = text13.Split('=')[0].ToString().Replace(" ", string.Empty) + "=" + mainWindow.eval_hd.Content.ToString() + ";";
																	num = 13;
																	num3 = num;
																	continue;
																case 5:
																case 9:
																	mainWindow.eval_da.Add(item);
																	num = 16;
																	num3 = num;
																	continue;
																case 3:
																	num = 22;
																	num3 = num;
																	continue;
																case 22:
																	if (text13.Split('=')[0].ToString().Replace(" ", string.Empty) == "battleyeLicense")
																	{
																		num = 14;
																		num3 = num;
																		continue;
																	}
																	goto case 23;
																case 7:
																	num = 0;
																	num3 = num;
																	continue;
																case 0:
																	if (text13.Split('=')[0].ToString().Replace(" ", string.Empty) == "battleyeLicense")
																	{
																		num = 19;
																		num3 = num;
																		continue;
																	}
																	goto case 4;
																case 4:
																	num = 21;
																	num3 = num;
																	continue;
																case 21:
																	if (text13.Split('=')[0].ToString().Replace(" ", string.Empty) == "viewDistance")
																	{
																		num = 17;
																		num3 = num;
																		continue;
																	}
																	goto case 13;
																case 16:
																case 24:
																	num = 15;
																	num3 = num;
																	continue;
																case 15:
																	if ((text13 = streamReader.ReadLine()) != null)
																	{
																		item = text13;
																		num = 12;
																		num3 = num;
																	}
																	else
																	{
																		num = 20;
																		num3 = num;
																	}
																	continue;
																case 20:
																	streamReader.Dispose();
																	streamReader.Close();
																	num = 1;
																	num3 = num;
																	continue;
																case 1:
																	goto end_IL_08a7;
																}
																goto case 0;
																continue;
																end_IL_08a7:
																break;
															}
															break;
														case 0:
															mainWindow.eval_da.Clear();
															text13 = string.Empty;
															num = 24;
															num3 = num;
															goto default;
														}
													}
													finally
													{
														num = 3;
														num3 = num;
														while (true)
														{
															switch (num3)
															{
															case 3:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															default:
																if (num2 < 0)
																{
																	num = 4;
																	num3 = num;
																	continue;
																}
																break;
															case 4:
																num = 0;
																num3 = num;
																continue;
															case 0:
																if (streamReader != null)
																{
																	num = 1;
																	num3 = num;
																	continue;
																}
																break;
															case 1:
																((IDisposable)streamReader).Dispose();
																num = 2;
																num3 = num;
																continue;
															case 2:
																break;
															}
															break;
														}
													}
													streamWriter = new StreamWriter(fileInfo.FullName);
													num = 4;
													num3 = num;
													continue;
												case 3:
													streamReader = new StreamReader(fileInfo.FullName);
													num = 10;
													num3 = num;
													continue;
												case 4:
													try
													{
														switch (0)
														{
														default:
															while (true)
															{
																switch (num3)
																{
																case 1:
																case 3:
																	num = 4;
																	num3 = num;
																	continue;
																case 4:
																	if (num6 >= mainWindow.eval_da.Count)
																	{
																		num = 0;
																		num3 = num;
																		continue;
																	}
																	streamWriter.WriteLine(mainWindow.eval_da[num6]);
																	num6++;
																	num = 1;
																	num3 = num;
																	continue;
																case 0:
																	streamWriter.Dispose();
																	streamWriter.Close();
																	num = 2;
																	num3 = num;
																	continue;
																case 2:
																	goto end_IL_107c;
																}
																goto case 0;
																continue;
																end_IL_107c:
																break;
															}
															break;
														case 0:
															num6 = 0;
															num = 3;
															num3 = num;
															goto default;
														}
													}
													finally
													{
														num = 3;
														num3 = num;
														while (true)
														{
															switch (num3)
															{
															case 3:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															default:
																if (num2 < 0)
																{
																	num = 4;
																	num3 = num;
																	continue;
																}
																break;
															case 2:
																((IDisposable)streamWriter).Dispose();
																num = 0;
																num3 = num;
																continue;
															case 0:
																break;
															case 4:
																num = 1;
																num3 = num;
																continue;
															case 1:
																if (streamWriter != null)
																{
																	num = 2;
																	num3 = num;
																	continue;
																}
																break;
															}
															break;
														}
													}
													goto IL_12ba;
												case 2:
												case 7:
													num = 0;
													num3 = num;
													continue;
												case 0:
													if (num5 >= files.Length)
													{
														num = 11;
														num3 = num;
													}
													else
													{
														fileInfo = files[num5];
														num = 9;
														num3 = num;
													}
													continue;
												case 9:
													if (fileInfo.Name.Contains("settings.DayZProfile"))
													{
														num = 3;
														num3 = num;
														continue;
													}
													goto IL_12ba;
												case 1:
													files = new DirectoryInfo(text12).GetFiles("*.DayZProfile", SearchOption.AllDirectories);
													num5 = 0;
													num = 2;
													num3 = num;
													continue;
												case 6:
													File.Delete(text12 + "chars.DayZProfile");
													num = 1;
													num3 = num;
													continue;
												case 11:
													num = 5;
													num3 = num;
													continue;
												case 5:
													goto end_IL_080c;
													IL_12ba:
													num5++;
													num = 7;
													num3 = num;
													continue;
												}
												goto case 0;
												continue;
												end_IL_080c:
												break;
											}
											break;
										case 0:
											text12 = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\DayZ\\";
											num = 8;
											num3 = num;
											goto default;
										}
									}
									catch
									{
									}
									isChecked = mainWindow.eval_hz.IsChecked;
									flag2 = true;
									num = 34;
									num3 = num;
									continue;
								case 47:
								{
									mainWindow.eval_in.Visibility = Visibility.Visible;
									DoubleAnimation animation = new DoubleAnimation
									{
										From = 0.0,
										To = 1.0,
										Duration = new Duration(TimeSpan.FromSeconds(mainWindow.m_eval_ah)),
										AutoReverse = false
									};
									mainWindow.eval_in.BeginAnimation(UIElement.OpacityProperty, animation);
									num = 13;
									num3 = num;
									continue;
								}
								case 45:
									text5 = " -nosplash";
									num = 19;
									num3 = num;
									continue;
								case 4:
									isChecked = mainWindow.eval_g8.IsChecked;
									flag2 = true;
									num = 14;
									num3 = num;
									continue;
								case 14:
									if (isChecked == flag2)
									{
										num = 15;
										num3 = num;
										continue;
									}
									goto case 33;
								case 36:
									num = 39;
									num3 = num;
									continue;
								case 39:
									if (mainWindow.gz.Content.ToString() != "---")
									{
										num = 21;
										num3 = num;
										continue;
									}
									goto case 9;
								case 19:
									isChecked = mainWindow.eval_g6.IsChecked;
									flag2 = true;
									num = 59;
									num3 = num;
									continue;
								case 59:
									if (isChecked == flag2)
									{
										num = 41;
										num3 = num;
										continue;
									}
									goto case 53;
								case 12:
									mainWindow.Norificons("Игра загружается ...");
									num = 27;
									num3 = num;
									continue;
								case 33:
									isChecked = mainWindow.eval_g7.IsChecked;
									flag2 = true;
									num = 48;
									num3 = num;
									continue;
								case 48:
									if (isChecked == flag2)
									{
										num = 45;
										num3 = num;
										continue;
									}
									goto case 19;
								case 30:
									try
									{
										Process.Start(new ProcessStartInfo
										{
											FileName = mainWindow.Directory_game + "\\" + mainWindow.m_eval_x + ".exe",
											Arguments = arguments,
											WorkingDirectory = mainWindow.Directory_game + "\\"
										});
									}
									catch (Exception ex)
									{
										mainWindow.eval_bw();
										mainWindow.m_eval_b9.Stop();
										mainWindow.m_eval_cb.Stop();
										if (!(Langve == "RU"))
										{
											MessageBoxWindow.Show(mainWindow, "Run error - " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										else
										{
											MessageBoxWindow.Show(mainWindow, "Ошибка запуска - " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
									}
									goto IL_173c;
								case 34:
									if (isChecked == flag2)
									{
										num = 35;
										num3 = num;
										continue;
									}
									goto case 5;
								case 43:
									num2 = (eval_a = 1);
									this.m_eval_d = awaiter;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
									num = 0;
									num3 = num;
									continue;
								case 0:
									goto end_IL_00d9;
								case 58:
									if (!mainWindow.eval_c7)
									{
										num = 11;
										num3 = num;
										continue;
									}
									break;
								case 27:
								case 60:
									mainWindow.eo.Stop();
									mainWindow.m_eval_b9.Stop();
									mainWindow.m_eval_cb.Stop();
									mainWindow.eval_cc = true;
									mainWindow.m_eval_b9.Start();
									mainWindow.m_eval_cb.Start();
									mainWindow.eo.Start();
									num = 46;
									num3 = num;
									continue;
								case 46:
									if (mainWindow.eval_in.Visibility == Visibility.Hidden)
									{
										num = 47;
										num3 = num;
										continue;
									}
									goto case 13;
								case 53:
									isChecked = mainWindow.eval_g9.IsChecked;
									flag2 = true;
									num = 49;
									num3 = num;
									continue;
								case 49:
									if (isChecked == flag2)
									{
										num = 3;
										num3 = num;
										continue;
									}
									goto case 8;
								case 26:
									num = 16;
									num3 = num;
									continue;
								case 16:
									if (!mainWindow.eval_c7)
									{
										num = 55;
										num3 = num;
										continue;
									}
									goto IL_173c;
								case 5:
									num = 23;
									num3 = num;
									continue;
								case 23:
									if (GameLicense)
									{
										num = 29;
										num3 = num;
										continue;
									}
									goto case 42;
								case 37:
									arguments = "0 2 -name=" + Name_players_local + " " + Mod_in + " -connect=" + Connectip + " -port=" + Connectport + text3;
									num = 30;
									num3 = num;
									continue;
								case 15:
									text2 = " -winxp";
									num = 33;
									num3 = num;
									continue;
								case 56:
									awaiter.GetResult();
									mainWindow.m_eval_ca.Start();
									mainWindow.eval_dw.Stop();
									mainWindow.eval_dw.Start();
									mainWindow.eval_ex.Start();
									num = 24;
									num3 = num;
									continue;
								case 42:
									num = 52;
									num3 = num;
									continue;
								case 52:
									if (!GameLicense)
									{
										num = 26;
										num3 = num;
										continue;
									}
									goto IL_173c;
								case 24:
									break;
								case 32:
									goto IL_1c0a;
									IL_173c:
									num = 58;
									num3 = num;
									continue;
								}
								num = 32;
								num3 = num;
								continue;
								end_IL_00d9:
								break;
							}
						}
						catch (Exception ex2)
						{
							mainWindow.eval_eh.Stop();
							mainWindow.eval_bw();
							mainWindow.eo.Stop();
							mainWindow.m_eval_b9.Stop();
							mainWindow.m_eval_cb.Stop();
							mainWindow.eval_k(ex2.Message);
							if (!(Langve == "RU"))
							{
								MessageBoxWindow.Show(mainWindow, "Run error - Try to launch the game again #4.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							}
							else
							{
								MessageBoxWindow.Show(mainWindow, "Ошибка запуска - Повторите попытку запуска игры #4.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							}
							goto IL_1c0a;
						}
						goto end_IL_0046;
					case 5:
						num = 1;
						num3 = num;
						continue;
					case 1:
						if (num2 != 1)
						{
							num = 8;
							num3 = num;
							continue;
						}
						goto case 4;
					case 4:
						num = 3;
						num3 = num;
						continue;
					case 8:
						awaiter = Task.Delay(2000).GetAwaiter();
						num = 0;
						num3 = num;
						continue;
					case 0:
						if (!awaiter.IsCompleted)
						{
							num = 6;
							num3 = num;
							continue;
						}
						goto case 9;
					case 9:
						awaiter.GetResult();
						mainWindow.eval_c7 = false;
						flag = false;
						mainWindow.eval_eh.Start();
						mainWindow.c9.Stop();
						num = 4;
						num3 = num;
						continue;
					case 6:
						num2 = (eval_a = 0);
						this.m_eval_d = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						num = 7;
						num3 = num;
						continue;
					case 7:
						goto end_IL_0046;
						IL_1c0a:
						mainWindow.eval_fc.HideBalloonTip();
						num = 2;
						num3 = num;
						continue;
					}
					break;
				}
				goto IL_002e;
				end_IL_0046:;
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
			}
			goto IL_1c4b;
			IL_1c4b:
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			return;
			IL_002e:
			eval_a = -2;
			eval_b.SetResult();
			goto IL_1c4b;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 21903;
			short num2 = num;
			num = 21903;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_au : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 4;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				while (true)
				{
					switch (num3)
					{
					case 3:
						goto end_IL_008b;
					case 4:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 6;
							num3 = num;
							continue;
						}
						awaiter = this.m_eval_d;
						this.m_eval_d = default(TaskAwaiter);
						num2 = (eval_a = -1);
						num = 2;
						num3 = num;
						continue;
					case 6:
						awaiter = mainWindow.eval_ca().GetAwaiter();
						num = 5;
						num3 = num;
						continue;
					case 5:
						if (!awaiter.IsCompleted)
						{
							num = 1;
							num3 = num;
							continue;
						}
						goto case 2;
					case 1:
						num2 = (eval_a = 0);
						this.m_eval_d = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						break;
					case 0:
						goto end_IL_006c;
					case 2:
					{
						awaiter.GetResult();
						num = 13457;
						short num4 = num;
						num = 13457;
						switch (num4 == num)
						{
						case false:
						case true:
							break;
						default:
							num = 0;
							if (num != 0)
							{
							}
							num = 3;
							num3 = num;
							continue;
						}
						break;
					}
					}
					num = 0;
					num3 = num;
					continue;
					end_IL_008b:
					break;
				}
				goto IL_002e;
				end_IL_006c:;
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
			}
			goto IL_021f;
			IL_021f:
			num = 0;
			_ = num;
			return;
			IL_002e:
			num = 1;
			if (num != 0)
			{
			}
			eval_a = -2;
			eval_b.SetResult();
			goto IL_021f;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 14309;
			short num2 = num;
			num = 14309;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_av : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 6;
				int num3 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				bool flag = default(bool);
				int length = default(int);
				char[] array2 = default(char[]);
				int num6 = default(int);
				int num5 = default(int);
				string[] eval_ao = default(string[]);
				int num4 = default(int);
				char c = default(char);
				string text = default(string);
				char[] array = default(char[]);
				Process[] processesByName = default(Process[]);
				while (true)
				{
					switch (num3)
					{
					case 6:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num2 != 0)
						{
							num = 5;
							num3 = num;
							continue;
						}
						goto case 2;
					case 4:
						try
						{
							num = 3;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 3:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (num2 != 0)
									{
										num = 62;
										num3 = num;
										continue;
									}
									awaiter = this.m_eval_d;
									this.m_eval_d = default(TaskAwaiter);
									num2 = (eval_a = -1);
									num = 29;
									num3 = num;
									continue;
								case 62:
									flag = true;
									num = 28;
									num3 = num;
									continue;
								case 28:
									if (string.IsNullOrEmpty(mainWindow.eval_hw.Text.ToString()))
									{
										num = 11;
										num3 = num;
									}
									else
									{
										length = mainWindow.eval_hw.Text.Length;
										num = 16;
										num3 = num;
									}
									continue;
								case 10:
									mainWindow.eval_bw();
									num = 47;
									num3 = num;
									continue;
								case 47:
									if (!(Langve == "RU"))
									{
										MessageBoxWindow.Show(mainWindow, "Your nickname contains a prohibited number of characters in nickel, a minimum number of 4 characters is the maximum 20", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 56;
										num3 = num;
									}
									else
									{
										num = 23;
										num3 = num;
									}
									continue;
								case 33:
								case 48:
									mainWindow.BoxServer.IsEnabled = true;
									num = 45;
									num3 = num;
									continue;
								case 24:
									if (!(Connectip == ""))
									{
										num = 46;
										num3 = num;
										continue;
									}
									goto case 22;
								case 64:
									MessageBoxWindow.Show(mainWindow, "Русские буквы запрещены!Пишите на английском", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									num = 54;
									num3 = num;
									continue;
								case 9:
									num = 39;
									num3 = num;
									continue;
								case 39:
									if (!(Langve == "RU"))
									{
										MessageBoxWindow.Show(mainWindow, "Russian letters are not allowed! Write in English", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 36;
										num3 = num;
									}
									else
									{
										num = 64;
										num3 = num;
									}
									continue;
								case 55:
									num = 59;
									num3 = num;
									continue;
								case 59:
									if (flag)
									{
										mainWindow.eval_hw.Text = mainWindow.eval_hw.Text.Replace(" ", "");
										num = 24;
										num3 = num;
									}
									else
									{
										num = 61;
										num3 = num;
									}
									continue;
								case 23:
									MessageBoxWindow.Show(mainWindow, "Ваш ник содержит запрещенное количество символов в нике,минимальное количество 4 максимальное 20", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									num = 27;
									num3 = num;
									continue;
								case 22:
									mainWindow.eval_bw();
									num = 52;
									num3 = num;
									continue;
								case 52:
									if (Langve == "RU")
									{
										num = 2;
										num3 = num;
									}
									else
									{
										MessageBoxWindow.Show(mainWindow, "An error occurred, please try again.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 48;
										num3 = num;
									}
									continue;
								case 49:
									if (Convert.ToInt32(array2[num6]) <= 128)
									{
										num6++;
										num = 34;
										num3 = num;
									}
									else
									{
										num = 43;
										num3 = num;
									}
									continue;
								case 43:
								{
									num = -31439;
									short num7 = num;
									num = -31439;
									switch (num7 == num)
									{
									default:
										num = 0;
										if (num != 0)
										{
										}
										flag = false;
										num = 0;
										num3 = num;
										continue;
									case false:
									case true:
										break;
									}
									goto IL_09bb;
								}
								case 27:
								case 56:
									mainWindow.BoxServer.IsEnabled = true;
									num = 40;
									num3 = num;
									continue;
								case 13:
									num5++;
									num = 32;
									num3 = num;
									continue;
								case 11:
									mainWindow.eval_bw();
									num = 19;
									num3 = num;
									continue;
								case 19:
									if (Langve == "RU")
									{
										num = 50;
										num3 = num;
									}
									else
									{
										MessageBoxWindow.Show(mainWindow, "Enter your nickname!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 37;
										num3 = num;
									}
									continue;
								case 60:
									flag = false;
									num = 13;
									num3 = num;
									continue;
								case 36:
								case 54:
									mainWindow.BoxServer.IsEnabled = true;
									num = 57;
									num3 = num;
									continue;
								case 1:
								case 30:
									mainWindow.BoxServer.IsEnabled = true;
									num = 58;
									num3 = num;
									continue;
								case 16:
									if (length >= 4)
									{
										num = 12;
										num3 = num;
										continue;
									}
									goto case 10;
								case 50:
									MessageBoxWindow.Show(mainWindow, "Укажите игровой ник!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									num = 35;
									num3 = num;
									continue;
								case 15:
									num2 = (eval_a = 0);
									this.m_eval_d = awaiter;
									eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
									num = 18;
									num3 = num;
									continue;
								case 18:
									break;
								case 0:
								case 7:
									num = 63;
									num3 = num;
									continue;
								case 63:
									if (flag)
									{
										flag = true;
										eval_ao = mainWindow.m_eval_ao;
										num4 = 0;
										num = 44;
										num3 = num;
									}
									else
									{
										num = 9;
										num3 = num;
									}
									continue;
								case 12:
									num = 14;
									num3 = num;
									continue;
								case 14:
									if (length <= 21)
									{
										array2 = mainWindow.eval_hw.Text.ToCharArray();
										num6 = 0;
										num = 4;
										num3 = num;
									}
									else
									{
										num = 10;
										num3 = num;
									}
									continue;
								case 46:
									num = 53;
									num3 = num;
									continue;
								case 53:
									if (Connectport == "")
									{
										num = 22;
										num3 = num;
										continue;
									}
									Name_players_local = mainWindow.eval_hw.Text;
									awaiter = mainWindow.eval_bx().GetAwaiter();
									num = 20;
									num3 = num;
									continue;
								case 35:
								case 37:
									mainWindow.eval_by();
									mainWindow.BoxServer.IsEnabled = true;
									num = 26;
									num3 = num;
									continue;
								case 51:
									MessageBoxWindow.Show(mainWindow, "Ваш ник содержит запрещенные символы \"" + mainWindow.eval_hw.Text + "\",такие как - \",\",',\\,/,+,~,(,),$,%,<,>,&,?,#,!,?,^,:,*,@,№", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									num = 1;
									num3 = num;
									continue;
								case 8:
									if (c.ToString() == text)
									{
										num = 60;
										num3 = num;
										continue;
									}
									goto case 13;
								case 20:
									if (!awaiter.IsCompleted)
									{
										num = 15;
										num3 = num;
										continue;
									}
									goto case 29;
								case 2:
									MessageBoxWindow.Show(mainWindow, "Произошла ошибка,повторите попытку.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									num = 33;
									num3 = num;
									continue;
								case 29:
									awaiter.GetResult();
									num = 41;
									num3 = num;
									continue;
								case 4:
								case 34:
									num = 38;
									num3 = num;
									continue;
								case 38:
									if (num6 < array2.Length)
									{
										num = 49;
										num3 = num;
									}
									else
									{
										num = 7;
										num3 = num;
									}
									continue;
								case 31:
								case 44:
									num = 25;
									num3 = num;
									continue;
								case 25:
									if (num4 < eval_ao.Length)
									{
										text = eval_ao[num4];
										array = mainWindow.eval_hw.Text.ToCharArray();
										num5 = 0;
										num = 5;
										num3 = num;
									}
									else
									{
										num = 55;
										num3 = num;
									}
									continue;
								case 5:
								case 32:
									num = 42;
									num3 = num;
									continue;
								case 42:
									if (num5 >= array.Length)
									{
										num = 21;
										num3 = num;
										continue;
									}
									goto IL_09bb;
								case 21:
									num4++;
									num = 31;
									num3 = num;
									continue;
								case 61:
									mainWindow.eval_bw();
									num = 17;
									num3 = num;
									continue;
								case 17:
									if (!(Langve == "RU"))
									{
										MessageBoxWindow.Show(mainWindow, "Your nickname contains illegal characters \"" + mainWindow.eval_hw.Text + "\",such as -  \",\",',\\,/,+,~,(,),$,%,<,>,&,?,#,!,?,^,:,*,@,№", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 30;
										num3 = num;
									}
									else
									{
										num = 51;
										num3 = num;
									}
									continue;
								case 26:
								case 40:
								case 41:
								case 45:
								case 57:
								case 58:
									num = 6;
									num3 = num;
									continue;
								case 6:
									goto end_IL_0066;
									IL_09bb:
									c = array[num5];
									num = 8;
									num3 = num;
									continue;
								}
								break;
							}
						}
						catch
						{
							break;
						}
						goto IL_0db7;
					case 5:
						mainWindow.eval_im.Content = "";
						mainWindow.eval_cc = false;
						processesByName = Process.GetProcessesByName(mainWindow.m_eval_x);
						num4 = 0;
						num = 8;
						num3 = num;
						continue;
					case 2:
						num = 4;
						num3 = num;
						continue;
					case 0:
					case 8:
						num = 7;
						num3 = num;
						continue;
					case 7:
						if (num4 >= processesByName.Length)
						{
							num = 3;
							num3 = num;
							continue;
						}
						_ = processesByName[num4];
						mainWindow.eval_cc = true;
						num4++;
						num = 0;
						num3 = num;
						continue;
					case 3:
						mainWindow.eval_in.Visibility = Visibility.Hidden;
						mainWindow.m_eval_cb.Stop();
						num = 2;
						num3 = num;
						continue;
					case 1:
						goto end_IL_0064;
						end_IL_0066:
						break;
					}
					num = 1;
					num3 = num;
					continue;
					end_IL_0064:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				goto IL_0db7;
			}
			eval_a = -2;
			eval_b.SetResult();
			goto IL_0db7;
			IL_0db7:
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 3042;
			short num2 = num;
			num = 3042;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_aw : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = -12115;
			short num2 = num;
			num = -12115;
			switch (num2 == num)
			{
			default:
			{
				num = 0;
				if (num != 0)
				{
				}
				int num3 = eval_a;
				MainWindow mainWindow = eval_c;
				try
				{
					num = 6;
					int num4 = num;
					TaskAwaiter awaiter = default(TaskAwaiter);
					while (true)
					{
						switch (num4)
						{
						case 2:
							break;
						case 6:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num3 != 0)
							{
								num = 8;
								num4 = num;
								continue;
							}
							awaiter = this.m_eval_d;
							this.m_eval_d = default(TaskAwaiter);
							num3 = (eval_a = -1);
							num = 9;
							num4 = num;
							continue;
						case 8:
							num = 4;
							num4 = num;
							continue;
						case 4:
							if (mainWindow.UID_SC != "---")
							{
								num = 1;
								num4 = num;
							}
							else
							{
								awaiter = mainWindow.eval_bt().GetAwaiter();
								num = 0;
								num4 = num;
							}
							continue;
						case 5:
							num3 = (eval_a = 0);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 7;
							num4 = num;
							continue;
						case 7:
							goto end_IL_0090;
						case 9:
							awaiter.GetResult();
							num = 10;
							num4 = num;
							continue;
						case 0:
							if (!awaiter.IsCompleted)
							{
								num = 5;
								num4 = num;
								continue;
							}
							goto case 9;
						case 1:
						{
							Thread thread = new Thread(mainWindow.eval_bi);
							thread.IsBackground = true;
							thread.Start();
							num = 3;
							num4 = num;
							continue;
						}
						case 3:
						case 10:
							num = 2;
							num4 = num;
							continue;
						}
						break;
					}
					goto IL_0078;
					end_IL_0090:;
				}
				catch (Exception exception)
				{
					eval_a = -2;
					eval_b.SetException(exception);
				}
				break;
			}
			case false:
			case true:
				break;
				IL_0078:
				eval_a = -2;
				eval_b.SetResult();
				break;
			}
			num = 0;
			_ = num;
			num = 1;
			if (num == 0)
			{
			}
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -24499;
			short num2 = num;
			num = -24499;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ax : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 11887;
			short num2 = num;
			num = 11887;
			switch (num2 == num)
			{
			case false:
			case true:
				return;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			int num3 = eval_a;
			MainWindow mainWindow = eval_c;
			try
			{
				num = 2;
				int num4 = num;
				TaskAwaiter awaiter = default(TaskAwaiter);
				while (true)
				{
					switch (num4)
					{
					case 0:
						goto end_IL_00ff;
					case 2:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (num3 != 0)
						{
							num = 5;
							num4 = num;
							continue;
						}
						awaiter = this.m_eval_d;
						this.m_eval_d = default(TaskAwaiter);
						num3 = (eval_a = -1);
						num = 3;
						num4 = num;
						continue;
					case 5:
						awaiter = mainWindow.aw().GetAwaiter();
						num = 1;
						num4 = num;
						continue;
					case 1:
						if (!awaiter.IsCompleted)
						{
							num = 6;
							num4 = num;
							continue;
						}
						break;
					case 6:
						num3 = (eval_a = 0);
						this.m_eval_d = awaiter;
						eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						num = 4;
						num4 = num;
						continue;
					case 4:
						return;
					case 3:
						break;
					}
					awaiter.GetResult();
					num = 0;
					num4 = num;
					continue;
					end_IL_00ff:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				return;
			}
			num = 0;
			_ = num;
			eval_a = -2;
			eval_b.SetResult();
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 10519;
			short num2 = num;
			num = 10519;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_ay : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow CS_0024_003C_003E8__locals0 = eval_c;
			try
			{
				num = 11649;
				short num3 = num;
				num = 11649;
				switch (num3 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					try
					{
						num = 8;
						int num4 = num;
						TaskAwaiter awaiter = default(TaskAwaiter);
						Process[] processesByName2 = default(Process[]);
						while (true)
						{
							switch (num4)
							{
							case 8:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (num2 != 0)
								{
									num = 7;
									num4 = num;
									continue;
								}
								awaiter = this.m_eval_d;
								this.m_eval_d = default(TaskAwaiter);
								num2 = (eval_a = -1);
								num = 10;
								num4 = num;
								continue;
							case 1:
								awaiter = Task.Delay(1000).GetAwaiter();
								num = 11;
								num4 = num;
								continue;
							case 11:
								if (!awaiter.IsCompleted)
								{
									num = 6;
									num4 = num;
									continue;
								}
								goto case 10;
							case 2:
								num = 0;
								num4 = num;
								continue;
							case 0:
								if (processesByName2.Length == 0)
								{
									num = 1;
									num4 = num;
									continue;
								}
								break;
							case 9:
								try
								{
									WebClient webClient = new WebClient();
									try
									{
										Uri address = new Uri(CS_0024_003C_003E8__locals0.m_eval_w + CS_0024_003C_003E8__locals0.m_eval_o + Site_version_DIR);
										webClient.DownloadFileAsync(address, DirLocal + "\\update.xml");
										webClient.DownloadFileCompleted += [AsyncStateMachine(typeof(eval_f))] (object A_0, AsyncCompletedEventArgs A_1) =>
										{
											short num5 = 7404;
											short num6 = num5;
											num5 = 7404;
											switch (num6 == num5)
											{
											default:
											{
												num5 = 0;
												if (num5 != 0)
												{
												}
												num5 = 0;
												_ = num5;
												num5 = 1;
												if (num5 != 0)
												{
												}
												eval_f stateMachine = default(eval_f);
												stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
												stateMachine.eval_c = CS_0024_003C_003E8__locals0;
												stateMachine.eval_a = -1;
												stateMachine.eval_b.Start(ref stateMachine);
												break;
											}
											}
										};
									}
									finally
									{
										num = 2;
										num4 = num;
										while (true)
										{
											switch (num4)
											{
											case 2:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 < 0)
												{
													num = 3;
													num4 = num;
													continue;
												}
												break;
											case 0:
												((IDisposable)webClient).Dispose();
												num = 4;
												num4 = num;
												continue;
											case 4:
												break;
											case 3:
												num = 1;
												num4 = num;
												continue;
											case 1:
												if (webClient != null)
												{
													num = 0;
													num4 = num;
													continue;
												}
												break;
											}
											break;
										}
									}
								}
								catch
								{
								}
								break;
							case 10:
								awaiter.GetResult();
								num = 9;
								num4 = num;
								continue;
							case 7:
								num = 4;
								num4 = num;
								continue;
							case 4:
							{
								Process[] processesByName = Process.GetProcessesByName(CS_0024_003C_003E8__locals0.m_eval_x);
								processesByName2 = Process.GetProcessesByName(CS_0024_003C_003E8__locals0.m_eval_y);
								if (processesByName.Length != 0)
								{
									num = 12;
									num4 = num;
								}
								else
								{
									num = 2;
									num4 = num;
								}
								continue;
							}
							case 6:
								num2 = (eval_a = 0);
								this.m_eval_d = awaiter;
								eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
								num = 5;
								num4 = num;
								continue;
							case 5:
								goto end_IL_00b4;
							case 12:
								break;
							case 3:
								goto end_IL_0069;
							}
							num = 3;
							num4 = num;
							continue;
							end_IL_00b4:
							break;
						}
					}
					catch
					{
						break;
					}
					goto IL_03ef;
				case false:
				case true:
					break;
					end_IL_0069:
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				goto IL_03ef;
			}
			eval_a = -2;
			eval_b.SetResult();
			goto IL_03ef;
			IL_03ef:
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -28342;
			short num2 = num;
			num = -28342;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_az : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncVoidMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			num = 5939;
			short num2 = num;
			num = 5939;
			switch (num2 == num)
			{
			default:
			{
				num = 0;
				if (num != 0)
				{
				}
				int num3 = eval_a;
				MainWindow mainWindow = eval_c;
				try
				{
					num = 2;
					int num4 = num;
					TaskAwaiter awaiter = default(TaskAwaiter);
					while (true)
					{
						switch (num4)
						{
						case 0:
							goto end_IL_00af;
						case 2:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (num3 != 0)
							{
								num = 5;
								num4 = num;
								continue;
							}
							awaiter = this.m_eval_d;
							this.m_eval_d = default(TaskAwaiter);
							num3 = (eval_a = -1);
							num = 3;
							num4 = num;
							continue;
						case 5:
							mainWindow.eval_fu.IsEnabled = false;
							awaiter = mainWindow.bz().GetAwaiter();
							num = 1;
							num4 = num;
							continue;
						case 1:
							if (!awaiter.IsCompleted)
							{
								num = 6;
								num4 = num;
								continue;
							}
							break;
						case 6:
							num3 = (eval_a = 0);
							this.m_eval_d = awaiter;
							eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
							num = 4;
							num4 = num;
							continue;
						case 4:
							goto end_IL_0090;
						case 3:
							break;
						}
						awaiter.GetResult();
						num = 0;
						num4 = num;
						continue;
						end_IL_00af:
						break;
					}
					goto IL_0078;
					end_IL_0090:;
				}
				catch (Exception exception)
				{
					eval_a = -2;
					eval_b.SetException(exception);
				}
				break;
			}
			case false:
			case true:
				break;
				IL_0078:
				eval_a = -2;
				eval_b.SetResult();
				break;
			}
			num = 0;
			_ = num;
			num = 1;
			if (num == 0)
			{
			}
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -11092;
			short num2 = num;
			num = -11092;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct eval_a0 : IAsyncStateMachine
	{
		public int eval_a;

		public AsyncTaskMethodBuilder eval_b;

		public MainWindow eval_c;

		private TaskAwaiter<string> m_eval_d;

		private void eval_d()
		{
			short num = 0;
			switch (num)
			{
			}
			int num2 = eval_a;
			MainWindow CS_0024_003C_003E8__locals0 = eval_c;
			try
			{
				num = 0;
				int num3 = num;
				int num5 = default(int);
				string text = default(string);
				string text2 = default(string);
				TaskAwaiter<string> awaiter = default(TaskAwaiter<string>);
				Process[] processes = default(Process[]);
				Process process = default(Process);
				string value = default(string);
				int num7 = default(int);
				int num6 = default(int);
				string[] eval_dv = default(string[]);
				Process[] array = default(Process[]);
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if ((uint)num2 > 1u)
						{
							num = 1;
							num3 = num;
							continue;
						}
						goto case 4;
					case 1:
						CS_0024_003C_003E8__locals0.eval_b2();
						num = 4;
						num3 = num;
						continue;
					case 2:
						try
						{
							num = 6;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 6:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if ((uint)num2 > 1u)
									{
										num = 25;
										num3 = num;
										continue;
									}
									goto case 8;
								case 16:
									if (!Directory.Exists(DirLocal))
									{
										num = 2;
										num3 = num;
										continue;
									}
									goto case 20;
								case 4:
								case 12:
									num = 21;
									num3 = num;
									continue;
								case 21:
									if (num5 >= CS_0024_003C_003E8__locals0.LanguageList.Count)
									{
										num = 8;
										num3 = num;
									}
									else
									{
										num = 34;
										num3 = num;
									}
									continue;
								case 29:
									try
									{
										FileStream fileStream = File.OpenRead(Directory_Launcher + "\\" + Name_form + ".exe");
										try
										{
											MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
											byte[] buffer = new byte[fileStream.Length];
											fileStream.Read(buffer, 0, (int)fileStream.Length);
											byte[] array2 = mD5CryptoServiceProvider.ComputeHash(buffer);
											CS_0024_003C_003E8__locals0.Launcher_ = BitConverter.ToString(array2).Replace("-", string.Empty);
										}
										finally
										{
											num = 0;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 0:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 < 0)
													{
														num = 1;
														num3 = num;
														continue;
													}
													break;
												case 1:
													num = 4;
													num3 = num;
													continue;
												case 4:
													if (fileStream != null)
													{
														num = 2;
														num3 = num;
														continue;
													}
													break;
												case 2:
													((IDisposable)fileStream).Dispose();
													num = 3;
													num3 = num;
													continue;
												case 3:
													break;
												}
												break;
											}
										}
									}
									catch (Exception ex3)
									{
										System.Windows.MessageBox.Show(ex3.Message + "  12133", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										CS_0024_003C_003E8__locals0.Close_launcher();
									}
									CS_0024_003C_003E8__locals0.iz.Visibility = Visibility.Hidden;
									CS_0024_003C_003E8__locals0.Lbl_version(CS_0024_003C_003E8__locals0.an, Updateclient, Updatemods);
									text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "language", null);
									text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "CDLanguage", null);
									num5 = 0;
									num = 12;
									num3 = num;
									continue;
								case 25:
									num = 18;
									num3 = num;
									continue;
								case 18:
									if (Convert.ToDouble(versionlocal, CultureInfo.InvariantCulture) == Convert.ToDouble(CS_0024_003C_003E8__locals0.an, CultureInfo.InvariantCulture))
									{
										num = 16;
										num3 = num;
									}
									else
									{
										num = 1;
										num3 = num;
									}
									continue;
								case 35:
									try
									{
										WebClient webClient = new WebClient();
										try
										{
											Uri address = new Uri(Url_update + CS_0024_003C_003E8__locals0.m_eval_o + Url_update_DIR);
											webClient.DownloadFileAsync(address, Directory_Launcher + "\\" + CS_0024_003C_003E8__locals0.m_eval_ac + ".exe");
											webClient.DownloadProgressChanged += CS_0024_003C_003E8__locals0.ProgressChanged_update;
											webClient.DownloadFileCompleted += delegate
											{
												short num8;
												try
												{
													num8 = -17675;
													short num9 = num8;
													num8 = -17675;
													switch (num9 == num8)
													{
													default:
													{
														num8 = 0;
														if (num8 != 0)
														{
														}
														ProcessStartInfo obj3 = new ProcessStartInfo
														{
															FileName = Directory_Launcher + "\\" + CS_0024_003C_003E8__locals0.m_eval_ac + ".exe",
															Verb = "runas"
														};
														obj3.WorkingDirectory = obj3.WorkingDirectory + Directory_Launcher + "\\";
														Process.Start(obj3);
														CS_0024_003C_003E8__locals0.Close_launcher();
														break;
													}
													}
												}
												catch (Exception ex6)
												{
													if (!(Langve == "RU"))
													{
														System.Windows.MessageBox.Show("The launcher executable file is either not downloaded or blocked by Windows defender, antivirus! " + ex6.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													}
													else
													{
														System.Windows.MessageBox.Show("Исполняемый файл лаунчера либо не докачан либо блокирован защитником виндовс,антивирусом! " + ex6.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													}
												}
												num8 = 0;
												_ = num8;
												num8 = 1;
												if (num8 != 0)
												{
												}
												CS_0024_003C_003E8__locals0.Close_launcher();
											};
										}
										finally
										{
											num = 0;
											num3 = num;
											while (true)
											{
												switch (num3)
												{
												case 0:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (num2 < 0)
													{
														num = 1;
														num3 = num;
														continue;
													}
													break;
												case 3:
													((IDisposable)webClient).Dispose();
													num = 4;
													num3 = num;
													continue;
												case 4:
													break;
												case 1:
													num = 2;
													num3 = num;
													continue;
												case 2:
													if (webClient != null)
													{
														num = 3;
														num3 = num;
														continue;
													}
													break;
												}
												break;
											}
										}
									}
									catch
									{
									}
									break;
								case 20:
									num = 9;
									num3 = num;
									continue;
								case 23:
								case 27:
								case 28:
								case 33:
									num5++;
									num = 4;
									num3 = num;
									continue;
								case 24:
									CS_0024_003C_003E8__locals0.eval_hv.SelectedItem = "English";
									num = 30;
									num3 = num;
									continue;
								case 3:
									num = 15;
									num3 = num;
									continue;
								case 15:
									if (text == "RU")
									{
										num = 19;
										num3 = num;
										continue;
									}
									goto case 11;
								case 9:
									try
									{
										num = 0;
										num3 = num;
										while (true)
										{
											switch (num3)
											{
											case 0:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (!Directory.Exists(Directory_Launcher + "\\" + NameDirGamePatchTorrent))
												{
													num = 3;
													num3 = num;
													continue;
												}
												break;
											case 3:
												Directory.CreateDirectory(Directory_Launcher + "\\" + NameDirGamePatchTorrent);
												num = 2;
												num3 = num;
												continue;
											case 2:
												break;
											case 1:
												goto end_IL_0621;
											}
											num = 1;
											num3 = num;
											continue;
											end_IL_0621:
											break;
										}
									}
									catch (Exception ex4)
									{
										if (!(Langve == "RU"))
										{
											System.Windows.MessageBox.Show(CS_0024_003C_003E8__locals0, "Launcher blocks a third-party program or antivirus, add to the exception! Updateclientstart : " + ex4.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										else
										{
											System.Windows.MessageBox.Show(CS_0024_003C_003E8__locals0, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! Updateclientstart : " + ex4.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
									}
									num = 29;
									num3 = num;
									continue;
								case 5:
								case 32:
								{
									CS_0024_003C_003E8__locals0.eval_iy.Visibility = Visibility.Visible;
									CS_0024_003C_003E8__locals0.iz.Visibility = Visibility.Visible;
									CS_0024_003C_003E8__locals0.fa.Visibility = Visibility.Visible;
									DoubleAnimation animation = new DoubleAnimation
									{
										From = 0.0,
										To = 1.0,
										Duration = new Duration(TimeSpan.FromSeconds(2.0)),
										AutoReverse = false
									};
									CS_0024_003C_003E8__locals0.fa.BeginAnimation(UIElement.OpacityProperty, animation);
									CS_0024_003C_003E8__locals0.df.Close();
									num = 35;
									num3 = num;
									continue;
								}
								case 2:
									Directory.CreateDirectory(DirLocal);
									num = 20;
									num3 = num;
									continue;
								case 22:
									if (text == null)
									{
										CS_0024_003C_003E8__locals0.eval_hv.SelectedItem = "English";
										CS_0024_003C_003E8__locals0.eval_hv.Items.Add(CS_0024_003C_003E8__locals0.LanguageList[num5].ToString());
										goto IL_07ee;
									}
									num = 3;
									num3 = num;
									continue;
								case 1:
									CS_0024_003C_003E8__locals0.eval_ew.Stop();
									num = 7;
									num3 = num;
									continue;
								case 7:
									if (Langve == "RU")
									{
										num = 0;
										num3 = num;
									}
									else
									{
										CS_0024_003C_003E8__locals0.Norificons("Launcher update : new version - " + CS_0024_003C_003E8__locals0.an);
										num = 5;
										num3 = num;
									}
									continue;
								case 14:
									CS_0024_003C_003E8__locals0.eval_hv.SelectedItem = text2;
									CS_0024_003C_003E8__locals0.eval_hv.Items.Add(text2);
									num = 33;
									num3 = num;
									continue;
								case 34:
									if (text2 == null)
									{
										num = 22;
										num3 = num;
									}
									else
									{
										num = 31;
										num3 = num;
									}
									continue;
								case 30:
									CS_0024_003C_003E8__locals0.eval_hv.Items.Add(CS_0024_003C_003E8__locals0.LanguageList[num5].ToString());
									num = 27;
									num3 = num;
									continue;
								case 31:
									num = 26;
									num3 = num;
									continue;
								case 26:
									if (!(CS_0024_003C_003E8__locals0.LanguageList[num5].ToString() == text2))
									{
										CS_0024_003C_003E8__locals0.eval_hv.Items.Add(CS_0024_003C_003E8__locals0.LanguageList[num5].ToString());
										num = 28;
										num3 = num;
									}
									else
									{
										num = 14;
										num3 = num;
									}
									continue;
								case 17:
									try
									{
										num = 11;
										num3 = num;
										while (true)
										{
											string result;
											switch (num3)
											{
											case 11:
												switch (0)
												{
												default:
													continue;
												case 0:
													break;
												}
												goto default;
											default:
												if (num2 != 0)
												{
													num = 14;
													num3 = num;
													continue;
												}
												awaiter = this.m_eval_d;
												this.m_eval_d = default(TaskAwaiter<string>);
												num2 = (eval_a = -1);
												num = 7;
												num3 = num;
												continue;
											case 2:
												if (Langve == "RU")
												{
													num = 5;
													num3 = num;
												}
												else
												{
													CS_0024_003C_003E8__locals0.Norificons("Please wait (Internet may restart)...");
													num = 12;
													num3 = num;
												}
												continue;
											case 20:
												num2 = (eval_a = 0);
												this.m_eval_d = awaiter;
												eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
												num = 6;
												num3 = num;
												continue;
											case 6:
												goto end_IL_0a78;
											case 17:
												processes = Process.GetProcesses();
												num = 16;
												num3 = num;
												continue;
											case 1:
											case 4:
												CS_0024_003C_003E8__locals0.eval_bl();
												awaiter = System.Windows.Winservr.System.GetSMB().GetAwaiter();
												num = 9;
												num3 = num;
												continue;
											case 9:
												if (!awaiter.IsCompleted)
												{
													num = 0;
													num3 = num;
													continue;
												}
												break;
											case 7:
												result = awaiter.GetResult();
												CS_0024_003C_003E8__locals0.MC = result;
												num = 21;
												num3 = num;
												continue;
											case 21:
												if (Langve == "RU")
												{
													num = 10;
													num3 = num;
												}
												else
												{
													CS_0024_003C_003E8__locals0.Norificons("Attempt to connect to the server ...");
													num = 4;
													num3 = num;
												}
												continue;
											case 5:
												CS_0024_003C_003E8__locals0.Norificons("Ожидайте (возможен перезапуск интернета) ...");
												num = 3;
												num3 = num;
												continue;
											case 3:
											case 12:
												awaiter = System.Windows.Winservr.System.LoadMac().GetAwaiter();
												num = 19;
												num3 = num;
												continue;
											case 19:
												if (!awaiter.IsCompleted)
												{
													num = 20;
													num3 = num;
													continue;
												}
												goto case 7;
											case 10:
												CS_0024_003C_003E8__locals0.Norificons("Попытка подключения к серверу ...");
												num = 1;
												num3 = num;
												continue;
											case 16:
												try
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num3)
															{
															case 8:
																try
																{
																	num = 1;
																	num3 = num;
																	while (true)
																	{
																		switch (num3)
																		{
																		case 1:
																			switch (0)
																			{
																			default:
																				continue;
																			case 0:
																				break;
																			}
																			goto default;
																		default:
																			if (!File.Exists(process.MainModule.FileName.Replace(process.ProcessName + ".exe", string.Empty) + "SbieDll.dll"))
																			{
																				num = 2;
																				num3 = num;
																				continue;
																			}
																			goto case 7;
																		case 5:
																			num = 0;
																			num3 = num;
																			continue;
																		case 0:
																			if (File.Exists(process.MainModule.FileName.Replace(process.ProcessName + ".exe", string.Empty) + "SboxHostDll.dll"))
																			{
																				num = 7;
																				num3 = num;
																				continue;
																			}
																			break;
																		case 7:
																			process.Kill();
																			num = 6;
																			num3 = num;
																			continue;
																		case 2:
																			num = 4;
																			num3 = num;
																			continue;
																		case 4:
																			if (!File.Exists(process.MainModule.FileName.Replace(process.ProcessName + ".exe", string.Empty) + "SbieMsg.dll"))
																			{
																				num = 5;
																				num3 = num;
																				continue;
																			}
																			goto case 7;
																		case 6:
																			break;
																		case 3:
																			goto end_IL_0e16;
																		}
																		num = 3;
																		num3 = num;
																		continue;
																		end_IL_0e16:
																		break;
																	}
																}
																catch
																{
																}
																goto IL_0fad;
															case 2:
																if (!string.IsNullOrEmpty(process.MainWindowTitle))
																{
																	num = 8;
																	num3 = num;
																	continue;
																}
																goto IL_0fad;
															case 4:
																if (process.ProcessName.Contains(value))
																{
																	num = 5;
																	num3 = num;
																	continue;
																}
																goto case 10;
															case 10:
																num7++;
																num = 13;
																num3 = num;
																continue;
															case 12:
																num6++;
																num = 9;
																num3 = num;
																continue;
															case 1:
															case 13:
																num = 11;
																num3 = num;
																continue;
															case 11:
																if (num7 < eval_dv.Length)
																{
																	value = eval_dv[num7];
																	num = 4;
																	num3 = num;
																}
																else
																{
																	num = 12;
																	num3 = num;
																}
																continue;
															case 6:
															case 9:
																num = 0;
																num3 = num;
																continue;
															case 0:
																if (num6 < array.Length)
																{
																	process = array[num6];
																	num = 2;
																	num3 = num;
																}
																else
																{
																	num = 7;
																	num3 = num;
																}
																continue;
															case 5:
																process.Kill();
																num = 10;
																num3 = num;
																continue;
															case 7:
																num = 3;
																num3 = num;
																continue;
															case 3:
																goto end_IL_0d96;
																IL_0fad:
																eval_dv = CS_0024_003C_003E8__locals0.eval_dv;
																num7 = 0;
																num = 1;
																num3 = num;
																continue;
															}
															goto case 0;
															continue;
															end_IL_0d96:
															break;
														}
														break;
													case 0:
														array = processes;
														num6 = 0;
														num = 6;
														num3 = num;
														goto default;
													}
												}
												catch (Exception ex)
												{
													System.Windows.MessageBox.Show(ex.Message + " [No_bloking№1]", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													CS_0024_003C_003E8__locals0.Close_launcher();
												}
												num = 2;
												num3 = num;
												continue;
											case 0:
												num2 = (eval_a = 1);
												this.m_eval_d = awaiter;
												eval_b.AwaitUnsafeOnCompleted(ref awaiter, ref this);
												num = 15;
												num3 = num;
												continue;
											case 15:
												goto end_IL_0a78;
											case 14:
												num = 13;
												num3 = num;
												continue;
											case 13:
												if (num2 == 1)
												{
													awaiter = this.m_eval_d;
													this.m_eval_d = default(TaskAwaiter<string>);
													num2 = (eval_a = -1);
													num = 18;
													num3 = num;
												}
												else
												{
													num = 17;
													num3 = num;
												}
												continue;
											case 18:
												break;
											case 8:
												goto end_IL_00e3;
											}
											result = awaiter.GetResult();
											CS_0024_003C_003E8__locals0.TxtSMD = result;
											num = 8;
											num3 = num;
											continue;
											end_IL_0a78:
											break;
										}
									}
									catch (Exception ex2)
									{
										System.Windows.MessageBox.Show(ex2.Message + " [No_bloking№2]", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										goto end_IL_0068;
									}
									goto IL_1469;
								case 0:
									CS_0024_003C_003E8__locals0.Norificons("Обновление лаунчера : новая версия - " + CS_0024_003C_003E8__locals0.an);
									num = 32;
									num3 = num;
									continue;
								case 8:
									num = 17;
									num3 = num;
									continue;
								case 19:
									CS_0024_003C_003E8__locals0.eval_hv.SelectedItem = "Русский";
									num = 11;
									num3 = num;
									continue;
								case 11:
									num = 10;
									num3 = num;
									continue;
								case 10:
								{
									num = -10080;
									short num4 = num;
									num = -10080;
									switch (num4 == num)
									{
									case false:
									case true:
										break;
									default:
										goto IL_138d;
									}
									goto IL_07ee;
								}
								case 13:
									goto end_IL_00e1;
									IL_138d:
									num = 0;
									if (num != 0)
									{
									}
									if (text == "EN")
									{
										num = 24;
										num3 = num;
										continue;
									}
									goto case 30;
									IL_07ee:
									num = 23;
									num3 = num;
									continue;
									end_IL_00e3:
									break;
								}
								num = 13;
								num3 = num;
								continue;
								end_IL_00e1:
								break;
							}
						}
						catch (Exception ex5)
						{
							System.Windows.MessageBox.Show("Updateclientstart : " + ex5.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							CS_0024_003C_003E8__locals0.Close_launcher();
						}
						num = 3;
						num3 = num;
						continue;
					case 4:
						num = 2;
						num3 = num;
						continue;
					case 3:
						break;
						end_IL_0068:
						break;
					}
					break;
				}
			}
			catch (Exception exception)
			{
				eval_a = -2;
				eval_b.SetException(exception);
				goto IL_1469;
			}
			eval_a = -2;
			eval_b.SetResult();
			goto IL_1469;
			IL_1469:
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d();
		}

		[DebuggerHidden]
		private void eval_d(IAsyncStateMachine A_0)
		{
			short num = -31795;
			short num2 = num;
			num = -31795;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_b.SetStateMachine(A_0);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine A_0)
		{
			//ILSpy generated this explicit interface implementation from .override directive in eval_d
			this.eval_d(A_0);
		}
	}

	public static readonly string name_messege;

	[CompilerGenerated]
	private static string m_eval_a;

	[CompilerGenerated]
	private static string m_eval_b;

	[CompilerGenerated]
	private static string m_eval_c;

	[CompilerGenerated]
	private static string m_eval_d;

	[CompilerGenerated]
	private static string m_eval_e;

	[CompilerGenerated]
	private static string m_eval_f;

	[CompilerGenerated]
	private static string m_eval_g;

	[CompilerGenerated]
	private static string m_eval_h;

	[CompilerGenerated]
	private static string m_eval_i;

	[CompilerGenerated]
	private static string m_eval_j;

	[CompilerGenerated]
	private static string m_eval_k;

	[CompilerGenerated]
	private static string m_eval_l;

	[CompilerGenerated]
	private static string m_eval_m;

	[CompilerGenerated]
	private static string m_eval_n;

	private string m_eval_o = "";

	private string m_eval_p = "";

	private string m_eval_q = "";

	private string m_eval_r = "";

	private string m_eval_s = "";

	private string m_eval_t = "";

	private int m_eval_u;

	private int m_eval_v;

	private string m_eval_w = "";

	private readonly string m_eval_x = "DayZ_x64";

	private readonly string m_eval_y = "DayZ_BE";

	public static readonly string versionlocal;

	private readonly string m_eval_z = "DayZavr";

	private readonly string m_eval_aa = "DayZ";

	public static readonly string NameDirGamePatchTorrent;

	private static readonly string m_eval_ab;

	private readonly string m_eval_ac = "DayZavr_new";

	private readonly string m_eval_ad = "DayZavr";

	private readonly string m_eval_ae = "DayZ.torrent";

	private readonly string m_eval_af = "DayZavr.torrent";

	private readonly string m_eval_ag = "!Workshop";

	private readonly double m_eval_ah = 0.5;

	private readonly string m_eval_ai = "Goldberg SteamEmu Saves";

	private readonly string m_eval_aj = "Goldberg SteamEmu Saves\\settings\\user_steam_id.txt";

	private readonly string m_eval_ak = "Goldberg SteamEmu Saves\\settings";

	private readonly string m_eval_al = "/LAUNCHER/UPLOADGAME/";

	private readonly bool m_eval_am;

	public static readonly bool Enable_Shop;

	public static readonly bool Enable_Discount;

	public static readonly bool Enable_UploadGame;

	private string an = "---";

	private readonly string[] m_eval_ao = new string[22]
	{
		"'", "(", ")", ":", "@", "~", ",", "&", "%", "*",
		"?", "+", "#", "!", ";", "^", "№", "\"", "/", ".",
		">", "<"
	};

	[CompilerGenerated]
	private static string m_eval_ap;

	[CompilerGenerated]
	private static string m_eval_aq;

	[CompilerGenerated]
	private string m_eval_ar;

	[CompilerGenerated]
	private static string m_eval_as;

	[CompilerGenerated]
	private string m_eval_at;

	[CompilerGenerated]
	private string m_eval_au;

	[CompilerGenerated]
	private string m_eval_av;

	[CompilerGenerated]
	private static string m_eval_aw;

	[CompilerGenerated]
	private string m_eval_ax;

	[CompilerGenerated]
	private static string m_eval_ay;

	[CompilerGenerated]
	private static string m_eval_az;

	private bool m_eval_a0;

	[CompilerGenerated]
	private string m_eval_a1;

	[CompilerGenerated]
	private static string m_eval_a2;

	[CompilerGenerated]
	private static string m_eval_a3;

	[CompilerGenerated]
	private static string m_eval_a4;

	[CompilerGenerated]
	private string m_eval_a5;

	[CompilerGenerated]
	private string m_eval_a6;

	[CompilerGenerated]
	private string m_eval_a7;

	[CompilerGenerated]
	private string m_eval_a8;

	[CompilerGenerated]
	private string m_eval_a9;

	[CompilerGenerated]
	private string m_eval_ba;

	[CompilerGenerated]
	private string m_eval_bb;

	[CompilerGenerated]
	private string eval_bc;

	[CompilerGenerated]
	private string eval_bd;

	[CompilerGenerated]
	private string m_eval_be;

	[CompilerGenerated]
	private string m_eval_bf;

	[CompilerGenerated]
	private string m_eval_bg;

	[CompilerGenerated]
	private string m_eval_bh;

	[CompilerGenerated]
	private static string m_eval_bi;

	[CompilerGenerated]
	private static string eval_bj;

	[CompilerGenerated]
	private string m_eval_bk;

	[CompilerGenerated]
	private static string m_eval_bl;

	[CompilerGenerated]
	private static string m_eval_bm;

	[CompilerGenerated]
	private string m_eval_bn;

	[CompilerGenerated]
	private string m_eval_bo;

	[CompilerGenerated]
	private string m_eval_bp;

	[CompilerGenerated]
	private string eval_bq;

	[CompilerGenerated]
	private string eval_br;

	[CompilerGenerated]
	private string eval_bs;

	[CompilerGenerated]
	private static string m_eval_bt;

	[CompilerGenerated]
	private string m_eval_bu;

	[CompilerGenerated]
	private static int m_eval_bv;

	[CompilerGenerated]
	private static string m_eval_bw;

	[CompilerGenerated]
	private string m_eval_bx;

	[CompilerGenerated]
	private string m_eval_by;

	[CompilerGenerated]
	private string eval_bz;

	[CompilerGenerated]
	private string m_eval_b0;

	[CompilerGenerated]
	private string m_eval_b1;

	[CompilerGenerated]
	private string m_eval_b2;

	[CompilerGenerated]
	private string m_eval_b3;

	private bool m_eval_b4;

	[CompilerGenerated]
	private string m_eval_b5;

	private bool m_eval_b6;

	[CompilerGenerated]
	private string m_eval_b7;

	[CompilerGenerated]
	private static string m_eval_b8;

	public readonly List<string> LanguageList = new List<string> { "Русский", "English" };

	private DispatcherTimer m_eval_b9 = new DispatcherTimer();

	private DispatcherTimer m_eval_ca = new DispatcherTimer();

	private DispatcherTimer m_eval_cb = new DispatcherTimer();

	private bool eval_cc;

	public static bool OpenUser;

	private bool m_eval_cd;

	private bool eval_ce = true;

	private List<ENews> eval_cf = new List<ENews>();

	private News eval_cg = new News();

	private bool eval_ch;

	private bool eval_ci;

	private double cj;

	[CompilerGenerated]
	private static string eval_ck;

	[CompilerGenerated]
	private static string eval_cl;

	[CompilerGenerated]
	private static string eval_cm;

	[CompilerGenerated]
	private static string eval_cn;

	[CompilerGenerated]
	private static string eval_co;

	[CompilerGenerated]
	private static string eval_cp;

	[CompilerGenerated]
	private static string eval_cq;

	[CompilerGenerated]
	private static string eval_cr;

	[CompilerGenerated]
	private static string eval_cs;

	[CompilerGenerated]
	private static string eval_ct;

	[CompilerGenerated]
	private static string eval_cu;

	[CompilerGenerated]
	private static string eval_cv;

	private TcpClient eval_cw;

	private NetworkStream eval_cx;

	private List<EShop_loot> eval_cy = new List<EShop_loot>();

	private List<EShop_weapon> eval_cz = new List<EShop_weapon>();

	private List<EShop_set> eval_c0 = new List<EShop_set>();

	private List<EShop_car> eval_c1 = new List<EShop_car>();

	private List<EShop_inventory> eval_c2 = new List<EShop_inventory>();

	private List<EShop_mask> eval_c3 = new List<EShop_mask>();

	private List<EShop_base> eval_c4 = new List<EShop_base>();

	private List<EShop_medic> eval_c5 = new List<EShop_medic>();

	private int eval_c6;

	public static bool CheckGameMods;

	public static bool CheckGameFileServer;

	private bool eval_c7;

	private List<string> eval_c8 = new List<string>();

	private DispatcherTimer c9 = new DispatcherTimer();

	private List<string> eval_da = new List<string>();

	private string eval_db = string.Empty;

	private WebClient dc = new WebClient();

	[CompilerGenerated]
	private string eval_dd;

	[CompilerGenerated]
	private string eval_de;

	public bool Error_Web;

	private readonly LOGO df = new LOGO();

	[CompilerGenerated]
	private string eval_dg;

	public static bool GameLicense;

	private bool eval_dh;

	private int eval_di;

	private SControll eval_dj = new SControll();

	private int eval_dk;

	private List<ServerOnlain> eval_dl = new List<ServerOnlain>();

	private XmlDocument eval_dm = new XmlDocument();

	public static int connectudp;

	[CompilerGenerated]
	private string eval_dn;

	private MD5 dp = MD5.Create();

	private TcpClient eval_dq;

	private NetworkStream dr;

	private bool eval_ds = true;

	private TcpClient eval_dt;

	private NetworkStream eval_du;

	private string[] eval_dv = new string[12]
	{
		"Cheat Engine", "UoPilot", "µҐїЄ", "Л«їЄ", "ИэїЄ", "ІвКФ°ж", "Cmr Injector V1.6", "Cmr Injector", "SbieCtrl", "SbieSvc",
		"SandboxieRpcSs", "SandboxieDcomLaunch"
	};

	private DispatcherTimer eval_dw = new DispatcherTimer();

	public bool DownloadA = true;

	public bool RunUload;

	public static bool IfStopedUload;

	public static string InfoHeshF;

	public static string Md5F;

	public bool DownloadMods;

	public static List<string> ListFileModsDownload;

	public static bool OpenDownloader;

	public static bool UpdateStatus;

	private Crc322 dx = new Crc322();

	private FileInfo dy;

	public static bool LoadResume;

	[CompilerGenerated]
	private FileInfo[] eval_dz;

	[CompilerGenerated]
	private DirectoryInfo[] eval_d0;

	private List<DELLETEDFILE> eval_d1 = new List<DELLETEDFILE>();

	private List<DELLETEDDIR> eval_d2 = new List<DELLETEDDIR>();

	private List<FILEINFO> d3 = new List<FILEINFO>();

	private List<FILEINFOOLD> eval_d4 = new List<FILEINFOOLD>();

	private List<DIRINFO> d5 = new List<DIRINFO>();

	private List<string> d6 = new List<string>();

	private DispatcherTimer eval_d7 = new DispatcherTimer();

	private bool eval_d8;

	private bool eval_d9;

	private int eval_ea;

	private int eval_eb;

	public static string downloadsPath;

	public static string torrentsPath;

	private bool eval_ec;

	private readonly List<string> eval_ed = new List<string> { "Unlimited", "100", "400", "500", "1000", "2000", "5000", "10000", "15000" };

	private bool eval_ee;

	private bool eval_ef = true;

	[CompilerGenerated]
	private string eval_eg;

	private DispatcherTimer eval_eh = new DispatcherTimer();

	private int eval_ei;

	[CompilerGenerated]
	private string eval_ej;

	[CompilerGenerated]
	private string eval_ek;

	[CompilerGenerated]
	private string eval_el;

	private Thread eval_em;

	private static TcpClient en;

	private DispatcherTimer eo = new DispatcherTimer();

	private static int eval_ep;

	private static int eval_eq;

	private static int eval_er;

	private static int eval_es;

	public static bool FirstRunStatistic;

	private StatsLine eval_et = new StatsLine();

	private List<eval_a> eval_eu = new List<eval_a>();

	private XmlDocument eval_ev = new XmlDocument();

	private DispatcherTimer eval_ew = new DispatcherTimer();

	private DispatcherTimer eval_ex = new DispatcherTimer();

	private string ey = "number";

	private string eval_ez = "txt";

	private string eval_e0 = string.Empty;

	private string eval_e1 = string.Empty;

	private string eval_e2 = string.Empty;

	private string eval_e3 = string.Empty;

	private string eval_e4 = string.Empty;

	private string eval_e5 = "HUNTER";

	private string eval_e6 = string.Empty;

	private string eval_e7 = "лого";

	private DiscordRpcClient eval_e8 = new DiscordRpcClient("-1");

	[CompilerGenerated]
	private PropertyChangedEventHandler eval_e9;

	internal MainWindow fa;

	internal Grid fb;

	internal TaskbarIcon eval_fc;

	internal TextBlock eval_fd;

	internal Grid eval_fe;

	internal Grid ff;

	internal Grid eval_fg;

	internal System.Windows.Controls.Label eval_fh;

	internal System.Windows.Controls.Label eval_fi;

	internal System.Windows.Controls.Button eval_fj;

	public System.Windows.Controls.ListBox BoxServer;

	internal StackPanel fk;

	internal LoadingIndicator eval_fl;

	internal StatsControll eval_fm;

	internal Grid eval_fn;

	internal System.Windows.Controls.ProgressBar eval_fo;

	internal System.Windows.Controls.Label eval_fp;

	internal System.Windows.Controls.Label eval_fq;

	internal System.Windows.Controls.Label eval_fr;

	internal System.Windows.Controls.Label eval_fs;

	internal Border ft;

	internal System.Windows.Controls.Button eval_fu;

	internal System.Windows.Controls.Label fv;

	internal Border fw;

	internal System.Windows.Controls.Label eval_fx;

	internal System.Windows.Controls.Label eval_fy;

	internal System.Windows.Controls.RichTextBox eval_fz;

	internal System.Windows.Controls.RichTextBox eval_f0;

	internal Border eval_f1;

	internal System.Windows.Controls.Label eval_f2;

	internal Grid eval_f3;

	internal Grid f4;

	public System.Windows.Controls.ListBox BoxNews;

	internal System.Windows.Controls.Label eval_f5;

	internal System.Windows.Controls.Button eval_f6;

	internal System.Windows.Controls.Button eval_f7;

	internal Grid f8;

	internal System.Windows.Controls.Button eval_f9;

	internal ShopControll eval_ga;

	internal Grid gb;

	internal System.Windows.Controls.Label gc;

	internal System.Windows.Controls.Label gd;

	internal System.Windows.Controls.Button eval_ge;

	internal System.Windows.Controls.Label eval_gf;

	internal System.Windows.Controls.Label gg;

	internal System.Windows.Controls.Button eval_gh;

	internal System.Windows.Controls.Label eval_gi;

	internal System.Windows.Controls.Label gj;

	internal System.Windows.Controls.Button eval_gk;

	internal Grid eval_gl;

	internal System.Windows.Controls.DataGrid eval_gm;

	internal DataGridTextColumn eval_gn;

	internal DataGridTextColumn eval_go;

	internal DataGridTemplateColumn eval_gp;

	internal DataGridTextColumn eval_gq;

	internal System.Windows.Controls.Label eval_gr;

	internal System.Windows.Controls.RichTextBox gs;

	internal Grid eval_gt;

	internal System.Windows.Controls.Button eval_gu;

	internal Grid eval_gv;

	internal System.Windows.Controls.Label eval_gw;

	internal System.Windows.Controls.Label eval_gx;

	internal System.Windows.Controls.Label eval_gy;

	internal System.Windows.Controls.Label gz;

	internal System.Windows.Controls.Label g0;

	internal System.Windows.Controls.Label eval_g1;

	internal Slider eval_g2;

	internal Slider eval_g3;

	internal Slider eval_g4;

	internal System.Windows.Controls.CheckBox eval_g5;

	internal System.Windows.Controls.CheckBox eval_g6;

	internal System.Windows.Controls.CheckBox eval_g7;

	internal System.Windows.Controls.CheckBox eval_g8;

	internal System.Windows.Controls.CheckBox eval_g9;

	internal System.Windows.Controls.CheckBox eval_ha;

	internal System.Windows.Controls.Label eval_hb;

	internal Slider eval_hc;

	internal System.Windows.Controls.Label eval_hd;

	internal System.Windows.Controls.Label eval_he;

	internal System.Windows.Controls.Label eval_hf;

	internal Slider eval_hg;

	internal System.Windows.Controls.Label eval_hh;

	internal System.Windows.Controls.Label eval_hi;

	internal System.Windows.Controls.CheckBox eval_hj;

	internal System.Windows.Controls.CheckBox eval_hk;

	internal System.Windows.Controls.Label eval_hl;

	internal System.Windows.Controls.Button eval_hm;

	internal System.Windows.Controls.Label hn;

	internal System.Windows.Controls.Button eval_ho;

	internal System.Windows.Controls.ComboBox eval_hp;

	internal System.Windows.Controls.ComboBox eval_hq;

	internal System.Windows.Controls.Label eval_hr;

	internal System.Windows.Controls.Label eval_hs;

	internal System.Windows.Controls.Label ht;

	internal System.Windows.Controls.Label hu;

	internal System.Windows.Controls.ComboBox eval_hv;

	internal System.Windows.Controls.TextBox eval_hw;

	internal System.Windows.Controls.Label hx;

	internal System.Windows.Controls.CheckBox eval_hy;

	internal System.Windows.Controls.CheckBox eval_hz;

	internal System.Windows.Controls.Button eval_h0;

	internal Border h1;

	internal Border h2;

	internal Border eval_h3;

	internal System.Windows.Controls.Button h4;

	internal System.Windows.Controls.Button eval_h5;

	internal System.Windows.Controls.Button h6;

	internal System.Windows.Controls.Button eval_h7;

	internal Border eval_h8;

	internal System.Windows.Controls.Button h9;

	internal System.Windows.Controls.Button eval_ia;

	internal System.Windows.Controls.Button ib;

	internal System.Windows.Controls.Button ic;

	internal Border eval_id;

	internal System.Windows.Controls.Label eval_ie;

	internal System.Windows.Controls.Label eval_ig;

	internal Grid eval_ih;

	internal System.Windows.Controls.Label eval_ii;

	internal Grid ij;

	internal Border ik;

	public System.Windows.Controls.Label TextNameServer;

	internal Border eval_il;

	internal System.Windows.Controls.Label eval_im;

	internal System.Windows.Controls.Button eval_in;

	internal System.Windows.Controls.Label eval_io;

	internal System.Windows.Controls.Label eval_ip;

	internal System.Windows.Controls.Button eval_iq;

	internal Border ir;

	internal ShopControll eval_is;

	internal Border it;

	internal System.Windows.Controls.Button eval_iu;

	internal System.Windows.Controls.Label iv;

	internal System.Windows.Controls.Label eval_iw;

	internal System.Windows.Controls.Label eval_ix;

	internal Grid eval_iy;

	internal System.Windows.Controls.Label iz;

	internal LoadingIndicator eval_i0;

	private bool eval_i1;

	private static string Site_version_DIR
	{
		[CompilerGenerated]
		get
		{
			short num = -13766;
			short num2 = num;
			num = -13766;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_a;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -11751;
			short num2 = num;
			num = -11751;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_a = value;
		}
	}

	private static string Url_update_DIR
	{
		[CompilerGenerated]
		get
		{
			short num = 2479;
			short num2 = num;
			num = 2479;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_b;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = -21514;
			short num2 = num;
			num = -21514;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_b = value;
		}
	}

	private static string URL_TORRENT_DIR
	{
		[CompilerGenerated]
		get
		{
			short num = -24887;
			short num2 = num;
			num = -24887;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_c;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = -30633;
			short num2 = num;
			num = -30633;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_c = value;
		}
	}

	private static string Url_update
	{
		[CompilerGenerated]
		get
		{
			short num = 26176;
			short num2 = num;
			num = 26176;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_d;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 16604;
			short num2 = num;
			num = 16604;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_d = value;
		}
	}

	private static string Url_update_torrent
	{
		[CompilerGenerated]
		get
		{
			short num = 20234;
			short num2 = num;
			num = 20234;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_e;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -32431;
			short num2 = num;
			num = -32431;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_e = value;
		}
	}

	private static string URL_ClearClient
	{
		[CompilerGenerated]
		get
		{
			short num = 28310;
			short num2 = num;
			num = 28310;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_f;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 31744;
			short num2 = num;
			num = 31744;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_f = value;
		}
	}

	private static string URL_ClearClientDIR
	{
		[CompilerGenerated]
		get
		{
			short num = 15418;
			short num2 = num;
			num = 15418;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_g;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 1151;
			short num2 = num;
			num = 1151;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_g = value;
		}
	}

	private static string URL_DIRClearClient
	{
		[CompilerGenerated]
		get
		{
			short num = 13419;
			short num2 = num;
			num = 13419;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_h;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -24911;
			short num2 = num;
			num = -24911;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_h = value;
		}
	}

	private static string URL_DIRClearClientDIR
	{
		[CompilerGenerated]
		get
		{
			short num = 19313;
			short num2 = num;
			num = 19313;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_i;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 9560;
			short num2 = num;
			num = 9560;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_i = value;
		}
	}

	private static string URL_UpdateNews
	{
		[CompilerGenerated]
		get
		{
			short num = 8067;
			short num2 = num;
			num = 8067;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_j;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -8857;
			short num2 = num;
			num = -8857;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_j = value;
		}
	}

	private static string URL_DIRUpdateNews
	{
		[CompilerGenerated]
		get
		{
			short num = 1311;
			short num2 = num;
			num = 1311;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_k;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 22195;
			short num2 = num;
			num = 22195;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_k = value;
		}
	}

	private static string URL_Shop
	{
		[CompilerGenerated]
		get
		{
			short num = -12;
			short num2 = num;
			num = -12;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_l;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 4869;
			short num2 = num;
			num = 4869;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_l = value;
		}
	}

	private static string URL_DIRFastClient
	{
		[CompilerGenerated]
		get
		{
			short num = 929;
			short num2 = num;
			num = 929;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_m;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = -15501;
			short num2 = num;
			num = -15501;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_m = value;
		}
	}

	private static string URL_DIRFastClientDIR
	{
		[CompilerGenerated]
		get
		{
			short num = 573;
			short num2 = num;
			num = 573;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_n;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -23284;
			short num2 = num;
			num = -23284;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_n = value;
		}
	}

	public static string NameServerForTimePlayed
	{
		[CompilerGenerated]
		get
		{
			short num = -3258;
			short num2 = num;
			num = -3258;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_ap;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 24493;
			short num2 = num;
			num = 24493;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_ap = value;
		}
	}

	public static string TorrentName
	{
		[CompilerGenerated]
		get
		{
			short num = 32127;
			short num2 = num;
			num = 32127;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_aq;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -23304;
			short num2 = num;
			num = -23304;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_aq = value;
		}
	}

	private string NameDirGamePatch
	{
		[CompilerGenerated]
		get
		{
			short num = -1227;
			short num2 = num;
			num = -1227;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return this.m_eval_ar;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 3780;
			short num2 = num;
			num = 3780;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			this.m_eval_ar = value;
		}
	}

	public static string DirLocal
	{
		[CompilerGenerated]
		get
		{
			short num = -5552;
			short num2 = num;
			num = -5552;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return MainWindow.m_eval_as;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 30015;
			short num2 = num;
			num = 30015;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MainWindow.m_eval_as = value;
		}
	}

	private string UIDG
	{
		[CompilerGenerated]
		get
		{
			short num = 17778;
			short num2 = num;
			num = 17778;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return this.m_eval_at;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 5185;
			short num2 = num;
			num = 5185;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			this.m_eval_at = value;
		}
	}

	private string MC
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -1156;
			short num2 = num;
			num = -1156;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_au;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -7240;
			short num2 = num;
			num = -7240;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_au = value;
		}
	}

	private string LKL
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -21077;
			short num2 = num;
			num = -21077;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_av;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -7478;
			short num2 = num;
			num = -7478;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_av = value;
		}
	}

	public static string Mod_in
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 4744;
			short num2 = num;
			num = 4744;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_aw;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -8913;
			short num2 = num;
			num = -8913;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_aw = value;
		}
	}

	private string UserIDH
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 5720;
			short num2 = num;
			num = 5720;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_ax;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 3458;
			short num2 = num;
			num = 3458;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_ax = value;
		}
	}

	public static string Updateclient
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 25240;
			short num2 = num;
			num = 25240;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_ay;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 1215;
			short num2 = num;
			num = 1215;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			MainWindow.m_eval_ay = value;
		}
	}

	public static string Updatemods
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -2010;
			short num2 = num;
			num = -2010;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_az;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -13427;
			short num2 = num;
			num = -13427;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			MainWindow.m_eval_az = value;
		}
	}

	private string Directory_game
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -5941;
			short num2 = num;
			num = -5941;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_a1;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -16695;
			short num2 = num;
			num = -16695;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_a1 = value;
		}
	}

	public static string Directory_Launcher
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -15364;
			short num2 = num;
			num = -15364;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_a2;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 17049;
			short num2 = num;
			num = 17049;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_a2 = value;
		}
	}

	public static string Name_form
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 29411;
			short num2 = num;
			num = 29411;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_a3;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 29574;
			short num2 = num;
			num = 29574;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_a3 = value;
		}
	}

	public static string Loadsetting
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -11740;
			short num2 = num;
			num = -11740;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_a4;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -2391;
			short num2 = num;
			num = -2391;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			MainWindow.m_eval_a4 = value;
		}
	}

	private string Ip_host
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -22444;
			short num2 = num;
			num = -22444;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_a5;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -9386;
			short num2 = num;
			num = -9386;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_a5 = value;
		}
	}

	private string Message_user
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -31206;
			short num2 = num;
			num = -31206;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_a6;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -16077;
			short num2 = num;
			num = -16077;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_a6 = value;
		}
	}

	private string Name_server
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 19861;
			short num2 = num;
			num = 19861;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_a7;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -4259;
			short num2 = num;
			num = -4259;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_a7 = value;
		}
	}

	private string Ip_server
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 977;
			short num2 = num;
			num = 977;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_a8;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -13923;
			short num2 = num;
			num = -13923;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_a8 = value;
		}
	}

	private string Port_server
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -32566;
			short num2 = num;
			num = -32566;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_a9;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 11637;
			short num2 = num;
			num = 11637;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_a9 = value;
		}
	}

	private string Slot_server
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 6703;
			short num2 = num;
			num = 6703;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_ba;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -16597;
			short num2 = num;
			num = -16597;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_ba = value;
		}
	}

	private string Ping_server
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 22846;
			short num2 = num;
			num = 22846;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bb;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 14128;
			short num2 = num;
			num = 14128;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			this.m_eval_bb = value;
		}
	}

	private string Portudp
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 10715;
			short num2 = num;
			num = 10715;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_bc;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 15307;
			short num2 = num;
			num = 15307;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_bc = value;
		}
	}

	private string Nameplayers
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 12220;
			short num2 = num;
			num = 12220;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_bd;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 8788;
			short num2 = num;
			num = 8788;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_bd = value;
		}
	}

	private string Mods
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 17451;
			short num2 = num;
			num = 17451;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_be;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 8901;
			short num2 = num;
			num = 8901;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_be = value;
		}
	}

	private string Whitelist
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -851;
			short num2 = num;
			num = -851;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_bf;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -2529;
			short num2 = num;
			num = -2529;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bf = value;
		}
	}

	private string PASS
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 24794;
			short num2 = num;
			num = 24794;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bg;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -643;
			short num2 = num;
			num = -643;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			this.m_eval_bg = value;
		}
	}

	private string Time_host
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -21274;
			short num2 = num;
			num = -21274;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bh;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 10169;
			short num2 = num;
			num = 10169;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bh = value;
		}
	}

	public static string Connectip
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 30433;
			short num2 = num;
			num = 30433;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_bi;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -16715;
			short num2 = num;
			num = -16715;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_bi = value;
		}
	}

	public static string Connectport
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -7941;
			short num2 = num;
			num = -7941;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return eval_bj;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -18276;
			short num2 = num;
			num = -18276;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_bj = value;
		}
	}

	private string Connectslot
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -25631;
			short num2 = num;
			num = -25631;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bk;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 30410;
			short num2 = num;
			num = 30410;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bk = value;
		}
	}

	public static string Playergame
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -23781;
			short num2 = num;
			num = -23781;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_bl;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 20168;
			short num2 = num;
			num = 20168;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			MainWindow.m_eval_bl = value;
		}
	}

	public static string Playersslot
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 27629;
			short num2 = num;
			num = 27629;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_bm;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 8230;
			short num2 = num;
			num = 8230;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_bm = value;
		}
	}

	private string Connectplay
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 23966;
			short num2 = num;
			num = 23966;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_bn;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -5000;
			short num2 = num;
			num = -5000;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bn = value;
		}
	}

	private string IPVIDSCS
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -27340;
			short num2 = num;
			num = -27340;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bo;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 9002;
			short num2 = num;
			num = 9002;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bo = value;
		}
	}

	private string PortVID
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -9890;
			short num2 = num;
			num = -9890;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bp;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 19643;
			short num2 = num;
			num = 19643;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bp = value;
		}
	}

	private string DISINVITE
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -29513;
			short num2 = num;
			num = -29513;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_bq;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 13602;
			short num2 = num;
			num = 13602;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_bq = value;
		}
	}

	private string TIMERESTART
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -5488;
			short num2 = num;
			num = -5488;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_br;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 14587;
			short num2 = num;
			num = 14587;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_br = value;
		}
	}

	private string IMAGESERVER
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 29262;
			short num2 = num;
			num = 29262;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_bs;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -20069;
			short num2 = num;
			num = -20069;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_bs = value;
		}
	}

	private static string Name_players_local
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -27410;
			short num2 = num;
			num = -27410;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_bt;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -30671;
			short num2 = num;
			num = -30671;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_bt = value;
		}
	}

	private string Launcher_
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 4828;
			short num2 = num;
			num = 4828;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bu;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 20622;
			short num2 = num;
			num = 20622;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bu = value;
		}
	}

	public static int Port_OUTVID
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 12122;
			short num2 = num;
			num = 12122;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_bv;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -20641;
			short num2 = num;
			num = -20641;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_bv = value;
		}
	}

	public static string IP_OUTVIDSCS
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -1540;
			short num2 = num;
			num = -1540;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_bw;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -19915;
			short num2 = num;
			num = -19915;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_bw = value;
		}
	}

	public string MESSAGES
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 31355;
			short num2 = num;
			num = 31355;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_bx;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -30564;
			short num2 = num;
			num = -30564;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_bx = value;
		}
	}

	private string Loc_client
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 5197;
			short num2 = num;
			num = 5197;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_by;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 9692;
			short num2 = num;
			num = 9692;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_by = value;
		}
	}

	private string Vk_URL
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 30843;
			short num2 = num;
			num = 30843;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_bz;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 17691;
			short num2 = num;
			num = 17691;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_bz = value;
		}
	}

	private string Site_URL
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -5982;
			short num2 = num;
			num = -5982;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_b0;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -14291;
			short num2 = num;
			num = -14291;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_b0 = value;
		}
	}

	private string DISCORD_URL
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -28268;
			short num2 = num;
			num = -28268;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_b1;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = -23708;
			short num2 = num;
			num = -23708;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_b1 = value;
		}
	}

	private string TxtUploadFastResume
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 7184;
			short num2 = num;
			num = 7184;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_b2;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 2678;
			short num2 = num;
			num = 2678;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_b2 = value;
		}
	}

	private string TxtDiscount
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -13501;
			short num2 = num;
			num = -13501;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_b3;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 2485;
			short num2 = num;
			num = 2485;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_b3 = value;
		}
	}

	private string DownloadAllGameFiles
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = -8660;
			short num2 = num;
			num = -8660;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return this.m_eval_b5;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 17220;
			short num2 = num;
			num = 17220;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			this.m_eval_b5 = value;
		}
	}

	private string TxtSMD
	{
		[CompilerGenerated]
		get
		{
			short num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = -29408;
			short num2 = num;
			num = -29408;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				return this.m_eval_b7;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 0;
			_ = num;
			num = 8448;
			short num2 = num;
			num = 8448;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			this.m_eval_b7 = value;
		}
	}

	public static string Langve
	{
		[CompilerGenerated]
		get
		{
			short num = 22729;
			short num2 = num;
			num = 22729;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				return MainWindow.m_eval_b8;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -23104;
			short num2 = num;
			num = -23104;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			MainWindow.m_eval_b8 = value;
		}
	}

	public static string PriceItem
	{
		[CompilerGenerated]
		get
		{
			short num = 19417;
			short num2 = num;
			num = 19417;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_ck;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -23330;
			short num2 = num;
			num = -23330;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_ck = value;
		}
	}

	public static string Items
	{
		[CompilerGenerated]
		get
		{
			short num = -30678;
			short num2 = num;
			num = -30678;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cl;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -13375;
			short num2 = num;
			num = -13375;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cl = value;
		}
	}

	public static string Items_Name
	{
		[CompilerGenerated]
		get
		{
			short num = 22271;
			short num2 = num;
			num = 22271;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cm;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 19859;
			short num2 = num;
			num = 19859;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cm = value;
		}
	}

	public static string URL_SET
	{
		[CompilerGenerated]
		get
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = -8466;
			short num2 = num;
			num = -8466;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cn;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -24946;
			short num2 = num;
			num = -24946;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cn = value;
		}
	}

	public static string URL_LOOT
	{
		[CompilerGenerated]
		get
		{
			short num = -20796;
			short num2 = num;
			num = -20796;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_co;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -10713;
			short num2 = num;
			num = -10713;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_co = value;
		}
	}

	public static string URL_WEAPON
	{
		[CompilerGenerated]
		get
		{
			short num = -30748;
			short num2 = num;
			num = -30748;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cp;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 14613;
			short num2 = num;
			num = 14613;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cp = value;
		}
	}

	public static string URL_CAR
	{
		[CompilerGenerated]
		get
		{
			short num = -29246;
			short num2 = num;
			num = -29246;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cq;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 2754;
			short num2 = num;
			num = 2754;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cq = value;
		}
	}

	public static string URL_INVENTORY
	{
		[CompilerGenerated]
		get
		{
			short num = 28906;
			short num2 = num;
			num = 28906;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cr;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 22247;
			short num2 = num;
			num = 22247;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cr = value;
		}
	}

	public static string URL_MASK
	{
		[CompilerGenerated]
		get
		{
			short num = 24403;
			short num2 = num;
			num = 24403;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cs;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 14280;
			short num2 = num;
			num = 14280;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cs = value;
		}
	}

	public static string URL_BASE
	{
		[CompilerGenerated]
		get
		{
			short num = -281;
			short num2 = num;
			num = -281;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_ct;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -2182;
			short num2 = num;
			num = -2182;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_ct = value;
		}
	}

	public static string URL_MEDIC
	{
		[CompilerGenerated]
		get
		{
			short num = 30957;
			short num2 = num;
			num = 30957;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cu;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = -11200;
			short num2 = num;
			num = -11200;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cu = value;
		}
	}

	public static string CMDItem
	{
		[CompilerGenerated]
		get
		{
			short num = -24037;
			short num2 = num;
			num = -24037;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_cv;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 23884;
			short num2 = num;
			num = 23884;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_cv = value;
		}
	}

	private string IdSteam64
	{
		[CompilerGenerated]
		get
		{
			short num = -21785;
			short num2 = num;
			num = -21785;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_dd;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -24416;
			short num2 = num;
			num = -24416;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_dd = value;
		}
	}

	private string SteamPatch
	{
		[CompilerGenerated]
		get
		{
			short num = 3363;
			short num2 = num;
			num = 3363;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				return eval_de;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -22057;
			short num2 = num;
			num = -22057;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_de = value;
		}
	}

	private string HTTP
	{
		[CompilerGenerated]
		get
		{
			short num = 7904;
			short num2 = num;
			num = 7904;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_dg;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 32471;
			short num2 = num;
			num = 32471;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_dg = value;
		}
	}

	private string CharsLauncher
	{
		[CompilerGenerated]
		get
		{
			short num = -28595;
			short num2 = num;
			num = -28595;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				return eval_dn;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -19098;
			short num2 = num;
			num = -19098;
			switch (num2 == num)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_dn = value;
		}
	}

	private FileInfo[] Files
	{
		[CompilerGenerated]
		get
		{
			short num = 6666;
			short num2 = num;
			num = 6666;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_dz;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -2301;
			short num2 = num;
			num = -2301;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_dz = value;
		}
	}

	private DirectoryInfo[] Diles
	{
		[CompilerGenerated]
		get
		{
			short num = 12591;
			short num2 = num;
			num = 12591;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_d0;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -31035;
			short num2 = num;
			num = -31035;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_d0 = value;
		}
	}

	private string UidToPlayer
	{
		[CompilerGenerated]
		get
		{
			short num = -2959;
			short num2 = num;
			num = -2959;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_eg;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 17642;
			short num2 = num;
			num = 17642;
			switch (num2 == num)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_eg = value;
		}
	}

	private string Ename
	{
		[CompilerGenerated]
		get
		{
			short num = -29713;
			short num2 = num;
			num = -29713;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_ej;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 6194;
			short num2 = num;
			num = 6194;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_ej = value;
		}
	}

	private string UID_SC
	{
		[CompilerGenerated]
		get
		{
			short num = 2147;
			short num2 = num;
			num = 2147;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_ek;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = -27619;
			short num2 = num;
			num = -27619;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_ek = value;
		}
	}

	private string GUID_SC
	{
		[CompilerGenerated]
		get
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = -10764;
			short num2 = num;
			num = -10764;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				return eval_el;
			}
		}
		[CompilerGenerated]
		set
		{
			short num = 23894;
			short num2 = num;
			num = 23894;
			switch (num2 == num)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_el = value;
		}
	}

	public event PropertyChangedEventHandler PropertyChanged
	{
		[CompilerGenerated]
		add
		{
			int num = default(int);
			PropertyChangedEventHandler propertyChangedEventHandler = default(PropertyChangedEventHandler);
			switch (0)
			{
			default:
			{
				PropertyChangedEventHandler propertyChangedEventHandler2 = default(PropertyChangedEventHandler);
				while (true)
				{
					PropertyChangedEventHandler value2;
					short num2;
					switch (num)
					{
					case 0:
					{
						num2 = 0;
						_ = num2;
						num2 = 18054;
						short num3 = num2;
						num2 = 18054;
						switch (num3 == num2)
						{
						case false:
						case true:
							break;
						default:
							goto IL_0096;
						}
						break;
					}
					case 2:
						if ((object)propertyChangedEventHandler == propertyChangedEventHandler2)
						{
							num2 = 1;
							num = num2;
							continue;
						}
						goto IL_00af;
					case 1:
						return;
						IL_00af:
						num2 = 1;
						if (num2 != 0)
						{
						}
						propertyChangedEventHandler2 = propertyChangedEventHandler;
						value2 = (PropertyChangedEventHandler)Delegate.Combine(propertyChangedEventHandler2, value);
						propertyChangedEventHandler = Interlocked.CompareExchange(ref eval_e9, value2, propertyChangedEventHandler2);
						num2 = 2;
						num = num2;
						continue;
						IL_0096:
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_00af;
					}
					break;
				}
				goto case 0;
			}
			case 0:
			{
				propertyChangedEventHandler = eval_e9;
				short num2 = 0;
				num = num2;
				goto default;
			}
			}
		}
		[CompilerGenerated]
		remove
		{
			int num = default(int);
			PropertyChangedEventHandler propertyChangedEventHandler = default(PropertyChangedEventHandler);
			switch (0)
			{
			default:
			{
				PropertyChangedEventHandler propertyChangedEventHandler2 = default(PropertyChangedEventHandler);
				while (true)
				{
					PropertyChangedEventHandler value2;
					short num2;
					switch (num)
					{
					case 0:
					{
						num2 = 0;
						_ = num2;
						num2 = -25502;
						short num3 = num2;
						num2 = -25502;
						switch (num3 == num2)
						{
						case false:
						case true:
							break;
						default:
							goto IL_0098;
						}
						break;
					}
					case 2:
						if ((object)propertyChangedEventHandler == propertyChangedEventHandler2)
						{
							num2 = 1;
							num = num2;
							continue;
						}
						goto IL_00af;
					case 1:
						{
							num2 = 1;
							if (num2 == 0)
							{
							}
							return;
						}
						IL_00af:
						propertyChangedEventHandler2 = propertyChangedEventHandler;
						value2 = (PropertyChangedEventHandler)Delegate.Remove(propertyChangedEventHandler2, value);
						propertyChangedEventHandler = Interlocked.CompareExchange(ref eval_e9, value2, propertyChangedEventHandler2);
						num2 = 2;
						num = num2;
						continue;
						IL_0098:
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_00af;
					}
					break;
				}
				goto case 0;
			}
			case 0:
			{
				propertyChangedEventHandler = eval_e9;
				short num2 = 0;
				num = num2;
				goto default;
			}
			}
		}
	}

	private void eval_ai(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = 18790;
		short num2 = num;
		num = 18790;
		switch (num2 == num)
		{
		default:
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			if (!string.IsNullOrEmpty(Site_URL))
			{
				goto case false;
			}
			break;
		case false:
		case true:
			try
			{
				Process.Start(Site_URL);
				break;
			}
			catch
			{
				break;
			}
		}
	}

	private void eval_ah(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = -20494;
		short num2 = num;
		num = -20494;
		switch (num2 == num)
		{
		default:
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			if (!string.IsNullOrEmpty(Vk_URL))
			{
				goto case false;
			}
			break;
		case false:
		case true:
			try
			{
				Process.Start(Vk_URL);
				break;
			}
			catch
			{
				break;
			}
		}
	}

	private void eval_ag(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 0:
			{
				num = 26984;
				short num3 = num;
				num = 26984;
				switch (num3 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					switch (0)
					{
					default:
						goto end_IL_00be;
					case 0:
						break;
					}
					break;
				case false:
				case true:
					break;
				}
				goto default;
			}
			default:
				if (!string.IsNullOrEmpty(DISCORD_URL))
				{
					num = 1;
					num2 = num;
					break;
				}
				return;
			case 1:
				Process.Start(DISCORD_URL);
				num = 2;
				num2 = num;
				break;
			case 2:
				return;
				end_IL_00be:
				break;
			}
		}
	}

	private void eval_af(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 0:
			{
				num = 11192;
				short num3 = num;
				num = 11192;
				switch (num3 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					switch (0)
					{
					default:
						goto end_IL_00b9;
					case 0:
						break;
					}
					break;
				case false:
				case true:
					break;
				}
				goto default;
			}
			default:
				if (!string.IsNullOrEmpty(Site_URL))
				{
					num = 1;
					num2 = num;
					break;
				}
				return;
			case 1:
				Process.Start(Site_URL);
				num = 2;
				num2 = num;
				break;
			case 2:
				return;
				end_IL_00b9:
				break;
			}
		}
	}

	public MainWindow()
	{
		try
		{
			if (SingleApplication.Run())
			{
				InitializeComponent();
			}
			else
			{
				System.Windows.MessageBox.Show("Лаунчер уже запущен!,The launcher is already running!", name_messege, MessageBoxButton.OK, MessageBoxImage.Asterisk);
				Close_launcher();
			}
		}
		catch (Exception ex)
		{
			System.Windows.MessageBox.Show("ERROR:" + ex.InnerException.Message);
		}
		Name_form = System.Windows.Forms.Application.ExecutablePath;
		Name_form = Path.GetFileNameWithoutExtension(Name_form);
		Directory_game = Environment.CurrentDirectory;
		Directory_Launcher = Environment.CurrentDirectory;
		DirLocal = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), this.m_eval_ad);
		eval_b9();
		eval_fd.Text = name_messege;
		eval_fc.ToolTipText = name_messege;
		if (Name_form == this.m_eval_ac)
		{
			try
			{
				File.Delete(Directory_Launcher + "\\" + MainWindow.m_eval_ab + ".exe");
				File.Copy(Directory_Launcher + "\\" + this.m_eval_ac + ".exe", Directory_Launcher + "\\" + MainWindow.m_eval_ab + ".exe", overwrite: true);
				ProcessStartInfo obj = new ProcessStartInfo
				{
					FileName = MainWindow.m_eval_ab + ".exe",
					Verb = "runas"
				};
				obj.WorkingDirectory = obj.WorkingDirectory + Directory_Launcher + "\\";
				Process.Start(obj);
				Close_launcher();
			}
			catch (Exception ex2)
			{
				System.Windows.MessageBox.Show(ex2.Message + " !-=Name_form == LauncherNew=-");
			}
		}
		if (Name_form == MainWindow.m_eval_ab)
		{
			try
			{
				File.Delete(Directory_Launcher + "\\" + this.m_eval_ac + ".exe");
			}
			catch (Exception ex3)
			{
				System.Windows.MessageBox.Show(ex3.Message + " !-=Name_form == LauncherOld=-");
			}
		}
		if (Name_form != this.m_eval_ac)
		{
			eval_cd();
		}
	}

	[AsyncStateMachine(typeof(eval_au))]
	private void eval_cd()
	{
		short num = 0;
		_ = num;
		num = 4845;
		short num2 = num;
		num = 4845;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_au stateMachine = default(eval_au);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_ag))]
	private void cc()
	{
		short num = 0;
		_ = num;
		num = 29674;
		short num2 = num;
		num = 29674;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_ag stateMachine = default(eval_ag);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_ar))]
	private void eval_cb()
	{
		short num = 0;
		_ = num;
		num = -19093;
		short num2 = num;
		num = -19093;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_ar stateMachine = default(eval_ar);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_aq))]
	private Task eval_ca()
	{
		short num = 0;
		_ = num;
		num = -15034;
		short num2 = num;
		num = -15034;
		switch (num2 == num)
		{
		default:
		{
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_aq stateMachine = default(eval_aq);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	public void Norificons(string message)
	{
		short num = 10695;
		short num2 = num;
		num = 10695;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		FancyBalloon balloon = new FancyBalloon
		{
			BalloonText = name_messege,
			Text = message
		};
		eval_fc.ShowCustomBalloon(balloon, PopupAnimation.Slide, 4000);
	}

	private void eval_b9()
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			string text = default(string);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num2)
					{
					case 5:
						if (text != null)
						{
							num = 3;
							num2 = num;
						}
						else
						{
							text = (Langve = "RU");
							num = 1;
							num2 = num;
						}
						continue;
					case 11:
						eval_fs.Content = "ОБНОВЛЕНИЕ";
						num = 12;
						num2 = num;
						continue;
					case 10:
						try
						{
							while (true)
							{
								Shoploot shoploot = new Shoploot();
								Shopcars shopcars = new Shopcars();
								Shopset shopset = new Shopset();
								IEnumerator<System.Windows.Media.FontFamily> enumerator = Fonts.GetFontFamilies(new Uri("pack://application:,,,/"), "./fontandicons/fontm/").GetEnumerator();
								try
								{
									num = 1;
									num2 = num;
									while (true)
									{
										switch (num2)
										{
										case 1:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											num = 2;
											num2 = num;
											continue;
										case 2:
											if (enumerator.MoveNext())
											{
												System.Windows.Media.FontFamily current = enumerator.Current;
												eval_ig.FontFamily = current;
												eval_ie.FontFamily = current;
												fa.FontFamily = current;
												eval_fh.FontFamily = current;
												eval_fy.FontFamily = current;
												eval_fx.FontFamily = current;
												eval_hv.FontFamily = current;
												eval_he.FontFamily = current;
												eval_hb.FontFamily = current;
												eval_hf.FontFamily = current;
												eval_gw.FontFamily = current;
												eval_gx.FontFamily = current;
												eval_gy.FontFamily = current;
												eval_g5.FontFamily = current;
												eval_g8.FontFamily = current;
												eval_g6.FontFamily = current;
												eval_g7.FontFamily = current;
												eval_ha.FontFamily = current;
												eval_g9.FontFamily = current;
												hn.FontFamily = current;
												eval_hm.FontFamily = current;
												eval_hl.FontFamily = current;
												eval_hw.FontFamily = current;
												hx.FontFamily = current;
												eval_hr.FontFamily = current;
												eval_hs.FontFamily = current;
												ht.FontFamily = current;
												hu.FontFamily = current;
												eval_ho.FontFamily = current;
												eval_gu.FontFamily = current;
												eval_gr.FontFamily = current;
												eval_gm.FontFamily = current;
												eval_im.FontFamily = current;
												eval_in.FontFamily = current;
												iz.FontFamily = current;
												eval_hd.FontFamily = current;
												eval_hh.FontFamily = current;
												gz.FontFamily = current;
												g0.FontFamily = current;
												eval_g1.FontFamily = current;
												eval_fp.FontFamily = current;
												TextNameServer.FontFamily = current;
												eval_fs.FontFamily = current;
												eval_dj.TextOnlain_GStats.FontFamily = current;
												eval_dj.TxtName_GStats.FontFamily = current;
												eval_fq.FontFamily = current;
												eval_iw.FontFamily = current;
												eval_ix.FontFamily = current;
												eval_gk.FontFamily = current;
												eval_gi.FontFamily = current;
												fv.FontFamily = current;
												iv.FontFamily = current;
												eval_gh.FontFamily = current;
												eval_gf.FontFamily = current;
												eval_fr.FontFamily = current;
												shoploot.TxtDescr.FontFamily = current;
												shoploot.LNameSet.FontFamily = current;
												shopset.LNameSet.FontFamily = current;
												shopset.TxtDescr.FontFamily = current;
												shopcars.LNameSet.FontFamily = current;
												shopcars.TxtDescr.FontFamily = current;
												gc.FontFamily = current;
												eval_ge.FontFamily = current;
												gd.FontFamily = current;
												gg.FontFamily = current;
												gj.FontFamily = current;
												eval_fm.TabALL.FontFamily = current;
												eval_fm.TabDistancion.FontFamily = current;
												eval_fm.TabKillZ.FontFamily = current;
												eval_fm.TabShoot.FontFamily = current;
												eval_fm.TabTime.FontFamily = current;
												eval_fm.TXT.FontFamily = current;
												num = 4;
												num2 = num;
											}
											else
											{
												num = 0;
												num2 = num;
											}
											continue;
										case 0:
											num = 3;
											num2 = num;
											continue;
										case 3:
											break;
										}
										break;
									}
								}
								finally
								{
									num = 2;
									num2 = num;
									while (true)
									{
										switch (num2)
										{
										case 2:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (enumerator != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											break;
										case 0:
											enumerator.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											break;
										}
										break;
									}
								}
								num = 19282;
								short num3 = num;
								num = 19282;
								switch (num3 == num)
								{
								case false:
								case true:
									continue;
								}
								num = 0;
								if (num == 0)
								{
								}
								return;
							}
						}
						catch
						{
							return;
						}
					case 7:
						num = 0;
						num2 = num;
						continue;
					case 0:
						if (UpdateStatus)
						{
							num = 11;
							num2 = num;
							continue;
						}
						goto case 12;
					case 1:
						try
						{
							RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
							registryKey.SetValue("language", "RU");
							registryKey.Close();
							eval_b9();
						}
						catch
						{
						}
						goto case 9;
					case 4:
						if (UpdateStatus)
						{
							num = 2;
							num2 = num;
							continue;
						}
						goto case 9;
					case 3:
						Langve = text;
						num = 8;
						num2 = num;
						continue;
					case 8:
						if (!(Langve == "RU"))
						{
							eval_hz.Content = "Clear game cache on startup.";
							eval_hy.Content = "Disable the transition of the launcher to the tray";
							eval_fm.TabALL.Header = "[Player]";
							eval_fm.TabDistancion.Header = "[Traveler]";
							eval_fm.TabKillZ.Header = "[Zombie kills]";
							eval_fm.TabShoot.Header = "[Long shot]";
							eval_fm.TabTime.Header = "[Survival]";
							eval_fm.TXT.Content = "TOP 30 " + name_messege;
							eval_ix.Content = "IMPORTANT! if you already have loot on your character, then parts of the set may fall to the ground!";
							eval_iw.Content = "IMPORTANT! Your character must be on the server.";
							eval_gk.Content = "Copy";
							eval_gi.Content = "Account number";
							fv.Content = "Your account : 0 rub.";
							iv.Content = "Your account : 0 rub.";
							eval_gh.Content = "Copy";
							eval_gf.Content = "Your personal UID";
							eval_hk.Content = "Automatic agreement with BattlEye";
							eval_f5.Content = "NEWS";
							eval_ii.Content = "SERVER TEMPORARILY DOES NOT WORK";
							gc.Content = "Personal ID";
							eval_ge.Content = "Copy";
							eval_hf.Content = "Preferred Object View Distance :";
							eval_hi.Content = "m.";
							eval_he.Content = "m.";
							eval_hb.Content = "Visibility range :";
							eval_gr.Content = "List of files for updating the game client :";
							eval_ho.Content = "Check integrity of DayZ files (no mods)";
							eval_gu.Content = "RESET LAUNCHER SETTINGS IN THE REGISTER";
							eval_hm.Content = "Specify";
							eval_fh.Content = "Total servers : 0 / Total players : 0";
							eval_hw.SetValue(TextBoxHelper.WatermarkProperty, "Enter your nickname");
							hx.Content = "Nick:";
							hn.Content = "Path to the game :";
							eval_in.Content = "CLOSE GAME";
							ht.Content = "Kb/sec.";
							hu.Content = "Kb/sec.";
							eval_hr.Content = "Download limit : ";
							eval_hs.Content = "Upload limit : ";
							num = 1;
							if (num != 0)
							{
							}
							num = 4;
							num2 = num;
						}
						else
						{
							num = 7;
							num2 = num;
						}
						continue;
					case 9:
						num = 10;
						num2 = num;
						continue;
					case 2:
						eval_fs.Content = "UPDATE";
						num = 6;
						num2 = num;
						continue;
					case 6:
						num = 0;
						_ = num;
						goto case 9;
					case 12:
						eval_gr.Content = "Список файлов на обновление клиента игры :";
						eval_ho.Content = "Проверить целостность файлов DayZ (без модов)";
						ht.Content = "Кб/сек.";
						hu.Content = "Кб/сек.";
						eval_hr.Content = "Ограничение на загрузку : ";
						eval_hs.Content = "Ограничение на раздачу : ";
						eval_hm.Content = "Указать";
						eval_hw.SetValue(TextBoxHelper.WatermarkProperty, "Укажите игровой ник");
						hx.Content = "Ник:";
						eval_in.Content = "ЗАКРЫТЬ ИГРУ";
						eval_fh.Content = "Всего серверов : 0 / Всего игроков : 0";
						hn.Content = "Путь к игре :";
						eval_gu.Content = "СБРОСИТЬ НАСТРОЙКИ ЛАУНЧЕРА В РЕЕСТРЕ";
						eval_hb.Content = "Дальность видимости :";
						eval_he.Content = "м.";
						eval_hi.Content = "м.";
						eval_hf.Content = "Предпочтительное расстояние до объекта :";
						eval_ge.Content = "Скопировать";
						gc.Content = "Personal ID";
						eval_ii.Content = "СЕРВЕР ВРЕМЕННО НЕ РАБОТАЕТ";
						eval_f5.Content = "НОВОСТИ";
						eval_hk.Content = "Автоматическое соглашение с BattlEye";
						eval_gf.Content = "Ваш персональный UID";
						eval_gh.Content = "Скопировать";
						fv.Content = "Ваш счет : 0 руб.";
						iv.Content = "Ваш счет : 0 руб.";
						eval_gi.Content = "Номер счета";
						eval_gk.Content = "Скопировать";
						eval_iw.Content = "ВАЖНО! Ваш персонаж должен быть на сервере.";
						eval_ix.Content = "ВАЖНО! если у Вас уже есть лут на персонаже то части сета могут выпасть на землю! ";
						eval_fm.TXT.Content = "ТОП 30 " + name_messege;
						eval_fm.TabALL.Header = "[Игрок]";
						eval_fm.TabDistancion.Header = "[Путешественник]";
						eval_fm.TabKillZ.Header = "[Убийств зомби]";
						eval_fm.TabShoot.Header = "[Дальний выстрел]";
						eval_fm.TabTime.Header = "[Выживания]";
						eval_hy.Content = "Отключить переход лаунчера в трей";
						eval_hz.Content = "Очистить кеш игры при запуске.";
						num = 9;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			case 0:
				text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "language", null);
				num = 5;
				num2 = num;
				goto default;
			}
		}
		}
	}

	private void eval_d(object A_0, SelectionChangedEventArgs A_1)
	{
		short num2;
		try
		{
			int num = default(int);
			string text = default(string);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num)
					{
					case 1:
						if (text == "Русский")
						{
							num2 = 6;
							num = num2;
							continue;
						}
						goto case 5;
					case 6:
					{
						RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
						registryKey.SetValue("language", "RU");
						registryKey.Close();
						eval_b9();
						eval_bn();
						Lbl_version(an, Updateclient, Updatemods);
						eval_b3();
						num2 = 5;
						num = num2;
						continue;
					}
					case 2:
					{
						RegistryKey registryKey2 = Registry.CurrentUser.CreateSubKey(Name_form);
						registryKey2.SetValue("language", "EN");
						registryKey2.Close();
						eval_b9();
						eval_bn();
						Lbl_version(an, Updateclient, Updatemods);
						eval_b3();
						num2 = 0;
						num = num2;
						continue;
					}
					case 5:
					{
						num2 = 18287;
						short num3 = num2;
						num2 = 18287;
						switch (num3 == num2)
						{
						case false:
						case true:
							break;
						default:
							num2 = 0;
							if (num2 != 0)
							{
							}
							num2 = 4;
							num = num2;
							continue;
						}
						goto case 2;
					}
					case 4:
						if (text == "English")
						{
							num2 = 2;
							num = num2;
							continue;
						}
						goto case 0;
					case 0:
						num2 = 3;
						num = num2;
						continue;
					case 3:
						goto end_IL_0019;
					}
					goto case 0;
					continue;
					end_IL_0019:
					break;
				}
				break;
			case 0:
			{
				text = eval_hv.SelectedItem.ToString();
				RegistryKey registryKey3 = Registry.CurrentUser.CreateSubKey(Name_form);
				registryKey3.SetValue("CDLanguage", text);
				registryKey3.Close();
				num2 = 1;
				num = num2;
				goto default;
			}
			}
		}
		catch (Exception ex)
		{
			Exception b = ex;
			fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
			{
				short num4 = 1097;
				short num5 = num4;
				num4 = 1097;
				switch (num5 == num4)
				{
				default:
					num4 = 0;
					_ = num4;
					break;
				case true:
					break;
				}
				num4 = 1;
				if (num4 != 0)
				{
				}
				num4 = 0;
				if (num4 != 0)
				{
				}
				MessageBoxWindow.Show(this, "Language : " + b.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			});
		}
		num2 = 0;
		_ = num2;
		num2 = 1;
		if (num2 == 0)
		{
		}
	}

	private void eval_b8()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 2;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 2:
				switch (0)
				{
				default:
					continue;
				case 0:
					break;
				}
				goto default;
			default:
				if (DownloadMods)
				{
					num = 5;
					num2 = num;
					continue;
				}
				URL_DIRFastClient = HTTP + this.m_eval_r + ":";
				URL_DIRFastClientDIR = this.m_eval_al + "fastresume.log";
				URL_DIRClearClient = HTTP + this.m_eval_r + ":";
				URL_DIRClearClientDIR = this.m_eval_al + "DIRECTORY.log";
				URL_ClearClient = HTTP + this.m_eval_r + ":";
				URL_ClearClientDIR = this.m_eval_al + "FILE.log";
				Url_update_torrent = HTTP + this.m_eval_r + ":";
				URL_TORRENT_DIR = this.m_eval_al + TorrentName;
				num = 1;
				num2 = num;
				continue;
			case 5:
				num = 4;
				num2 = num;
				continue;
			case 4:
			{
				string fileName = Path.GetFileName(eval_hl.Content.ToString());
				if (fileName == this.m_eval_aa)
				{
					URL_DIRFastClient = HTTP + this.m_eval_r + ":";
					URL_DIRFastClientDIR = this.m_eval_al + "DayZ/fastresume.log";
					URL_DIRClearClient = HTTP + this.m_eval_r + ":";
					URL_DIRClearClientDIR = this.m_eval_al + "DayZ/DIRECTORY.log";
					URL_ClearClient = HTTP + this.m_eval_r + ":";
					URL_ClearClientDIR = this.m_eval_al + "DayZ/FILE.log";
					Url_update_torrent = HTTP + this.m_eval_r + ":";
					URL_TORRENT_DIR = this.m_eval_al + "DayZ/" + TorrentName;
				}
				if (fileName == this.m_eval_z)
				{
					num = 3;
					num2 = num;
					continue;
				}
				break;
			}
			case 3:
			{
				num = 0;
				_ = num;
				num = -3141;
				short num3 = num;
				num = -3141;
				switch (num3 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					URL_DIRFastClient = HTTP + this.m_eval_r + ":";
					URL_DIRFastClientDIR = this.m_eval_al + "MODS/fastresume.log";
					URL_DIRClearClient = HTTP + this.m_eval_r + ":";
					URL_DIRClearClientDIR = this.m_eval_al + "MODS/DIRECTORY.log";
					URL_ClearClient = HTTP + this.m_eval_r + ":";
					URL_ClearClientDIR = this.m_eval_al + "MODS/FILE.log";
					Url_update_torrent = HTTP + this.m_eval_r + ":";
					URL_TORRENT_DIR = this.m_eval_al + "MODS/" + TorrentName;
					num = 0;
					num2 = num;
					continue;
				}
				goto case 5;
			}
			case 0:
			case 1:
				break;
			}
			break;
		}
		Site_version_DIR = "/LAUNCHER/launcher.xml";
		this.m_eval_w = HTTP + this.m_eval_r + ":";
		Url_update_DIR = "/LAUNCHER/" + this.m_eval_ad + ".exe";
		Url_update = HTTP + this.m_eval_r + ":";
		URL_UpdateNews = HTTP + this.m_eval_r + ":";
		URL_DIRUpdateNews = "/LAUNCHER/NEWS/ALLNews.xml";
		URL_Shop = HTTP + this.m_eval_t + ":";
	}

	private void eval_a7(object A_0, EventArgs A_1)
	{
		int num = default(int);
		switch (0)
		{
		default:
		{
			Process[] processesByName2 = default(Process[]);
			int num4 = default(int);
			Process[] processesByName3 = default(Process[]);
			while (true)
			{
				short num2;
				switch (num)
				{
				case 1:
				{
					num2 = 0;
					_ = num2;
					Process[] processesByName = Process.GetProcessesByName(this.m_eval_x);
					processesByName2 = Process.GetProcessesByName(this.m_eval_y);
					if (processesByName.Length == 0)
					{
						num2 = 6;
						num = num2;
						continue;
					}
					goto IL_05ff;
				}
				case 3:
					try
					{
						num2 = 15;
						num = num2;
						while (true)
						{
							switch (num)
							{
							case 15:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (!eval_cc)
								{
									num2 = 2;
									num = num2;
								}
								else
								{
									eval_eh.Stop();
									num2 = 5;
									num = num2;
								}
								continue;
							case 5:
								if (!eval_in.IsEnabled)
								{
									num2 = 6;
									num = num2;
									continue;
								}
								break;
							case 0:
								num2 = 13;
								num = num2;
								continue;
							case 13:
								if (ij.Visibility == Visibility.Visible)
								{
									num2 = 8;
									num = num2;
									continue;
								}
								goto case 10;
							case 4:
								eval_id.Visibility = Visibility.Hidden;
								num2 = 22;
								num = num2;
								continue;
							case 6:
								eval_in.IsEnabled = true;
								num2 = 17;
								num = num2;
								continue;
							case 14:
								num2 = 3;
								num = num2;
								continue;
							case 3:
								if (eval_fe.Visibility == Visibility.Hidden)
								{
									num2 = 21;
									num = num2;
									continue;
								}
								goto case 20;
							case 2:
								try
								{
									switch (0)
									{
									default:
										while (true)
										{
											switch (num)
											{
											case 1:
											case 4:
												num2 = 2;
												num = num2;
												continue;
											case 2:
												if (num4 < processesByName3.Length)
												{
													processesByName3[num4].Kill();
													num4++;
													num2 = 4;
													num = num2;
												}
												else
												{
													num2 = 0;
													num = num2;
												}
												continue;
											case 0:
												num2 = 3;
												num = num2;
												continue;
											case 3:
												goto end_IL_02df;
											}
											goto case 0;
											continue;
											end_IL_02df:
											break;
										}
										break;
									case 0:
										processesByName3 = Process.GetProcessesByName("SmartSteamLoader_x64");
										num4 = 0;
										num2 = 1;
										num = num2;
										goto default;
									}
								}
								catch
								{
								}
								eval_im.Content = "";
								eval_cc = false;
								num2 = 16;
								num = num2;
								continue;
							case 22:
								num2 = 11;
								num = num2;
								continue;
							case 11:
								if (eval_f9.Visibility == Visibility.Hidden)
								{
									num2 = 9;
									num = num2;
									continue;
								}
								goto case 14;
							case 16:
								if (eval_id.Visibility == Visibility.Visible)
								{
									num2 = 4;
									num = num2;
									continue;
								}
								goto case 22;
							case 9:
								eval_f9.Visibility = Visibility.Visible;
								num2 = 14;
								num = num2;
								continue;
							case 10:
								num2 = 1;
								num = num2;
								continue;
							case 20:
								num2 = 7;
								num = num2;
								continue;
							case 7:
								if (eval_in.Visibility == Visibility.Visible)
								{
									num2 = 18;
									num = num2;
									continue;
								}
								goto case 0;
							case 21:
								eval_fe.Visibility = Visibility.Visible;
								num2 = 20;
								num = num2;
								continue;
							case 8:
								ij.Visibility = Visibility.Hidden;
								num2 = 10;
								num = num2;
								continue;
							case 18:
								eval_in.Visibility = Visibility.Hidden;
								num2 = 0;
								num = num2;
								continue;
							case 1:
								try
								{
									num2 = 0;
									num = num2;
									while (true)
									{
										switch (num)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (File.Exists(DirLocal + "\\" + Ename))
											{
												num2 = 3;
												num = num2;
												continue;
											}
											break;
										case 3:
											File.Delete(DirLocal + "\\" + Ename);
											num2 = 1;
											num = num2;
											continue;
										case 1:
											break;
										case 2:
											goto end_IL_0542;
										}
										num2 = 2;
										num = num2;
										continue;
										end_IL_0542:
										break;
									}
								}
								catch
								{
								}
								this.m_eval_b9.Stop();
								this.m_eval_cb.Stop();
								eval_eh.Stop();
								eval_dw.Stop();
								IfStopedUload = false;
								RunUload = false;
								num2 = 12;
								num = num2;
								continue;
							case 12:
							case 17:
								break;
							case 19:
								return;
							}
							num2 = 19;
							num = num2;
						}
					}
					catch
					{
						return;
					}
				case 6:
				{
					num2 = 21708;
					short num3 = num2;
					num2 = 21708;
					switch (num3 == num2)
					{
					default:
						num2 = 0;
						if (num2 != 0)
						{
						}
						num2 = 0;
						num = num2;
						continue;
					case false:
					case true:
						break;
					}
					goto IL_06ad;
				}
				case 0:
					if (processesByName2.Length == 0)
					{
						num2 = 4;
						num = num2;
						continue;
					}
					goto IL_05ff;
				case 4:
					eval_cc = false;
					goto IL_06ad;
				case 2:
				case 5:
					{
						num2 = 1;
						if (num2 != 0)
						{
						}
						num2 = 3;
						num = num2;
						continue;
					}
					IL_05ff:
					eval_cc = true;
					num2 = 5;
					num = num2;
					continue;
					IL_06ad:
					num2 = 2;
					num = num2;
					continue;
				}
				break;
			}
			goto case 0;
		}
		case 0:
		{
			eval_cc = false;
			short num2 = 1;
			num = num2;
			goto default;
		}
		}
	}

	[AsyncStateMachine(typeof(eval_aw))]
	private void eval_a6(object A_0, EventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -17993;
		short num2 = num;
		num = -17993;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_aw stateMachine = default(eval_aw);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	private void eval_a5(object A_0, EventArgs A_1)
	{
		short num = 2;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 2:
			{
				num = -23126;
				short num3 = num;
				num = -23126;
				switch (num3 == num)
				{
				case false:
				case true:
					return;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				switch (0)
				{
				default:
					goto end_IL_00bb;
				case 0:
					break;
				}
				goto default;
			}
			default:
				if (eval_ee)
				{
					num = 0;
					num2 = num;
					break;
				}
				return;
			case 0:
			{
				Thread thread = new Thread(a3);
				thread.IsBackground = true;
				thread.Start();
				num = 1;
				num2 = num;
				break;
			}
			case 1:
				return;
				end_IL_00bb:
				break;
			}
		}
	}

	private void eval_b7()
	{
		int num3 = default(int);
		DoubleAnimation doubleAnimation = default(DoubleAnimation);
		switch (0)
		{
		default:
			while (true)
			{
				short num = -11006;
				short num2 = num;
				num = -11006;
				DoubleAnimation doubleAnimation2;
				switch (num2 == num)
				{
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					switch (num3)
					{
					case 2:
						goto IL_00e7;
					case 0:
						goto IL_011f;
					case 1:
						return;
					}
					break;
				case false:
				case true:
					{
						num = 0;
						num3 = num;
						continue;
					}
					IL_00e7:
					num = 0;
					_ = num;
					if (!this.m_eval_cd)
					{
						return;
					}
					goto case false;
					IL_011f:
					eval_h5.IsEnabled = false;
					doubleAnimation.From = 575.0;
					doubleAnimation.To = 0.0;
					doubleAnimation.Completed += delegate
					{
						short num6 = 17390;
						short num7 = num6;
						num6 = 17390;
						switch (num7 == num6)
						{
						default:
							num6 = 0;
							_ = num6;
							num6 = 0;
							if (num6 != 0)
							{
							}
							num6 = 1;
							if (num6 != 0)
							{
							}
							eval_h5.IsEnabled = true;
							this.m_eval_cd = false;
							break;
						}
					};
					eval_gt.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation);
					doubleAnimation2 = new DoubleAnimation
					{
						From = 1.0,
						To = 0.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.5)),
						AutoReverse = false
					};
					doubleAnimation2.Completed += delegate
					{
						short num4 = -17012;
						short num5 = num4;
						num4 = -17012;
						switch (num5 == num4)
						{
						default:
							num4 = 0;
							_ = num4;
							num4 = 0;
							if (num4 != 0)
							{
							}
							num4 = 1;
							if (num4 != 0)
							{
							}
							eval_gt.Visibility = Visibility.Hidden;
							break;
						}
					};
					eval_gt.BeginAnimation(UIElement.OpacityProperty, doubleAnimation2);
					num = 1;
					num3 = num;
					continue;
				}
				break;
			}
			goto case 0;
		case 0:
		{
			doubleAnimation = new DoubleAnimation
			{
				Duration = TimeSpan.FromSeconds(0.8),
				EasingFunction = new QuadraticEase()
			};
			short num = 2;
			num3 = num;
			goto default;
		}
		}
	}

	private void eval_b6()
	{
		short num;
		try
		{
			while (true)
			{
				new XmlDocument();
				WebClient webClient = new WebClient();
				try
				{
					Uri address = new Uri(URL_ClearClient + this.m_eval_o + URL_ClearClientDIR);
					webClient.DownloadFileAsync(address, DirLocal + "\\FILE.log");
					webClient.DownloadFileCompleted += delegate
					{
						int num5 = default(int);
						short num4;
						try
						{
							num4 = 0;
							num5 = num4;
							switch (num5)
							{
							default:
								switch (0)
								{
								default:
									while (true)
									{
										switch (num5)
										{
										case 3:
											if (dy.Length == 0L)
											{
												num4 = 5;
												num5 = num4;
												continue;
											}
											goto case 1;
										case 0:
											MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для запуска игры, попробуйте перезапустить лаунчер и повторить попытку.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											num4 = 1;
											num5 = num4;
											continue;
										case 5:
											eval_bw();
											num4 = 4;
											num5 = num4;
											continue;
										case 4:
											if (Langve == "RU")
											{
												num4 = 0;
												num5 = num4;
											}
											else
											{
												MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the run game, try restarting the launcher and try again.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												num4 = 2;
												num5 = num4;
											}
											continue;
										case 1:
										case 2:
											num4 = 6;
											num5 = num4;
											continue;
										case 6:
											goto end_IL_0028;
										}
										goto case 0;
										continue;
										end_IL_0028:
										break;
									}
									break;
								case 0:
									dy = new FileInfo(DirLocal + "\\FILE.log");
									num4 = 3;
									num5 = num4;
									goto default;
								}
								break;
							}
						}
						catch
						{
						}
						num4 = 13455;
						short num6 = num4;
						num4 = 13455;
						switch (num6 == num4)
						{
						default:
							num4 = 0;
							if (num4 != 0)
							{
							}
							num4 = 0;
							_ = num4;
							d3.Clear();
							try
							{
								num4 = 1;
								if (num4 != 0)
								{
								}
								string text = string.Empty;
								StreamReader streamReader = new StreamReader(DirLocal + "\\FILE.log");
								try
								{
									num4 = 3;
									num5 = num4;
									while (true)
									{
										switch (num5)
										{
										case 6:
											break;
										case 3:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										case 5:
											if (!string.IsNullOrEmpty(text))
											{
												num4 = 1;
												num5 = num4;
												continue;
											}
											goto default;
										case 1:
											d3.Add(new FILEINFO
											{
												FILEEXIST = text.Split('|')[0],
												FILENEWMD5 = text.Split('|')[1]
											});
											num4 = 4;
											num5 = num4;
											continue;
										default:
											num4 = 0;
											num5 = num4;
											continue;
										case 0:
											if ((text = streamReader.ReadLine()) != null)
											{
												num4 = 5;
												num5 = num4;
											}
											else
											{
												num4 = 2;
												num5 = num4;
											}
											continue;
										case 2:
											num4 = 6;
											num5 = num4;
											continue;
										}
										break;
									}
								}
								finally
								{
									num4 = 1;
									num5 = num4;
									while (true)
									{
										switch (num5)
										{
										case 1:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (streamReader != null)
											{
												num4 = 0;
												num5 = num4;
												continue;
											}
											break;
										case 0:
											((IDisposable)streamReader).Dispose();
											num4 = 2;
											num5 = num4;
											continue;
										case 2:
											break;
										}
										break;
									}
								}
							}
							catch (Exception ex2)
							{
								eval_bw();
								MessageBoxWindow.Show(this, "CheckGameFileExist : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							}
							break;
						case false:
						case true:
							break;
						}
						try
						{
							int num7 = default(int);
							string text2 = default(string);
							switch (0)
							{
							default:
							{
								string fILEEXIST = default(string);
								bool flag = default(bool);
								MessageBoxResult messageBoxResult = default(MessageBoxResult);
								while (true)
								{
									switch (num5)
									{
									case 17:
										eval_bm();
										num4 = 18;
										num5 = num4;
										continue;
									case 25:
										if (!fILEEXIST.EndsWith("avatar.png"))
										{
											num4 = 36;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 41:
										num4 = 15;
										num5 = num4;
										continue;
									case 15:
										if (!File.Exists(Directory_game + fILEEXIST))
										{
											num4 = 45;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 5:
										num4 = 49;
										num5 = num4;
										continue;
									case 49:
										if (!fILEEXIST.EndsWith("SSE.ini"))
										{
											num4 = 41;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 44:
									case 53:
										num4 = 1;
										num5 = num4;
										continue;
									case 1:
										if (num7 < d3.Count)
										{
											fILEEXIST = d3[num7].FILEEXIST;
											num4 = 25;
											num5 = num4;
										}
										else
										{
											num4 = 39;
											num5 = num4;
										}
										continue;
									case 13:
										if (flag)
										{
											num4 = 26;
											num5 = num4;
											continue;
										}
										goto case 4;
									case 29:
										eval_a6();
										eval_b7();
										num4 = 54;
										num5 = num4;
										continue;
									case 54:
										if (eval_fe.Visibility == Visibility.Hidden)
										{
											num4 = 17;
											num5 = num4;
											continue;
										}
										goto case 18;
									case 18:
										eval_be();
										num4 = 22;
										num5 = num4;
										continue;
									case 0:
										num4 = 48;
										num5 = num4;
										continue;
									case 48:
										if (Langve == "RU")
										{
											num4 = 10;
											num5 = num4;
										}
										else
										{
											messageBoxResult = MessageBoxWindow.Show(this, "Found missing game files!. Update to current version ?", name_messege, MessageBoxButton.YesNo);
											num4 = 11;
											num5 = num4;
										}
										continue;
									case 45:
										text2 = text2 + fILEEXIST + ",";
										num4 = 3;
										num5 = num4;
										continue;
									case 39:
										num4 = 12;
										num5 = num4;
										continue;
									case 12:
										if (text2 != string.Empty)
										{
											num4 = 0;
											num5 = num4;
											continue;
										}
										goto case 9;
									case 3:
										num7++;
										num4 = 53;
										num5 = num4;
										continue;
									case 10:
										messageBoxResult = MessageBoxWindow.Show(this, "Обнаружено отсутствие файлов игры!. Обновить до актуальной версии ?", name_messege, MessageBoxButton.YesNo);
										num4 = 23;
										num5 = num4;
										continue;
									case 51:
										num4 = 6;
										num5 = num4;
										continue;
									case 6:
										if (text2 == string.Empty)
										{
											num4 = 33;
											num5 = num4;
											continue;
										}
										goto case 4;
									case 36:
										num4 = 14;
										num5 = num4;
										continue;
									case 14:
										if (!fILEEXIST.EndsWith("SmartSteamEmu.log"))
										{
											num4 = 28;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 9:
										num4 = 30;
										num5 = num4;
										continue;
									case 30:
										if (eval_ce)
										{
											num4 = 51;
											num5 = num4;
											continue;
										}
										goto case 4;
									case 11:
									case 23:
										num4 = 31;
										num5 = num4;
										continue;
									case 31:
										if (messageBoxResult == MessageBoxResult.Yes)
										{
											num4 = 29;
											num5 = num4;
										}
										else
										{
											num4 = 27;
											num5 = num4;
										}
										continue;
									case 52:
										try
										{
											StreamWriter streamWriter2 = new StreamWriter(Directory_Launcher + "\\client.ini");
											try
											{
												streamWriter2.WriteLine(Updateclient);
												streamWriter2.Close();
											}
											finally
											{
												num4 = 1;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 1:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (streamWriter2 != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														break;
													case 0:
														((IDisposable)streamWriter2).Dispose();
														num4 = 2;
														num5 = num4;
														continue;
													case 2:
														break;
													}
													break;
												}
											}
										}
										catch (Exception ex5)
										{
											MessageBoxWindow.Show(this, ex5.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										goto IL_046d;
									case 27:
										if (eval_fe.Visibility == Visibility.Hidden)
										{
											num4 = 7;
											num5 = num4;
											continue;
										}
										goto case 22;
									case 26:
										num4 = 35;
										num5 = num4;
										continue;
									case 35:
										if (File.Exists(Directory_Launcher + "\\client.ini"))
										{
											num4 = 2;
											num5 = num4;
											continue;
										}
										goto IL_0e17;
									case 47:
										num4 = 55;
										num5 = num4;
										continue;
									case 55:
										if (!fILEEXIST.EndsWith("item_schema.bin"))
										{
											num4 = 8;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 28:
										num4 = 20;
										num5 = num4;
										continue;
									case 20:
										if (!fILEEXIST.EndsWith("DayZSetting.xml"))
										{
											num4 = 24;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 2:
										try
										{
											File.Delete(Directory_Launcher + "\\client.ini");
										}
										catch (Exception ex4)
										{
											MessageBoxWindow.Show(this, ex4.Message + " !-=scorpions=-", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										goto IL_0e17;
									case 8:
										num4 = 37;
										num5 = num4;
										continue;
									case 37:
										if (!fILEEXIST.EndsWith("ALI213.ini"))
										{
											num4 = 5;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 56:
										try
										{
											string text3 = "";
											StreamReader streamReader2 = new StreamReader(Directory_Launcher + "\\client.ini");
											try
											{
												num4 = 6;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 6:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													case 9:
														eval_b7();
														num4 = 5;
														num5 = num4;
														continue;
													case 5:
														if (eval_fe.Visibility == Visibility.Hidden)
														{
															num4 = 11;
															num5 = num4;
															continue;
														}
														goto case 3;
													case 11:
														eval_bm();
														num4 = 3;
														num5 = num4;
														continue;
													case 13:
														if (eval_fe.Visibility == Visibility.Hidden)
														{
															num4 = 4;
															num5 = num4;
															continue;
														}
														goto default;
													default:
														num4 = 7;
														num5 = num4;
														continue;
													case 7:
														if ((text3 = streamReader2.ReadLine()) == null)
														{
															num4 = 2;
															num5 = num4;
														}
														else
														{
															num4 = 0;
															num5 = num4;
														}
														continue;
													case 10:
														num4 = 12;
														num5 = num4;
														continue;
													case 12:
														if (!(text3 != Updateclient))
														{
															num4 = 13;
															num5 = num4;
														}
														else
														{
															num4 = 9;
															num5 = num4;
														}
														continue;
													case 3:
														eval_fo.Value = 0.0;
														eval_be();
														num4 = 8;
														num5 = num4;
														continue;
													case 4:
														eval_bm();
														num4 = 1;
														num5 = num4;
														continue;
													case 0:
														if (text3 != string.Empty)
														{
															num4 = 10;
															num5 = num4;
															continue;
														}
														goto default;
													case 2:
														streamReader2.Close();
														streamReader2.Dispose();
														num4 = 14;
														num5 = num4;
														continue;
													case 14:
														break;
													}
													break;
												}
											}
											finally
											{
												num4 = 1;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 1:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (streamReader2 != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														break;
													case 0:
														((IDisposable)streamReader2).Dispose();
														num4 = 2;
														num5 = num4;
														continue;
													case 2:
														break;
													}
													break;
												}
											}
										}
										catch
										{
										}
										goto IL_046d;
									case 24:
										num4 = 21;
										num5 = num4;
										continue;
									case 21:
										if (!fILEEXIST.EndsWith("items.bin"))
										{
											num4 = 50;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 7:
										BoxServer.IsEnabled = true;
										eval_bm();
										num4 = 46;
										num5 = num4;
										continue;
									case 57:
										num4 = 34;
										num5 = num4;
										continue;
									case 34:
										if (eval_fe.Visibility == Visibility.Hidden)
										{
											num4 = 38;
											num5 = num4;
											continue;
										}
										goto case 32;
									case 22:
									case 46:
										RefreshServerList();
										num4 = 9;
										num5 = num4;
										continue;
									case 32:
										num4 = 52;
										num5 = num4;
										continue;
									case 38:
										eval_bm();
										num4 = 32;
										num5 = num4;
										continue;
									case 50:
										num4 = 19;
										num5 = num4;
										continue;
									case 19:
										if (!fILEEXIST.EndsWith("inventory.bin"))
										{
											num4 = 47;
											num5 = num4;
											continue;
										}
										goto case 3;
									case 40:
										try
										{
											StreamWriter streamWriter = new StreamWriter(Directory_Launcher + "\\mods.ini");
											try
											{
												streamWriter.WriteLine(Updatemods);
												streamWriter.Close();
											}
											finally
											{
												num4 = 1;
												num5 = num4;
												while (true)
												{
													switch (num5)
													{
													case 1:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													default:
														if (streamWriter != null)
														{
															num4 = 0;
															num5 = num4;
															continue;
														}
														break;
													case 0:
														((IDisposable)streamWriter).Dispose();
														num4 = 2;
														num5 = num4;
														continue;
													case 2:
														break;
													}
													break;
												}
											}
										}
										catch (Exception ex3)
										{
											MessageBoxWindow.Show(this, ex3.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										goto IL_0f8d;
									case 33:
										flag = false;
										num4 = 43;
										num5 = num4;
										continue;
									case 43:
										if (!File.Exists(Directory_Launcher + "\\mods.ini"))
										{
											num4 = 40;
											num5 = num4;
											continue;
										}
										goto IL_0f8d;
									case 16:
										if (File.Exists(Directory_Launcher + "\\client.ini"))
										{
											num4 = 56;
											num5 = num4;
										}
										else
										{
											num4 = 57;
											num5 = num4;
										}
										continue;
									case 4:
										num4 = 42;
										num5 = num4;
										continue;
									case 42:
										return;
										IL_0f8d:
										num4 = 16;
										num5 = num4;
										continue;
										IL_0e17:
										flag = false;
										num4 = 4;
										num5 = num4;
										continue;
										IL_046d:
										num4 = 13;
										num5 = num4;
										continue;
									}
									break;
								}
								goto case 0;
							}
							case 0:
								text2 = string.Empty;
								num7 = 0;
								num4 = 44;
								num5 = num4;
								goto default;
							}
						}
						catch (Exception ex6)
						{
							eval_bw();
							MessageBoxWindow.Show(this, "CheckGameFileExist3 : " + ex6.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
					};
				}
				finally
				{
					num = 2;
					int num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 2:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (webClient != null)
							{
								num = 0;
								num2 = num;
								continue;
							}
							break;
						case 0:
							((IDisposable)webClient).Dispose();
							num = 1;
							num2 = num;
							continue;
						case 1:
							break;
						}
						break;
					}
				}
				num = -10197;
				short num3 = num;
				num = -10197;
				switch (num3 == num)
				{
				case false:
				case true:
					continue;
				}
				num = 0;
				if (num == 0)
				{
				}
				break;
			}
		}
		catch (Exception ex)
		{
			if (Langve == "RU")
			{
				MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! CheckGameToFolder : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
			else
			{
				MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! CheckGameToFolder : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	[AsyncStateMachine(typeof(eval_ai))]
	private void eval_b5()
	{
		short num = 28504;
		short num2 = num;
		num = 28504;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_ai stateMachine = default(eval_ai);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_ah))]
	private void eval_b4()
	{
		short num = -21841;
		short num2 = num;
		num = -21841;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_ah stateMachine = default(eval_ah);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	private void eval_ae(object A_0, RoutedEventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 2;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 2:
			{
				num = -27582;
				short num3 = num;
				num = -27582;
				switch (num3 == num)
				{
				case false:
				case true:
					return;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				switch (0)
				{
				default:
					goto end_IL_00c0;
				case 0:
					break;
				}
				goto default;
			}
			default:
				if (!UpdateStatus)
				{
					num = 0;
					num2 = num;
					break;
				}
				return;
			case 0:
				eval_b4();
				num = 1;
				num2 = num;
				break;
			case 1:
				return;
				end_IL_00c0:
				break;
			}
		}
	}

	private void eval_ad(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			DoubleAnimation doubleAnimation = default(DoubleAnimation);
			switch (0)
			{
			default:
			{
				DoubleAnimation doubleAnimation3 = default(DoubleAnimation);
				while (true)
				{
					num = 0;
					_ = num;
					switch (num2)
					{
					case 1:
						if (OpenDownloader)
						{
							num = 4;
							num2 = num;
							continue;
						}
						goto case 3;
					case 3:
						eval_h5.IsEnabled = false;
						doubleAnimation3 = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new QuadraticEase()
						};
						num = 2;
						num2 = num;
						continue;
					case 2:
					{
						num = 25625;
						short num3 = num;
						num = 25625;
						switch (num3 == num)
						{
						case false:
						case true:
							break;
						default:
						{
							num = 0;
							if (num != 0)
							{
							}
							if (this.m_eval_cd)
							{
								num = 0;
								num2 = num;
								continue;
							}
							eval_gt.Visibility = Visibility.Visible;
							DoubleAnimation animation = new DoubleAnimation
							{
								From = 0.0,
								To = 1.0,
								Duration = new Duration(TimeSpan.FromSeconds(0.5)),
								AutoReverse = false
							};
							eval_gt.BeginAnimation(UIElement.OpacityProperty, animation);
							doubleAnimation3.From = 0.0;
							doubleAnimation3.To = 575.0;
							doubleAnimation3.Completed += delegate
							{
								short num4 = 1;
								if (num4 != 0)
								{
								}
								num4 = -8554;
								short num5 = num4;
								num4 = -8554;
								switch (num5 == num4)
								{
								default:
									num4 = 0;
									_ = num4;
									num4 = 0;
									if (num4 != 0)
									{
									}
									eval_h5.IsEnabled = true;
									this.m_eval_cd = true;
									break;
								}
							};
							eval_gt.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation3);
							return;
						}
						}
						goto case 3;
					}
					case 0:
					{
						num = 1;
						if (num != 0)
						{
						}
						doubleAnimation3.From = 575.0;
						doubleAnimation3.To = 0.0;
						doubleAnimation3.Completed += delegate
						{
							short num8 = 4043;
							short num9 = num8;
							num8 = 4043;
							switch (num9 == num8)
							{
							default:
								num8 = 1;
								if (num8 != 0)
								{
								}
								num8 = 0;
								_ = num8;
								num8 = 0;
								if (num8 != 0)
								{
								}
								eval_h5.IsEnabled = true;
								this.m_eval_cd = false;
								break;
							}
						};
						eval_gt.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation3);
						DoubleAnimation doubleAnimation4 = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation4.Completed += delegate
						{
							short num6 = -20177;
							short num7 = num6;
							num6 = -20177;
							switch (num7 == num6)
							{
							default:
								num6 = 0;
								if (num6 != 0)
								{
								}
								num6 = 0;
								_ = num6;
								num6 = 1;
								if (num6 != 0)
								{
								}
								eval_gt.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gt.BeginAnimation(UIElement.OpacityProperty, doubleAnimation4);
						return;
					}
					case 4:
					{
						h6.IsEnabled = false;
						doubleAnimation.From = 914.0;
						doubleAnimation.To = 0.0;
						doubleAnimation.Completed += delegate
						{
							short num12 = 556;
							short num13 = num12;
							num12 = 556;
							switch (num13 == num12)
							{
							default:
								num12 = 1;
								if (num12 != 0)
								{
								}
								num12 = 0;
								_ = num12;
								num12 = 0;
								if (num12 != 0)
								{
								}
								h6.IsEnabled = true;
								OpenDownloader = false;
								break;
							}
						};
						eval_gl.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation);
						DoubleAnimation doubleAnimation2 = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation2.Completed += delegate
						{
							short num10 = -3013;
							short num11 = num10;
							num10 = -3013;
							switch (num11 == num10)
							{
							default:
								num10 = 0;
								if (num10 != 0)
								{
								}
								num10 = 0;
								_ = num10;
								num10 = 1;
								if (num10 != 0)
								{
								}
								eval_gl.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation2);
						num = 3;
						num2 = num;
						continue;
					}
					}
					break;
				}
				goto case 0;
			}
			case 0:
				doubleAnimation = new DoubleAnimation
				{
					Duration = TimeSpan.FromSeconds(0.8),
					EasingFunction = new SineEase()
				};
				num = 1;
				num2 = num;
				goto default;
			}
		}
		}
	}

	private void eval_b3()
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
			switch (0)
			{
			default:
			{
				string text = default(string);
				string text5 = default(string);
				bool? isChecked = default(bool?);
				bool flag = default(bool);
				RegistryKey registryKey5 = default(RegistryKey);
				string text4 = default(string);
				string text3 = default(string);
				string text2 = default(string);
				while (true)
				{
					switch (num2)
					{
					case 47:
						if (Loadsetting != null)
						{
							num = 36;
							num2 = num;
							continue;
						}
						goto case 32;
					case 26:
						num = 0;
						num2 = num;
						continue;
					case 0:
						if (Loadsetting == "true")
						{
							num = 39;
							num2 = num;
							continue;
						}
						goto case 61;
					case 6:
						eval_hk.IsChecked = true;
						num = 48;
						num2 = num;
						continue;
					case 43:
						num = 21;
						num2 = num;
						continue;
					case 21:
						if (Loadsetting == "true")
						{
							num = 3;
							num2 = num;
							continue;
						}
						goto case 38;
					case 11:
						eval_hy.IsChecked = true;
						num = 62;
						num2 = num;
						continue;
					case 17:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "CheckClearGame", null);
						num = 13;
						num2 = num;
						continue;
					case 13:
						if (Loadsetting != null)
						{
							num = 26;
							num2 = num;
							continue;
						}
						goto case 61;
					case 48:
						num = 23;
						num2 = num;
						continue;
					case 23:
						if (Loadsetting == "false")
						{
							num = 35;
							num2 = num;
							continue;
						}
						goto case 17;
					case 38:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_nocharmenu", null);
						num = 4;
						num2 = num;
						continue;
					case 4:
						if (Loadsetting != null)
						{
							num = 33;
							num2 = num;
							continue;
						}
						goto case 22;
					case 58:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 4:
										if (text == null)
										{
											num = 2;
											num2 = num;
										}
										else
										{
											num = 1;
											num2 = num;
										}
										continue;
									case 1:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num2)
													{
													case 4:
														if (int.Parse(text) == 0)
														{
															num = 2;
															num2 = num;
														}
														else
														{
															eval_hh.Content = text;
															num = 1;
															num2 = num;
														}
														continue;
													case 2:
														eval_hh.Content = "---";
														num = 3;
														num2 = num;
														continue;
													case 1:
													case 3:
													{
														int num3 = Convert.ToInt32(text) / 100;
														eval_hg.Value = num3;
														num = 0;
														num2 = num;
														continue;
													}
													case 0:
														goto end_IL_06b2;
													}
													goto case 0;
													continue;
													end_IL_06b2:
													break;
												}
												break;
											case 0:
												text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Object", null);
												num = 4;
												num2 = num;
												goto default;
											}
										}
										catch
										{
										}
										goto case 3;
									case 2:
									{
										RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
										registryKey.SetValue("Object", "0");
										registryKey.Close();
										eval_hg.Value = Convert.ToDouble("0");
										eval_hh.Content = "---";
										num = 3;
										num2 = num;
										continue;
									}
									case 3:
										num = 0;
										num2 = num;
										continue;
									case 0:
										return;
									}
									break;
								}
								goto case 0;
							case 0:
								text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Object", null);
								num = 4;
								num2 = num;
								goto default;
							}
						}
						catch
						{
							return;
						}
					case 60:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_high", null);
						num = 34;
						num2 = num;
						continue;
					case 34:
						if (Loadsetting != null)
						{
							num = 8;
							num2 = num;
							continue;
						}
						goto IL_1c26;
					case 36:
						eval_hw.Text = Loadsetting;
						num = 32;
						num2 = num;
						continue;
					case 30:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_noPause", null);
						num = 5;
						num2 = num;
						continue;
					case 5:
						if (Loadsetting != null)
						{
							num = 43;
							num2 = num;
							continue;
						}
						goto case 38;
					case 54:
						num = 42;
						num2 = num;
						continue;
					case 42:
						if (Loadsetting == "true")
						{
							num = 29;
							num2 = num;
							continue;
						}
						goto case 30;
					case 33:
						num = 15;
						num2 = num;
						continue;
					case 15:
						if (Loadsetting == "true")
						{
							num = 37;
							num2 = num;
							continue;
						}
						goto case 22;
					case 12:
						num = 0;
						_ = num;
						try
						{
							RegistryKey registryKey6;
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 4:
										goto IL_038e;
									case 1:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num2)
													{
													case 4:
														if (int.Parse(text5) == 0)
														{
															num = 2;
															num2 = num;
														}
														else
														{
															eval_hd.Content = text5;
															num = 1;
															num2 = num;
														}
														continue;
													case 2:
														eval_hd.Content = "---";
														num = 3;
														num2 = num;
														continue;
													case 1:
													case 3:
													{
														int num4 = Convert.ToInt32(text5) / 100;
														eval_hc.Value = num4;
														num = 0;
														num2 = num;
														continue;
													}
													case 0:
														goto end_IL_03bc;
													}
													goto case 0;
													continue;
													end_IL_03bc:
													break;
												}
												break;
											case 0:
												text5 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Distance", null);
												num = 4;
												num2 = num;
												goto default;
											}
										}
										catch
										{
										}
										goto case 3;
									case 2:
										goto IL_04dc;
									case 3:
										num = 0;
										num2 = num;
										continue;
									case 0:
										goto end_IL_02e6;
									}
									break;
									IL_038e:
									if (text5 == null)
									{
										num = 2;
										num2 = num;
									}
									else
									{
										num = 1;
										num2 = num;
									}
								}
								goto case 0;
							case 0:
								{
									text5 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Distance", null);
									num = -15223;
									short num5 = num;
									num = -15223;
									switch (num5 == num)
									{
									case false:
									case true:
										goto IL_04dc;
									}
									num = 0;
									if (num != 0)
									{
									}
									num = 4;
									num2 = num;
									goto default;
								}
								IL_04dc:
								registryKey6 = Registry.CurrentUser.CreateSubKey(Name_form);
								registryKey6.SetValue("Distance", "0");
								registryKey6.Close();
								eval_hc.Value = Convert.ToDouble("0");
								eval_hd.Content = "---";
								num = 3;
								num2 = num;
								goto default;
								end_IL_02e6:
								break;
							}
						}
						catch
						{
						}
						num = 58;
						num2 = num;
						continue;
					case 28:
						eval_g6.IsChecked = true;
						num = 60;
						num2 = num;
						continue;
					case 9:
						num = 49;
						num2 = num;
						continue;
					case 49:
						if (Loadsetting == "true")
						{
							num = 28;
							num2 = num;
							continue;
						}
						goto case 60;
					case 45:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 4:
										if (isChecked == flag)
										{
											num = 2;
											num2 = num;
										}
										else
										{
											registryKey5.SetValue("Check_BattlEye", "false");
											num = 3;
											num2 = num;
										}
										continue;
									case 2:
										registryKey5.SetValue("Check_BattlEye", "true");
										num = 1;
										num2 = num;
										continue;
									case 1:
									case 3:
										registryKey5.Close();
										num = 0;
										num2 = num;
										continue;
									case 0:
										goto end_IL_0a88;
									}
									goto case 0;
									continue;
									end_IL_0a88:
									break;
								}
								break;
							case 0:
								registryKey5 = Registry.CurrentUser.CreateSubKey(Name_form);
								isChecked = eval_hk.IsChecked;
								flag = true;
								num = 4;
								num2 = num;
								goto default;
							}
						}
						catch
						{
						}
						goto case 17;
					case 55:
						num = 56;
						num2 = num;
						continue;
					case 56:
						if (Loadsetting == "true")
						{
							num = 25;
							num2 = num;
							continue;
						}
						goto case 20;
					case 29:
						eval_g7.IsChecked = true;
						num = 30;
						num2 = num;
						continue;
					case 27:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 4:
										if (text4 == null)
										{
											num = 2;
											num2 = num;
										}
										else
										{
											num = 3;
											num2 = num;
										}
										continue;
									case 2:
									{
										RegistryKey registryKey4 = Registry.CurrentUser.CreateSubKey(Name_form);
										registryKey4.SetValue("CPU", "0");
										registryKey4.Close();
										eval_g3.Value = Convert.ToDouble("0");
										g0.Content = "---";
										num = 1;
										num2 = num;
										continue;
									}
									case 3:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num2)
													{
													case 1:
														if (int.Parse(text4) == 0)
														{
															num = 15;
															num2 = num;
															continue;
														}
														goto case 7;
													case 9:
														num = 0;
														num2 = num;
														continue;
													case 0:
														if (int.Parse(text4) == 3)
														{
															num = 5;
															num2 = num;
															continue;
														}
														goto case 10;
													case 6:
														g0.Content = "4";
														num = 9;
														num2 = num;
														continue;
													case 14:
														g0.Content = "2";
														num = 13;
														num2 = num;
														continue;
													case 13:
														num = 12;
														num2 = num;
														continue;
													case 12:
														if (int.Parse(text4) == 2)
														{
															num = 6;
															num2 = num;
															continue;
														}
														goto case 9;
													case 10:
														num = 11;
														num2 = num;
														continue;
													case 11:
														if (int.Parse(text4) == 4)
														{
															num = 3;
															num2 = num;
															continue;
														}
														goto case 8;
													case 15:
														g0.Content = "---";
														num = 7;
														num2 = num;
														continue;
													case 7:
														num = 4;
														num2 = num;
														continue;
													case 4:
														if (int.Parse(text4) == 1)
														{
															num = 14;
															num2 = num;
															continue;
														}
														goto case 13;
													case 3:
														g0.Content = "8";
														num = 8;
														num2 = num;
														continue;
													case 5:
														g0.Content = "6";
														num = 10;
														num2 = num;
														continue;
													case 8:
														eval_g3.Value = Convert.ToDouble(text4);
														num = 2;
														num2 = num;
														continue;
													case 2:
														goto end_IL_0cff;
													}
													goto case 0;
													continue;
													end_IL_0cff:
													break;
												}
												break;
											case 0:
												text4 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "CPU", null);
												num = 1;
												num2 = num;
												goto default;
											}
										}
										catch
										{
										}
										goto case 1;
									case 1:
										num = 0;
										num2 = num;
										continue;
									case 0:
										goto end_IL_0c01;
									}
									goto case 0;
									continue;
									end_IL_0c01:
									break;
								}
								break;
							case 0:
								text4 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "CPU", null);
								num = 4;
								num2 = num;
								goto default;
							}
						}
						catch
						{
						}
						num = 7;
						num2 = num;
						continue;
					case 22:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_winxp", null);
						num = 59;
						num2 = num;
						continue;
					case 59:
						if (Loadsetting != null)
						{
							num = 55;
							num2 = num;
							continue;
						}
						goto case 20;
					case 37:
						eval_hj.IsChecked = true;
						num = 22;
						num2 = num;
						continue;
					case 3:
						eval_g5.IsChecked = true;
						num = 38;
						num2 = num;
						continue;
					case 41:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_BattlEye", null);
						num = 51;
						num2 = num;
						continue;
					case 51:
						if (Loadsetting != null)
						{
							num = 57;
							num2 = num;
						}
						else
						{
							num = 45;
							num2 = num;
						}
						continue;
					case 32:
						num = 18;
						num2 = num;
						continue;
					case 52:
						eval_ha.IsChecked = true;
						num = 41;
						num2 = num;
						continue;
					case 8:
						num = 2;
						num2 = num;
						continue;
					case 2:
						if (Loadsetting == "true")
						{
							num = 31;
							num2 = num;
							continue;
						}
						goto IL_1c26;
					case 16:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 0:
										if (text3 == null)
										{
											num = 2;
											num2 = num;
										}
										else
										{
											num = 4;
											num2 = num;
										}
										continue;
									case 2:
									{
										RegistryKey registryKey3 = Registry.CurrentUser.CreateSubKey(Name_form);
										registryKey3.SetValue("Mem", "0");
										registryKey3.Close();
										eval_g2.Value = Convert.ToDouble("0");
										gz.Content = "---";
										num = 1;
										num2 = num;
										continue;
									}
									case 4:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num2)
													{
													case 3:
														if (int.Parse(text3) == 0)
														{
															num = 7;
															num2 = num;
															continue;
														}
														goto case 15;
													case 12:
														gz.Content = "16384";
														num = 1;
														num2 = num;
														continue;
													case 16:
														num = 8;
														num2 = num;
														continue;
													case 8:
														if (int.Parse(text3) == 3)
														{
															num = 2;
															num2 = num;
															continue;
														}
														goto case 5;
													case 2:
														gz.Content = "8192";
														num = 5;
														num2 = num;
														continue;
													case 10:
														gz.Content = "2048";
														num = 6;
														num2 = num;
														continue;
													case 1:
														num = 11;
														num2 = num;
														continue;
													case 11:
														if (int.Parse(text3) == 5)
														{
															num = 18;
															num2 = num;
															continue;
														}
														goto case 4;
													case 9:
														gz.Content = "4096";
														num = 16;
														num2 = num;
														continue;
													case 6:
														num = 17;
														num2 = num;
														continue;
													case 17:
														if (int.Parse(text3) == 2)
														{
															num = 9;
															num2 = num;
															continue;
														}
														goto case 16;
													case 5:
														num = 0;
														num2 = num;
														continue;
													case 0:
														if (int.Parse(text3) == 4)
														{
															num = 12;
															num2 = num;
															continue;
														}
														goto case 1;
													case 7:
														gz.Content = "---";
														num = 15;
														num2 = num;
														continue;
													case 15:
														num = 14;
														num2 = num;
														continue;
													case 14:
														if (int.Parse(text3) == 1)
														{
															num = 10;
															num2 = num;
															continue;
														}
														goto case 6;
													case 18:
														gz.Content = "32768";
														num = 4;
														num2 = num;
														continue;
													case 4:
														eval_g2.Value = Convert.ToDouble(text3);
														num = 13;
														num2 = num;
														continue;
													case 13:
														goto end_IL_1290;
													}
													goto case 0;
													continue;
													end_IL_1290:
													break;
												}
												break;
											case 0:
												text3 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Mem", null);
												num = 3;
												num2 = num;
												goto default;
											}
										}
										catch
										{
										}
										goto case 1;
									case 1:
										num = 3;
										num2 = num;
										continue;
									case 3:
										goto end_IL_119e;
									}
									goto case 0;
									continue;
									end_IL_119e:
									break;
								}
								break;
							case 0:
								text3 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Mem", null);
								num = 0;
								num2 = num;
								goto default;
							}
						}
						catch
						{
						}
						num = 27;
						num2 = num;
						continue;
					case 31:
						eval_g9.IsChecked = true;
						num = 46;
						num2 = num;
						continue;
					case 46:
						num = 1;
						if (num == 0)
						{
						}
						goto IL_1c26;
					case 7:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 0:
										if (text2 == null)
										{
											num = 2;
											num2 = num;
										}
										else
										{
											num = 4;
											num2 = num;
										}
										continue;
									case 4:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num2)
													{
													case 4:
														if (int.Parse(text2) == 0)
														{
															num = 0;
															num2 = num;
															continue;
														}
														goto case 15;
													case 7:
														num = 5;
														num2 = num;
														continue;
													case 5:
														if (int.Parse(text2) == 3)
														{
															num = 3;
															num2 = num;
															continue;
														}
														goto case 1;
													case 3:
														eval_g1.Content = "5";
														num = 1;
														num2 = num;
														continue;
													case 1:
														num = 8;
														num2 = num;
														continue;
													case 8:
														if (int.Parse(text2) == 4)
														{
															num = 10;
															num2 = num;
															continue;
														}
														goto case 9;
													case 0:
														eval_g1.Content = "---";
														num = 15;
														num2 = num;
														continue;
													case 13:
														eval_g1.Content = "1";
														num = 14;
														num2 = num;
														continue;
													case 12:
														eval_g1.Content = "3";
														num = 7;
														num2 = num;
														continue;
													case 10:
														eval_g1.Content = "7";
														num = 9;
														num2 = num;
														continue;
													case 14:
														num = 11;
														num2 = num;
														continue;
													case 11:
														if (int.Parse(text2) == 2)
														{
															num = 12;
															num2 = num;
															continue;
														}
														goto case 7;
													case 15:
														num = 6;
														num2 = num;
														continue;
													case 6:
														if (int.Parse(text2) == 1)
														{
															num = 13;
															num2 = num;
															continue;
														}
														goto case 14;
													case 9:
														eval_g4.Value = Convert.ToDouble(text2);
														num = 2;
														num2 = num;
														continue;
													case 2:
														goto end_IL_16c9;
													}
													goto case 0;
													continue;
													end_IL_16c9:
													break;
												}
												break;
											case 0:
												text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Thread", null);
												num = 4;
												num2 = num;
												goto default;
											}
										}
										catch
										{
										}
										goto case 1;
									case 2:
									{
										RegistryKey registryKey2 = Registry.CurrentUser.CreateSubKey(Name_form);
										registryKey2.SetValue("Thread", "0");
										registryKey2.Close();
										eval_g4.Value = Convert.ToDouble("0");
										eval_g1.Content = "---";
										num = 1;
										num2 = num;
										continue;
									}
									case 1:
										num = 3;
										num2 = num;
										continue;
									case 3:
										goto end_IL_164b;
									}
									goto case 0;
									continue;
									end_IL_164b:
									break;
								}
								break;
							case 0:
								text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Thread", null);
								num = 0;
								num2 = num;
								goto default;
							}
						}
						catch
						{
						}
						num = 12;
						num2 = num;
						continue;
					case 14:
						num = 1;
						num2 = num;
						continue;
					case 1:
						if (Loadsetting == "true")
						{
							num = 11;
							num2 = num;
							continue;
						}
						goto case 62;
					case 18:
						try
						{
							eval_hw.Text = eval_hw.Text.Replace(" ", string.Empty);
						}
						catch
						{
						}
						Name_players_local = eval_hw.Text;
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "CheckExitLaincher", null);
						num = 44;
						num2 = num;
						continue;
					case 20:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_skipIntro", null);
						num = 50;
						num2 = num;
						continue;
					case 50:
						if (Loadsetting != null)
						{
							num = 9;
							num2 = num;
							continue;
						}
						goto case 60;
					case 62:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_nosplash", null);
						num = 19;
						num2 = num;
						continue;
					case 19:
						if (Loadsetting != null)
						{
							num = 54;
							num2 = num;
							continue;
						}
						goto case 30;
					case 44:
						if (Loadsetting != null)
						{
							num = 14;
							num2 = num;
							continue;
						}
						goto case 62;
					case 40:
						if (Loadsetting != null)
						{
							num = 24;
							num2 = num;
							continue;
						}
						goto case 41;
					case 39:
						eval_hz.IsChecked = true;
						num = 61;
						num2 = num;
						continue;
					case 24:
						num = 53;
						num2 = num;
						continue;
					case 53:
						if (Loadsetting == "true")
						{
							num = 52;
							num2 = num;
							continue;
						}
						goto case 41;
					case 61:
						num = 16;
						num2 = num;
						continue;
					case 25:
						eval_g8.IsChecked = true;
						num = 20;
						num2 = num;
						continue;
					case 57:
						num = 10;
						num2 = num;
						continue;
					case 10:
						if (Loadsetting == "true")
						{
							num = 6;
							num2 = num;
							continue;
						}
						goto case 48;
					case 35:
						{
							eval_hk.IsChecked = false;
							num = 17;
							num2 = num;
							continue;
						}
						IL_1c26:
						Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "Check_Logs", null);
						num = 40;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "nametxt", null);
				num = 47;
				num2 = num;
				goto default;
			}
		}
	}

	private void eval_ac(object A_0, RoutedEventArgs A_1)
	{
		short num;
		while (true)
		{
			System.Windows.Forms.Clipboard.SetText(" GUID : " + GUID_SC + " UID : " + UID_SC);
			if (Langve == "RU")
			{
				break;
			}
			num = -23666;
			short num2 = num;
			num = -23666;
			switch (num2 == num)
			{
			case false:
			case true:
				continue;
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(this, "Copied to the clipboard,use Ctrl+V : GUID : " + GUID_SC + " UID : " + UID_SC, name_messege);
			return;
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		MessageBoxWindow.Show(this, "Скопировано в буфер обмена,воспользуйтесь комбинацией клавиш Ctrl+V : GUID : " + GUID_SC + " UID : " + UID_SC, name_messege);
	}

	private void eval_ab(object A_0, RoutedEventArgs A_1)
	{
		short num;
		while (true)
		{
			System.Windows.Forms.Clipboard.SetText(gg.Content.ToString());
			if (Langve == "RU")
			{
				break;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 18219;
			short num2 = num;
			num = 18219;
			switch (num2 == num)
			{
			case false:
			case true:
				continue;
			}
			num = 0;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(this, "Copied to the clipboard,use Ctrl+V : UID : " + gg.Content.ToString(), name_messege);
			return;
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "Скопировано в буфер обмена,воспользуйтесь комбинацией клавиш Ctrl+V : UID : " + gg.Content.ToString(), name_messege);
	}

	private void eval_aa(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		int num4 = default(int);
		char[] array2 = default(char[]);
		char c = default(char);
		int length = default(int);
		int num3 = default(int);
		string[] array = default(string[]);
		string text = default(string);
		bool flag = default(bool);
		int num5 = default(int);
		char[] array3 = default(char[]);
		switch (num2)
		{
		default:
			{
				switch (0)
				{
				case 0:
					goto IL_00eb;
				}
				goto IL_0028;
			}
			IL_0028:
			while (true)
			{
				switch (num2)
				{
				case 10:
					if (!(eval_hw.Text == ""))
					{
						num = 2;
						num2 = num;
						continue;
					}
					goto case 42;
				case 11:
				case 12:
					num = 24;
					num2 = num;
					continue;
				case 24:
					if (num4 >= array2.Length)
					{
						num = 44;
						num2 = num;
					}
					else
					{
						c = array2[num4];
						num = 33;
						num2 = num;
					}
					continue;
				case 43:
					if (length >= 4)
					{
						num = 34;
						num2 = num;
						continue;
					}
					goto case 32;
				case 38:
					MessageBoxWindow.Show(this, "Ваш ник содержит запрещенные символы \"" + eval_hw.Text + "\",такие как - \",\",\\,/,+,~,(,),$,%,<,>,&,?,#,!,?,^,:,*,@,№", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				case 42:
					num = 3;
					num2 = num;
					continue;
				case 3:
					if (Langve == "RU")
					{
						num = 6;
						num2 = num;
						continue;
					}
					MessageBoxWindow.Show(this, "Enter your nickname!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				case 21:
					num4++;
					num = 12;
					num2 = num;
					continue;
				case 32:
					num = 19;
					num2 = num;
					continue;
				case 19:
					if (Langve == "RU")
					{
						num = 31;
						num2 = num;
						continue;
					}
					MessageBoxWindow.Show(this, "Your nickname contains a prohibited number of characters in nickel, a minimum number of 4 characters is the maximum 20", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				case 37:
				{
					num = 1;
					if (num != 0)
					{
					}
					try
					{
						eval_hw.Text = eval_hw.Text.Replace(" ", "");
						Name_players_local = eval_hw.Text;
					}
					catch
					{
					}
					RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
					registryKey.SetValue("nametxt", eval_hw.Text);
					registryKey.SetValue("LAUNCHER", Name_form);
					registryKey.Close();
					num = 30;
					num2 = num;
					continue;
				}
				case 15:
					MessageBoxWindow.Show(this, "Сохранено", name_messege);
					return;
				case 2:
					num = 46;
					num2 = num;
					continue;
				case 46:
					if (!(eval_hw.Text == "name"))
					{
						num = 40;
						num2 = num;
						continue;
					}
					goto case 42;
				case 6:
					MessageBoxWindow.Show(this, "Укажите игровой ник!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				case 20:
				case 39:
					num = 36;
					num2 = num;
					continue;
				case 36:
					if (num3 >= array.Length)
					{
						num = 14;
						num2 = num;
						continue;
					}
					text = array[num3];
					array2 = eval_hw.Text.ToCharArray();
					num4 = 0;
					num = 11;
					num2 = num;
					continue;
				case 41:
					flag = false;
					num = 18;
					num2 = num;
					continue;
				case 4:
				case 25:
					num = 7;
					num2 = num;
					continue;
				case 7:
				{
					num = 7403;
					short num6 = num;
					num = 7403;
					switch (num6 == num)
					{
					default:
						num = 0;
						if (num != 0)
						{
						}
						if (num5 >= array3.Length)
						{
							num = 22;
							num2 = num;
						}
						else
						{
							num = 27;
							num2 = num;
						}
						continue;
					case false:
					case true:
						break;
					}
					goto IL_0660;
				}
				case 22:
					num = 0;
					_ = num;
					goto case 18;
				case 33:
					if (c.ToString() == text)
					{
						num = 13;
						num2 = num;
						continue;
					}
					goto case 21;
				case 34:
					num = 1;
					num2 = num;
					continue;
				case 1:
					if (length <= 21)
					{
						array3 = eval_hw.Text.ToCharArray();
						num5 = 0;
						num = 4;
						num2 = num;
					}
					else
					{
						num = 32;
						num2 = num;
					}
					continue;
				case 8:
					num = 29;
					num2 = num;
					continue;
				case 29:
					if (!(Langve == "RU"))
					{
						MessageBoxWindow.Show(this, "Your nickname contains illegal characters \"" + eval_hw.Text + "\",such as -  \",\",\\,/,+,~,(,),$,%,<,>,&,?,#,!,?,^,:,*,@,№", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						return;
					}
					goto IL_0660;
				case 31:
					MessageBoxWindow.Show(this, "Ваш ник содержит запрещенное количество символов в нике,минимальное количество 4 максимальное 20", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				case 27:
					if (Convert.ToInt32(array3[num5]) <= 128)
					{
						num5++;
						num = 25;
						num2 = num;
					}
					else
					{
						num = 41;
						num2 = num;
					}
					continue;
				case 9:
					num = 35;
					num2 = num;
					continue;
				case 35:
					if (!(eval_hw.Text == "ADMIN"))
					{
						length = eval_hw.Text.Length;
						num = 43;
						num2 = num;
					}
					else
					{
						num = 42;
						num2 = num;
					}
					continue;
				case 40:
					num = 23;
					num2 = num;
					continue;
				case 23:
					if (!(eval_hw.Text == "admin"))
					{
						num = 17;
						num2 = num;
						continue;
					}
					goto case 42;
				case 13:
					flag = false;
					num = 21;
					num2 = num;
					continue;
				case 5:
					num = 16;
					num2 = num;
					continue;
				case 16:
					if (!(Langve == "RU"))
					{
						MessageBoxWindow.Show(this, "Russian letters are not allowed! Write in English", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						return;
					}
					num = 0;
					num2 = num;
					continue;
				case 0:
					MessageBoxWindow.Show(this, "Русские буквы запрещены!Пишите на английском", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				case 30:
					if (Langve == "RU")
					{
						num = 15;
						num2 = num;
						continue;
					}
					MessageBoxWindow.Show(this, "Saved", name_messege);
					return;
				case 17:
					num = 26;
					num2 = num;
					continue;
				case 26:
					if (!(eval_hw.Text == "Admin"))
					{
						num = 9;
						num2 = num;
						continue;
					}
					goto case 42;
				case 18:
					num = 28;
					num2 = num;
					continue;
				case 28:
					if (flag)
					{
						flag = true;
						array = this.m_eval_ao;
						num3 = 0;
						num = 39;
						num2 = num;
					}
					else
					{
						num = 5;
						num2 = num;
					}
					continue;
				case 14:
					num = 45;
					num2 = num;
					continue;
				case 45:
					if (flag)
					{
						num = 37;
						num2 = num;
					}
					else
					{
						num = 8;
						num2 = num;
					}
					continue;
				case 44:
					{
						num3++;
						num = 20;
						num2 = num;
						continue;
					}
					IL_0660:
					num = 38;
					num2 = num;
					continue;
				}
				break;
			}
			goto IL_00eb;
			IL_00eb:
			flag = true;
			num = 10;
			num2 = num;
			goto IL_0028;
		}
	}

	private void eval_e(object A_0, RoutedPropertyChangedEventArgs<double> A_1)
	{
		short num3;
		try
		{
			int num = default(int);
			int num2 = default(int);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num)
					{
					case 0:
						if (num2 == 0)
						{
							num3 = 16;
							num = num3;
							continue;
						}
						goto case 3;
					case 2:
						num3 = 15;
						num = num3;
						continue;
					case 15:
					{
						num3 = 26584;
						short num4 = num3;
						num3 = 26584;
						switch (num4 == num3)
						{
						case false:
						case true:
							goto IL_02ae;
						}
						num3 = 0;
						if (num3 != 0)
						{
						}
						if (num2 == 4)
						{
							num3 = 9;
							num = num3;
							continue;
						}
						goto case 14;
					}
					case 8:
						num3 = 12;
						num = num3;
						continue;
					case 12:
						if (num2 == 3)
						{
							num3 = 18;
							num = num3;
							continue;
						}
						goto case 2;
					case 3:
						num3 = 7;
						num = num3;
						continue;
					case 7:
						if (num2 == 1)
						{
							num3 = 10;
							num = num3;
							continue;
						}
						goto case 6;
					case 14:
						num3 = 5;
						num = num3;
						continue;
					case 5:
						if (num2 == 5)
						{
							num3 = 13;
							num = num3;
							continue;
						}
						goto case 1;
					case 16:
						gz.Content = "---";
						num3 = 3;
						num = num3;
						continue;
					case 9:
						gz.Content = "16384";
						num3 = 14;
						num = num3;
						continue;
					case 13:
						gz.Content = "32768";
						num3 = 1;
						num = num3;
						continue;
					case 17:
						gz.Content = "4096";
						num3 = 8;
						num = num3;
						continue;
					case 10:
						gz.Content = "2048";
						goto IL_02ae;
					case 18:
						gz.Content = "8192";
						num3 = 2;
						num = num3;
						continue;
					case 6:
						num3 = 11;
						num = num3;
						continue;
					case 11:
						if (num2 == 2)
						{
							num3 = 17;
							num = num3;
							continue;
						}
						goto case 8;
					case 1:
					{
						RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
						registryKey.SetValue("Mem", num2.ToString());
						registryKey.Close();
						num3 = 4;
						num = num3;
						continue;
					}
					case 4:
						goto end_IL_000a;
						IL_02ae:
						num3 = 6;
						num = num3;
						continue;
					}
					goto case 0;
					continue;
					end_IL_000a:
					break;
				}
				break;
			case 0:
				num2 = Convert.ToInt32((A_0 as Slider).Value.ToString("0"));
				num3 = 0;
				num = num3;
				goto default;
			}
		}
		catch
		{
		}
		num3 = 1;
		if (num3 != 0)
		{
		}
		num3 = 0;
		_ = num3;
	}

	private void eval_d(object A_0, RoutedPropertyChangedEventArgs<double> A_1)
	{
		short num2;
		try
		{
			int num = default(int);
			int num3 = default(int);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num)
					{
					case 13:
						if (num3 == 0)
						{
							num2 = 12;
							num = num2;
							continue;
						}
						goto IL_00f7;
					case 1:
						g0.Content = "6";
						num2 = 6;
						num = num2;
						continue;
					case 3:
						g0.Content = "4";
						goto IL_00da;
					case 15:
						if (num3 == 1)
						{
							num2 = 7;
							num = num2;
							continue;
						}
						goto case 14;
					case 6:
						num2 = 5;
						num = num2;
						continue;
					case 5:
						if (num3 == 4)
						{
							num2 = 10;
							num = num2;
							continue;
						}
						goto case 2;
					case 12:
						g0.Content = "---";
						num2 = 11;
						num = num2;
						continue;
					case 11:
					{
						num2 = -6568;
						short num4 = num2;
						num2 = -6568;
						switch (num4 == num2)
						{
						case false:
						case true:
							break;
						default:
							goto IL_01cf;
						}
						goto IL_00da;
					}
					case 9:
						num2 = 0;
						num = num2;
						continue;
					case 0:
						if (num3 == 3)
						{
							num2 = 1;
							num = num2;
							continue;
						}
						goto case 6;
					case 10:
						g0.Content = "8";
						num2 = 2;
						num = num2;
						continue;
					case 14:
						num2 = 8;
						num = num2;
						continue;
					case 8:
						if (num3 == 2)
						{
							num2 = 3;
							num = num2;
							continue;
						}
						goto case 9;
					case 7:
						g0.Content = "2";
						num2 = 14;
						num = num2;
						continue;
					case 2:
					{
						RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
						registryKey.SetValue("CPU", num3.ToString());
						registryKey.Close();
						num2 = 4;
						num = num2;
						continue;
					}
					case 4:
						goto end_IL_000a;
						IL_00da:
						num2 = 9;
						num = num2;
						continue;
						IL_01cf:
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_00f7;
						IL_00f7:
						num2 = 15;
						num = num2;
						continue;
					}
					goto case 0;
					continue;
					end_IL_000a:
					break;
				}
				break;
			case 0:
				num3 = Convert.ToInt32((A_0 as Slider).Value.ToString("0"));
				num2 = 13;
				num = num2;
				goto default;
			}
		}
		catch
		{
		}
		num2 = 1;
		if (num2 != 0)
		{
		}
		num2 = 0;
		_ = num2;
	}

	private void eval_c(object A_0, RoutedPropertyChangedEventArgs<double> A_1)
	{
		short num2;
		try
		{
			int num = default(int);
			int num3 = default(int);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num)
					{
					case 13:
						if (num3 == 0)
						{
							num2 = 12;
							num = num2;
							continue;
						}
						goto IL_0124;
					case 1:
						eval_g1.Content = "5";
						num2 = 6;
						num = num2;
						continue;
					case 3:
						eval_g1.Content = "3";
						goto IL_00e1;
					case 9:
						num2 = 1;
						if (num2 == 0)
						{
						}
						goto IL_0213;
					case 15:
						if (num3 == 1)
						{
							num2 = 7;
							num = num2;
							continue;
						}
						goto case 14;
					case 6:
						num2 = 5;
						num = num2;
						continue;
					case 5:
						if (num3 == 4)
						{
							num2 = 10;
							num = num2;
							continue;
						}
						goto case 2;
					case 12:
						eval_g1.Content = "---";
						num2 = 11;
						num = num2;
						continue;
					case 11:
					{
						num2 = -29896;
						short num4 = num2;
						num2 = -29896;
						switch (num4 == num2)
						{
						case false:
						case true:
							break;
						default:
							goto IL_01f9;
						}
						goto IL_00e1;
					}
					case 0:
						if (num3 == 3)
						{
							num2 = 1;
							num = num2;
							continue;
						}
						goto case 6;
					case 10:
						eval_g1.Content = "7";
						num2 = 2;
						num = num2;
						continue;
					case 14:
						num2 = 8;
						num = num2;
						continue;
					case 8:
						if (num3 == 2)
						{
							num2 = 3;
							num = num2;
							continue;
						}
						goto IL_0213;
					case 7:
						eval_g1.Content = "1";
						num2 = 14;
						num = num2;
						continue;
					case 2:
					{
						RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
						registryKey.SetValue("Thread", num3.ToString());
						registryKey.Close();
						num2 = 4;
						num = num2;
						continue;
					}
					case 4:
						goto end_IL_000a;
						IL_00e1:
						num2 = 9;
						num = num2;
						continue;
						IL_01f9:
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto IL_0124;
						IL_0124:
						num2 = 15;
						num = num2;
						continue;
						IL_0213:
						num2 = 0;
						num = num2;
						continue;
					}
					goto case 0;
					continue;
					end_IL_000a:
					break;
				}
				break;
			case 0:
				num3 = Convert.ToInt32((A_0 as Slider).Value.ToString("0"));
				num2 = 13;
				num = num2;
				goto default;
			}
		}
		catch
		{
		}
		num2 = 0;
		_ = num2;
	}

	private void eval_b(object A_0, RoutedPropertyChangedEventArgs<double> A_1)
	{
		short num2;
		try
		{
			int num = default(int);
			int num4 = default(int);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num)
					{
					case 2:
						if (num4 == 0)
						{
							num2 = 4;
							num = num2;
							continue;
						}
						num4 *= 100;
						eval_hd.Content = num4.ToString();
						num2 = 1;
						num = num2;
						continue;
					case 1:
					{
						num2 = -22011;
						short num3 = num2;
						num2 = -22011;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_00e9;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto case 3;
					}
					case 4:
						goto IL_00e9;
					case 3:
					{
						RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
						registryKey.SetValue("Distance", num4.ToString());
						registryKey.Close();
						num2 = 0;
						num = num2;
						continue;
					}
					case 0:
						goto end_IL_000a;
						IL_00e9:
						eval_hd.Content = "---";
						num2 = 3;
						num = num2;
						continue;
					}
					goto case 0;
					continue;
					end_IL_000a:
					break;
				}
				break;
			case 0:
				num4 = Convert.ToInt32((A_0 as Slider).Value.ToString("0"));
				num2 = 2;
				num = num2;
				goto default;
			}
		}
		catch
		{
		}
		num2 = 1;
		if (num2 != 0)
		{
		}
		num2 = 0;
		_ = num2;
	}

	private void eval_a(object A_0, RoutedPropertyChangedEventArgs<double> A_1)
	{
		short num2;
		try
		{
			int num = default(int);
			int num4 = default(int);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num)
					{
					case 2:
						if (num4 == 0)
						{
							num2 = 4;
							num = num2;
							continue;
						}
						num4 *= 100;
						eval_hh.Content = num4.ToString();
						num2 = 1;
						num = num2;
						continue;
					case 1:
					{
						num2 = -12392;
						short num3 = num2;
						num2 = -12392;
						switch (num3 == num2)
						{
						case false:
						case true:
							goto IL_00ec;
						}
						num2 = 0;
						if (num2 == 0)
						{
						}
						goto case 3;
					}
					case 4:
						goto IL_00ec;
					case 3:
					{
						RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
						registryKey.SetValue("Object", num4.ToString());
						registryKey.Close();
						num2 = 0;
						num = num2;
						continue;
					}
					case 0:
						goto end_IL_000a;
						IL_00ec:
						eval_hh.Content = "---";
						num2 = 3;
						num = num2;
						continue;
					}
					goto case 0;
					continue;
					end_IL_000a:
					break;
				}
				break;
			case 0:
				num4 = Convert.ToInt32((A_0 as Slider).Value.ToString("0"));
				num2 = 2;
				num = num2;
				goto default;
			}
		}
		catch
		{
		}
		num2 = 1;
		if (num2 != 0)
		{
		}
		num2 = 0;
		_ = num2;
	}

	private void eval_z(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		RegistryKey registryKey = default(RegistryKey);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					if (isChecked == flag)
					{
						num = 3;
						num2 = num;
						continue;
					}
					registryKey.SetValue("Check_nosplash", "false");
					goto IL_00ba;
				case 2:
				{
					num = -15506;
					short num3 = num;
					num = -15506;
					switch (num3 == num)
					{
					case false:
					case true:
						break;
					default:
						goto IL_0106;
					}
					goto IL_00ba;
				}
				case 3:
					registryKey.SetValue("Check_nosplash", "true");
					num = 0;
					num2 = num;
					continue;
				case 0:
					{
						registryKey.Close();
						return;
					}
					IL_0106:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num == 0)
					{
					}
					goto case 0;
					IL_00ba:
					num = 2;
					num2 = num;
					continue;
				}
				break;
			}
			goto case 0;
		case 0:
			registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
			isChecked = eval_g7.IsChecked;
			flag = true;
			num = 1;
			num2 = num;
			goto default;
		}
	}

	private void eval_y(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		RegistryKey registryKey = default(RegistryKey);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					if (isChecked == flag)
					{
						num = 3;
						num2 = num;
						continue;
					}
					registryKey.SetValue("Check_noPause", "false");
					goto IL_00dc;
				case 3:
					num = 1;
					if (num != 0)
					{
					}
					registryKey.SetValue("Check_noPause", "true");
					num = 0;
					num2 = num;
					continue;
				case 2:
				{
					num = 3673;
					short num3 = num;
					num = 3673;
					switch (num3 == num)
					{
					case false:
					case true:
						break;
					default:
						goto IL_012a;
					}
					goto IL_00dc;
				}
				case 0:
					{
						registryKey.Close();
						return;
					}
					IL_012a:
					num = 0;
					if (num == 0)
					{
					}
					goto case 0;
					IL_00dc:
					num = 2;
					num2 = num;
					continue;
				}
				break;
			}
			goto case 0;
		case 0:
			registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
			isChecked = eval_g5.IsChecked;
			flag = true;
			num = 1;
			num2 = num;
			goto default;
		}
	}

	private void eval_x(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		RegistryKey registryKey = default(RegistryKey);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					if (isChecked == flag)
					{
						num = 3;
						num2 = num;
						continue;
					}
					num = 1;
					if (num != 0)
					{
					}
					registryKey.SetValue("Check_winxp", "false");
					goto IL_00e3;
				case 2:
				{
					num = 26104;
					short num3 = num;
					num = 26104;
					switch (num3 == num)
					{
					case false:
					case true:
						break;
					default:
						goto IL_0131;
					}
					goto IL_00e3;
				}
				case 3:
					registryKey.SetValue("Check_winxp", "true");
					num = 0;
					num2 = num;
					continue;
				case 0:
					{
						registryKey.Close();
						return;
					}
					IL_0131:
					num = 0;
					if (num == 0)
					{
					}
					goto case 0;
					IL_00e3:
					num = 2;
					num2 = num;
					continue;
				}
				break;
			}
			goto case 0;
		case 0:
			registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
			isChecked = eval_g8.IsChecked;
			flag = true;
			num = 1;
			num2 = num;
			goto default;
		}
	}

	private void eval_w(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		RegistryKey registryKey = default(RegistryKey);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					if (isChecked == flag)
					{
						num = 3;
						num2 = num;
						continue;
					}
					num = 1;
					if (num != 0)
					{
					}
					registryKey.SetValue("Check_skipIntro", "false");
					goto IL_00e0;
				case 2:
				{
					num = 18954;
					short num3 = num;
					num = 18954;
					switch (num3 == num)
					{
					case false:
					case true:
						break;
					default:
						goto IL_012c;
					}
					goto IL_00e0;
				}
				case 3:
					registryKey.SetValue("Check_skipIntro", "true");
					num = 0;
					num2 = num;
					continue;
				case 0:
					{
						registryKey.Close();
						return;
					}
					IL_012c:
					num = 0;
					if (num == 0)
					{
					}
					goto case 0;
					IL_00e0:
					num = 2;
					num2 = num;
					continue;
				}
				break;
			}
			goto case 0;
		case 0:
			registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
			isChecked = eval_g6.IsChecked;
			flag = true;
			num = 1;
			num2 = num;
			goto default;
		}
	}

	private void eval_v(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		RegistryKey registryKey = default(RegistryKey);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					goto IL_00f1;
				case 2:
					goto IL_0147;
				case 0:
				case 3:
					registryKey.Close();
					return;
				}
				break;
				IL_00f1:
				if (isChecked == flag)
				{
					num = 2;
					num2 = num;
				}
				else
				{
					registryKey.SetValue("Check_high", "false");
					num = 3;
					num2 = num;
				}
			}
			goto case 0;
		case 0:
			{
				num = 18636;
				short num3 = num;
				num = 18636;
				switch (num3 == num)
				{
				case false:
				case true:
					goto IL_0157;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
				isChecked = eval_g9.IsChecked;
				flag = true;
				num = 1;
				num2 = num;
				goto default;
			}
			IL_0147:
			registryKey.SetValue("Check_high", "true");
			goto IL_0157;
			IL_0157:
			num = 0;
			num2 = num;
			goto default;
		}
	}

	private void eval_u(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		RegistryKey registryKey = default(RegistryKey);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					goto IL_00c9;
				case 3:
					num = 1;
					if (num == 0)
					{
					}
					goto case 0;
				case 2:
					goto IL_0147;
				case 0:
					registryKey.Close();
					return;
				}
				break;
				IL_00c9:
				if (isChecked == flag)
				{
					num = 2;
					num2 = num;
				}
				else
				{
					registryKey.SetValue("Check_Logs", "false");
					num = 3;
					num2 = num;
				}
			}
			goto case 0;
		case 0:
			{
				num = 20163;
				short num3 = num;
				num = 20163;
				switch (num3 == num)
				{
				case false:
				case true:
					goto IL_0157;
				}
				num = 0;
				if (num != 0)
				{
				}
				registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
				isChecked = eval_ha.IsChecked;
				flag = true;
				num = 1;
				num2 = num;
				goto default;
			}
			IL_0147:
			registryKey.SetValue("Check_Logs", "true");
			goto IL_0157;
			IL_0157:
			num = 0;
			num2 = num;
			goto default;
		}
	}

	private void eval_t(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		RegistryKey registryKey = default(RegistryKey);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					goto IL_00cb;
				case 2:
					goto IL_0122;
				case 0:
					num = 1;
					if (num == 0)
					{
					}
					goto case 3;
				case 3:
					registryKey.Close();
					return;
				}
				break;
				IL_00cb:
				if (isChecked == flag)
				{
					num = 2;
					num2 = num;
				}
				else
				{
					registryKey.SetValue("Check_nocharmenu", "false");
					num = 3;
					num2 = num;
				}
			}
			goto case 0;
		case 0:
			{
				num = 30126;
				short num3 = num;
				num = 30126;
				switch (num3 == num)
				{
				case false:
				case true:
					goto IL_0132;
				}
				num = 0;
				if (num != 0)
				{
				}
				registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
				isChecked = eval_hj.IsChecked;
				flag = true;
				num = 1;
				num2 = num;
				goto default;
			}
			IL_0122:
			registryKey.SetValue("Check_nocharmenu", "true");
			goto IL_0132;
			IL_0132:
			num = 0;
			num2 = num;
			goto default;
		}
	}

	private void eval_s(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		RegistryKey registryKey = default(RegistryKey);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					goto IL_00ca;
				case 2:
					goto IL_00f6;
				case 0:
				case 3:
					registryKey.Close();
					return;
				}
				break;
				IL_00ca:
				if (isChecked == flag)
				{
					num = 2;
					num2 = num;
				}
				else
				{
					registryKey.SetValue("Check_BattlEye", "false");
					num = 3;
					num2 = num;
				}
			}
			goto case 0;
		case 0:
			{
				num = -24478;
				short num3 = num;
				num = -24478;
				switch (num3 == num)
				{
				case false:
				case true:
					goto IL_0158;
				}
				num = 0;
				if (num != 0)
				{
				}
				registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
				isChecked = eval_hk.IsChecked;
				flag = true;
				num = 1;
				num2 = num;
				goto default;
			}
			IL_00f6:
			num = 1;
			if (num != 0)
			{
			}
			registryKey.SetValue("Check_BattlEye", "true");
			goto IL_0158;
			IL_0158:
			num = 0;
			num2 = num;
			goto default;
		}
	}

	private void eval_r(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		RegistryKey registryKey = default(RegistryKey);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					goto IL_00f2;
				case 2:
					goto IL_0148;
				case 0:
				case 3:
					registryKey.Close();
					return;
				}
				break;
				IL_00f2:
				if (isChecked == flag)
				{
					num = 2;
					num2 = num;
				}
				else
				{
					registryKey.SetValue("CheckExitLaincher", "false");
					num = 3;
					num2 = num;
				}
			}
			goto case 0;
		case 0:
			{
				num = 28784;
				short num3 = num;
				num = 28784;
				switch (num3 == num)
				{
				case false:
				case true:
					goto IL_0158;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
				isChecked = eval_hy.IsChecked;
				flag = true;
				num = 1;
				num2 = num;
				goto default;
			}
			IL_0148:
			registryKey.SetValue("CheckExitLaincher", "true");
			goto IL_0158;
			IL_0158:
			num = 0;
			num2 = num;
			goto default;
		}
	}

	private void eval_q(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = -19659;
		short num2 = num;
		num = -19659;
		int num3;
		DoubleAnimation doubleAnimation = default(DoubleAnimation);
		DoubleAnimation doubleAnimation2 = default(DoubleAnimation);
		switch (num2 == num)
		{
		default:
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			num3 = num;
			switch (num3)
			{
			}
			switch (0)
			{
			case 0:
				goto IL_00b6;
			}
			goto IL_009b;
		case false:
		case true:
			goto IL_01cd;
			IL_01cd:
			num = 1;
			if (num != 0)
			{
			}
			h4.IsEnabled = false;
			doubleAnimation = new DoubleAnimation
			{
				Duration = TimeSpan.FromSeconds(0.8),
				EasingFunction = new SineEase()
			};
			num = 3;
			num3 = num;
			goto IL_009b;
			IL_00b6:
			doubleAnimation2 = new DoubleAnimation
			{
				Duration = TimeSpan.FromSeconds(0.8),
				EasingFunction = new SineEase()
			};
			num = 2;
			num3 = num;
			goto IL_009b;
			IL_009b:
			while (true)
			{
				switch (num3)
				{
				case 2:
					if (OpenDownloader)
					{
						num = 1;
						num3 = num;
						continue;
					}
					goto IL_01cd;
				case 4:
				{
					doubleAnimation.From = 270.0;
					doubleAnimation.To = 0.0;
					doubleAnimation.Completed += delegate
					{
						short num8 = -22513;
						short num9 = num8;
						num8 = -22513;
						switch (num9 == num8)
						{
						default:
							num8 = 0;
							if (num8 != 0)
							{
							}
							num8 = 0;
							_ = num8;
							num8 = 1;
							if (num8 != 0)
							{
							}
							h4.IsEnabled = true;
							OpenUser = false;
							break;
						}
					};
					gb.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation);
					DoubleAnimation doubleAnimation4 = new DoubleAnimation
					{
						From = 1.0,
						To = 0.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.5)),
						AutoReverse = false
					};
					doubleAnimation4.Completed += delegate
					{
						short num6 = 1;
						if (num6 != 0)
						{
						}
						num6 = -17340;
						short num7 = num6;
						num6 = -17340;
						switch (num7 == num6)
						{
						default:
							num6 = 0;
							_ = num6;
							num6 = 0;
							if (num6 != 0)
							{
							}
							gb.Visibility = Visibility.Hidden;
							break;
						}
					};
					gb.BeginAnimation(UIElement.OpacityProperty, doubleAnimation4);
					return;
				}
				case 0:
					goto IL_01cd;
				case 3:
					goto IL_0242;
				case 1:
				{
					h6.IsEnabled = false;
					doubleAnimation2.From = 1074.0;
					doubleAnimation2.To = 0.0;
					doubleAnimation2.Completed += delegate
					{
						short num12 = -3237;
						short num13 = num12;
						num12 = -3237;
						switch (num13 == num12)
						{
						default:
							num12 = 0;
							if (num12 != 0)
							{
							}
							num12 = 0;
							_ = num12;
							num12 = 1;
							if (num12 != 0)
							{
							}
							h6.IsEnabled = true;
							OpenDownloader = false;
							break;
						}
					};
					eval_gl.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation2);
					DoubleAnimation doubleAnimation3 = new DoubleAnimation
					{
						From = 1.0,
						To = 0.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.5)),
						AutoReverse = false
					};
					doubleAnimation3.Completed += delegate
					{
						short num10 = -3023;
						short num11 = num10;
						num10 = -3023;
						switch (num11 == num10)
						{
						default:
							num10 = 1;
							if (num10 != 0)
							{
							}
							num10 = 0;
							_ = num10;
							num10 = 0;
							if (num10 != 0)
							{
							}
							eval_gl.Visibility = Visibility.Hidden;
							break;
						}
					};
					eval_gl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation3);
					num = 0;
					num3 = num;
					continue;
				}
				}
				break;
				IL_0242:
				if (OpenUser)
				{
					num = 4;
					num3 = num;
					continue;
				}
				gb.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.5)),
					AutoReverse = false
				};
				gb.BeginAnimation(UIElement.OpacityProperty, animation);
				doubleAnimation.From = 0.0;
				doubleAnimation.To = 270.0;
				doubleAnimation.Completed += delegate
				{
					short num4 = -26074;
					short num5 = num4;
					num4 = -26074;
					switch (num5 == num4)
					{
					default:
						num4 = 1;
						if (num4 != 0)
						{
						}
						num4 = 0;
						_ = num4;
						num4 = 0;
						if (num4 != 0)
						{
						}
						h4.IsEnabled = true;
						OpenUser = true;
						break;
					}
				};
				gb.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation);
				return;
			}
			goto IL_00b6;
		}
	}

	private void eval_a(object A_0, TextChangedEventArgs A_1)
	{
		short num;
		try
		{
			try
			{
				num = 6996;
				short num2 = num;
				num = 6996;
				switch (num2 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					eval_hw.Text = eval_hw.Text.Replace(" ", "");
					Name_players_local = eval_hw.Text;
					break;
				}
			}
			catch
			{
			}
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
			registryKey.SetValue("nametxt", eval_hw.Text);
			registryKey.SetValue("LAUNCHER", Name_form);
			registryKey.Close();
		}
		catch
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num == 0)
		{
		}
	}

	private void eval_p(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		RegistryKey registryKey = default(RegistryKey);
		bool? isChecked = default(bool?);
		bool flag = default(bool);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					goto IL_00ca;
				case 2:
					goto IL_0120;
				case 0:
				case 3:
					num = 1;
					if (num != 0)
					{
					}
					registryKey.Close();
					return;
				}
				break;
				IL_00ca:
				if (isChecked == flag)
				{
					num = 2;
					num2 = num;
				}
				else
				{
					registryKey.SetValue("CheckClearGame", "false");
					num = 3;
					num2 = num;
				}
			}
			goto case 0;
		case 0:
			{
				num = -28712;
				short num3 = num;
				num = -28712;
				switch (num3 == num)
				{
				case false:
				case true:
					goto IL_0130;
				}
				num = 0;
				if (num != 0)
				{
				}
				registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
				isChecked = eval_hk.IsChecked;
				flag = true;
				num = 1;
				num2 = num;
				goto default;
			}
			IL_0120:
			registryKey.SetValue("CheckClearGame", "true");
			goto IL_0130;
			IL_0130:
			num = 0;
			num2 = num;
			goto default;
		}
	}

	private void eval_b2()
	{
		short num;
		try
		{
			num = 2;
			int num2 = num;
			WebClient webClient = default(WebClient);
			while (true)
			{
				num = 8813;
				short num3 = num;
				num = 8813;
				switch (num3 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					switch (num2)
					{
					case 2:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), this.m_eval_ad)))
						{
							num = 1;
							num2 = num;
							continue;
						}
						break;
					case 3:
						try
						{
							Uri address = new Uri(URL_UpdateNews + this.m_eval_o + URL_DIRUpdateNews);
							webClient.DownloadFileAsync(address, DirLocal + "\\ALLNews.xml");
							webClient.DownloadFileCompleted += delegate
							{
								short num4;
								try
								{
									num4 = 0;
									int num5 = num4;
									switch (num5)
									{
									default:
									{
										IEnumerator enumerator = default(IEnumerator);
										switch (0)
										{
										default:
										{
											int num6 = default(int);
											XmlNode xmlNode = default(XmlNode);
											IDisposable disposable = default(IDisposable);
											while (true)
											{
												switch (num5)
												{
												case 4:
													try
													{
														switch (0)
														{
														default:
															while (true)
															{
																switch (num5)
																{
																case 3:
																	if (Langve == "RU")
																	{
																		num4 = 4;
																		num5 = num4;
																	}
																	else
																	{
																		eval_cg.BGo.Content = "More details";
																		num4 = 0;
																		num5 = num4;
																	}
																	continue;
																case 4:
																	eval_cg.BGo.Content = "Подробнее";
																	num4 = 2;
																	num5 = num4;
																	continue;
																case 0:
																case 2:
																	num4 = 1;
																	num5 = num4;
																	continue;
																case 1:
																	goto end_IL_00a0;
																}
																goto case 0;
																continue;
																end_IL_00a0:
																break;
															}
															break;
														case 0:
															while (true)
															{
																eval_cg = new News
																{
																	NewsText = eval_cf[num6].TXT_ALLNEWS,
																	NewsTextHeadline = eval_cf[num6].Headline_ALLNEWS,
																	NewsTexturl = eval_cf[num6].URL_ALLNEWS,
																	NewsIMAGE = eval_cf[num6].IMAGE_ALLNEWS
																};
																BoxNews.Items.Add(eval_cg);
																num4 = -32603;
																short num7 = num4;
																num4 = -32603;
																switch (num7 == num4)
																{
																case false:
																case true:
																	continue;
																}
																break;
															}
															num4 = 0;
															if (num4 != 0)
															{
															}
															num4 = 3;
															num5 = num4;
															goto default;
														}
													}
													catch (Exception ex3)
													{
														System.Windows.MessageBox.Show("LoadAllNews[UPDATEN] :" + ex3.Message);
													}
													num6++;
													num4 = 1;
													num5 = num4;
													continue;
												case 0:
												case 1:
													num4 = 2;
													num5 = num4;
													continue;
												case 2:
													if (num6 >= eval_cf.Count)
													{
														num4 = 6;
														num5 = num4;
													}
													else
													{
														num4 = 1;
														if (num4 != 0)
														{
														}
														num4 = 4;
														num5 = num4;
													}
													continue;
												case 5:
													try
													{
														num4 = 3;
														num5 = num4;
														while (true)
														{
															switch (num5)
															{
															case 3:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															default:
																num4 = 4;
																num5 = num4;
																continue;
															case 4:
																if (!enumerator.MoveNext())
																{
																	num4 = 2;
																	num5 = num4;
																}
																else
																{
																	xmlNode = (XmlNode)enumerator.Current;
																	num4 = 0;
																	num5 = num4;
																}
																continue;
															case 0:
																try
																{
																	eval_cf.Add(new ENews
																	{
																		Headline_ALLNEWS = xmlNode.SelectSingleNode("Headline").InnerText,
																		URL_ALLNEWS = xmlNode.SelectSingleNode("VK").InnerText,
																		TXT_ALLNEWS = xmlNode.SelectSingleNode("NEWS").InnerText,
																		IMAGE_ALLNEWS = xmlNode.SelectSingleNode("IMAGE").InnerText
																	});
																}
																catch (Exception ex2)
																{
																	System.Windows.MessageBox.Show("LoadAllNews[XmlNode] :" + ex2.Message);
																}
																goto default;
															case 2:
																num4 = 1;
																num5 = num4;
																continue;
															case 1:
																break;
															}
															break;
														}
													}
													finally
													{
														switch (0)
														{
														default:
															while (true)
															{
																switch (num5)
																{
																case 2:
																	if (disposable != null)
																	{
																		num4 = 0;
																		num5 = num4;
																		continue;
																	}
																	goto end_IL_0404;
																case 0:
																	disposable.Dispose();
																	num4 = 1;
																	num5 = num4;
																	continue;
																case 1:
																	goto end_IL_0404;
																}
																goto case 0;
																continue;
																end_IL_0404:
																break;
															}
															break;
														case 0:
															disposable = enumerator as IDisposable;
															num4 = 2;
															num5 = num4;
															goto default;
														}
													}
													num6 = 0;
													num4 = 0;
													num5 = num4;
													continue;
												case 6:
													num4 = 3;
													num5 = num4;
													continue;
												case 3:
													goto end_IL_0028;
												}
												goto case 0;
												continue;
												end_IL_0028:
												break;
											}
											break;
										}
										case 0:
											eval_dm.Load(DirLocal + "\\ALLNews.xml");
											enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
											num4 = 5;
											num5 = num4;
											goto default;
										}
										break;
									}
									}
								}
								catch (Exception ex4)
								{
									System.Windows.MessageBox.Show("LoadAllNews[DownloadFileCompleted] :" + ex4.Message);
								}
								num4 = 0;
								_ = num4;
							};
						}
						finally
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (webClient != null)
									{
										num = 1;
										num2 = num;
										continue;
									}
									break;
								case 1:
									((IDisposable)webClient).Dispose();
									num = 2;
									num2 = num;
									continue;
								case 2:
									break;
								}
								break;
							}
						}
						num = 0;
						num2 = num;
						continue;
					case 4:
						break;
					case 1:
						Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), this.m_eval_ad));
						num = 4;
						num2 = num;
						continue;
					case 0:
						goto end_IL_001e;
					}
					break;
				case false:
				case true:
					break;
				}
				DirLocal = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), this.m_eval_ad);
				webClient = new WebClient();
				num = 3;
				num2 = num;
				continue;
				end_IL_001e:
				break;
			}
		}
		catch (Exception ex)
		{
			System.Windows.MessageBox.Show("LoadAllNews[] :" + ex.Message);
		}
		num = 0;
		_ = num;
	}

	private void eval_o(object A_0, RoutedEventArgs A_1)
	{
		short num = 17985;
		short num2 = num;
		num = 17985;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_a<ScrollViewer>(BoxNews).Single().LineRight();
		A_1.Handled = true;
	}

	private void eval_d(object A_0, MouseButtonEventArgs A_1)
	{
		short num = 23540;
		short num2 = num;
		num = 23540;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_ch = true;
		new Thread(eval_b1).Start();
	}

	private void eval_c(object A_0, MouseButtonEventArgs A_1)
	{
		short num = 10324;
		short num2 = num;
		num = 10324;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_ch = false;
	}

	private void eval_b1()
	{
		short num = 1;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 1:
			{
				num = -19031;
				short num3 = num;
				num = -19031;
				switch (num3 == num)
				{
				case false:
				case true:
					goto end_IL_006c;
				}
				num = 0;
				if (num != 0)
				{
				}
				switch (0)
				{
				default:
					continue;
				case 0:
					break;
				}
				goto default;
			}
			default:
				num = 2;
				num2 = num;
				continue;
			case 2:
				break;
			case 3:
				return;
			case 0:
				{
					num = 0;
					_ = num;
					num = 1;
					if (num == 0)
					{
					}
					goto default;
				}
				end_IL_006c:
				break;
			}
			if (!eval_ch)
			{
				num = 3;
				num2 = num;
				continue;
			}
			Thread.Sleep(10);
			BoxNews.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
			{
				short num4 = -1548;
				short num5 = num4;
				num4 = -1548;
				switch (num5 == num4)
				{
				default:
					num4 = 1;
					if (num4 != 0)
					{
					}
					num4 = 0;
					_ = num4;
					num4 = 0;
					if (num4 != 0)
					{
					}
					eval_a<ScrollViewer>(BoxNews).FirstOrDefault().LineRight();
					break;
				}
			});
			num = 0;
			num2 = num;
		}
	}

	private void eval_b0()
	{
		short num = 1;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 1:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 4491;
				short num3 = num;
				num = 4491;
				switch (num3 == num)
				{
				case false:
				case true:
					goto end_IL_0091;
				}
				num = 0;
				if (num != 0)
				{
				}
				switch (0)
				{
				default:
					continue;
				case 0:
					break;
				}
				goto default;
			}
			default:
				num = 2;
				num2 = num;
				continue;
			case 2:
				break;
			case 3:
				return;
				end_IL_0091:
				break;
			}
			if (!eval_ci)
			{
				num = 3;
				num2 = num;
				continue;
			}
			Thread.Sleep(10);
			BoxNews.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
			{
				short num4 = 1;
				if (num4 != 0)
				{
				}
				num4 = 21842;
				short num5 = num4;
				num4 = 21842;
				switch (num5 == num4)
				{
				default:
					num4 = 0;
					_ = num4;
					num4 = 0;
					if (num4 != 0)
					{
					}
					eval_a<ScrollViewer>(BoxNews).FirstOrDefault().LineLeft();
					break;
				}
			});
			num = 0;
			_ = num;
			num = 0;
			num2 = num;
		}
	}

	private void eval_b(object A_0, MouseButtonEventArgs A_1)
	{
		short num = 25610;
		short num2 = num;
		num = 25610;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_ci = false;
	}

	private void eval_a(object A_0, MouseButtonEventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 2346;
		short num2 = num;
		num = 2346;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_ci = true;
		new Thread(eval_b0).Start();
	}

	private void eval_n(object A_0, RoutedEventArgs A_1)
	{
		short num = 27416;
		short num2 = num;
		num = 27416;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_a<ScrollViewer>(BoxNews).FirstOrDefault().LineLeft();
		A_1.Handled = true;
	}

	private void eval_a(object A_0, MouseWheelEventArgs A_1)
	{
		short num = 0;
		_ = num;
		int num2 = default(int);
		ScrollViewer scrollViewer = default(ScrollViewer);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num2)
				{
				case 1:
					goto IL_00e2;
				case 2:
					goto IL_0124;
				case 0:
				case 3:
					A_1.Handled = true;
					return;
				}
				break;
				IL_00e2:
				if (A_1.Delta > 0)
				{
					num = 2;
					num2 = num;
				}
				else
				{
					scrollViewer.LineRight();
					num = 3;
					num2 = num;
				}
			}
			goto case 0;
		case 0:
			{
				num = 7624;
				short num3 = num;
				num = 7624;
				switch (num3 == num)
				{
				case false:
				case true:
					goto IL_012a;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				scrollViewer = eval_a<ScrollViewer>(BoxNews).FirstOrDefault();
				num = 1;
				num2 = num;
				goto default;
			}
			IL_0124:
			scrollViewer.LineLeft();
			goto IL_012a;
			IL_012a:
			num = 0;
			num2 = num;
			goto default;
		}
	}

	[IteratorStateMachine(typeof(eval_aj))]
	private static IEnumerable<a> eval_a<a>(DependencyObject A_0) where a : DependencyObject
	{
		short num = 30289;
		short num2 = num;
		num = 30289;
		switch (num2 == num)
		{
		default:
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			return new eval_aj<a>(-2)
			{
				eval_e = A_0
			};
		}
	}

	public string SoundCardID()
	{
		short num = 0;
		_ = num;
		num = -19164;
		short num2 = num;
		num = -19164;
		string result = default(string);
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			if (num != 0)
			{
			}
			string text = "";
			try
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_SoundDevice").Get().GetEnumerator();
				try
				{
					num = 2;
					int num3 = num;
					while (true)
					{
						switch (num3)
						{
						case 2:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							num = 3;
							num3 = num;
							continue;
						case 3:
							if (enumerator.MoveNext())
							{
								text = enumerator.Current["DeviceID"].ToString();
								num = 1;
								num3 = num;
							}
							else
							{
								num = 4;
								num3 = num;
							}
							continue;
						case 4:
							num = 0;
							num3 = num;
							continue;
						case 0:
							break;
						}
						break;
					}
				}
				finally
				{
					num = 0;
					int num3 = num;
					while (true)
					{
						switch (num3)
						{
						case 0:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (enumerator != null)
							{
								num = 1;
								num3 = num;
								continue;
							}
							break;
						case 1:
							((IDisposable)enumerator).Dispose();
							num = 2;
							num3 = num;
							continue;
						case 2:
							break;
						}
						break;
					}
				}
				result = text;
			}
			catch
			{
				result = (text = "S2ERROR");
			}
			break;
		}
		case false:
		case true:
			break;
		}
		num = 1;
		if (num != 0)
		{
		}
		return result;
	}

	public void ShopGenerateUrl(string IPHost, string PortHost)
	{
		short num = -5322;
		short num2 = num;
		num = -5322;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		URL_CAR = IPHost + "-" + PortHost + "-wahicle.xml";
		URL_SET = IPHost + "-" + PortHost + "-set.xml";
		URL_LOOT = IPHost + "-" + PortHost + "-loot.xml";
		URL_WEAPON = IPHost + "-" + PortHost + "-weapon.xml";
		URL_INVENTORY = IPHost + "-" + PortHost + "-inventory.xml";
		URL_MASK = IPHost + "-" + PortHost + "-mask.xml";
		URL_BASE = IPHost + "-" + PortHost + "-base.xml";
		URL_MEDIC = IPHost + "-" + PortHost + "-medic.xml";
		ShopControll.OpenBLOOT = true;
		ShopControll.OpenBCARS = false;
		ShopControll.OpenBSETS = false;
		ShopControll.OpenBWEAPON = false;
		ShopControll.OpenBInvent = false;
		ShopControll.OpenBMask = false;
		ShopControll.OpenBBase = false;
		ShopControll.OpenBMedic = false;
		eval_ga.Lootline.Visibility = Visibility.Hidden;
		eval_ga.Weaponline.Visibility = Visibility.Hidden;
		eval_ga.Setsline.Visibility = Visibility.Hidden;
		eval_ga.Carsline.Visibility = Visibility.Hidden;
		eval_ga.Heliline.Visibility = Visibility.Hidden;
		eval_ga.Maskline.Visibility = Visibility.Hidden;
		eval_ga.Baseline.Visibility = Visibility.Hidden;
		eval_ga.Medicline.Visibility = Visibility.Hidden;
		eval_is.Lootline.Visibility = Visibility.Hidden;
		eval_is.Weaponline.Visibility = Visibility.Hidden;
		eval_is.Setsline.Visibility = Visibility.Hidden;
		eval_is.Carsline.Visibility = Visibility.Hidden;
		eval_is.Heliline.Visibility = Visibility.Hidden;
		eval_is.Maskline.Visibility = Visibility.Hidden;
		eval_is.Baseline.Visibility = Visibility.Hidden;
		eval_is.Medicline.Visibility = Visibility.Hidden;
		Thread thread = new Thread(Download_LoadXML);
		thread.IsBackground = true;
		thread.Start();
	}

	public void Download_LoadXML()
	{
		short num2;
		try
		{
			eval_h eval_h = default(eval_h);
			WebClient webClient = default(WebClient);
			int num = default(int);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num)
					{
					case 2:
						if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), this.m_eval_ad)))
						{
							num2 = 1;
							num = num2;
							continue;
						}
						goto IL_01a7;
					case 3:
						try
						{
							eval_h.a = new Uri(URL_Shop + this.m_eval_o + "/LAUNCHER/SHOP/loot/" + URL_LOOT);
							webClient.DownloadFileAsync(eval_h.a, DirLocal + "\\loot.xml");
							webClient.DownloadFileCompleted += eval_h.eval_h;
						}
						finally
						{
							num2 = 0;
							num = num2;
							while (true)
							{
								switch (num)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (webClient != null)
									{
										num2 = 1;
										num = num2;
										continue;
									}
									break;
								case 1:
									((IDisposable)webClient).Dispose();
									num2 = 2;
									num = num2;
									continue;
								case 2:
									break;
								}
								break;
							}
						}
						num2 = 0;
						num = num2;
						continue;
					case 4:
						goto IL_01a7;
					case 1:
						Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), this.m_eval_ad));
						num2 = 4;
						num = num2;
						continue;
					case 0:
						goto end_IL_0001;
					}
					break;
				}
				goto case 0;
			case 0:
				{
					num2 = -2922;
					short num3 = num2;
					num2 = -2922;
					switch (num3 == num2)
					{
					case false:
					case true:
						goto IL_01a7;
					}
					num2 = 0;
					if (num2 != 0)
					{
					}
					eval_h = new eval_h();
					eval_h.eval_b = this;
					ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
					{
						if (ij.Visibility == Visibility.Visible)
						{
							short num4 = 6236;
							short num5 = num4;
							num4 = 6236;
							switch (num5 == num4)
							{
							default:
								num4 = 1;
								if (num4 != 0)
								{
								}
								num4 = 0;
								if (num4 != 0)
								{
								}
								num4 = 0;
								_ = num4;
								eval_is.BoxShop.Visibility = Visibility.Hidden;
								return;
							case false:
							case true:
								break;
							}
						}
						eval_ga.BoxShop.Visibility = Visibility.Hidden;
					});
					num2 = 2;
					num = num2;
					goto default;
				}
				IL_01a7:
				DirLocal = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), this.m_eval_ad);
				webClient = new WebClient();
				num2 = 3;
				num = num2;
				goto default;
				end_IL_0001:
				break;
			}
		}
		catch (Exception ex)
		{
			System.Windows.MessageBox.Show("[Download_LoadXML] :" + ex.Message);
		}
		num2 = 0;
		_ = num2;
		num2 = 1;
		if (num2 == 0)
		{
		}
	}

	public void LoadShop()
	{
		short num;
		try
		{
			num = 0;
			int num2 = num;
			switch (num2)
			{
			default:
			{
				eval_i eval_i = default(eval_i);
				switch (0)
				{
				default:
				{
					eval_k eval_k = default(eval_k);
					eval_o eval_o = default(eval_o);
					double num10 = default(double);
					eval_q eval_q = default(eval_q);
					eval_m eval_m = default(eval_m);
					double num4 = default(double);
					eval_j eval_j = default(eval_j);
					eval_l eval_l = default(eval_l);
					eval_p eval_p = default(eval_p);
					double num9 = default(double);
					double num8 = default(double);
					double num7 = default(double);
					double num6 = default(double);
					double num5 = default(double);
					eval_n eval_n = default(eval_n);
					double num3 = default(double);
					while (true)
					{
						switch (num2)
						{
						case 54:
							if (ShopControll.OpenBLOOT)
							{
								num = 64;
								num2 = num;
								continue;
							}
							goto case 25;
						case 0:
						case 59:
							num = 41;
							num2 = num;
							continue;
						case 41:
							if (eval_k.a >= eval_cz.Count)
							{
								num = 39;
								num2 = num;
							}
							else
							{
								num = 10;
								num2 = num;
							}
							continue;
						case 25:
							num = 35;
							num2 = num;
							continue;
						case 35:
							if (ShopControll.OpenBWEAPON)
							{
								num = 55;
								num2 = num;
								continue;
							}
							goto case 58;
						case 28:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
										{
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_o.eval_b.a = eval_c3[eval_o.a].Price + " rub.";
											eval_o.eval_b.eval_b = Math.Truncate(num10 - cj * num10) + " rub.";
											num = -19922;
											short num11 = num;
											num = -19922;
											switch (num11 == num)
											{
											default:
												num = 0;
												if (num != 0)
												{
												}
												num = 1;
												num2 = num;
												continue;
											case false:
											case true:
												break;
											}
											goto IL_048e;
										}
										case 3:
											eval_o.eval_b.a = eval_c3[eval_o.a].Price + " pуб.";
											eval_o.eval_b.eval_b = Math.Truncate(num10 - cj * num10) + " pуб.";
											goto IL_048e;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_o.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_029d;
											IL_048e:
											num = 2;
											num2 = num;
											continue;
										}
										goto case 0;
										continue;
										end_IL_029d:
										break;
									}
									break;
								case 0:
									num10 = double.Parse(eval_c3[eval_o.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num10 - cj * num10) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex8)
							{
								System.Windows.MessageBox.Show("LoadShop[UPSHOP_MASK] :" + ex8.Message);
								goto end_IL_0029;
							}
							eval_o.a++;
							num = 24;
							num2 = num;
							continue;
						case 58:
							num = 57;
							num2 = num;
							continue;
						case 57:
							if (ShopControll.OpenBSETS)
							{
								num = 7;
								num2 = num;
								continue;
							}
							goto case 30;
						case 47:
							num = 60;
							num2 = num;
							continue;
						case 60:
							if (ShopControll.OpenBMedic)
							{
								num = 18;
								num2 = num;
								continue;
							}
							goto case 1;
						case 3:
						case 9:
							num = 46;
							num2 = num;
							continue;
						case 46:
							if (eval_q.a < eval_c5.Count)
							{
								num = 8;
								num2 = num;
							}
							else
							{
								num = 12;
								num2 = num;
							}
							continue;
						case 42:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_m.eval_b.a = eval_c1[eval_m.a].Price + " rub.";
											eval_m.eval_b.eval_b = Math.Truncate(num4 - cj * num4) + " rub.";
											num = 2;
											num2 = num;
											continue;
										case 3:
											eval_m.eval_b.a = eval_c1[eval_m.a].Price + " pуб.";
											eval_m.eval_b.eval_b = Math.Truncate(num4 - cj * num4) + " pуб.";
											num = 1;
											num2 = num;
											continue;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_m.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_062d;
										}
										goto case 0;
										continue;
										end_IL_062d:
										break;
									}
									break;
								case 0:
									num4 = double.Parse(eval_c1[eval_m.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num4 - cj * num4) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex2)
							{
								System.Windows.MessageBox.Show("LoadShop[UPSHOP_CAR] :" + ex2.Message);
								goto end_IL_0029;
							}
							eval_m.a++;
							num = 16;
							num2 = num;
							continue;
						case 64:
							eval_j = new eval_j();
							eval_j.eval_b = eval_i;
							eval_j.a = 0;
							num = 51;
							num2 = num;
							continue;
						case 7:
							eval_l = new eval_l();
							eval_l.eval_b = eval_i;
							eval_l.a = 0;
							num = 49;
							num2 = num;
							continue;
						case 18:
							eval_q = new eval_q();
							eval_q.eval_b = eval_i;
							eval_q.a = 0;
							num = 3;
							num2 = num;
							continue;
						case 27:
							eval_m = new eval_m();
							eval_m.eval_b = eval_i;
							eval_m.a = 0;
							num = 17;
							num2 = num;
							continue;
						case 48:
							num = 63;
							num2 = num;
							continue;
						case 63:
							if (ShopControll.OpenBMask)
							{
								num = 33;
								num2 = num;
								continue;
							}
							goto case 13;
						case 21:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_p.eval_b.a = eval_c4[eval_p.a].Price + " rub.";
											eval_p.eval_b.eval_b = Math.Truncate(num9 - cj * num9) + " rub.";
											num = 2;
											num2 = num;
											continue;
										case 3:
											eval_p.eval_b.a = eval_c4[eval_p.a].Price + " pуб.";
											eval_p.eval_b.eval_b = Math.Truncate(num9 - cj * num9) + " pуб.";
											num = 1;
											num2 = num;
											continue;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_p.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_0a1d;
										}
										goto case 0;
										continue;
										end_IL_0a1d:
										break;
									}
									break;
								case 0:
									num9 = double.Parse(eval_c4[eval_p.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num9 - cj * num9) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex7)
							{
								System.Windows.MessageBox.Show("LoadShop[UPSHOP_BASE] :" + ex7.Message);
								goto end_IL_0029;
							}
							eval_p.a++;
							num = 23;
							num2 = num;
							continue;
						case 34:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_l.eval_b.a = eval_c0[eval_l.a].Price + " rub.";
											eval_l.eval_b.eval_b = Math.Truncate(num8 - cj * num8) + " rub.";
											num = 2;
											num2 = num;
											continue;
										case 3:
											eval_l.eval_b.a = eval_c0[eval_l.a].Price + " pуб.";
											eval_l.eval_b.eval_b = Math.Truncate(num8 - cj * num8) + " pуб.";
											num = 1;
											num2 = num;
											continue;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_l.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_0c61;
										}
										goto case 0;
										continue;
										end_IL_0c61:
										break;
									}
									break;
								case 0:
									num8 = double.Parse(eval_c0[eval_l.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num8 - cj * num8) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex6)
							{
								System.Windows.MessageBox.Show("LoadShop[UPSHOP_SET] :" + ex6.Message);
								goto end_IL_0029;
							}
							eval_l.a++;
							num = 26;
							num2 = num;
							continue;
						case 4:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_j.eval_b.a = eval_cy[eval_j.a].Price + " rub.";
											eval_j.eval_b.eval_b = Math.Truncate(num7 - cj * num7) + " rub.";
											num = 1;
											num2 = num;
											continue;
										case 3:
											eval_j.eval_b.a = eval_cy[eval_j.a].Price + " pуб.";
											eval_j.eval_b.eval_b = Math.Truncate(num7 - cj * num7) + " pуб.";
											num = 2;
											num2 = num;
											continue;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_j.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_0ea9;
										}
										goto case 0;
										continue;
										end_IL_0ea9:
										break;
									}
									break;
								case 0:
									num7 = double.Parse(eval_cy[eval_j.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num7 - cj * num7) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex5)
							{
								System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
								goto end_IL_0029;
							}
							eval_j.a++;
							num = 2;
							num2 = num;
							continue;
						case 6:
							num = 15;
							num2 = num;
							continue;
						case 15:
							if (ShopControll.OpenBInvent)
							{
								num = 36;
								num2 = num;
								continue;
							}
							goto case 48;
						case 30:
							num = 29;
							num2 = num;
							continue;
						case 29:
							if (ShopControll.OpenBCARS)
							{
								num = 27;
								num2 = num;
								continue;
							}
							goto case 6;
						case 13:
							num = 31;
							num2 = num;
							continue;
						case 31:
							if (ShopControll.OpenBBase)
							{
								num = 19;
								num2 = num;
								continue;
							}
							goto case 47;
						case 37:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								if (ij.Visibility == Visibility.Visible)
								{
									short num19 = -14049;
									short num20 = num19;
									num19 = -14049;
									switch (num20 == num19)
									{
									default:
										num19 = 0;
										_ = num19;
										goto case true;
									case true:
									{
										num19 = 1;
										if (num19 != 0)
										{
										}
										num19 = 0;
										if (num19 != 0)
										{
										}
										eval_is.Baseline.Visibility = Visibility.Visible;
										DoubleAnimation animation3 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Baseline.BeginAnimation(UIElement.OpacityProperty, animation3);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Baseline.Visibility = Visibility.Visible;
								DoubleAnimation animation4 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Baseline.BeginAnimation(UIElement.OpacityProperty, animation4);
							});
							num = 47;
							num2 = num;
							continue;
						case 11:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								if (ij.Visibility == Visibility.Visible)
								{
									short num21 = 15742;
									short num22 = num21;
									num21 = 15742;
									switch (num22 == num21)
									{
									default:
										num21 = 0;
										_ = num21;
										goto case true;
									case true:
									{
										num21 = 1;
										if (num21 != 0)
										{
										}
										num21 = 0;
										if (num21 != 0)
										{
										}
										eval_is.Lootline.Visibility = Visibility.Visible;
										DoubleAnimation animation5 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Lootline.BeginAnimation(UIElement.OpacityProperty, animation5);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Lootline.Visibility = Visibility.Visible;
								DoubleAnimation animation6 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Lootline.BeginAnimation(UIElement.OpacityProperty, animation6);
							});
							num = 25;
							num2 = num;
							continue;
						case 26:
						case 49:
							num = 56;
							num2 = num;
							continue;
						case 56:
							if (eval_l.a < eval_c0.Count)
							{
								num = 34;
								num2 = num;
							}
							else
							{
								num = 32;
								num2 = num;
							}
							continue;
						case 55:
							eval_k = new eval_k();
							eval_k.eval_b = eval_i;
							eval_k.a = 0;
							num = 59;
							num2 = num;
							continue;
						case 19:
							eval_p = new eval_p();
							eval_p.eval_b = eval_i;
							eval_p.a = 0;
							num = 14;
							num2 = num;
							continue;
						case 39:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								if (ij.Visibility == Visibility.Visible)
								{
									short num23 = -4539;
									short num24 = num23;
									num23 = -4539;
									switch (num24 == num23)
									{
									default:
										num23 = 0;
										_ = num23;
										goto case true;
									case true:
									{
										num23 = 1;
										if (num23 != 0)
										{
										}
										num23 = 0;
										if (num23 != 0)
										{
										}
										eval_is.Weaponline.Visibility = Visibility.Visible;
										DoubleAnimation animation7 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Weaponline.BeginAnimation(UIElement.OpacityProperty, animation7);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Weaponline.Visibility = Visibility.Visible;
								DoubleAnimation animation8 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Weaponline.BeginAnimation(UIElement.OpacityProperty, animation8);
							});
							num = 58;
							num2 = num;
							continue;
						case 14:
						case 23:
							num = 53;
							num2 = num;
							continue;
						case 53:
							if (eval_p.a < eval_c4.Count)
							{
								num = 21;
								num2 = num;
							}
							else
							{
								num = 37;
								num2 = num;
							}
							continue;
						case 45:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								if (ij.Visibility == Visibility.Visible)
								{
									short num25 = 12728;
									short num26 = num25;
									num25 = 12728;
									switch (num26 == num25)
									{
									default:
										num25 = 0;
										_ = num25;
										goto case true;
									case true:
									{
										num25 = 1;
										if (num25 != 0)
										{
										}
										num25 = 0;
										if (num25 != 0)
										{
										}
										eval_is.Maskline.Visibility = Visibility.Visible;
										DoubleAnimation animation9 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Maskline.BeginAnimation(UIElement.OpacityProperty, animation9);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Maskline.Visibility = Visibility.Visible;
								DoubleAnimation animation10 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Maskline.BeginAnimation(UIElement.OpacityProperty, animation10);
							});
							num = 13;
							num2 = num;
							continue;
						case 8:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_q.eval_b.a = eval_c5[eval_q.a].Price + " rub.";
											eval_q.eval_b.eval_b = Math.Truncate(num6 - cj * num6) + " rub.";
											num = 1;
											num2 = num;
											continue;
										case 3:
											eval_q.eval_b.a = eval_c5[eval_q.a].Price + " pуб.";
											eval_q.eval_b.eval_b = Math.Truncate(num6 - cj * num6) + " pуб.";
											num = 2;
											num2 = num;
											continue;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_q.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_140d;
										}
										goto case 0;
										continue;
										end_IL_140d:
										break;
									}
									break;
								case 0:
									num6 = double.Parse(eval_c5[eval_q.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num6 - cj * num6) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex4)
							{
								System.Windows.MessageBox.Show("LoadShop[UPSHOP_BASE] :" + ex4.Message);
								goto end_IL_0029;
							}
							eval_q.a++;
							num = 9;
							num2 = num;
							continue;
						case 10:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_k.eval_b.a = eval_cz[eval_k.a].Price + " rub.";
											eval_k.eval_b.eval_b = Math.Truncate(num5 - cj * num5) + " rub.";
											num = 2;
											num2 = num;
											continue;
										case 3:
											eval_k.eval_b.a = eval_cz[eval_k.a].Price + " pуб.";
											eval_k.eval_b.eval_b = Math.Truncate(num5 - cj * num5) + " pуб.";
											num = 1;
											num2 = num;
											continue;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_k.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_1663;
										}
										goto case 0;
										continue;
										end_IL_1663:
										break;
									}
									break;
								case 0:
									num5 = double.Parse(eval_cz[eval_k.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num5 - cj * num5) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex3)
							{
								System.Windows.MessageBox.Show("LoadShop[OpenBWEAPON] :" + ex3.Message);
								goto end_IL_0029;
							}
							eval_k.a++;
							num = 0;
							num2 = num;
							continue;
						case 50:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								if (ij.Visibility == Visibility.Visible)
								{
									short num27 = 1;
									if (num27 != 0)
									{
									}
									num27 = 0;
									_ = num27;
									num27 = 25704;
									short num28 = num27;
									num27 = 25704;
									switch (num28 == num27)
									{
									default:
									{
										num27 = 0;
										if (num27 != 0)
										{
										}
										eval_is.Heliline.Visibility = Visibility.Visible;
										DoubleAnimation animation11 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Heliline.BeginAnimation(UIElement.OpacityProperty, animation11);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Heliline.Visibility = Visibility.Visible;
								DoubleAnimation animation12 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Heliline.BeginAnimation(UIElement.OpacityProperty, animation12);
							});
							num = 48;
							num2 = num;
							continue;
						case 5:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								if (ij.Visibility == Visibility.Visible)
								{
									short num29 = 18764;
									short num30 = num29;
									num29 = 18764;
									switch (num30 == num29)
									{
									default:
										num29 = 0;
										_ = num29;
										goto case true;
									case true:
									{
										num29 = 1;
										if (num29 != 0)
										{
										}
										num29 = 0;
										if (num29 != 0)
										{
										}
										eval_is.Carsline.Visibility = Visibility.Visible;
										DoubleAnimation animation13 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Carsline.BeginAnimation(UIElement.OpacityProperty, animation13);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Carsline.Visibility = Visibility.Visible;
								DoubleAnimation animation14 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Carsline.BeginAnimation(UIElement.OpacityProperty, animation14);
							});
							num = 6;
							num2 = num;
							continue;
						case 22:
						case 38:
							num = 43;
							num2 = num;
							continue;
						case 43:
							if (eval_n.a < eval_c2.Count)
							{
								num = 62;
								num2 = num;
							}
							else
							{
								num = 50;
								num2 = num;
							}
							continue;
						case 2:
						case 51:
							num = 44;
							num2 = num;
							continue;
						case 44:
							if (eval_j.a < eval_cy.Count)
							{
								num = 4;
								num2 = num;
							}
							else
							{
								num = 11;
								num2 = num;
							}
							continue;
						case 24:
						case 52:
							num = 20;
							num2 = num;
							continue;
						case 20:
							if (eval_o.a < eval_c3.Count)
							{
								num = 28;
								num2 = num;
							}
							else
							{
								num = 45;
								num2 = num;
							}
							continue;
						case 33:
							eval_o = new eval_o();
							eval_o.eval_b = eval_i;
							eval_o.a = 0;
							num = 52;
							num2 = num;
							continue;
						case 36:
							eval_n = new eval_n();
							eval_n.eval_b = eval_i;
							eval_n.a = 0;
							num = 22;
							num2 = num;
							continue;
						case 16:
						case 17:
							num = 61;
							num2 = num;
							continue;
						case 61:
							if (eval_m.a < eval_c1.Count)
							{
								num = 42;
								num2 = num;
							}
							else
							{
								num = 5;
								num2 = num;
							}
							continue;
						case 62:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 3;
												num2 = num;
												continue;
											}
											eval_n.eval_b.a = eval_c2[eval_n.a].Price + " rub.";
											eval_n.eval_b.eval_b = Math.Truncate(num3 - cj * num3) + " rub.";
											num = 2;
											num2 = num;
											continue;
										case 3:
											eval_n.eval_b.a = eval_c2[eval_n.a].Price + " pуб.";
											eval_n.eval_b.eval_b = Math.Truncate(num3 - cj * num3) + " pуб.";
											num = 1;
											num2 = num;
											continue;
										case 1:
										case 2:
											eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_n.eval_a));
											num = 0;
											num2 = num;
											continue;
										case 0:
											goto end_IL_1aa3;
										}
										goto case 0;
										continue;
										end_IL_1aa3:
										break;
									}
									break;
								case 0:
									num3 = double.Parse(eval_c2[eval_n.a].Price.Replace(" ", string.Empty));
									TxtDiscount = cj * 100.0 + "% / " + Math.Truncate(num3 - cj * num3) + " pуб.";
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex)
							{
								System.Windows.MessageBox.Show("LoadShop[UPSHOP_inventory] :" + ex.Message);
								goto end_IL_0029;
							}
							eval_n.a++;
							num = 38;
							num2 = num;
							continue;
						case 12:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num31 = 1;
								if (num31 != 0)
								{
								}
								if (ij.Visibility == Visibility.Visible)
								{
									num31 = 0;
									_ = num31;
									num31 = -11860;
									short num32 = num31;
									num31 = -11860;
									switch (num32 == num31)
									{
									default:
									{
										num31 = 0;
										if (num31 != 0)
										{
										}
										eval_is.Medicline.Visibility = Visibility.Visible;
										DoubleAnimation animation15 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Medicline.BeginAnimation(UIElement.OpacityProperty, animation15);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Medicline.Visibility = Visibility.Visible;
								DoubleAnimation animation16 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Medicline.BeginAnimation(UIElement.OpacityProperty, animation16);
							});
							num = 1;
							num2 = num;
							continue;
						case 32:
							ij.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								if (ij.Visibility == Visibility.Visible)
								{
									short num33 = 663;
									short num34 = num33;
									num33 = 663;
									switch (num34 == num33)
									{
									default:
										num33 = 0;
										_ = num33;
										goto case true;
									case true:
									{
										num33 = 0;
										if (num33 != 0)
										{
										}
										num33 = 1;
										if (num33 != 0)
										{
										}
										eval_is.Setsline.Visibility = Visibility.Visible;
										DoubleAnimation animation17 = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.2)),
											AutoReverse = false
										};
										eval_is.Setsline.BeginAnimation(UIElement.OpacityProperty, animation17);
										return;
									}
									case false:
									case true:
										break;
									}
								}
								eval_ga.Setsline.Visibility = Visibility.Visible;
								DoubleAnimation animation18 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.2)),
									AutoReverse = false
								};
								eval_ga.Setsline.BeginAnimation(UIElement.OpacityProperty, animation18);
							});
							num = 30;
							num2 = num;
							continue;
						case 1:
							eval_ga.BoxShop.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num16 = 8;
								int num17 = num16;
								while (true)
								{
									switch (num17)
									{
									case 8:
										switch (0)
										{
										default:
											goto end_IL_0020;
										case 0:
											break;
										}
										goto default;
									default:
										if (ij.Visibility == Visibility.Visible)
										{
											num16 = 0;
											num17 = num16;
										}
										else
										{
											eval_ga.BoxShop.Visibility = Visibility.Visible;
											DoubleAnimation animation2 = new DoubleAnimation
											{
												From = 0.0,
												To = 1.0,
												Duration = new Duration(TimeSpan.FromSeconds(0.5)),
												AutoReverse = false
											};
											eval_ga.BoxShop.BeginAnimation(UIElement.OpacityProperty, animation2);
											num16 = 2;
											num17 = num16;
										}
										break;
									case 10:
										eval_ga.BoxShop.ScrollIntoView(eval_ga.BoxShop.Items[0]);
										num16 = 13;
										num17 = num16;
										break;
									case 13:
										num16 = 12;
										num17 = num16;
										break;
									case 12:
										if (eval_is.BoxShop.Items.Count <= 0)
										{
											return;
										}
										num16 = 1;
										num17 = num16;
										break;
									case 0:
									{
										eval_is.BoxShop.Visibility = Visibility.Visible;
										DoubleAnimation animation = new DoubleAnimation
										{
											From = 0.0,
											To = 1.0,
											Duration = new Duration(TimeSpan.FromSeconds(0.5)),
											AutoReverse = false
										};
										eval_is.BoxShop.BeginAnimation(UIElement.OpacityProperty, animation);
										num16 = 4;
										num17 = num16;
										break;
									}
									case 11:
									{
										num16 = 0;
										_ = num16;
										num16 = 27649;
										short num18 = num16;
										num16 = 27649;
										switch (num18 == num16)
										{
										default:
											num16 = 0;
											if (num16 != 0)
											{
											}
											num16 = 3;
											num17 = num16;
											goto end_IL_0020;
										case false:
										case true:
											break;
										}
										goto IL_05f5;
									}
									case 3:
										if (eval_ga.BoxShop.Items.Count > 0)
										{
											num16 = 10;
											num17 = num16;
											break;
										}
										goto case 13;
									case 1:
										eval_is.BoxShop.ScrollIntoView(eval_is.BoxShop.Items[0]);
										num16 = 7;
										num17 = num16;
										break;
									case 7:
										return;
									case 6:
										eval_ga.TextW.Text = "Спавн техники : возле Вас не должно быть никаких построек и ровная площадка!";
										eval_ga.TextSet.Text = "Спавн сетов : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
										eval_ga.TextLoot.Text = "Спавн лута : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
										eval_ga.TextBase.Text = "Спавн наборов для строительства : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
										eval_is.TextW.Text = "Спавн техники : возле Вас не должно быть никаких построек и ровная площадка!";
										eval_is.TextSet.Text = "Спавн сетов : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
										eval_is.TextLoot.Text = "Спавн лута : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
										eval_is.TextBase.Text = "Спавн наборов для строительства : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
										num16 = 9;
										num17 = num16;
										break;
									case 9:
										num16 = 1;
										if (num16 == 0)
										{
										}
										goto case 11;
									case 2:
									case 4:
										eval_ga.BLOOT.IsEnabled = true;
										eval_ga.BSETS.IsEnabled = true;
										eval_ga.BCARS.IsEnabled = true;
										eval_ga.BWEAPON.IsEnabled = true;
										eval_ga.BHeli.IsEnabled = true;
										eval_ga.BMask.IsEnabled = true;
										eval_ga.BBase.IsEnabled = true;
										eval_ga.BMedic.IsEnabled = true;
										eval_is.BLOOT.IsEnabled = true;
										eval_is.BSETS.IsEnabled = true;
										eval_is.BCARS.IsEnabled = true;
										eval_is.BWEAPON.IsEnabled = true;
										eval_is.BHeli.IsEnabled = true;
										eval_is.BMask.IsEnabled = true;
										eval_is.BBase.IsEnabled = true;
										eval_is.BMedic.IsEnabled = true;
										goto IL_05f5;
									case 5:
										{
											if (!(Langve == "RU"))
											{
												eval_ga.TextBase.Text = "Spawn Build Kits: If you run out of space, loot will drop when spawning on the ground / floor!";
												eval_ga.TextLoot.Text = "Spawn Loot: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
												eval_ga.TextSet.Text = "Spawn Sets: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
												eval_ga.TextW.Text = "Spawn equipment: there should be no buildings near you and a flat area!";
												eval_is.TextBase.Text = "Spawn Build Kits: If you run out of space, loot will drop when spawning on the ground / floor!";
												eval_is.TextLoot.Text = "Spawn Loot: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
												eval_is.TextSet.Text = "Spawn Sets: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
												eval_is.TextW.Text = "Spawn equipment: there should be no buildings near you and a flat area!";
												num16 = 11;
												num17 = num16;
											}
											else
											{
												num16 = 6;
												num17 = num16;
											}
											break;
										}
										IL_05f5:
										num16 = 5;
										num17 = num16;
										break;
										end_IL_0020:
										break;
									}
								}
							});
							num = 40;
							num2 = num;
							continue;
						case 40:
							goto end_IL_0029;
						}
						goto case 0;
						continue;
						end_IL_0029:
						break;
					}
					break;
				}
				case 0:
					eval_i = new eval_i();
					eval_i.eval_c = this;
					eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
					{
						short num14 = -30653;
						short num15 = num14;
						num14 = -30653;
						switch (num15 == num14)
						{
						default:
							num14 = 0;
							_ = num14;
							num14 = 1;
							if (num14 != 0)
							{
							}
							num14 = 0;
							if (num14 != 0)
							{
							}
							eval_is.BoxShop.Items.Clear();
							break;
						}
					});
					eval_ga.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
					{
						short num12 = 2157;
						short num13 = num12;
						num12 = 2157;
						switch (num13 == num12)
						{
						default:
							num12 = 0;
							_ = num12;
							num12 = 0;
							if (num12 != 0)
							{
							}
							num12 = 1;
							if (num12 != 0)
							{
							}
							eval_ga.BoxShop.Items.Clear();
							break;
						}
					});
					eval_i.a = string.Empty;
					eval_i.eval_b = string.Empty;
					num = 54;
					num2 = num;
					goto default;
				}
				break;
			}
			}
		}
		catch (Exception ex9)
		{
			System.Windows.MessageBox.Show("[LoadShopALL] :" + ex9.Message);
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	private void eval_c(object A_0, SelectionChangedEventArgs A_1)
	{
		short num = -11059;
		short num2 = num;
		num = -11059;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num == 0)
		{
		}
	}

	[AsyncStateMachine(typeof(eval_az))]
	private void eval_m(object A_0, RoutedEventArgs A_1)
	{
		short num = 10029;
		short num2 = num;
		num = 10029;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_az stateMachine = default(eval_az);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_ak))]
	private Task bz()
	{
		short num = -24358;
		short num2 = num;
		num = -24358;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_ak stateMachine = default(eval_ak);
		stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
		return stateMachine.eval_b.Task;
	}

	public void GOBUY()
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			bool flag = default(bool);
			switch (0)
			{
			default:
			{
				Process[] processesByName = default(Process[]);
				eval_r eval_r = default(eval_r);
				string text = default(string);
				byte[] array = default(byte[]);
				while (true)
				{
					switch (num2)
					{
					case 0:
					{
						Process[] processesByName2 = Process.GetProcessesByName(this.m_eval_x);
						processesByName = Process.GetProcessesByName(this.m_eval_y);
						if (processesByName2.Length == 0)
						{
							num = 7;
							num2 = num;
							continue;
						}
						goto IL_0ce1;
					}
					case 4:
						if (Langve == "RU")
						{
							num = 1;
							num2 = num;
						}
						else
						{
							MessageBoxWindow.Show(this, "The game is not running and you must be on the server!", name_messege, MessageBoxButton.OK);
							num = 9;
							num2 = num;
						}
						continue;
					case 10:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 27:
										if (CMDItem == "-add_loot")
										{
											num = 10;
											num2 = num;
											continue;
										}
										goto case 41;
									case 3:
										eval_cx.Close();
										eval_cw.Close();
										num = 34;
										num2 = num;
										continue;
									case 34:
										if (Langve == "RU")
										{
											num = 31;
											num2 = num;
										}
										else
										{
											fa.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_r.eval_a));
											num = 22;
											num2 = num;
										}
										continue;
									case 22:
									case 42:
										eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num12 = 25818;
											short num13 = num12;
											num12 = 25818;
											switch (num13 == num12)
											{
											default:
												num12 = 0;
												if (num12 != 0)
												{
												}
												num12 = 1;
												if (num12 != 0)
												{
												}
												num12 = 0;
												_ = num12;
												eval_is.IsEnabled = true;
												break;
											}
										});
										num = 14;
										num2 = num;
										continue;
									case 5:
										fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num14 = 6027;
											short num15 = num14;
											num14 = 6027;
											switch (num15 == num14)
											{
											default:
												num14 = 0;
												if (num14 != 0)
												{
												}
												num14 = 1;
												if (num14 != 0)
												{
												}
												num14 = 0;
												_ = num14;
												MessageBoxWindow.Show(this, "У Вас недостаточно средств для покупки.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												break;
											}
										});
										num = 9;
										num2 = num;
										continue;
									case 10:
										text = Items.Replace(",", "|");
										num = 41;
										num2 = num;
										continue;
									case 20:
										eval_cx.Close();
										eval_cw.Close();
										num = 21;
										num2 = num;
										continue;
									case 21:
										if (Langve == "RU")
										{
											num = 8;
											num2 = num;
											continue;
										}
										fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num30 = 5203;
											short num31 = num30;
											num30 = 5203;
											switch (num31 == num30)
											{
											default:
												num30 = 0;
												if (num30 != 0)
												{
												}
												num30 = 1;
												if (num30 != 0)
												{
												}
												num30 = 0;
												_ = num30;
												MessageBoxWindow.Show(this, "You are not in the game (on the server), please go to the server itself and try again.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												break;
											}
										});
										num = 17;
										num2 = num;
										continue;
									case 24:
									{
										array = new byte[256000];
										int count = eval_cx.Read(array, 0, array.Length);
										string @string = Encoding.UTF8.GetString(array, 0, count);
										eval_r.a = @string.ToString().Split(',');
										num = 13;
										num2 = num;
										continue;
									}
									case 13:
										if (eval_r.a[0] == "FOUNDNO")
										{
											num = 20;
											num2 = num;
											continue;
										}
										goto case 28;
									case 30:
										num = 6;
										num2 = num;
										continue;
									case 6:
										if (eval_r.a[0] == "BUYCINOUT")
										{
											num = 3;
											num2 = num;
											continue;
										}
										goto case 14;
									case 26:
										fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num10 = 15060;
											short num11 = num10;
											num10 = 15060;
											switch (num11 == num10)
											{
											default:
												num10 = 1;
												if (num10 != 0)
												{
												}
												num10 = 0;
												if (num10 != 0)
												{
												}
												num10 = 0;
												_ = num10;
												MessageBoxWindow.Show(this, "Ошибка.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												break;
											}
										});
										num = 19;
										num2 = num;
										continue;
									case 35:
										eval_cx.Close();
										eval_cw.Close();
										num = 38;
										num2 = num;
										continue;
									case 38:
										if (!(Langve == "RU"))
										{
											fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
											{
												short num16 = -13745;
												short num17 = num16;
												num16 = -13745;
												switch (num17 == num16)
												{
												default:
													num16 = 1;
													if (num16 != 0)
													{
													}
													num16 = 0;
													if (num16 != 0)
													{
													}
													num16 = 0;
													_ = num16;
													MessageBoxWindow.Show(this, "You don't have enough funds to buy.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													break;
												}
											});
											num = 12;
											num2 = num;
										}
										else
										{
											num = 5;
											num2 = num;
										}
										continue;
									case 11:
									case 37:
										eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num18 = -6970;
											short num19 = num18;
											num18 = -6970;
											switch (num19 == num18)
											{
											default:
												num18 = 0;
												if (num18 != 0)
												{
												}
												num18 = 1;
												if (num18 != 0)
												{
												}
												num18 = 0;
												_ = num18;
												eval_is.IsEnabled = true;
												break;
											}
										});
										num = 36;
										num2 = num;
										continue;
									case 2:
									case 17:
										eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num20 = 21555;
											short num21 = num20;
											num20 = 21555;
											switch (num21 == num20)
											{
											default:
												num20 = 1;
												if (num20 != 0)
												{
												}
												num20 = 0;
												if (num20 != 0)
												{
												}
												num20 = 0;
												_ = num20;
												eval_is.IsEnabled = true;
												break;
											}
										});
										num = 28;
										num2 = num;
										continue;
									case 44:
										eval_cx.Write(array, 0, array.Length);
										num = 24;
										num2 = num;
										continue;
									case 19:
									case 25:
										eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num22 = 24886;
											short num23 = num22;
											num22 = 24886;
											switch (num23 == num22)
											{
											default:
												num22 = 1;
												if (num22 != 0)
												{
												}
												num22 = 0;
												if (num22 != 0)
												{
												}
												num22 = 0;
												_ = num22;
												eval_is.IsEnabled = true;
												break;
											}
										});
										num = 30;
										num2 = num;
										continue;
									case 28:
										num = 0;
										num2 = num;
										continue;
									case 0:
										if (eval_r.a[0] == "UPCNNOCOIN")
										{
											num = 35;
											num2 = num;
											continue;
										}
										goto case 16;
									case 8:
										fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num24 = -16351;
											short num25 = num24;
											num24 = -16351;
											switch (num25 == num24)
											{
											default:
												num24 = 1;
												if (num24 != 0)
												{
												}
												num24 = 0;
												if (num24 != 0)
												{
												}
												num24 = 0;
												_ = num24;
												MessageBoxWindow.Show(this, "Вы не находитесь в игре (на сервере), пожалуйста зайдите на сам сервер и повторите попытку.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												break;
											}
										});
										num = 2;
										num2 = num;
										continue;
									case 9:
									case 12:
										eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num26 = 13249;
											short num27 = num26;
											num26 = 13249;
											switch (num27 == num26)
											{
											default:
												num26 = 1;
												if (num26 != 0)
												{
												}
												num26 = 0;
												if (num26 != 0)
												{
												}
												num26 = 0;
												_ = num26;
												eval_is.IsEnabled = true;
												break;
											}
										});
										num = 16;
										num2 = num;
										continue;
									case 41:
										num = 23;
										num2 = num;
										continue;
									case 23:
										if (CMDItem == "-spawn_car")
										{
											num = 7;
											num2 = num;
											continue;
										}
										goto case 33;
									case 18:
										fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num28 = -31796;
											short num29 = num28;
											num28 = -31796;
											switch (num29 == num28)
											{
											default:
												num28 = 1;
												if (num28 != 0)
												{
												}
												num28 = 0;
												if (num28 != 0)
												{
												}
												num28 = 0;
												_ = num28;
												MessageBoxWindow.Show(this, "У Вас на счету нет средств.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
												break;
											}
										});
										num = 11;
										num2 = num;
										continue;
									case 16:
										num = 39;
										num2 = num;
										continue;
									case 39:
										if (eval_r.a[0] == "UPCNNOFILE")
										{
											num = 15;
											num2 = num;
											continue;
										}
										goto case 36;
									case 15:
										eval_cx.Close();
										eval_cw.Close();
										num = 43;
										num2 = num;
										continue;
									case 43:
										if (!(Langve == "RU"))
										{
											fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
											{
												short num32 = 14230;
												short num33 = num32;
												num32 = 14230;
												switch (num33 == num32)
												{
												default:
													num32 = 1;
													if (num32 != 0)
													{
													}
													num32 = 0;
													if (num32 != 0)
													{
													}
													num32 = 0;
													_ = num32;
													MessageBoxWindow.Show(this, "You have no funds in your account.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													break;
												}
											});
											num = 37;
											num2 = num;
										}
										else
										{
											num = 18;
											num2 = num;
										}
										continue;
									case 7:
										text = Items.Replace("|", "&").Replace(",", "|");
										num = 33;
										num2 = num;
										continue;
									case 33:
										array = Encoding.UTF8.GetBytes("BUYCIN," + UID_SC + "," + PriceItem + "," + GUID_SC + "," + UID_SC + "," + text + "," + CMDItem);
										eval_cx = eval_cw.GetStream();
										num = 1;
										num2 = num;
										continue;
									case 1:
										if (eval_cw.Connected)
										{
											num = 44;
											num2 = num;
											continue;
										}
										goto case 24;
									case 31:
										fa.Dispatcher.Invoke(DispatcherPriority.Background, new Action(eval_r.eval_c));
										num = 42;
										num2 = num;
										continue;
									case 36:
										num = 29;
										num2 = num;
										continue;
									case 29:
										if (eval_r.a[0] == "UPCNERROR")
										{
											num = 4;
											num2 = num;
											continue;
										}
										goto case 30;
									case 4:
										eval_cx.Close();
										eval_cw.Close();
										num = 40;
										num2 = num;
										continue;
									case 40:
										if (!(Langve == "RU"))
										{
											fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
											{
												short num34 = 10453;
												short num35 = num34;
												num34 = 10453;
												switch (num35 == num34)
												{
												default:
													num34 = 1;
													if (num34 != 0)
													{
													}
													num34 = 0;
													if (num34 != 0)
													{
													}
													num34 = 0;
													_ = num34;
													MessageBoxWindow.Show(this, "Error.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													break;
												}
											});
											num = 25;
											num2 = num;
										}
										else
										{
											num = 26;
											num2 = num;
										}
										continue;
									case 14:
										num = 32;
										num2 = num;
										continue;
									case 32:
										return;
									}
									break;
								}
								goto case 0;
							case 0:
							{
								eval_r = new eval_r();
								eval_r.eval_b = this;
								eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									short num8 = 11051;
									short num9 = num8;
									num8 = 11051;
									switch (num9 == num8)
									{
									default:
										num8 = 0;
										_ = num8;
										num8 = 1;
										if (num8 != 0)
										{
										}
										num8 = 0;
										if (num8 != 0)
										{
										}
										eval_is.IsEnabled = false;
										break;
									}
								});
								gj.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									short num6 = 30059;
									short num7 = num6;
									num6 = 30059;
									switch (num7 == num6)
									{
									default:
										num6 = 0;
										if (num6 != 0)
										{
										}
										num6 = 1;
										if (num6 != 0)
										{
										}
										num6 = 0;
										_ = num6;
										gj.Content = UID_SC;
										eval_ip.Content = UID_SC;
										break;
									}
								});
								string @string = string.Empty;
								eval_cw = new TcpClient(Connectip, connectudp);
								text = string.Empty;
								num = 27;
								num2 = num;
								goto default;
							}
							}
						}
						catch
						{
							eval_is.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num4 = 20147;
								short num5 = num4;
								num4 = 20147;
								switch (num5 == num4)
								{
								default:
									num4 = 1;
									if (num4 != 0)
									{
									}
									num4 = 0;
									if (num4 != 0)
									{
									}
									num4 = 0;
									_ = num4;
									eval_is.IsEnabled = true;
									break;
								}
							});
							try
							{
								eval_cx.Close();
							}
							catch
							{
							}
							try
							{
								eval_cw.Close();
								return;
							}
							catch
							{
								return;
							}
						}
					case 6:
						flag = false;
						num = 5;
						num2 = num;
						continue;
					case 1:
						MessageBoxWindow.Show(this, "Игра не запущена и Вы должны быть на сервере!", name_messege, MessageBoxButton.OK);
						return;
					case 7:
						num = 3;
						num2 = num;
						continue;
					case 3:
					{
						num = 25727;
						short num3 = num;
						num = 25727;
						switch (num3 == num)
						{
						case false:
						case true:
							break;
						default:
							goto IL_0c3a;
						}
						goto case 0;
					}
					case 9:
						return;
					case 5:
						num = 8;
						num2 = num;
						continue;
					case 8:
						if (!flag)
						{
							num = 4;
							num2 = num;
						}
						else
						{
							num = 10;
							num2 = num;
						}
						continue;
					case 2:
						{
							num = 1;
							if (num != 0)
							{
							}
							num = 0;
							_ = num;
							goto case 5;
						}
						IL_0c3a:
						num = 0;
						if (num != 0)
						{
						}
						if (processesByName.Length == 0)
						{
							num = 6;
							num2 = num;
							continue;
						}
						goto IL_0ce1;
						IL_0ce1:
						flag = true;
						num = 2;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				flag = false;
				num = 0;
				num2 = num;
				goto default;
			}
		}
		}
	}

	private void eval_l(object A_0, RoutedEventArgs A_1)
	{
		short num = -23131;
		short num2 = num;
		num = -23131;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			goto case true;
		case true:
			num = 0;
			if (num != 0)
			{
			}
			System.Windows.Forms.Clipboard.SetText(gj.Content.ToString());
			if (!(Langve == "RU"))
			{
				MessageBoxWindow.Show(this, "Copied to the clipboard,use Ctrl+V : " + gj.Content.ToString(), name_messege);
				break;
			}
			goto case false;
		case false:
		case true:
			num = 1;
			if (num != 0)
			{
			}
			MessageBoxWindow.Show(this, "Скопировано в буфер обмена,воспользуйтесь комбинацией клавиш Ctrl+V : " + gj.Content.ToString(), name_messege);
			break;
		}
	}

	private void eval_k(object A_0, RoutedEventArgs A_1)
	{
		short num = -26616;
		short num2 = num;
		num = -26616;
		int num3;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			num3 = num;
			goto IL_0091;
		case false:
		case true:
			{
				num = 1;
				num3 = num;
				goto IL_0091;
			}
			IL_0091:
			while (true)
			{
				num = 1;
				if (num != 0)
				{
				}
				switch (num3)
				{
				case 0:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					break;
				case 1:
				{
					DoubleAnimation doubleAnimation = new DoubleAnimation
					{
						From = 1.0,
						To = 0.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.2)),
						AutoReverse = false
					};
					doubleAnimation.Completed += delegate
					{
						short num4 = 25534;
						short num5 = num4;
						num4 = 25534;
						switch (num5 == num4)
						{
						default:
							num4 = 0;
							if (num4 != 0)
							{
							}
							num4 = 1;
							if (num4 != 0)
							{
							}
							num4 = 0;
							_ = num4;
							f8.Visibility = Visibility.Hidden;
							break;
						}
					};
					f8.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
					num = 2;
					num3 = num;
					continue;
				}
				case 2:
					return;
				}
				break;
			}
			if (f8.Visibility != 0)
			{
				break;
			}
			goto case false;
		}
	}

	private void eval_k(string A_0)
	{
		short num = -20268;
		short num2 = num;
		num = -20268;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			try
			{
				new Thread((ThreadStart)delegate
				{
					short num3 = 27987;
					short num4 = num3;
					num3 = 27987;
					switch (num4 == num3)
					{
					default:
						num3 = 0;
						_ = num3;
						break;
					case true:
						break;
					}
					num3 = 1;
					if (num3 != 0)
					{
					}
					num3 = 0;
					if (num3 != 0)
					{
					}
					eval_j(A_0);
				}).Start();
			}
			catch
			{
			}
			break;
		case false:
		case true:
			break;
		}
		num = 1;
		if (num == 0)
		{
		}
	}

	private void eval_j(string A_0)
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		TcpClient tcpClient = null;
		NetworkStream networkStream = null;
		string text = System.Windows.Winservr.System.In(Name_players_local + "," + MC + "," + A_0, "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345");
		try
		{
			byte[] array = default(byte[]);
			switch (0)
			{
			default:
			{
				int count = default(int);
				while (true)
				{
					switch (num2)
					{
					case 3:
						if (tcpClient.Connected)
						{
							num = 1;
							num2 = num;
							continue;
						}
						goto case 2;
					case 1:
						networkStream.Write(array, 0, array.Length);
						num = 2;
						num2 = num;
						continue;
					case 4:
						networkStream.Close();
						tcpClient.Close();
						num = 0;
						num2 = num;
						continue;
					case 2:
						array = new byte[256000];
						count = networkStream.Read(array, 0, array.Length);
						num = 5;
						num2 = num;
						continue;
					case 5:
						if (Encoding.UTF8.GetString(array, 0, count).ToString().Split(',')[0] == "SVE")
						{
							num = 4;
							num2 = num;
							continue;
						}
						goto case 0;
					case 0:
						num = 6;
						num2 = num;
						continue;
					case 6:
					{
						num = -464;
						short num3 = num;
						num = -464;
						switch (num3 == num)
						{
						case false:
						case true:
							break;
						default:
							num = 0;
							if (num == 0)
							{
							}
							return;
						}
						goto case 0;
					}
					}
					break;
				}
				goto case 0;
			}
			case 0:
				tcpClient = new TcpClient(this.m_eval_q, connectudp);
				array = Encoding.UTF8.GetBytes("LERROR," + text);
				networkStream = tcpClient.GetStream();
				num = 3;
				num2 = num;
				goto default;
			}
		}
		catch
		{
			try
			{
				networkStream.Close();
			}
			catch
			{
			}
			try
			{
				tcpClient.Close();
			}
			catch
			{
			}
		}
	}

	private void eval_by()
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			num = 1;
			if (num != 0)
			{
			}
			DoubleAnimation doubleAnimation3 = default(DoubleAnimation);
			switch (0)
			{
			default:
			{
				DoubleAnimation doubleAnimation = default(DoubleAnimation);
				while (true)
				{
					switch (num2)
					{
					case 2:
						if (OpenDownloader)
						{
							num = 4;
							num2 = num;
							continue;
						}
						goto case 3;
					case 4:
					{
						num = 0;
						_ = num;
						h6.IsEnabled = false;
						doubleAnimation3.From = 914.0;
						doubleAnimation3.To = 0.0;
						doubleAnimation3.Completed += delegate
						{
							short num6 = -7921;
							short num7 = num6;
							num6 = -7921;
							switch (num7 == num6)
							{
							default:
								num6 = 1;
								if (num6 != 0)
								{
								}
								num6 = 0;
								if (num6 != 0)
								{
								}
								num6 = 0;
								_ = num6;
								h6.IsEnabled = true;
								OpenDownloader = false;
								break;
							}
						};
						eval_gl.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation3);
						DoubleAnimation doubleAnimation4 = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation4.Completed += delegate
						{
							short num4 = 16938;
							short num5 = num4;
							num4 = 16938;
							switch (num5 == num4)
							{
							default:
								num4 = 1;
								if (num4 != 0)
								{
								}
								num4 = 0;
								if (num4 != 0)
								{
								}
								num4 = 0;
								_ = num4;
								eval_gl.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation4);
						num = -23570;
						short num3 = num;
						num = -23570;
						switch (num3 == num)
						{
						case false:
						case true:
							break;
						default:
							num = 0;
							if (num != 0)
							{
							}
							num = 3;
							num2 = num;
							continue;
						}
						goto IL_01e4;
					}
					case 1:
					{
						doubleAnimation.From = 575.0;
						doubleAnimation.To = 0.0;
						doubleAnimation.Completed += delegate
						{
							short num10 = 1;
							if (num10 != 0)
							{
							}
							num10 = 19601;
							short num11 = num10;
							num10 = 19601;
							switch (num11 == num10)
							{
							default:
								num10 = 0;
								if (num10 != 0)
								{
								}
								num10 = 0;
								_ = num10;
								eval_h5.IsEnabled = true;
								this.m_eval_cd = false;
								break;
							}
						};
						eval_gt.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation);
						DoubleAnimation doubleAnimation2 = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation2.Completed += delegate
						{
							short num8 = 18191;
							short num9 = num8;
							num8 = 18191;
							switch (num9 == num8)
							{
							default:
								num8 = 1;
								if (num8 != 0)
								{
								}
								num8 = 0;
								if (num8 != 0)
								{
								}
								num8 = 0;
								_ = num8;
								eval_gt.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gt.BeginAnimation(UIElement.OpacityProperty, doubleAnimation2);
						return;
					}
					case 3:
						eval_h5.IsEnabled = false;
						doubleAnimation = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new QuadraticEase()
						};
						goto IL_01e4;
					case 0:
						{
							if (this.m_eval_cd)
							{
								num = 1;
								num2 = num;
								continue;
							}
							eval_gt.Visibility = Visibility.Visible;
							DoubleAnimation animation = new DoubleAnimation
							{
								From = 0.0,
								To = 1.0,
								Duration = new Duration(TimeSpan.FromSeconds(0.5)),
								AutoReverse = false
							};
							eval_gt.BeginAnimation(UIElement.OpacityProperty, animation);
							doubleAnimation.From = 0.0;
							doubleAnimation.To = 575.0;
							doubleAnimation.Completed += delegate
							{
								short num12 = 20628;
								short num13 = num12;
								num12 = 20628;
								switch (num13 == num12)
								{
								default:
									num12 = 1;
									if (num12 != 0)
									{
									}
									num12 = 0;
									if (num12 != 0)
									{
									}
									num12 = 0;
									_ = num12;
									eval_h5.IsEnabled = true;
									this.m_eval_cd = true;
									break;
								}
							};
							eval_gt.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation);
							return;
						}
						IL_01e4:
						num = 0;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				doubleAnimation3 = new DoubleAnimation
				{
					Duration = TimeSpan.FromSeconds(0.8),
					EasingFunction = new SineEase()
				};
				num = 2;
				num2 = num;
				goto default;
			}
		}
		}
	}

	[AsyncStateMachine(typeof(eval_av))]
	public void Startclient()
	{
		short num = -14695;
		short num2 = num;
		num = -14695;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_av stateMachine = default(eval_av);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_ab))]
	private void eval_a4(object A_0, EventArgs A_1)
	{
		short num = -22035;
		short num2 = num;
		num = -22035;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_ab stateMachine = default(eval_ab);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_at))]
	public Task StartGAME()
	{
		short num = 18786;
		short num2 = num;
		num = 18786;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_at stateMachine = default(eval_at);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	public void ProgressChanged_CheckGameFileExist(object sender, DownloadProgressChangedEventArgs e)
	{
		short num;
		try
		{
			num = 8925;
			short num2 = num;
			num = 8925;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				eval_ig.Content = DirLocal + "\\FILE.log  /  " + (Convert.ToDouble(e.BytesReceived) / 1024.0 / 1024.0).ToString("0.00") + " Mb's  /  " + (Convert.ToDouble(e.TotalBytesToReceive) / 1024.0 / 1024.0).ToString("0.00") + " Mb's  /  " + e.ProgressPercentage + "%";
				break;
			}
		}
		catch
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	[AsyncStateMachine(typeof(eval_ad))]
	private Task eval_bx()
	{
		short num = -11193;
		short num2 = num;
		num = -11193;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_ad stateMachine = default(eval_ad);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	[AsyncStateMachine(typeof(eval_ac))]
	public Task CheckGameFile()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 31941;
		short num2 = num;
		num = 31941;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_ac stateMachine = default(eval_ac);
		stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
		return stateMachine.eval_b.Task;
	}

	private void eval_bw()
	{
		short num2;
		try
		{
			int num = default(int);
			int num4 = default(int);
			Process[] processesByName = default(Process[]);
			try
			{
				switch (0)
				{
				default:
					while (true)
					{
						switch (num)
						{
						case 2:
						case 4:
							num2 = 0;
							num = num2;
							continue;
						case 0:
						{
							num2 = -7917;
							short num3 = num2;
							num2 = -7917;
							switch (num3 == num2)
							{
							case false:
							case true:
								break;
							default:
								num2 = 0;
								if (num2 != 0)
								{
								}
								if (num4 < processesByName.Length)
								{
									processesByName[num4].Kill();
									num4++;
									num2 = 4;
									num = num2;
								}
								else
								{
									num2 = 1;
									num = num2;
								}
								continue;
							}
							goto case 2;
						}
						case 1:
							num2 = 3;
							num = num2;
							continue;
						case 3:
							goto end_IL_000a;
						}
						goto case 0;
						continue;
						end_IL_000a:
						break;
					}
					break;
				case 0:
					processesByName = Process.GetProcessesByName(this.m_eval_x);
					num4 = 0;
					num2 = 2;
					num = num2;
					goto default;
				}
			}
			catch
			{
			}
			try
			{
				switch (0)
				{
				default:
					while (true)
					{
						switch (num)
						{
						case 1:
						case 2:
							num2 = 4;
							num = num2;
							continue;
						case 4:
							if (num4 >= processesByName.Length)
							{
								num2 = 0;
								num = num2;
								continue;
							}
							processesByName[num4].Kill();
							num4++;
							num2 = 1;
							num = num2;
							continue;
						case 0:
							num2 = 3;
							num = num2;
							continue;
						case 3:
							goto end_IL_011c;
						}
						goto case 0;
						continue;
						end_IL_011c:
						break;
					}
					break;
				case 0:
					processesByName = Process.GetProcessesByName(this.m_eval_y);
					num4 = 0;
					num2 = 2;
					num = num2;
					goto default;
				}
			}
			catch
			{
			}
			eval_in.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
			{
				short num5 = -1500;
				short num6 = num5;
				num5 = -1500;
				int num7 = default(int);
				DoubleAnimation doubleAnimation;
				switch (num6 == num5)
				{
				default:
					num5 = 0;
					if (num5 != 0)
					{
					}
					switch (0)
					{
					case 0:
						goto IL_0069;
					}
					goto IL_0057;
				case false:
				case true:
					goto IL_0118;
					IL_0069:
					eval_cc = false;
					eval_im.Content = "";
					eval_id.Visibility = Visibility.Hidden;
					eval_fe.Visibility = Visibility.Visible;
					eval_in.Visibility = Visibility.Hidden;
					eval_fj.Visibility = Visibility.Visible;
					num5 = 1;
					num7 = num5;
					goto IL_0057;
					IL_0057:
					while (true)
					{
						switch (num7)
						{
						case 1:
							if (ij.Visibility == Visibility.Visible)
							{
								num5 = 0;
								_ = num5;
								num5 = 2;
								num7 = num5;
								continue;
							}
							goto IL_01c2;
						case 2:
							goto IL_0118;
						case 0:
							{
								num5 = 1;
								if (num5 == 0)
								{
								}
								goto IL_01c2;
							}
							IL_01c2:
							eval_f9.Visibility = Visibility.Visible;
							this.m_eval_b9.Stop();
							this.m_eval_cb.Stop();
							eo.Stop();
							return;
						}
						break;
					}
					goto IL_0069;
					IL_0118:
					doubleAnimation = new DoubleAnimation
					{
						From = 1.0,
						To = 0.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.2)),
						AutoReverse = false
					};
					doubleAnimation.Completed += delegate
					{
						short num8 = -20794;
						short num9 = num8;
						num8 = -20794;
						switch (num9 == num8)
						{
						default:
							num8 = 0;
							if (num8 != 0)
							{
							}
							num8 = 1;
							if (num8 != 0)
							{
							}
							num8 = 0;
							_ = num8;
							ij.Visibility = Visibility.Hidden;
							break;
						}
					};
					ij.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
					num5 = 0;
					num7 = num5;
					goto IL_0057;
				}
			});
			IfStopedUload = false;
			RunUload = false;
		}
		catch
		{
		}
		num2 = 1;
		if (num2 != 0)
		{
		}
		num2 = 0;
		_ = num2;
	}

	private void eval_j(object A_0, RoutedEventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 19526;
		short num2 = num;
		num = 19526;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_bw();
	}

	[AsyncStateMachine(typeof(eval_ae))]
	private void eval_bv()
	{
		short num = -16803;
		short num2 = num;
		num = -16803;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_ae stateMachine = default(eval_ae);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[AsyncStateMachine(typeof(eval_af))]
	private Task eval_bu()
	{
		short num = 8926;
		short num2 = num;
		num = 8926;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			_ = num;
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_af stateMachine = default(eval_af);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	[AsyncStateMachine(typeof(eval_ap))]
	private Task eval_bt()
	{
		short num = -25967;
		short num2 = num;
		num = -25967;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_ap stateMachine = default(eval_ap);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	public void Lbl_version(string vlauncher, string vclient, string vmods)
	{
		if (Langve == "RU")
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 13136;
			short num2 = num;
			num = 13136;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				eval_fx.Content = "Версия клиента : " + vclient + "/Версия модов : " + vmods;
				eval_fy.Content = "Версия лаунчера : " + vlauncher;
				return;
			case false:
			case true:
				break;
			}
		}
		eval_fx.Content = "Client version : " + vclient + "/Mods version : " + vmods;
		eval_fy.Content = "Launcher version : " + vlauncher;
	}

	private void eval_bp()
	{
		short num = 15414;
		short num2 = num;
		num = 15414;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		df.Show();
		df.eval_c.Visibility = Visibility.Visible;
		df.eval_d.Visibility = Visibility.Visible;
		DoubleAnimation doubleAnimation = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(2.0)),
			AutoReverse = false
		};
		doubleAnimation.Completed += [AsyncStateMachine(typeof(eval_e))] (object A_0, EventArgs A_1) =>
		{
			short num3 = 21929;
			short num4 = num3;
			num3 = 21929;
			switch (num4 == num3)
			{
			default:
			{
				num3 = 0;
				if (num3 != 0)
				{
				}
				num3 = 1;
				if (num3 != 0)
				{
				}
				num3 = 0;
				_ = num3;
				eval_e stateMachine = default(eval_e);
				stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
				stateMachine.eval_c = this;
				stateMachine.eval_a = -1;
				stateMachine.eval_b.Start(ref stateMachine);
				break;
			}
			}
		};
		df.eval_c.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
	}

	public void ProgressChanged_update(object sender, DownloadProgressChangedEventArgs e)
	{
		short num;
		try
		{
			num = 30616;
			short num2 = num;
			num = 30616;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				iz.Content = Name_form + "  /  " + (Convert.ToDouble(e.BytesReceived) / 1024.0 / 1024.0).ToString("0.00") + " Mb's  /  " + (Convert.ToDouble(e.TotalBytesToReceive) / 1024.0 / 1024.0).ToString("0.00") + " Mb's  /  " + e.ProgressPercentage + "%";
				break;
			}
		}
		catch
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	[AsyncStateMachine(typeof(eval_a0))]
	private Task eval_bo()
	{
		short num = 707;
		short num2 = num;
		num = 707;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			_ = num;
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			eval_a0 stateMachine = default(eval_a0);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	private void eval_bn()
	{
		short num = 10974;
		short num2 = num;
		num = 10974;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_hp.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
		{
			short num3;
			try
			{
				int num5 = default(int);
				int num6 = default(int);
				string text2 = default(string);
				string text = default(string);
				switch (0)
				{
				default:
					while (true)
					{
						num3 = -5309;
						short num4 = num3;
						num3 = -5309;
						switch (num4 == num3)
						{
						default:
							num3 = 0;
							if (num3 != 0)
							{
							}
							switch (num5)
							{
							case 4:
								goto IL_0131;
							case 9:
								goto IL_014f;
							case 1:
								goto IL_0168;
							case 5:
								goto IL_01f4;
							case 18:
								num3 = 1;
								if (num3 == 0)
								{
								}
								goto case 7;
							case 16:
								num3 = 6;
								num5 = num3;
								continue;
							case 6:
								goto IL_0292;
							case 7:
							case 11:
								num6++;
								num3 = 0;
								num5 = num3;
								continue;
							case 12:
								if (text2 != null)
								{
									num3 = 19;
									num5 = num3;
									continue;
								}
								goto IL_014f;
							case 0:
							case 2:
								num3 = 21;
								num5 = num3;
								continue;
							case 21:
								goto IL_0357;
							case 19:
								num3 = 13;
								num5 = num3;
								continue;
							case 13:
								if (eval_ed[num6].ToString() == text2)
								{
									num3 = 10;
									num5 = num3;
									continue;
								}
								goto IL_014f;
							case 8:
								goto IL_03eb;
							case 14:
								eval_hp.SelectedItem = "Неограниченный";
								eval_hq.SelectedItem = "Неограниченный";
								eval_hp.Items.Add("Неограниченный");
								eval_hq.Items.Add("Неограниченный");
								num3 = 11;
								num5 = num3;
								continue;
							case 10:
								goto IL_048b;
							case 20:
								num3 = 15;
								num5 = num3;
								continue;
							case 15:
								if (eval_ed[num6].ToString() == text)
								{
									num3 = 4;
									num5 = num3;
									continue;
								}
								goto IL_01f4;
							case 3:
								num3 = 17;
								num5 = num3;
								continue;
							case 17:
								goto end_IL_000a;
							}
							break;
						case false:
						case true:
							{
								num3 = 9;
								num5 = num3;
								continue;
							}
							IL_0131:
							try
							{
								eval_ea = Convert.ToInt32(text);
							}
							catch
							{
								eval_ea = 0;
							}
							eval_hp.SelectedItem = text;
							num3 = 5;
							num5 = num3;
							continue;
							IL_048b:
							try
							{
								eval_eb = Convert.ToInt32(text2);
							}
							catch
							{
								eval_ea = 0;
							}
							eval_hq.SelectedItem = text2;
							goto case false;
							IL_0292:
							if (!(Langve == "RU"))
							{
								eval_hp.SelectedItem = "Unlimited";
								eval_hq.SelectedItem = "Unlimited";
								eval_hp.Items.Add("Unlimited");
								eval_hq.Items.Add("Unlimited");
								num3 = 7;
								num5 = num3;
							}
							else
							{
								num3 = 14;
								num5 = num3;
							}
							continue;
							IL_03eb:
							if (!(eval_ed[num6] == "Unlimited"))
							{
								num3 = 12;
								num5 = num3;
							}
							else
							{
								num3 = 16;
								num5 = num3;
							}
							continue;
							IL_01f4:
							eval_hp.Items.Add(eval_ed[num6].ToString());
							eval_hq.Items.Add(eval_ed[num6].ToString());
							num3 = 18;
							num5 = num3;
							continue;
							IL_014f:
							num3 = 1;
							num5 = num3;
							continue;
							IL_0357:
							if (num6 >= eval_ed.Count)
							{
								num3 = 3;
								num5 = num3;
							}
							else
							{
								num3 = 8;
								num5 = num3;
							}
							continue;
							IL_0168:
							if (text != null)
							{
								num3 = 20;
								num5 = num3;
								continue;
							}
							goto IL_01f4;
						}
						goto case 0;
						continue;
						end_IL_000a:
						break;
					}
					break;
				case 0:
					eval_hq.Items.Clear();
					eval_hp.Items.Clear();
					text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "DownloadLimite_", null);
					text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "UploadLimite_", null);
					num6 = 0;
					num3 = 2;
					num5 = num3;
					goto default;
				}
			}
			catch
			{
			}
			num3 = 0;
			_ = num3;
		});
	}

	private void eval_bm()
	{
		short num = -8054;
		short num2 = num;
		num = -8054;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_fe.Visibility = Visibility.Visible;
		DoubleAnimation animation = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(1.0)),
			AutoReverse = false
		};
		eval_fe.BeginAnimation(UIElement.OpacityProperty, animation);
	}

	[AsyncStateMachine(typeof(eval_al))]
	private void eval_bl()
	{
		short num = 25192;
		short num2 = num;
		num = 25192;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_al stateMachine = default(eval_al);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	public void Close_launcher()
	{
		int num = default(int);
		switch (0)
		{
		default:
		{
			int num3 = default(int);
			Process[] processesByName = default(Process[]);
			while (true)
			{
				switch (num)
				{
				case 0:
				case 5:
				{
					short num2 = 4;
					num = num2;
					continue;
				}
				case 4:
					if (num3 >= processesByName.Length)
					{
						short num2 = 1;
						if (num2 != 0)
						{
						}
						num2 = 1;
						num = num2;
					}
					else
					{
						processesByName[num3].Kill();
						num3++;
						short num2 = 0;
						num = num2;
					}
					continue;
				case 3:
				{
					short num2;
					try
					{
						num2 = 3;
						num = num2;
						while (true)
						{
							switch (num)
							{
							case 3:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (File.Exists(DirLocal + "\\" + Ename))
								{
									num2 = 2;
									num = num2;
									continue;
								}
								break;
							case 2:
								File.Delete(DirLocal + "\\" + Ename);
								num2 = 0;
								num = num2;
								continue;
							case 0:
							{
								num2 = -25756;
								short num4 = num2;
								num2 = -25756;
								switch (num4 == num2)
								{
								case false:
								case true:
									break;
								default:
									goto IL_01a5;
								}
								goto case 2;
							}
							case 1:
								goto end_IL_00f5;
								IL_01a5:
								num2 = 0;
								if (num2 == 0)
								{
								}
								break;
							}
							num2 = 1;
							num = num2;
							continue;
							end_IL_00f5:
							break;
						}
					}
					catch
					{
					}
					num2 = 2;
					num = num2;
					continue;
				}
				case 2:
				{
					short num2;
					try
					{
						switch (0)
						{
						default:
							while (true)
							{
								switch (num)
								{
								case 2:
								case 4:
									num2 = 0;
									num = num2;
									continue;
								case 0:
									if (num3 < processesByName.Length)
									{
										processesByName[num3].Kill();
										num3++;
										num2 = 4;
										num = num2;
									}
									else
									{
										num2 = 1;
										num = num2;
									}
									continue;
								case 1:
									num2 = 3;
									num = num2;
									continue;
								case 3:
									goto end_IL_0216;
								}
								goto case 0;
								continue;
								end_IL_0216:
								break;
							}
							break;
						case 0:
							processesByName = Process.GetProcessesByName(this.m_eval_x);
							num3 = 0;
							num2 = 2;
							num = num2;
							goto default;
						}
					}
					catch
					{
					}
					processesByName = Process.GetProcessesByName(Name_form);
					num3 = 0;
					num2 = 5;
					num = num2;
					continue;
				}
				case 1:
				{
					short num2 = 0;
					_ = num2;
					return;
				}
				}
				break;
			}
			goto case 0;
		}
		case 0:
		{
			eval_au();
			eval_fc.Dispose();
			short num2 = 3;
			num = num2;
			goto default;
		}
		}
	}

	private void eval_a(object A_0, CancelEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			bool? isChecked = default(bool?);
			bool flag = default(bool);
			switch (0)
			{
			default:
				while (true)
				{
					switch (num2)
					{
					case 2:
						if (isChecked == flag)
						{
							num = 0;
							num2 = num;
							continue;
						}
						num = 0;
						_ = num;
						Close_launcher();
						num = 1;
						if (num != 0)
						{
						}
						num = 1;
						num2 = num;
						continue;
					case 1:
						return;
					case 0:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 8:
										if (!UpdateStatus)
										{
											num = 6;
											num2 = num;
										}
										else
										{
											num = 1;
											num2 = num;
										}
										continue;
									case 2:
										Norificons("Лаунчер скрыт в трей. О завршение обновления будет выдано сообщение.");
										num = 10;
										num2 = num;
										continue;
									case 6:
										num = 4;
										num2 = num;
										continue;
									case 4:
										if (Langve == "RU")
										{
											num = 9;
											num2 = num;
										}
										else
										{
											Norificons("The launcher is hidden in the tray.");
											num = 0;
											num2 = num;
										}
										continue;
									case 1:
										if (Langve == "RU")
										{
											num = 2;
											num2 = num;
										}
										else
										{
											Norificons("The launcher is hidden in the tray. A message will be displayed about the completion of the update.");
											num = 5;
											num2 = num;
										}
										continue;
									case 9:
										Norificons("Лаунчер скрыт в трей.");
										goto IL_02f4;
									case 0:
									case 5:
									case 7:
									case 10:
									{
										num = 2592;
										short num3 = num;
										num = 2592;
										switch (num3 == num)
										{
										case false:
										case true:
											break;
										default:
											num = 0;
											if (num != 0)
											{
											}
											A_1.Cancel = true;
											num = 3;
											num2 = num;
											continue;
										}
										goto IL_02f4;
									}
									case 3:
										return;
										IL_02f4:
										num = 7;
										num2 = num;
										continue;
									}
									break;
								}
								goto case 0;
							case 0:
							{
								DoubleAnimation doubleAnimation = new DoubleAnimation
								{
									From = 1.0,
									To = 0.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.3)),
									AutoReverse = false
								};
								doubleAnimation.Completed += delegate
								{
									short num4 = -15742;
									short num5 = num4;
									num4 = -15742;
									switch (num5 == num4)
									{
									default:
										num4 = 1;
										if (num4 != 0)
										{
										}
										num4 = 0;
										if (num4 != 0)
										{
										}
										num4 = 0;
										_ = num4;
										fa.Visibility = Visibility.Hidden;
										break;
									}
								};
								fa.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
								num = 8;
								num2 = num;
								goto default;
							}
							}
						}
						catch (Exception ex)
						{
							MessageBoxWindow.Show(this, "Close Launcher: " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							return;
						}
					}
					break;
				}
				goto case 0;
			case 0:
				isChecked = eval_hy.IsChecked;
				flag = false;
				num = 2;
				num2 = num;
				goto default;
			}
		}
		}
	}

	private void eval_i(object A_0, RoutedEventArgs A_1)
	{
		short num = 2;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 2:
				switch (0)
				{
				default:
					goto end_IL_0021;
				case 0:
					break;
				}
				goto default;
			default:
				num = 1;
				if (num != 0)
				{
				}
				if (fa.Visibility == Visibility.Hidden)
				{
					num = 0;
					num2 = num;
					break;
				}
				return;
			case 0:
			{
				num = 30560;
				short num3 = num;
				num = 30560;
				switch (num3 == num)
				{
				default:
				{
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					fa.Visibility = Visibility.Visible;
					DoubleAnimation animation = new DoubleAnimation
					{
						From = 0.0,
						To = 1.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.3)),
						AutoReverse = false
					};
					fa.BeginAnimation(UIElement.OpacityProperty, animation);
					break;
				}
				case false:
				case true:
					break;
				}
				num = 1;
				num2 = num;
				break;
			}
			case 1:
				return;
				end_IL_0021:
				break;
			}
		}
	}

	private void eval_h(object A_0, RoutedEventArgs A_1)
	{
		if (fa.Visibility == Visibility.Visible)
		{
			short num = 3561;
			short num2 = num;
			num = 3561;
			switch (num2 == num)
			{
			default:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				DoubleAnimation doubleAnimation = new DoubleAnimation
				{
					From = 1.0,
					To = 0.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.5)),
					AutoReverse = false
				};
				doubleAnimation.Completed += delegate
				{
					short num3 = 18092;
					short num4 = num3;
					num3 = 18092;
					switch (num4 == num3)
					{
					default:
						num3 = 0;
						if (num3 != 0)
						{
						}
						num3 = 1;
						if (num3 != 0)
						{
						}
						num3 = 0;
						_ = num3;
						fa.Visibility = Visibility.Hidden;
						break;
					}
				};
				fa.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		fa.Visibility = Visibility.Visible;
		DoubleAnimation animation = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.3)),
			AutoReverse = false
		};
		fa.BeginAnimation(UIElement.OpacityProperty, animation);
	}

	private void eval_g(object A_0, RoutedEventArgs A_1)
	{
		short num = 2;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 2:
				switch (0)
				{
				default:
					goto end_IL_001f;
				case 0:
					break;
				}
				goto default;
			default:
				if (fa.Visibility == Visibility.Visible)
				{
					num = 0;
					num2 = num;
					break;
				}
				return;
			case 0:
			{
				num = 29095;
				short num3 = num;
				num = 29095;
				switch (num3 == num)
				{
				default:
				{
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					DoubleAnimation doubleAnimation = new DoubleAnimation
					{
						From = 1.0,
						To = 0.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.5)),
						AutoReverse = false
					};
					doubleAnimation.Completed += delegate
					{
						short num4 = -8317;
						short num5 = num4;
						num4 = -8317;
						switch (num5 == num4)
						{
						default:
							num4 = 1;
							if (num4 != 0)
							{
							}
							num4 = 0;
							if (num4 != 0)
							{
							}
							num4 = 0;
							_ = num4;
							fa.Visibility = Visibility.Hidden;
							break;
						}
					};
					fa.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
					break;
				}
				case false:
				case true:
					break;
				}
				num = 1;
				if (num != 0)
				{
				}
				num = 1;
				num2 = num;
				break;
			}
			case 1:
				return;
				end_IL_001f:
				break;
			}
		}
	}

	private void eval_f(object A_0, RoutedEventArgs A_1)
	{
		short num = -7618;
		short num2 = num;
		num = -7618;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		DoubleAnimation doubleAnimation = new DoubleAnimation
		{
			From = 1.0,
			To = 0.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.3)),
			AutoReverse = false
		};
		doubleAnimation.Completed += delegate
		{
			short num3 = 29333;
			short num4 = num3;
			num3 = 29333;
			switch (num4 == num3)
			{
			default:
				num3 = 1;
				if (num3 != 0)
				{
				}
				num3 = 0;
				if (num3 != 0)
				{
				}
				num3 = 0;
				_ = num3;
				fa.Visibility = Visibility.Hidden;
				Close_launcher();
				break;
			}
		};
		fa.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
	}

	public void RefreshServerList()
	{
		while (true)
		{
			short num = 3;
			int num2 = num;
			while (true)
			{
				switch (num2)
				{
				case 3:
					num = 1;
					if (num != 0)
					{
					}
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (Langve == "RU")
					{
						num = 2;
						num2 = num;
					}
					else
					{
						eval_fh.Content = "Total servers : 0 / Total Players : 0";
						num = 0;
						num2 = num;
					}
					continue;
				case 0:
				{
					num = -24307;
					short num3 = num;
					num = -24307;
					switch (num3 == num)
					{
					case false:
					case true:
						goto end_IL_0046;
					default:
						num = 0;
						_ = num;
						break;
					case true:
						break;
					}
					num = 0;
					if (num == 0)
					{
					}
					goto case 1;
				}
				case 2:
					eval_fh.Content = "Всего серверов : 0 / Всего игроков : 0";
					num = 1;
					num2 = num;
					continue;
				case 1:
					{
						eval_fl.Visibility = Visibility.Visible;
						DoubleAnimation animation = new DoubleAnimation
						{
							From = 0.0,
							To = 1.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.2)),
							AutoReverse = false
						};
						eval_fl.BeginAnimation(UIElement.OpacityProperty, animation);
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.2)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num4 = 0;
							_ = num4;
							num4 = -14289;
							short num5 = num4;
							num4 = -14289;
							switch (num5 == num4)
							{
							default:
							{
								num4 = 0;
								if (num4 != 0)
								{
								}
								int num6 = default(int);
								switch (0)
								{
								default:
									while (true)
									{
										switch (num6)
										{
										case 0:
											if (!this.m_eval_a0)
											{
												num4 = 3;
												num6 = num4;
												continue;
											}
											return;
										case 2:
											try
											{
												eval_fj.IsEnabled = false;
												eval_dl.Clear();
												eval_di = 0;
												eval_dk = 0;
												BoxServer.Items.Clear();
											}
											catch
											{
											}
											num4 = 0;
											num6 = num4;
											continue;
										case 3:
										{
											Thread thread = new Thread(eval_bk);
											thread.IsBackground = true;
											thread.Start();
											num4 = 1;
											num6 = num4;
											continue;
										}
										case 1:
											return;
										}
										break;
									}
									goto case 0;
								case 0:
									num4 = 1;
									if (num4 != 0)
									{
									}
									BoxServer.Visibility = Visibility.Hidden;
									num4 = 2;
									num6 = num4;
									goto default;
								}
							}
							case false:
							case true:
								break;
							}
						};
						BoxServer.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						return;
					}
					end_IL_0046:
					break;
				}
				break;
			}
		}
	}

	private void eval_e(object A_0, RoutedEventArgs A_1)
	{
		short num = -8978;
		short num2 = num;
		num = -8978;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		RefreshServerList();
	}

	private void eval_bk()
	{
		short num;
		try
		{
			num = 3;
			int num2 = num;
			WebClient webClient = default(WebClient);
			while (true)
			{
				switch (num2)
				{
				case 3:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (!Directory.Exists(DirLocal))
					{
						num = 5;
						num2 = num;
						continue;
					}
					goto case 0;
				case 0:
					num = 1;
					if (num != 0)
					{
					}
					num = 1;
					num2 = num;
					continue;
				case 5:
					Directory.CreateDirectory(DirLocal);
					num = 0;
					num2 = num;
					continue;
				case 4:
					try
					{
						Uri address = new Uri(Url_update + this.m_eval_o + "/LAUNCHER/servers.xml");
						webClient.DownloadFileAsync(address, DirLocal + "\\servers.xml");
						webClient.DownloadFileCompleted += delegate
						{
							short num6 = 0;
							_ = num6;
							num6 = 32454;
							short num7 = num6;
							num6 = 32454;
							int num8 = default(int);
							switch (num7 == num6)
							{
							default:
								num6 = 0;
								if (num6 != 0)
								{
								}
								num6 = 0;
								num8 = num6;
								switch (num8)
								{
								}
								break;
							case false:
							case true:
								break;
							}
							this.m_eval_a0 = true;
							try
							{
								IEnumerator enumerator = default(IEnumerator);
								switch (0)
								{
								default:
								{
									XmlNode xmlNode = default(XmlNode);
									string eNNMOD = default(string);
									int num10 = default(int);
									string[] array = default(string[]);
									int num9 = default(int);
									PingReply pingReply = default(PingReply);
									IDisposable disposable = default(IDisposable);
									while (true)
									{
										switch (num8)
										{
										case 0:
											goto end_IL_0161;
										case 2:
											try
											{
												eval_dl = eval_dl.OrderBy(delegate(ServerOnlain A_0)
												{
													short num22 = 1;
													if (num22 != 0)
													{
													}
													num22 = 0;
													_ = num22;
													num22 = -25103;
													short num23 = num22;
													num22 = -25103;
													switch (num23 == num22)
													{
													default:
														num22 = 0;
														if (num22 != 0)
														{
														}
														return A_0.Name_;
													}
												}).ToList();
												BoxServer.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
												{
													short num13 = 0;
													int num14 = num13;
													switch (num14)
													{
													default:
													{
														int num15 = default(int);
														switch (0)
														{
														default:
														{
															string lPLAYERGAMESERVER = default(string);
															string lTIMERESTARTSERVER = default(string);
															double num18 = default(double);
															double num16 = default(double);
															double value = default(double);
															double totalSeconds = default(double);
															double num17 = default(double);
															TimeSpan timeSpan = default(TimeSpan);
															while (true)
															{
																switch (num14)
																{
																case 10:
																	BoxServer.Items.Add(eval_dj);
																	num13 = 13;
																	num14 = num13;
																	continue;
																case 13:
																	if (Langve == "RU")
																	{
																		num13 = 7;
																		num14 = num13;
																	}
																	else
																	{
																		eval_dj.TextOnlain_GStats.Content = "Online players :";
																		eval_dj.LGo.Content = "JOIN";
																		num13 = 3;
																		num14 = num13;
																	}
																	continue;
																case 17:
																	num13 = 4;
																	num14 = num13;
																	continue;
																case 4:
																	if (string.IsNullOrEmpty(eval_dl[num15].DISCORD))
																	{
																		num13 = 0;
																		num14 = num13;
																		continue;
																	}
																	goto case 6;
																case 3:
																case 20:
																{
																	eval_dj.Border2.Visibility = Visibility.Visible;
																	DoubleAnimation animation2 = new DoubleAnimation
																	{
																		From = 0.0,
																		To = 1.0,
																		Duration = new Duration(TimeSpan.FromSeconds(0.3)),
																		AutoReverse = false
																	};
																	eval_dj.Border2.BeginAnimation(UIElement.OpacityProperty, animation2);
																	num15++;
																	num13 = 12;
																	num14 = num13;
																	continue;
																}
																case 16:
																	eval_dj.BSERVER_PCF.Visibility = Visibility.Visible;
																	num13 = 10;
																	num14 = num13;
																	continue;
																case 15:
																	eval_fh.Content = "Всего серверов : " + eval_di + " / Всего игроков : " + eval_dk;
																	num13 = 9;
																	num14 = num13;
																	continue;
																case 24:
																	eval_dj.BShop.Visibility = Visibility.Hidden;
																	num13 = 17;
																	num14 = num13;
																	continue;
																case 11:
																	num13 = 0;
																	_ = num13;
																	try
																	{
																		lPLAYERGAMESERVER = eval_dl[num15].Played_players_.Replace(".", " ,");
																	}
																	catch
																	{
																	}
																	_ = string.Empty;
																	num13 = 2;
																	num14 = num13;
																	continue;
																case 1:
																case 12:
																	num13 = 14;
																	num14 = num13;
																	continue;
																case 14:
																	if (num15 >= eval_dl.Count)
																	{
																		num13 = 5;
																		num14 = num13;
																	}
																	else
																	{
																		_ = string.Empty;
																		lTIMERESTARTSERVER = string.Empty;
																		lPLAYERGAMESERVER = string.Empty;
																		num13 = 1;
																		if (num13 != 0)
																		{
																		}
																		num13 = 21;
																		num14 = num13;
																	}
																	continue;
																case 22:
																	try
																	{
																		switch (0)
																		{
																		default:
																			while (true)
																			{
																				switch (num14)
																				{
																				case 117:
																					if (num18 == 1.0)
																					{
																						num13 = 41;
																						num14 = num13;
																						continue;
																					}
																					goto case 135;
																				case 118:
																					num13 = 109;
																					num14 = num13;
																					continue;
																				case 109:
																					if (num16 != 8.0)
																					{
																						num13 = 89;
																						num14 = num13;
																						continue;
																					}
																					goto case 106;
																				case 90:
																					num13 = 104;
																					num14 = num13;
																					continue;
																				case 104:
																					if (num16 > 12.0)
																					{
																						num13 = 100;
																						num14 = num13;
																						continue;
																					}
																					goto case 40;
																				case 29:
																					num13 = 75;
																					num14 = num13;
																					continue;
																				case 75:
																					if (num16 != 8.0)
																					{
																						num13 = 42;
																						num14 = num13;
																						continue;
																					}
																					goto case 38;
																				case 5:
																					num13 = 92;
																					num14 = num13;
																					continue;
																				case 92:
																					if (num16 != 9.0)
																					{
																						num13 = 56;
																						num14 = num13;
																						continue;
																					}
																					goto case 66;
																				case 56:
																				{
																					num13 = -6163;
																					short num19 = num13;
																					num13 = -6163;
																					switch (num19 == num13)
																					{
																					default:
																						num13 = 0;
																						if (num13 != 0)
																						{
																						}
																						num13 = 73;
																						num14 = num13;
																						continue;
																					case false:
																					case true:
																						break;
																					}
																					goto case 152;
																				}
																				case 122:
																					num13 = 143;
																					num14 = num13;
																					continue;
																				case 143:
																					if (num16 > 16.0)
																					{
																						num13 = 18;
																						num14 = num13;
																						continue;
																					}
																					goto case 33;
																				case 34:
																					num13 = 147;
																					num14 = num13;
																					continue;
																				case 147:
																					if (num16 > 8.0)
																					{
																						num13 = 130;
																						num14 = num13;
																						continue;
																					}
																					goto case 46;
																				case 113:
																					num13 = 60;
																					num14 = num13;
																					continue;
																				case 60:
																					if (num16 > 20.0)
																					{
																						num13 = 13;
																						num14 = num13;
																						continue;
																					}
																					goto case 63;
																				case 61:
																					num13 = 24;
																					num14 = num13;
																					continue;
																				case 24:
																					if (num16 != 18.0)
																					{
																						num13 = 81;
																						num14 = num13;
																						continue;
																					}
																					goto case 74;
																				case 111:
																					value = totalSeconds - num17 - num17 - num17;
																					num13 = 22;
																					num14 = num13;
																					continue;
																				case 135:
																					num13 = 137;
																					num14 = num13;
																					continue;
																				case 137:
																					if (num18 == 3.0)
																					{
																						num13 = 29;
																						num14 = num13;
																						continue;
																					}
																					goto case 125;
																				case 110:
																					num13 = 64;
																					num14 = num13;
																					continue;
																				case 64:
																					if (num16 != 20.0)
																					{
																						num13 = 150;
																						num14 = num13;
																						continue;
																					}
																					goto case 68;
																				case 131:
																					value = totalSeconds - num17 - num17;
																					num13 = 118;
																					num14 = num13;
																					continue;
																				case 22:
																					num13 = 44;
																					num14 = num13;
																					continue;
																				case 44:
																					if (num16 != 18.0)
																					{
																						num13 = 88;
																						num14 = num13;
																						continue;
																					}
																					goto case 97;
																				case 2:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 91;
																					num14 = num13;
																					continue;
																				case 76:
																					value = totalSeconds - num17 - num17 - num17;
																					num13 = 125;
																					num14 = num13;
																					continue;
																				case 97:
																					value = totalSeconds - num17 - num17 - num17 - num17;
																					num13 = 43;
																					num14 = num13;
																					continue;
																				case 20:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 105;
																					num14 = num13;
																					continue;
																				case 89:
																					num13 = 133;
																					num14 = num13;
																					continue;
																				case 133:
																					if (num16 > 8.0)
																					{
																						num13 = 106;
																						num14 = num13;
																						continue;
																					}
																					goto case 58;
																				case 141:
																					num13 = 86;
																					num14 = num13;
																					continue;
																				case 86:
																					if (num16 != 16.0)
																					{
																						num13 = 151;
																						num14 = num13;
																						continue;
																					}
																					goto case 15;
																				case 130:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 46;
																					num14 = num13;
																					continue;
																				case 151:
																					num13 = 26;
																					num14 = num13;
																					continue;
																				case 26:
																					if (num16 > 16.0)
																					{
																						num13 = 15;
																						num14 = num13;
																						continue;
																					}
																					goto case 61;
																				case 81:
																					num13 = 16;
																					num14 = num13;
																					continue;
																				case 16:
																					if (num16 > 18.0)
																					{
																						num13 = 74;
																						num14 = num13;
																						continue;
																					}
																					goto case 110;
																				case 43:
																					num13 = 23;
																					num14 = num13;
																					continue;
																				case 23:
																					if (num18 == 6.0)
																					{
																						num13 = 54;
																						num14 = num13;
																						continue;
																					}
																					goto case 63;
																				case 0:
																					num13 = 59;
																					num14 = num13;
																					continue;
																				case 59:
																					if (num16 > 21.0)
																					{
																						num13 = 20;
																						num14 = num13;
																						continue;
																					}
																					goto case 105;
																				case 33:
																					num13 = 39;
																					num14 = num13;
																					continue;
																				case 39:
																					if (num16 != 20.0)
																					{
																						num13 = 113;
																						num14 = num13;
																						continue;
																					}
																					goto case 13;
																				case 124:
																					num13 = 78;
																					num14 = num13;
																					continue;
																				case 78:
																					if (num16 != 18.0)
																					{
																						num13 = 134;
																						num14 = num13;
																						continue;
																					}
																					goto case 21;
																				case 146:
																					num13 = 128;
																					num14 = num13;
																					continue;
																				case 128:
																					if (num16 != 12.0)
																					{
																						num13 = 127;
																						num14 = num13;
																						continue;
																					}
																					goto case 111;
																				case 12:
																					num13 = 55;
																					num14 = num13;
																					continue;
																				case 55:
																					if (num16 != 8.0)
																					{
																						num13 = 34;
																						num14 = num13;
																						continue;
																					}
																					goto case 130;
																				case 21:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 71;
																					num14 = num13;
																					continue;
																				case 99:
																					value = totalSeconds - num17;
																					num13 = 116;
																					num14 = num13;
																					continue;
																				case 121:
																					num13 = 45;
																					num14 = num13;
																					continue;
																				case 45:
																					if (num16 != 3.0)
																					{
																						num13 = 129;
																						num14 = num13;
																						continue;
																					}
																					goto case 99;
																				case 98:
																					num13 = 48;
																					num14 = num13;
																					continue;
																				case 48:
																					if (num16 > 6.0)
																					{
																						num13 = 120;
																						num14 = num13;
																						continue;
																					}
																					goto case 5;
																				case 115:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17;
																					num13 = 124;
																					num14 = num13;
																					continue;
																				case 68:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 80;
																					num14 = num13;
																					continue;
																				case 73:
																					if (num16 > 9.0)
																					{
																						num13 = 66;
																						num14 = num13;
																						continue;
																					}
																					goto case 6;
																				case 116:
																					num13 = 107;
																					num14 = num13;
																					continue;
																				case 107:
																					if (num16 != 6.0)
																					{
																						num13 = 98;
																						num14 = num13;
																						continue;
																					}
																					goto case 120;
																				case 105:
																					num13 = 50;
																					num14 = num13;
																					continue;
																				case 50:
																					if (num18 == 12.0)
																					{
																						num13 = 57;
																						num14 = num13;
																						continue;
																					}
																					goto case 82;
																				case 91:
																					num13 = 14;
																					num14 = num13;
																					continue;
																				case 14:
																					if (num16 != 14.0)
																					{
																						num13 = 85;
																						num14 = num13;
																						continue;
																					}
																					goto case 152;
																				case 134:
																					num13 = 65;
																					num14 = num13;
																					continue;
																				case 65:
																					if (num16 > 18.0)
																					{
																						num13 = 21;
																						num14 = num13;
																						continue;
																					}
																					goto case 71;
																				case 54:
																					num13 = 19;
																					num14 = num13;
																					continue;
																				case 19:
																					if (num16 != 4.0)
																					{
																						num13 = 95;
																						num14 = num13;
																						continue;
																					}
																					goto case 131;
																				case 125:
																					num13 = 103;
																					num14 = num13;
																					continue;
																				case 103:
																					if (num18 == 4.0)
																					{
																						num13 = 87;
																						num14 = num13;
																						continue;
																					}
																					goto case 43;
																				case 138:
																					value = totalSeconds - num17 - num17;
																					num13 = 146;
																					num14 = num13;
																					continue;
																				case 42:
																					num13 = 9;
																					num14 = num13;
																					continue;
																				case 9:
																					if (num16 > 8.0)
																					{
																						num13 = 38;
																						num14 = num13;
																						continue;
																					}
																					goto case 132;
																				case 127:
																					num13 = 79;
																					num14 = num13;
																					continue;
																				case 79:
																					if (num16 > 12.0)
																					{
																						num13 = 111;
																						num14 = num13;
																						continue;
																					}
																					goto case 22;
																				case 13:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 63;
																					num14 = num13;
																					continue;
																				case 139:
																					num13 = 77;
																					num14 = num13;
																					continue;
																				case 77:
																					if (num16 != 6.0)
																					{
																						num13 = 1;
																						num14 = num13;
																						continue;
																					}
																					goto case 140;
																				case 94:
																					value = totalSeconds - num17 - num17 - num17 - num17;
																					num13 = 139;
																					num14 = num13;
																					continue;
																				case 102:
																					num13 = 62;
																					num14 = num13;
																					continue;
																				case 62:
																					if (num16 != 4.0)
																					{
																						num13 = 72;
																						num14 = num13;
																						continue;
																					}
																					goto case 94;
																				case 18:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17;
																					num13 = 33;
																					num14 = num13;
																					continue;
																				case 70:
																					num13 = 37;
																					num14 = num13;
																					continue;
																				case 37:
																					if (num16 > 15.0)
																					{
																						num13 = 115;
																						num14 = num13;
																						continue;
																					}
																					goto case 124;
																				case 51:
																					num13 = 28;
																					num14 = num13;
																					continue;
																				case 28:
																					if (num16 > 12.0)
																					{
																						num13 = 2;
																						num14 = num13;
																						continue;
																					}
																					goto case 91;
																				case 41:
																					value = totalSeconds - num17;
																					num13 = 135;
																					num14 = num13;
																					continue;
																				case 38:
																					value = totalSeconds - num17 - num17;
																					num13 = 132;
																					num14 = num13;
																					continue;
																				case 57:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 148;
																					num14 = num13;
																					continue;
																				case 148:
																					if (num16 != 2.0)
																					{
																						num13 = 123;
																						num14 = num13;
																						continue;
																					}
																					goto case 36;
																				case 6:
																					num13 = 67;
																					num14 = num13;
																					continue;
																				case 67:
																					if (num16 != 12.0)
																					{
																						num13 = 90;
																						num14 = num13;
																						continue;
																					}
																					goto case 100;
																				case 120:
																					value = totalSeconds - num17 - num17;
																					num13 = 5;
																					num14 = num13;
																					continue;
																				case 25:
																					num13 = 52;
																					num14 = num13;
																					continue;
																				case 52:
																					if (num16 != 16.0)
																					{
																						num13 = 122;
																						num14 = num13;
																						continue;
																					}
																					goto case 18;
																				case 40:
																					num13 = 108;
																					num14 = num13;
																					continue;
																				case 108:
																					if (num16 != 15.0)
																					{
																						num13 = 70;
																						num14 = num13;
																						continue;
																					}
																					goto case 115;
																				case 88:
																					num13 = 83;
																					num14 = num13;
																					continue;
																				case 83:
																					if (num16 > 18.0)
																					{
																						num13 = 97;
																						num14 = num13;
																						continue;
																					}
																					goto case 43;
																				case 74:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 110;
																					num14 = num13;
																					continue;
																				case 1:
																					num13 = 27;
																					num14 = num13;
																					continue;
																				case 27:
																					if (num16 > 6.0)
																					{
																						num13 = 140;
																						num14 = num13;
																						continue;
																					}
																					goto case 12;
																				case 140:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17;
																					num13 = 12;
																					num14 = num13;
																					continue;
																				case 96:
																					value = totalSeconds - num17 - num17 - num17 - num17;
																					num13 = 25;
																					num14 = num13;
																					continue;
																				case 150:
																					num13 = 114;
																					num14 = num13;
																					continue;
																				case 114:
																					if (num16 > 20.0)
																					{
																						num13 = 68;
																						num14 = num13;
																						continue;
																					}
																					goto case 80;
																				case 85:
																					num13 = 4;
																					num14 = num13;
																					continue;
																				case 4:
																					if (num16 > 14.0)
																					{
																						num13 = 152;
																						num14 = num13;
																						continue;
																					}
																					goto case 141;
																				case 71:
																					num13 = 142;
																					num14 = num13;
																					continue;
																				case 142:
																					if (num16 != 21.0)
																					{
																						num13 = 0;
																						num14 = num13;
																						continue;
																					}
																					goto case 20;
																				case 15:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 61;
																					num14 = num13;
																					continue;
																				case 58:
																					num13 = 144;
																					num14 = num13;
																					continue;
																				case 144:
																					if (num16 != 12.0)
																					{
																						num13 = 119;
																						num14 = num13;
																						continue;
																					}
																					goto case 96;
																				case 63:
																					num13 = 17;
																					num14 = num13;
																					continue;
																				case 17:
																					if (num18 == 8.0)
																					{
																						num13 = 121;
																						num14 = num13;
																						continue;
																					}
																					goto case 105;
																				case 152:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 141;
																					num14 = num13;
																					continue;
																				case 36:
																					value = totalSeconds - num17 - num17 - num17;
																					num13 = 102;
																					num14 = num13;
																					continue;
																				case 145:
																					value = totalSeconds - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17 - num17;
																					num13 = 82;
																					num14 = num13;
																					continue;
																				case 72:
																					num13 = 31;
																					num14 = num13;
																					continue;
																				case 31:
																					if (num16 > 4.0)
																					{
																						num13 = 94;
																						num14 = num13;
																						continue;
																					}
																					goto case 139;
																				case 100:
																					value = totalSeconds - num17 - num17 - num17 - num17;
																					num13 = 40;
																					num14 = num13;
																					continue;
																				case 46:
																					num13 = 11;
																					num14 = num13;
																					continue;
																				case 11:
																					if (num16 != 12.0)
																					{
																						num13 = 51;
																						num14 = num13;
																						continue;
																					}
																					goto case 2;
																				case 80:
																					num13 = 126;
																					num14 = num13;
																					continue;
																				case 126:
																					if (num16 != 22.0)
																					{
																						num13 = 49;
																						num14 = num13;
																						continue;
																					}
																					goto case 145;
																				case 82:
																					value = Math.Abs(value);
																					timeSpan = TimeSpan.FromSeconds(value);
																					num13 = 101;
																					num14 = num13;
																					continue;
																				case 101:
																					if (Langve == "RU")
																					{
																						num13 = 69;
																						num14 = num13;
																					}
																					else
																					{
																						lTIMERESTARTSERVER = string.Format("{0} {1} h. {2} m.", "Time to restart : ", timeSpan.Hours, timeSpan.Minutes);
																						num13 = 35;
																						num14 = num13;
																					}
																					continue;
																				case 132:
																					num13 = 30;
																					num14 = num13;
																					continue;
																				case 30:
																					if (num16 != 16.0)
																					{
																						num13 = 149;
																						num14 = num13;
																						continue;
																					}
																					goto case 76;
																				case 95:
																					num13 = 32;
																					num14 = num13;
																					continue;
																				case 32:
																					if (num16 > 4.0)
																					{
																						num13 = 131;
																						num14 = num13;
																						continue;
																					}
																					goto case 118;
																				case 123:
																					num13 = 8;
																					num14 = num13;
																					continue;
																				case 8:
																					if (num16 > 2.0)
																					{
																						num13 = 36;
																						num14 = num13;
																						continue;
																					}
																					goto case 102;
																				case 69:
																					lTIMERESTARTSERVER = string.Format("{0} {1} ч. {2} м.", "Время до рестарта : ", timeSpan.Hours, timeSpan.Minutes);
																					num13 = 47;
																					num14 = num13;
																					continue;
																				case 119:
																					num13 = 10;
																					num14 = num13;
																					continue;
																				case 10:
																					if (num16 > 12.0)
																					{
																						num13 = 96;
																						num14 = num13;
																						continue;
																					}
																					goto case 25;
																				case 106:
																					value = totalSeconds - num17 - num17 - num17;
																					num13 = 58;
																					num14 = num13;
																					continue;
																				case 149:
																					num13 = 53;
																					num14 = num13;
																					continue;
																				case 53:
																					if (num16 > 16.0)
																					{
																						num13 = 76;
																						num14 = num13;
																						continue;
																					}
																					goto case 125;
																				case 49:
																					num13 = 3;
																					num14 = num13;
																					continue;
																				case 3:
																					if (num16 > 22.0)
																					{
																						num13 = 145;
																						num14 = num13;
																						continue;
																					}
																					goto case 82;
																				case 93:
																					num13 = 7;
																					num14 = num13;
																					continue;
																				case 7:
																					if (num16 > 6.0)
																					{
																						num13 = 138;
																						num14 = num13;
																						continue;
																					}
																					goto case 146;
																				case 129:
																					num13 = 112;
																					num14 = num13;
																					continue;
																				case 112:
																					if (num16 > 3.0)
																					{
																						num13 = 99;
																						num14 = num13;
																						continue;
																					}
																					goto case 116;
																				case 87:
																					num13 = 136;
																					num14 = num13;
																					continue;
																				case 136:
																					if (num16 != 6.0)
																					{
																						num13 = 93;
																						num14 = num13;
																						continue;
																					}
																					goto case 138;
																				case 66:
																					value = totalSeconds - num17 - num17 - num17;
																					num13 = 6;
																					num14 = num13;
																					continue;
																				case 35:
																				case 47:
																					num13 = 84;
																					num14 = num13;
																					continue;
																				case 84:
																					goto end_IL_0405;
																				}
																				goto case 0;
																				continue;
																				end_IL_0405:
																				break;
																			}
																			break;
																		case 0:
																		{
																			string text3 = eval_dl[num15].TIMERESTART.Replace(" ", string.Empty);
																			num17 = Convert.ToDouble(text3.Split(':')[3].Replace("сек.", string.Empty));
																			num18 = Convert.ToDouble(text3.Split(':')[2]);
																			string text4 = text3.Split(':')[0];
																			num16 = Convert.ToDouble(text4);
																			string text5 = text3.Split(':')[1];
																			totalSeconds = TimeSpan.Parse(text4 + ":" + text5).TotalSeconds;
																			value = 0.0;
																			num13 = 117;
																			num14 = num13;
																			goto default;
																		}
																		}
																	}
																	catch
																	{
																	}
																	num13 = 11;
																	num14 = num13;
																	continue;
																case 7:
																	eval_dj.TextOnlain_GStats.Content = "Игроки онлайн :";
																	eval_dj.LGo.Content = "ПРИСОЕДИНИТЬСЯ";
																	num13 = 20;
																	num14 = num13;
																	continue;
																case 2:
																	try
																	{
																		int.Parse(eval_dl[num15].Playhost);
																		_ = 10;
																		int.Parse(eval_dl[num15].Playhost);
																		_ = 10;
																		int.Parse(eval_dl[num15].Playhost);
																		_ = 30;
																	}
																	catch
																	{
																	}
																	eval_dj = new SControll
																	{
																		LNAMESERVER = eval_dl[num15].Name_,
																		LPLAYERSERVER = eval_dl[num15].Playhost + "/" + eval_dl[num15].Slotevery,
																		LPINGSERVER = eval_dl[num15].Ping_,
																		LWhitelist_ = eval_dl[num15].Whitelist_,
																		LPassword_ = eval_dl[num15].Password_,
																		LIp_Host_ = eval_dl[num15].Ip_Host_,
																		LPort_host_ = eval_dl[num15].Port_host_,
																		LUDP_PORT_ = eval_dl[num15].UDP_PORT_,
																		LMODS_ = eval_dl[num15].MODS_,
																		LMODSEN_ = eval_dl[num15].MODSEN_,
																		LPLAYERGAMESERVER = lPLAYERGAMESERVER,
																		LPlayhost = eval_dl[num15].Playhost,
																		LSlotevery = eval_dl[num15].Slotevery,
																		LPORT_VID = eval_dl[num15].PORT_VID,
																		LIP_VIDSCS = eval_dl[num15].IP_VIDSCS,
																		DISKORD = eval_dl[num15].DISCORD,
																		LTIMERESTARTSERVER = lTIMERESTARTSERVER,
																		IMGSERVER = eval_dl[num15].IMAGE
																	};
																	num13 = 18;
																	num14 = num13;
																	continue;
																case 0:
																	eval_dj.BDiscord.Visibility = Visibility.Hidden;
																	num13 = 6;
																	num14 = num13;
																	continue;
																case 21:
																	try
																	{
																		string text = string.Empty;
																		string text2 = string.Empty;
																		try
																		{
																			switch (0)
																			{
																			default:
																				while (true)
																				{
																					switch (num14)
																					{
																					case 4:
																						if (Langve == "RU")
																						{
																							num13 = 0;
																							num14 = num13;
																						}
																						else
																						{
																							_ = "Survival time : " + text2 + " h. " + text + " m.";
																							num13 = 1;
																							num14 = num13;
																						}
																						continue;
																					case 0:
																						_ = "Время выживания : " + text2 + " ч. " + text + " м.";
																						num13 = 3;
																						num14 = num13;
																						continue;
																					case 1:
																					case 3:
																						num13 = 2;
																						num14 = num13;
																						continue;
																					case 2:
																						goto end_IL_1fdd;
																					}
																					goto case 0;
																					continue;
																					end_IL_1fdd:
																					break;
																				}
																				break;
																			case 0:
																				_ = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num15].Port_host_ + "_STATISTIC", null);
																				text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num15].Port_host_ + "_STATISTIC_h", null);
																				text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num15].Port_host_ + "_STATISTIC_m", null);
																				num13 = 4;
																				num14 = num13;
																				goto default;
																			}
																		}
																		catch
																		{
																			_ = Langve == "RU";
																		}
																	}
																	catch
																	{
																	}
																	num13 = 22;
																	num14 = num13;
																	continue;
																case 5:
																	num13 = 23;
																	num14 = num13;
																	continue;
																case 23:
																	if (!(Langve == "RU"))
																	{
																		eval_fh.Content = "Total servers : " + eval_di + " / Total Players : " + eval_dk;
																		num13 = 8;
																		num14 = num13;
																	}
																	else
																	{
																		num13 = 15;
																		num14 = num13;
																	}
																	continue;
																case 18:
																	if (!Enable_Shop)
																	{
																		num13 = 24;
																		num14 = num13;
																		continue;
																	}
																	goto case 17;
																case 6:
																	num13 = 19;
																	num14 = num13;
																	continue;
																case 19:
																	if (!this.m_eval_b6)
																	{
																		num13 = 16;
																		num14 = num13;
																		continue;
																	}
																	goto case 10;
																case 8:
																case 9:
																{
																	DoubleAnimation doubleAnimation = new DoubleAnimation
																	{
																		From = 1.0,
																		To = 0.0,
																		Duration = new Duration(TimeSpan.FromSeconds(this.m_eval_ah)),
																		AutoReverse = false
																	};
																	doubleAnimation.Completed += delegate
																	{
																		short num20 = -22544;
																		short num21 = num20;
																		num20 = -22544;
																		switch (num21 == num20)
																		{
																		default:
																			num20 = 1;
																			if (num20 != 0)
																			{
																			}
																			num20 = 0;
																			_ = num20;
																			num20 = 0;
																			if (num20 != 0)
																			{
																			}
																			eval_fl.Visibility = Visibility.Hidden;
																			break;
																		}
																	};
																	eval_fl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
																	BoxServer.Visibility = Visibility.Visible;
																	DoubleAnimation animation = new DoubleAnimation
																	{
																		From = 0.0,
																		To = 1.0,
																		Duration = new Duration(TimeSpan.FromSeconds(0.2)),
																		AutoReverse = false
																	};
																	BoxServer.BeginAnimation(UIElement.OpacityProperty, animation);
																	return;
																}
																}
																break;
															}
															goto case 0;
														}
														case 0:
															num15 = 0;
															num13 = 1;
															num14 = num13;
															goto default;
														}
													}
													}
												});
											}
											catch
											{
											}
											num6 = 0;
											num8 = num6;
											continue;
										case 1:
											try
											{
												num6 = 11;
												num8 = num6;
												while (true)
												{
													switch (num8)
													{
													case 11:
														switch (0)
														{
														default:
															continue;
														case 0:
															break;
														}
														goto default;
													case 33:
														try
														{
															Connectslot = xmlNode.SelectSingleNode("play_host").InnerText;
														}
														catch
														{
														}
														num6 = 0;
														num8 = num6;
														continue;
													case 8:
														if (PASS == "YES")
														{
															num6 = 37;
															num8 = num6;
														}
														else
														{
															num6 = 17;
															num8 = num6;
														}
														continue;
													case 26:
														try
														{
															Time_host = xmlNode.SelectSingleNode("time").InnerText;
														}
														catch
														{
														}
														num6 = 33;
														num8 = num6;
														continue;
													case 21:
														try
														{
															TIMERESTART = xmlNode.SelectSingleNode("TimeRestart").InnerText;
														}
														catch
														{
														}
														num6 = 28;
														num8 = num6;
														continue;
													case 9:
														try
														{
															Nameplayers = xmlNode.SelectSingleNode("Played_gamer").InnerText;
														}
														catch
														{
														}
														num6 = 10;
														num8 = num6;
														continue;
													case 7:
														PASS = "NO";
														num6 = 13;
														num8 = num6;
														continue;
													case 2:
														try
														{
															Mods = xmlNode.SelectSingleNode("mods").InnerText;
														}
														catch
														{
														}
														num6 = 9;
														num8 = num6;
														continue;
													case 3:
														try
														{
															Name_server = xmlNode.SelectSingleNode("name").InnerText;
														}
														catch
														{
														}
														num6 = 30;
														num8 = num6;
														continue;
													case 29:
														eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "YES", "YES", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
														num6 = 31;
														num8 = num6;
														continue;
													case 1:
														try
														{
															Ip_server = xmlNode.SelectSingleNode("ip").InnerText;
														}
														catch
														{
														}
														num6 = 38;
														num8 = num6;
														continue;
													case 15:
														try
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num8)
																	{
																	case 0:
																	case 5:
																		num6 = 1;
																		num8 = num6;
																		continue;
																	case 1:
																		if (num10 >= array.Length)
																		{
																			num6 = 2;
																			num8 = num6;
																		}
																		else
																		{
																			num9++;
																			num10++;
																			num6 = 5;
																			num8 = num6;
																		}
																		continue;
																	case 2:
																		num6 = 3;
																		num8 = num6;
																		continue;
																	case 3:
																		if (num9 > 1)
																		{
																			num6 = 6;
																			num8 = num6;
																			continue;
																		}
																		goto case 4;
																	case 6:
																		eNNMOD = "YES";
																		num6 = 4;
																		num8 = num6;
																		continue;
																	case 4:
																		num6 = 7;
																		num8 = num6;
																		continue;
																	case 7:
																		goto end_IL_067e;
																	}
																	goto case 0;
																	continue;
																	end_IL_067e:
																	break;
																}
																break;
															case 0:
																array = Mods.Split(';');
																num9 = 0;
																num10 = 0;
																num6 = 0;
																num8 = num6;
																goto default;
															}
														}
														catch
														{
														}
														num6 = 12;
														num8 = num6;
														continue;
													case 38:
														try
														{
															PASS = xmlNode.SelectSingleNode("pass").InnerText;
														}
														catch
														{
														}
														num6 = 14;
														num8 = num6;
														continue;
													case 6:
													case 13:
														num6 = 4;
														num8 = num6;
														continue;
													case 4:
														if (!string.IsNullOrEmpty(Name_server))
														{
															num6 = 36;
															num8 = num6;
															continue;
														}
														goto default;
													case 18:
														try
														{
															eval_dk += Convert.ToInt32(Connectslot);
														}
														catch
														{
															eval_dk += Convert.ToInt32("0");
														}
														eval_di++;
														eNNMOD = string.Empty;
														num6 = 15;
														num8 = num6;
														continue;
													case 36:
														try
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num8)
																	{
																	case 0:
																		if (pingReply.Status == IPStatus.Success)
																		{
																			num6 = 1;
																			num8 = num6;
																		}
																		else
																		{
																			Ping_server = "---";
																			num6 = 4;
																			num8 = num6;
																		}
																		continue;
																	case 1:
																		num6 = 3;
																		num8 = num6;
																		continue;
																	case 3:
																		Ping_server = pingReply.RoundtripTime.ToString() ?? "";
																		num6 = 2;
																		num8 = num6;
																		continue;
																	case 2:
																	case 4:
																		num6 = 5;
																		num8 = num6;
																		continue;
																	case 5:
																		goto end_IL_0898;
																	}
																	goto case 0;
																	continue;
																	end_IL_0898:
																	break;
																}
																break;
															case 0:
															{
																Ping_server = "";
																int timeout = 120;
																byte[] buffer = new byte[4];
																pingReply = new Ping().Send(Ip_server, timeout, buffer, new PingOptions
																{
																	Ttl = 30
																});
																num6 = 0;
																num8 = num6;
																goto default;
															}
															}
														}
														catch
														{
														}
														num6 = 8;
														num8 = num6;
														continue;
													case 37:
														num6 = 23;
														num8 = num6;
														continue;
													case 23:
														if (Whitelist == "true")
														{
															num6 = 29;
															num8 = num6;
														}
														else
														{
															eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "NO", "YES", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
															num6 = 19;
															num8 = num6;
														}
														continue;
													case 34:
														try
														{
															DISINVITE = xmlNode.SelectSingleNode("Diskord").InnerText;
														}
														catch
														{
														}
														num6 = 21;
														num8 = num6;
														continue;
													case 20:
														try
														{
															PortVID = xmlNode.SelectSingleNode("PORT_VID").InnerText;
														}
														catch
														{
														}
														num6 = 35;
														num8 = num6;
														continue;
													case 17:
														if (!(Whitelist == "true"))
														{
															eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "NO", "NO", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
															num6 = 5;
															num8 = num6;
														}
														else
														{
															num6 = 25;
															num8 = num6;
														}
														continue;
													case 0:
														try
														{
															Connectplay = xmlNode.SelectSingleNode("MaxPlayers").InnerText;
														}
														catch
														{
														}
														num6 = 20;
														num8 = num6;
														continue;
													case 16:
														try
														{
															Port_server = xmlNode.SelectSingleNode("port").InnerText;
														}
														catch
														{
														}
														num6 = 1;
														num8 = num6;
														continue;
													case 30:
														try
														{
															Slot_server = xmlNode.SelectSingleNode("slot").InnerText;
														}
														catch
														{
														}
														num6 = 16;
														num8 = num6;
														continue;
													case 14:
														try
														{
															Portudp = xmlNode.SelectSingleNode("portUDP").InnerText;
														}
														catch
														{
														}
														num6 = 2;
														num8 = num6;
														continue;
													case 35:
														try
														{
															IPVIDSCS = xmlNode.SelectSingleNode("VIDSCSCL").InnerText;
														}
														catch
														{
														}
														num6 = 34;
														num8 = num6;
														continue;
													case 12:
														if (!(PASS == string.Empty))
														{
															PASS = "YES";
															num6 = 6;
															num8 = num6;
														}
														else
														{
															num6 = 7;
															num8 = num6;
														}
														continue;
													case 28:
														try
														{
															IMAGESERVER = xmlNode.SelectSingleNode("Image").InnerText;
														}
														catch
														{
														}
														num6 = 18;
														num8 = num6;
														continue;
													case 25:
														eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "YES", "NO", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
														num6 = 22;
														num8 = num6;
														continue;
													case 10:
														try
														{
															Whitelist = xmlNode.SelectSingleNode("Whitelist").InnerText;
														}
														catch
														{
														}
														num6 = 26;
														num8 = num6;
														continue;
													default:
														num6 = 24;
														num8 = num6;
														continue;
													case 24:
														if (enumerator.MoveNext())
														{
															xmlNode = (XmlNode)enumerator.Current;
															num6 = 3;
															num8 = num6;
														}
														else
														{
															num6 = 27;
															num8 = num6;
														}
														continue;
													case 27:
														num6 = 32;
														num8 = num6;
														continue;
													case 32:
														break;
													}
													break;
												}
											}
											finally
											{
												switch (0)
												{
												default:
													while (true)
													{
														switch (num8)
														{
														case 0:
															if (disposable != null)
															{
																num6 = 1;
																num8 = num6;
																continue;
															}
															goto end_IL_0ebd;
														case 1:
															disposable.Dispose();
															num6 = 2;
															num8 = num6;
															continue;
														case 2:
															goto end_IL_0ebd;
														}
														goto case 0;
														continue;
														end_IL_0ebd:
														break;
													}
													break;
												case 0:
													disposable = enumerator as IDisposable;
													num6 = 0;
													num8 = num6;
													goto default;
												}
											}
											num6 = 2;
											num8 = num6;
											continue;
										}
										goto case 0;
										continue;
										end_IL_0161:
										break;
									}
									break;
								}
								case 0:
									eval_dm.Load(DirLocal + "\\servers.xml");
									enumerator = eval_dm.SelectNodes("/server/load").GetEnumerator();
									num6 = 1;
									num8 = num6;
									goto default;
								}
							}
							catch
							{
							}
							try
							{
								num6 = 2;
								num8 = num6;
								while (true)
								{
									switch (num8)
									{
									case 2:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (File.Exists(DirLocal + "\\servers.xml"))
										{
											num6 = 0;
											num8 = num6;
											continue;
										}
										break;
									case 0:
										File.Delete(DirLocal + "\\servers.xml");
										num6 = 3;
										num8 = num6;
										continue;
									case 3:
										break;
									case 1:
										goto end_IL_00bf;
									}
									num6 = 1;
									num8 = num6;
									continue;
									end_IL_00bf:
									break;
								}
							}
							catch
							{
							}
							num6 = 1;
							if (num6 != 0)
							{
							}
							this.m_eval_a0 = false;
							eval_fj.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num11 = 17907;
								short num12 = num11;
								num11 = 17907;
								switch (num12 == num11)
								{
								default:
									num11 = 1;
									if (num11 != 0)
									{
									}
									num11 = 0;
									_ = num11;
									num11 = 0;
									if (num11 != 0)
									{
									}
									eval_fj.IsEnabled = true;
									break;
								}
							});
						};
					}
					finally
					{
						num = 2;
						num2 = num;
						while (true)
						{
							switch (num2)
							{
							case 2:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (webClient != null)
								{
									num = 0;
									num2 = num;
									continue;
								}
								break;
							case 0:
								((IDisposable)webClient).Dispose();
								num = 1;
								num2 = num;
								continue;
							case 1:
								break;
							}
							break;
						}
					}
					num = 2;
					num2 = num;
					continue;
				case 1:
					try
					{
						num = 3;
						num2 = num;
						while (true)
						{
							switch (num2)
							{
							case 3:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (File.Exists(DirLocal + "\\servers.xml"))
								{
									num = 2;
									num2 = num;
									continue;
								}
								break;
							case 2:
								File.Delete(DirLocal + "\\servers.xml");
								num = 0;
								num2 = num;
								continue;
							case 0:
							{
								num = 3217;
								short num3 = num;
								num = 3217;
								switch (num3 == num)
								{
								case false:
								case true:
									break;
								default:
									goto IL_025d;
								}
								goto case 2;
							}
							case 1:
								goto end_IL_01b6;
								IL_025d:
								num = 0;
								if (num == 0)
								{
								}
								break;
							}
							num = 1;
							num2 = num;
							continue;
							end_IL_01b6:
							break;
						}
					}
					catch
					{
					}
					webClient = new WebClient();
					num = 4;
					num2 = num;
					continue;
				case 2:
					break;
				}
				break;
			}
		}
		catch
		{
			fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
			{
				if (Langve == "RU")
				{
					while (true)
					{
						short num4 = 0;
						_ = num4;
						num4 = 26906;
						short num5 = num4;
						num4 = 26906;
						switch (num5 == num4)
						{
						case false:
						case true:
							break;
						default:
							num4 = 0;
							if (num4 != 0)
							{
							}
							num4 = 1;
							if (num4 != 0)
							{
							}
							MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							return;
						}
					}
				}
				MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			});
		}
		num = 0;
		_ = num;
	}

	private void eval_d(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
			switch (0)
			{
			default:
				while (true)
				{
					switch (num2)
					{
					case 8:
						if (eval_dh)
						{
							num = 17;
							num2 = num;
						}
						else
						{
							num = 5;
							num2 = num;
						}
						continue;
					case 16:
						num = 15;
						num2 = num;
						continue;
					case 15:
						if (gb.Visibility == Visibility.Visible)
						{
							num = 7;
							num2 = num;
							continue;
						}
						goto case 9;
					case 14:
					{
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num32 = 5289;
							short num33 = num32;
							num32 = 5289;
							switch (num33 == num32)
							{
							default:
							{
								num32 = 0;
								if (num32 != 0)
								{
								}
								num32 = 0;
								_ = num32;
								num32 = 1;
								if (num32 != 0)
								{
								}
								f8.Visibility = Visibility.Hidden;
								eval_f3.Visibility = Visibility.Hidden;
								ff.Visibility = Visibility.Visible;
								DoubleAnimation animation = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.5)),
									AutoReverse = false
								};
								ff.BeginAnimation(UIElement.OpacityProperty, animation);
								eval_h7.IsEnabled = true;
								eval_dh = false;
								break;
							}
							}
						};
						eval_f3.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						return;
					}
					case 18:
						num = 19;
						num2 = num;
						continue;
					case 19:
						if (gb.Visibility == Visibility.Visible)
						{
							num = 11;
							num2 = num;
							continue;
						}
						goto case 1;
					case 9:
						num = 10;
						num2 = num;
						continue;
					case 10:
						if (eval_gt.Visibility == Visibility.Visible)
						{
							num = 4;
							num2 = num;
							continue;
						}
						goto case 2;
					case 3:
					{
						h6.IsEnabled = false;
						DoubleAnimation doubleAnimation7 = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new SineEase()
						};
						doubleAnimation7.From = 925.0;
						doubleAnimation7.To = 0.0;
						doubleAnimation7.Completed += delegate
						{
							short num10 = 12197;
							short num11 = num10;
							num10 = 12197;
							switch (num11 == num10)
							{
							default:
								num10 = 1;
								if (num10 != 0)
								{
								}
								num10 = 0;
								_ = num10;
								num10 = 0;
								if (num10 != 0)
								{
								}
								h6.IsEnabled = true;
								OpenDownloader = false;
								break;
							}
						};
						eval_gl.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation7);
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num8 = 8592;
							short num9 = num8;
							num8 = 8592;
							switch (num9 == num8)
							{
							default:
								num8 = 0;
								if (num8 != 0)
								{
								}
								num8 = 0;
								_ = num8;
								num8 = 1;
								if (num8 != 0)
								{
								}
								eval_gl.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						num = 18;
						num2 = num;
						continue;
					}
					case 6:
					{
						h6.IsEnabled = false;
						DoubleAnimation doubleAnimation6 = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new SineEase()
						};
						doubleAnimation6.From = 925.0;
						doubleAnimation6.To = 0.0;
						doubleAnimation6.Completed += delegate
						{
							short num14 = -29426;
							short num15 = num14;
							num14 = -29426;
							switch (num15 == num14)
							{
							default:
								num14 = 1;
								if (num14 != 0)
								{
								}
								num14 = 0;
								_ = num14;
								num14 = 0;
								if (num14 != 0)
								{
								}
								h6.IsEnabled = true;
								OpenDownloader = false;
								break;
							}
						};
						eval_gl.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation6);
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num12 = -25156;
							short num13 = num12;
							num12 = -25156;
							switch (num13 == num12)
							{
							default:
								num12 = 1;
								if (num12 != 0)
								{
								}
								num12 = 0;
								_ = num12;
								num12 = 0;
								if (num12 != 0)
								{
								}
								eval_gl.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						num = -13060;
						short num3 = num;
						num = -13060;
						switch (num3 == num)
						{
						default:
							num = 0;
							if (num != 0)
							{
							}
							num = 16;
							num2 = num;
							continue;
						case false:
						case true:
							break;
						}
						goto case 17;
					}
					case 4:
					{
						eval_h5.IsEnabled = false;
						DoubleAnimation doubleAnimation5 = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new QuadraticEase()
						};
						doubleAnimation5.From = 575.0;
						doubleAnimation5.To = 0.0;
						doubleAnimation5.Completed += delegate
						{
							short num18 = 1;
							if (num18 != 0)
							{
							}
							num18 = 20649;
							short num19 = num18;
							num18 = 20649;
							switch (num19 == num18)
							{
							default:
								num18 = 0;
								_ = num18;
								num18 = 0;
								if (num18 != 0)
								{
								}
								eval_h5.IsEnabled = true;
								this.m_eval_cd = false;
								break;
							}
						};
						eval_gt.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation5);
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num16 = -30987;
							short num17 = num16;
							num16 = -30987;
							switch (num17 == num16)
							{
							default:
								num16 = 1;
								if (num16 != 0)
								{
								}
								num16 = 0;
								_ = num16;
								num16 = 0;
								if (num16 != 0)
								{
								}
								eval_gt.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gt.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						num = 2;
						num2 = num;
						continue;
					}
					case 0:
					{
						eval_h5.IsEnabled = false;
						DoubleAnimation doubleAnimation4 = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new QuadraticEase()
						};
						doubleAnimation4.From = 575.0;
						doubleAnimation4.To = 0.0;
						doubleAnimation4.Completed += delegate
						{
							short num22 = -23684;
							short num23 = num22;
							num22 = -23684;
							switch (num23 == num22)
							{
							default:
								num22 = 1;
								if (num22 != 0)
								{
								}
								num22 = 0;
								_ = num22;
								num22 = 0;
								if (num22 != 0)
								{
								}
								eval_h5.IsEnabled = true;
								this.m_eval_cd = false;
								break;
							}
						};
						eval_gt.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation4);
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num20 = -12903;
							short num21 = num20;
							num20 = -12903;
							switch (num21 == num20)
							{
							default:
								num20 = 0;
								if (num20 != 0)
								{
								}
								num20 = 0;
								_ = num20;
								num20 = 1;
								if (num20 != 0)
								{
								}
								eval_gt.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gt.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						num = 14;
						num2 = num;
						continue;
					}
					case 11:
					{
						h4.IsEnabled = false;
						DoubleAnimation doubleAnimation3 = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new SineEase()
						};
						doubleAnimation3.From = 270.0;
						doubleAnimation3.To = 0.0;
						doubleAnimation3.Completed += delegate
						{
							short num26 = -27504;
							short num27 = num26;
							num26 = -27504;
							switch (num27 == num26)
							{
							default:
								num26 = 1;
								if (num26 != 0)
								{
								}
								num26 = 0;
								_ = num26;
								num26 = 0;
								if (num26 != 0)
								{
								}
								h4.IsEnabled = true;
								OpenUser = false;
								break;
							}
						};
						gb.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation3);
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num24 = 28730;
							short num25 = num24;
							num24 = 28730;
							switch (num25 == num24)
							{
							default:
								num24 = 1;
								if (num24 != 0)
								{
								}
								num24 = 0;
								_ = num24;
								num24 = 0;
								if (num24 != 0)
								{
								}
								gb.Visibility = Visibility.Hidden;
								break;
							}
						};
						gb.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						num = 1;
						num2 = num;
						continue;
					}
					case 7:
					{
						h4.IsEnabled = false;
						DoubleAnimation doubleAnimation2 = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new SineEase()
						};
						doubleAnimation2.From = 270.0;
						doubleAnimation2.To = 0.0;
						doubleAnimation2.Completed += delegate
						{
							short num30 = 1;
							if (num30 != 0)
							{
							}
							num30 = -1384;
							short num31 = num30;
							num30 = -1384;
							switch (num31 == num30)
							{
							default:
								num30 = 0;
								_ = num30;
								num30 = 0;
								if (num30 != 0)
								{
								}
								h4.IsEnabled = true;
								OpenUser = false;
								break;
							}
						};
						gb.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation2);
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num28 = 170;
							short num29 = num28;
							num28 = 170;
							switch (num29 == num28)
							{
							default:
								num28 = 1;
								if (num28 != 0)
								{
								}
								num28 = 0;
								_ = num28;
								num28 = 0;
								if (num28 != 0)
								{
								}
								gb.Visibility = Visibility.Hidden;
								break;
							}
						};
						gb.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						num = 9;
						num2 = num;
						continue;
					}
					case 5:
						if (eval_gl.Visibility == Visibility.Visible)
						{
							num = 6;
							num2 = num;
							continue;
						}
						goto case 16;
					case 17:
						num = 12;
						num2 = num;
						continue;
					case 12:
						num = 0;
						_ = num;
						if (eval_gl.Visibility == Visibility.Visible)
						{
							num = 3;
							num2 = num;
							continue;
						}
						goto case 18;
					case 1:
						num = 13;
						num2 = num;
						continue;
					case 13:
						if (eval_gt.Visibility == Visibility.Visible)
						{
							num = 1;
							if (num != 0)
							{
							}
							num = 0;
							num2 = num;
							continue;
						}
						goto case 14;
					case 2:
					{
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num4 = -31462;
							short num5 = num4;
							num4 = -31462;
							switch (num5 == num4)
							{
							default:
							{
								num4 = 1;
								if (num4 != 0)
								{
								}
								num4 = 0;
								_ = num4;
								num4 = 0;
								if (num4 != 0)
								{
								}
								eval_f3.Visibility = Visibility.Visible;
								DoubleAnimation doubleAnimation8 = new DoubleAnimation
								{
									From = 0.0,
									To = 1.0,
									Duration = new Duration(TimeSpan.FromSeconds(0.5)),
									AutoReverse = false
								};
								doubleAnimation8.Completed += delegate
								{
									short num6 = 9457;
									short num7 = num6;
									num6 = 9457;
									switch (num7 == num6)
									{
									default:
										num6 = 1;
										if (num6 != 0)
										{
										}
										num6 = 0;
										_ = num6;
										num6 = 0;
										if (num6 != 0)
										{
										}
										eval_h7.IsEnabled = true;
										eval_dh = true;
										break;
									}
								};
								eval_f3.BeginAnimation(UIElement.OpacityProperty, doubleAnimation8);
								break;
							}
							}
						};
						ff.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						return;
					}
					}
					break;
				}
				goto case 0;
			case 0:
				eval_h7.IsEnabled = false;
				num = 8;
				num2 = num;
				goto default;
			}
		}
	}

	private void eval_a(int A_0)
	{
		short num;
		try
		{
			num = 0;
			int num2 = num;
			switch (num2)
			{
			default:
			{
				string text = default(string);
				FileStream fileStream = default(FileStream);
				switch (0)
				{
				default:
				{
					int num4 = default(int);
					byte[] array2 = default(byte[]);
					byte[] array = default(byte[]);
					StringBuilder stringBuilder = default(StringBuilder);
					int num3 = default(int);
					while (true)
					{
						switch (num2)
						{
						case 3:
						{
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 1:
										case 2:
											num = 4;
											num2 = num;
											continue;
										case 4:
											if (num4 < array2.Length)
											{
												num = -4507;
												short num5 = num;
												num = -4507;
												switch (num5 == num)
												{
												case false:
												case true:
													break;
												default:
												{
													num = 0;
													if (num != 0)
													{
													}
													byte b = array2[num4];
													text += b.ToString("x" + A_0).ToLower();
													num4++;
													num = 1;
													num2 = num;
													continue;
												}
												}
											}
											num = 0;
											num2 = num;
											continue;
										case 0:
											num = 3;
											num2 = num;
											continue;
										case 3:
											goto end_IL_00f5;
										}
										goto case 0;
										continue;
										end_IL_00f5:
										break;
									}
									break;
								case 0:
									array2 = dx.ComputeHash(fileStream);
									num4 = 0;
									num = 2;
									num2 = num;
									goto default;
								}
							}
							finally
							{
								num = 2;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 2:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (fileStream != null)
										{
											num = 0;
											num2 = num;
											continue;
										}
										break;
									case 0:
										((IDisposable)fileStream).Dispose();
										num = 1;
										num2 = num;
										continue;
									case 1:
										break;
									}
									break;
								}
							}
							byte[] bytes = Encoding.UTF8.GetBytes(text);
							array = dp.ComputeHash(bytes);
							stringBuilder = new StringBuilder();
							num3 = 0;
							num = 4;
							num2 = num;
							continue;
						}
						case 4:
						case 5:
							num = 1;
							num2 = num;
							continue;
						case 1:
							if (num3 < array.Length)
							{
								stringBuilder.Append(array[num3].ToString("X2"));
								num3++;
								num = 5;
								num2 = num;
							}
							else
							{
								num = 0;
								num2 = num;
							}
							continue;
						case 0:
							Launcher_ = stringBuilder.ToString();
							num = 2;
							num2 = num;
							continue;
						case 2:
							goto end_IL_0028;
						}
						goto case 0;
						continue;
						end_IL_0028:
						break;
					}
					break;
				}
				case 0:
					text = string.Empty;
					fileStream = File.Open(LKL, FileMode.Open, FileAccess.Read);
					num = 3;
					num2 = num;
					goto default;
				}
				break;
			}
			}
		}
		catch
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	[AsyncStateMachine(typeof(eval_ao))]
	private void eval_bi()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -9206;
		short num2 = num;
		num = -9206;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_ao stateMachine = default(eval_ao);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	private void eval_a3(object A_0, EventArgs A_1)
	{
		short num = 2;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 2:
				num = 1;
				if (num != 0)
				{
				}
				switch (0)
				{
				default:
					goto end_IL_0045;
				case 0:
					break;
				}
				goto default;
			default:
				if (eval_ds)
				{
					num = 0;
					num2 = num;
					break;
				}
				return;
			case 0:
			{
				num = 9010;
				short num3 = num;
				num = 9010;
				switch (num3 == num)
				{
				default:
				{
					num = 0;
					if (num != 0)
					{
					}
					Thread thread = new Thread(eval_bh);
					thread.IsBackground = true;
					thread.Start();
					break;
				}
				case false:
				case true:
					break;
				}
				num = 0;
				_ = num;
				num = 1;
				num2 = num;
				break;
			}
			case 1:
				return;
				end_IL_0045:
				break;
			}
		}
	}

	public void NetClientDispetcher(string userinfo)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -985;
		short num2 = num;
		num = -985;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			if (num != 0)
			{
			}
			eval_ds = false;
			string text = string.Empty;
			try
			{
				int num3 = default(int);
				byte[] array = default(byte[]);
				switch (0)
				{
				default:
					while (true)
					{
						switch (num3)
						{
						case 6:
							if (eval_dt.Connected)
							{
								num = 5;
								num3 = num;
								continue;
							}
							goto case 7;
						case 7:
							array = new byte[2048];
							num = 2;
							num3 = num;
							continue;
						case 0:
							eval_ds = true;
							eval_du.Close();
							eval_dt.Close();
							num = 1;
							num3 = num;
							continue;
						case 5:
							eval_du.Write(array, 0, array.Length);
							num = 7;
							num3 = num;
							continue;
						case 3:
							if (text.ToString().Split(',')[0] == "SV03")
							{
								num = 0;
								num3 = num;
								continue;
							}
							goto case 1;
						case 2:
							try
							{
								int count = eval_du.Read(array, 0, array.Length);
								text = Encoding.UTF8.GetString(array, 0, count);
							}
							catch
							{
							}
							num = 3;
							num3 = num;
							continue;
						case 1:
							eval_ds = true;
							eval_du.Close();
							eval_dt.Close();
							num = 4;
							num3 = num;
							continue;
						case 4:
							goto end_IL_008a;
						}
						goto case 0;
						continue;
						end_IL_008a:
						break;
					}
					break;
				case 0:
					eval_dt = new TcpClient(this.m_eval_q, connectudp);
					array = Encoding.UTF8.GetBytes("CL01," + userinfo + ",");
					eval_du = eval_dt.GetStream();
					num = 6;
					num3 = num;
					goto default;
				}
			}
			catch
			{
				try
				{
					eval_du.Close();
				}
				catch
				{
				}
				try
				{
					eval_dt.Close();
				}
				catch
				{
				}
			}
			break;
		}
		case false:
		case true:
			break;
		}
		num = 0;
		_ = num;
	}

	private void eval_bh()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		int num2 = num;
		switch (num2)
		{
		}
		eval_fz.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
		{
			short num6 = -15903;
			short num7 = num6;
			num6 = -15903;
			switch (num7 == num6)
			{
			default:
				num6 = 1;
				if (num6 != 0)
				{
				}
				num6 = 0;
				_ = num6;
				num6 = 0;
				if (num6 != 0)
				{
				}
				eval_f0.Document.Blocks.Clear();
				break;
			}
		});
		Process[] processes = Process.GetProcesses();
		try
		{
			int num3 = default(int);
			Process[] array2 = default(Process[]);
			switch (0)
			{
			default:
			{
				int num4 = default(int);
				string[] array = default(string[]);
				string value2 = default(string);
				Process process = default(Process);
				string value = default(string);
				while (true)
				{
					switch (num2)
					{
					case 2:
					case 15:
						num = 4;
						num2 = num;
						continue;
					case 4:
						if (num4 >= array.Length)
						{
							num = 21;
							num2 = num;
						}
						else
						{
							value2 = array[num4];
							num = 0;
							num2 = num;
						}
						continue;
					case 11:
						try
						{
							num = 6;
							num2 = num;
							while (true)
							{
								string userinfo3;
								switch (num2)
								{
								case 6:
									switch (0)
									{
									case 0:
										goto IL_01d0;
									}
									continue;
								default:
									goto IL_01d0;
								case 3:
									num = 2;
									num2 = num;
									continue;
								case 2:
									if (File.Exists(process.MainModule.FileName.Replace(process.ProcessName + ".exe", string.Empty) + "SboxHostDll.dll"))
									{
										num = 1;
										num2 = num;
										continue;
									}
									break;
								case 5:
									num = 7;
									num2 = num;
									continue;
								case 7:
									if (!File.Exists(process.MainModule.FileName.Replace(process.ProcessName + ".exe", string.Empty) + "SbieMsg.dll"))
									{
										num = 3;
										num2 = num;
										continue;
									}
									goto case 1;
								case 1:
								{
									num = -3284;
									short num5 = num;
									num = -3284;
									switch (num5 == num)
									{
									case false:
									case true:
										break;
									default:
										goto IL_032e;
									}
									goto case 6;
								}
								case 0:
									break;
								case 4:
									goto end_IL_01a9;
									IL_032e:
									num = 0;
									if (num != 0)
									{
									}
									userinfo3 = System.Windows.Winservr.System.In(Name_players_local + "," + an + "," + UID_SC + "," + GUID_SC + "," + Launcher_ + "," + CharsLauncher + "," + MC + "," + process.MainModule.FileName + "[SandBox]", "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345");
									NetClientDispetcher(userinfo3);
									process.Kill();
									num = 0;
									num2 = num;
									continue;
									IL_01d0:
									if (!File.Exists(process.MainModule.FileName.Replace(process.ProcessName + ".exe", string.Empty) + "SbieDll.dll"))
									{
										num = 5;
										num2 = num;
										continue;
									}
									goto case 1;
								}
								num = 4;
								num2 = num;
								continue;
								end_IL_01a9:
								break;
							}
						}
						catch
						{
						}
						array = eval_dv;
						num4 = 0;
						num = 1;
						num2 = num;
						continue;
					case 0:
						if (process.ProcessName.Contains(value2))
						{
							num = 10;
							num2 = num;
							continue;
						}
						goto case 14;
					case 21:
						num3++;
						num = 20;
						num2 = num;
						continue;
					case 1:
					case 19:
						num = 18;
						num2 = num;
						continue;
					case 18:
						if (num4 >= array.Length)
						{
							num = 12;
							num2 = num;
						}
						else
						{
							value = array[num4];
							num = 5;
							num2 = num;
						}
						continue;
					case 5:
						if (process.MainWindowTitle.Contains(value))
						{
							num = 7;
							num2 = num;
							continue;
						}
						goto case 13;
					case 14:
						num4++;
						num = 15;
						num2 = num;
						continue;
					case 8:
					case 20:
						num = 6;
						num2 = num;
						continue;
					case 6:
						if (num3 >= array2.Length)
						{
							num = 22;
							num2 = num;
						}
						else
						{
							process = array2[num3];
							num = 3;
							num2 = num;
						}
						continue;
					case 9:
					{
						string userinfo2 = System.Windows.Winservr.System.In(Name_players_local + "," + an + "," + UID_SC + "," + GUID_SC + "," + Launcher_ + "," + CharsLauncher + "," + MC + "," + process.ProcessName, "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345");
						NetClientDispetcher(userinfo2);
						num = 13;
						num2 = num;
						continue;
					}
					case 3:
						if (!string.IsNullOrEmpty(process.MainWindowTitle))
						{
							num = 11;
							num2 = num;
							continue;
						}
						goto case 12;
					case 7:
						num = 16;
						num2 = num;
						continue;
					case 16:
						if (process.MainWindowTitle.StartsWith(value))
						{
							num = 9;
							num2 = num;
							continue;
						}
						goto case 13;
					case 13:
						num4++;
						num = 19;
						num2 = num;
						continue;
					case 10:
					{
						string userinfo = System.Windows.Winservr.System.In(Name_players_local + "," + an + "," + UID_SC + "," + GUID_SC + "," + Launcher_ + "," + CharsLauncher + "," + MC + "," + process.ProcessName, "Password1", "Password2", "SHA1", 2, "16CHARSLONG12345");
						NetClientDispetcher(userinfo);
						process.Kill();
						num = 14;
						num2 = num;
						continue;
					}
					case 12:
						array = eval_dv;
						num4 = 0;
						num = 2;
						num2 = num;
						continue;
					case 22:
						num = 17;
						num2 = num;
						continue;
					case 17:
						return;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				array2 = processes;
				num3 = 0;
				num = 8;
				num2 = num;
				goto default;
			}
		}
		catch
		{
		}
	}

	private void eval_bg()
	{
		short num = 0;
		int num2 = num;
		WebClient webClient = default(WebClient);
		Process[] processesByName2 = default(Process[]);
		while (true)
		{
			switch (num2)
			{
			case 0:
				switch (0)
				{
				default:
					continue;
				case 0:
					break;
				}
				goto default;
			default:
				if (this.m_eval_b4)
				{
					num = 13;
					num2 = num;
					continue;
				}
				break;
			case 1:
				DownloadA = false;
				webClient = new WebClient();
				num = 5;
				num2 = num;
				continue;
			case 4:
				num = 12;
				num2 = num;
				continue;
			case 12:
				if (!IfStopedUload)
				{
					num = 10;
					num2 = num;
					continue;
				}
				break;
			case 14:
				num = 7;
				num2 = num;
				continue;
			case 7:
				if (processesByName2.Length == 0)
				{
					num = 8;
					num2 = num;
					continue;
				}
				goto IL_02d7;
			case 5:
				try
				{
					Uri address = new Uri(URL_DIRFastClient + this.m_eval_o + URL_DIRFastClientDIR);
					webClient.DownloadFileAsync(address, DirLocal + "\\fastresume.log");
					webClient.DownloadFileCompleted += delegate
					{
						switch (0)
						{
						case 0:
							goto IL_0024;
						}
						goto IL_000a;
						IL_000a:
						string text = default(string);
						StreamReader streamReader = default(StreamReader);
						int num4 = default(int);
						short num5;
						while (true)
						{
							switch (num4)
							{
							case 1:
								if (dy.Length == 0L)
								{
									num5 = 3;
									num4 = num5;
								}
								else
								{
									text = string.Empty;
									streamReader = new StreamReader(DirLocal + "\\fastresume.log");
									num5 = 4;
									num4 = num5;
								}
								continue;
							case 3:
								UpdateStatus = false;
								num5 = 2;
								num4 = num5;
								continue;
							case 2:
							{
								num5 = 3930;
								short num6 = num5;
								num5 = 3930;
								switch (num6 == num5)
								{
								default:
									num5 = 0;
									if (num5 != 0)
									{
									}
									if (!(Langve == "RU"))
									{
										MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										return;
									}
									num5 = 0;
									num4 = num5;
									continue;
								case false:
								case true:
									break;
								}
								goto case 0;
							}
							case 0:
								MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								return;
							case 4:
								num5 = 0;
								_ = num5;
								try
								{
									num5 = 0;
									num4 = num5;
									while (true)
									{
										switch (num4)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											num5 = 6;
											num4 = num5;
											continue;
										case 6:
											if ((text = streamReader.ReadLine()) == null)
											{
												num5 = 5;
												num4 = num5;
											}
											else
											{
												num5 = 8;
												num4 = num5;
											}
											continue;
										case 11:
											InfoHeshF = text.Replace("fastresume=", string.Empty);
											num5 = 10;
											num4 = num5;
											continue;
										case 8:
											if (!string.IsNullOrEmpty(text))
											{
												num5 = 4;
												num4 = num5;
												continue;
											}
											goto default;
										case 9:
											Md5F = text.Replace("md5=", string.Empty);
											num5 = 2;
											num4 = num5;
											continue;
										case 10:
											num5 = 3;
											num4 = num5;
											continue;
										case 3:
											if (text.StartsWith("md5="))
											{
												num5 = 9;
												num4 = num5;
												continue;
											}
											goto default;
										case 4:
											num5 = 7;
											num4 = num5;
											continue;
										case 7:
											if (text.StartsWith("fastresume="))
											{
												num5 = 11;
												num4 = num5;
												continue;
											}
											goto case 10;
										case 5:
											streamReader.Close();
											streamReader.Dispose();
											num5 = 1;
											num4 = num5;
											continue;
										case 1:
											break;
										}
										break;
									}
								}
								finally
								{
									num5 = 1;
									num4 = num5;
									while (true)
									{
										switch (num4)
										{
										case 1:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (streamReader != null)
											{
												num5 = 0;
												num4 = num5;
												continue;
											}
											break;
										case 0:
											((IDisposable)streamReader).Dispose();
											num5 = 2;
											num4 = num5;
											continue;
										case 2:
											break;
										}
										break;
									}
								}
								num5 = 1;
								if (num5 != 0)
								{
								}
								eval_a8();
								RunUload = true;
								return;
							}
							break;
						}
						goto IL_0024;
						IL_0024:
						dy = new FileInfo(DirLocal + "\\fastresume.log");
						num5 = 1;
						num4 = num5;
						goto IL_000a;
					};
				}
				finally
				{
					num = 1;
					num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 1:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (webClient != null)
							{
								num = 2;
								num2 = num;
								continue;
							}
							break;
						case 2:
							((IDisposable)webClient).Dispose();
							num = 0;
							num2 = num;
							continue;
						case 0:
							break;
						}
						break;
					}
				}
				break;
			case 13:
				num = 9;
				num2 = num;
				continue;
			case 9:
			{
				num = 1;
				if (num != 0)
				{
				}
				Process[] processesByName = Process.GetProcessesByName(this.m_eval_x);
				processesByName2 = Process.GetProcessesByName(this.m_eval_y);
				if (processesByName.Length == 0)
				{
					num = 21972;
					short num3 = num;
					num = 21972;
					switch (num3 == num)
					{
					case false:
					case true:
						break;
					default:
						num = 0;
						if (num != 0)
						{
						}
						num = 14;
						num2 = num;
						continue;
					}
					goto case 12;
				}
				goto IL_02d7;
			}
			case 10:
				num = 3;
				num2 = num;
				continue;
			case 3:
				if (!RunUload)
				{
					num = 1;
					num2 = num;
					continue;
				}
				break;
			case 8:
				eval_cc = false;
				num = 6;
				num2 = num;
				continue;
			case 6:
			case 11:
				num = 2;
				num2 = num;
				continue;
			case 2:
				{
					if (!eval_cc)
					{
						num = 4;
						num2 = num;
						continue;
					}
					break;
				}
				IL_02d7:
				eval_cc = true;
				num = 11;
				num2 = num;
				continue;
			}
			break;
		}
		num = 0;
		_ = num;
	}

	private void eval_b(DirectoryInfo A_0)
	{
		short num;
		try
		{
			num = 0;
			switch (num)
			{
			default:
			{
				num = 1;
				int num2 = num;
				int num3 = default(int);
				FileInfo[] files = default(FileInfo[]);
				DirectoryInfo[] directories = default(DirectoryInfo[]);
				while (true)
				{
					switch (num2)
					{
					case 1:
					{
						num = -24850;
						short num4 = num;
						num = -24850;
						switch (num4 == num)
						{
						case false:
						case true:
							goto IL_01a9;
						}
						num = 0;
						if (num != 0)
						{
						}
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					}
					default:
						if (A_0 != null)
						{
							num = 9;
							num2 = num;
							continue;
						}
						break;
					case 0:
					case 6:
						num = 4;
						num2 = num;
						continue;
					case 4:
						if (num3 >= files.Length)
						{
							num = 5;
							num2 = num;
							continue;
						}
						goto IL_01a9;
					case 9:
						A_0.Attributes = FileAttributes.Normal;
						files = A_0.GetFiles();
						num3 = 0;
						num = 0;
						num2 = num;
						continue;
					case 2:
					case 8:
						num = 10;
						num2 = num;
						continue;
					case 10:
						if (num3 < directories.Length)
						{
							DirectoryInfo a_ = directories[num3];
							eval_b(a_);
							num3++;
							num = 8;
							num2 = num;
						}
						else
						{
							num = 7;
							num2 = num;
						}
						continue;
					case 5:
						directories = A_0.GetDirectories();
						num3 = 0;
						num = 2;
						num2 = num;
						continue;
					case 7:
						break;
					case 3:
						goto end_IL_0088;
						IL_01a9:
						files[num3].Attributes = FileAttributes.Normal;
						num3++;
						num = 6;
						num2 = num;
						continue;
					}
					num = 3;
					num2 = num;
					continue;
					end_IL_0088:
					break;
				}
				break;
			}
			}
		}
		catch
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num == 0)
		{
		}
	}

	private void eval_c(object A_0, RoutedEventArgs A_1)
	{
		short num = 5;
		int num2 = num;
		MessageBoxResult messageBoxResult = default(MessageBoxResult);
		while (true)
		{
			switch (num2)
			{
			case 5:
				num = 0;
				_ = num;
				switch (0)
				{
				default:
					goto end_IL_0049;
				case 0:
					break;
				}
				goto default;
			default:
				num = 1;
				if (num != 0)
				{
				}
				if (Langve == "RU")
				{
					num = 4;
					num2 = num;
				}
				else
				{
					messageBoxResult = MessageBoxWindow.Show(this, "Are you sure you want to check the game for integrity?", name_messege, MessageBoxButton.YesNo);
					num = 6;
					num2 = num;
				}
				break;
			case 0:
			case 6:
				num = 1;
				num2 = num;
				break;
			case 1:
			{
				if (messageBoxResult != MessageBoxResult.Yes)
				{
					return;
				}
				num = -14249;
				short num3 = num;
				num = -14249;
				switch (num3 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 3;
					num2 = num;
					goto end_IL_0049;
				}
				goto case 5;
			}
			case 4:
				messageBoxResult = MessageBoxWindow.Show(this, "Вы уверены что хотите проверить игру на целостность?", name_messege, MessageBoxButton.YesNo);
				num = 0;
				num2 = num;
				break;
			case 3:
				eval_ew.Stop();
				eval_fr.Content = "";
				eval_a6();
				eval_b7();
				eval_be();
				num = 2;
				num2 = num;
				break;
			case 2:
				return;
				end_IL_0049:
				break;
			}
		}
	}

	private void eval_b(object A_0, RoutedEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		}
		DoubleAnimation doubleAnimation3 = default(DoubleAnimation);
		DoubleAnimation doubleAnimation = default(DoubleAnimation);
		while (true)
		{
			switch (0)
			{
			default:
				while (true)
				{
					switch (num2)
					{
					case 5:
					{
						if (OpenDownloader)
						{
							num = 4;
							num2 = num;
							continue;
						}
						eval_gl.Visibility = Visibility.Visible;
						DoubleAnimation animation = new DoubleAnimation
						{
							From = 0.0,
							To = 1.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						eval_gl.BeginAnimation(UIElement.OpacityProperty, animation);
						doubleAnimation3.From = 0.0;
						doubleAnimation3.To = 616.0;
						doubleAnimation3.Completed += delegate
						{
							short num4 = 29971;
							short num5 = num4;
							num4 = 29971;
							switch (num5 == num4)
							{
							default:
								num4 = 0;
								if (num4 != 0)
								{
								}
								num4 = 0;
								_ = num4;
								num4 = 1;
								if (num4 != 0)
								{
								}
								h6.IsEnabled = true;
								OpenDownloader = true;
								break;
							}
						};
						eval_gl.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation3);
						num = 6;
						num2 = num;
						continue;
					}
					case 0:
					case 6:
						doubleAnimation = new DoubleAnimation
						{
							Duration = TimeSpan.FromSeconds(0.8),
							EasingFunction = new SineEase()
						};
						num = 1;
						num2 = num;
						continue;
					case 1:
						num = 1;
						if (num != 0)
						{
						}
						if (OpenUser)
						{
							num = 3;
							num2 = num;
							continue;
						}
						return;
					case 4:
					{
						doubleAnimation3.From = 616.0;
						doubleAnimation3.To = 0.0;
						doubleAnimation3.Completed += delegate
						{
							short num8 = 18558;
							short num9 = num8;
							num8 = 18558;
							switch (num9 == num8)
							{
							default:
								num8 = 0;
								if (num8 != 0)
								{
								}
								num8 = 0;
								_ = num8;
								num8 = 1;
								if (num8 != 0)
								{
								}
								h6.IsEnabled = true;
								OpenDownloader = false;
								break;
							}
						};
						eval_gl.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation3);
						DoubleAnimation doubleAnimation4 = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation4.Completed += delegate
						{
							short num6 = -6648;
							short num7 = num6;
							num6 = -6648;
							switch (num7 == num6)
							{
							default:
								num6 = 1;
								if (num6 != 0)
								{
								}
								num6 = 0;
								_ = num6;
								num6 = 0;
								if (num6 != 0)
								{
								}
								eval_gl.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_gl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation4);
						num = 0;
						num2 = num;
						continue;
					}
					case 3:
					{
						h4.IsEnabled = false;
						doubleAnimation.From = 270.0;
						doubleAnimation.To = 0.0;
						doubleAnimation.Completed += delegate
						{
							short num12 = -25062;
							short num13 = num12;
							num12 = -25062;
							switch (num13 == num12)
							{
							default:
								num12 = 1;
								if (num12 != 0)
								{
								}
								num12 = 0;
								_ = num12;
								num12 = 0;
								if (num12 != 0)
								{
								}
								h4.IsEnabled = true;
								OpenUser = false;
								break;
							}
						};
						gb.BeginAnimation(FrameworkElement.WidthProperty, doubleAnimation);
						DoubleAnimation doubleAnimation2 = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.5)),
							AutoReverse = false
						};
						doubleAnimation2.Completed += delegate
						{
							short num10 = 23376;
							short num11 = num10;
							num10 = 23376;
							switch (num11 == num10)
							{
							default:
								num10 = 0;
								if (num10 != 0)
								{
								}
								num10 = 0;
								_ = num10;
								num10 = 1;
								if (num10 != 0)
								{
								}
								gb.Visibility = Visibility.Hidden;
								break;
							}
						};
						gb.BeginAnimation(UIElement.OpacityProperty, doubleAnimation2);
						num = 2;
						num2 = num;
						continue;
					}
					case 2:
						num = 0;
						_ = num;
						return;
					}
					break;
				}
				goto case 0;
			case 0:
				{
					eval_b7();
					h6.IsEnabled = false;
					doubleAnimation3 = new DoubleAnimation
					{
						Duration = TimeSpan.FromSeconds(0.8),
						EasingFunction = new SineEase()
					};
					num = 23045;
					short num3 = num;
					num = 23045;
					switch (num3 == num)
					{
					case false:
					case true:
						break;
					default:
						goto IL_00ba;
					}
					break;
				}
				IL_00ba:
				num = 0;
				if (num != 0)
				{
				}
				num = 5;
				num2 = num;
				goto default;
			}
		}
	}

	private void eval_bf()
	{
		while (true)
		{
			short num = 1;
			int num2 = num;
			while (true)
			{
				switch (num2)
				{
				case 1:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (eval_f3.Visibility == Visibility.Visible)
					{
						num = 2;
						num2 = num;
						continue;
					}
					return;
				case 2:
				{
					DoubleAnimation doubleAnimation = new DoubleAnimation
					{
						From = 1.0,
						To = 0.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.5)),
						AutoReverse = false
					};
					doubleAnimation.Completed += delegate
					{
						short num4 = -18881;
						short num5 = num4;
						num4 = -18881;
						switch (num5 == num4)
						{
						default:
						{
							num4 = 1;
							if (num4 != 0)
							{
							}
							num4 = 0;
							_ = num4;
							num4 = 0;
							if (num4 != 0)
							{
							}
							eval_f3.Visibility = Visibility.Hidden;
							ff.Visibility = Visibility.Visible;
							DoubleAnimation animation = new DoubleAnimation
							{
								From = 0.0,
								To = 1.0,
								Duration = new Duration(TimeSpan.FromSeconds(0.5)),
								AutoReverse = false
							};
							ff.BeginAnimation(UIElement.OpacityProperty, animation);
							break;
						}
						}
					};
					eval_f3.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
					num = 0;
					num2 = num;
					continue;
				}
				case 0:
					break;
				}
				break;
			}
			num = 1863;
			short num3 = num;
			num = 1863;
			switch (num3 == num)
			{
			case false:
			case true:
				continue;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 0;
			if (num == 0)
			{
			}
			return;
		}
	}

	private void eval_be()
	{
		try
		{
			SystemSleep.PreventForCurrentThread();
		}
		catch
		{
		}
		DirectoryInfo a_ = new DirectoryInfo(Directory_game + "\\");
		eval_b(a_);
		short num = 4;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 2:
				switch (0)
				{
				default:
					goto end_IL_0031;
				case 0:
					break;
				}
				goto default;
			default:
				if (Langve == "RU")
				{
					num = 1;
					num2 = num;
					break;
				}
				Norificons("UPDATE");
				eval_fs.Content = "UPDATE";
				num = 5;
				num2 = num;
				break;
			case 14:
				if (Langve == "RU")
				{
					num = 12;
					num2 = num;
					break;
				}
				MessageBoxWindow.Show(this, "The path that is specified to the game in the launcher settings does not exist!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
				return;
			case 4:
				try
				{
					num = 2;
					num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 2:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (!Directory.Exists(Directory_Launcher + "\\" + NameDirGamePatchTorrent))
							{
								num = 0;
								num2 = num;
								continue;
							}
							break;
						case 0:
							Directory.CreateDirectory(Directory_Launcher + "\\" + NameDirGamePatchTorrent);
							num = 3;
							num2 = num;
							continue;
						case 3:
							break;
						case 1:
							goto end_IL_0186;
						}
						num = 1;
						num2 = num;
						continue;
						end_IL_0186:
						break;
					}
				}
				catch (Exception ex2)
				{
					MessageBoxWindow.Show(this, "CreateDirectory : " + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				}
				num = 7;
				num2 = num;
				break;
			case 1:
				Norificons("ОБНОВЛЕНИЕ");
				eval_fs.Content = "ОБНОВЛЕНИЕ";
				num = 3;
				num2 = num;
				break;
			case 7:
				try
				{
					Loadsetting = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "DIRECTORYGAME", null);
				}
				catch (Exception ex)
				{
					MessageBoxWindow.Show(this, "Loadsetting : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				}
				num = 16;
				num2 = num;
				break;
			case 12:
				MessageBoxWindow.Show(this, "Путь который указан к игре в настройках лаунчера не существует!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
				return;
			case 6:
				num = 9;
				num2 = num;
				break;
			case 9:
				if (!Directory.Exists(Loadsetting))
				{
					num = 0;
					_ = num;
					num = 14;
					num2 = num;
				}
				else
				{
					num = 11;
					num2 = num;
				}
				break;
			case 16:
				if (Loadsetting != null)
				{
					num = 6;
					num2 = num;
					break;
				}
				goto IL_0332;
			case 3:
			case 5:
			{
				UpdateStatus = true;
				DownloadA = true;
				IfStopedUload = true;
				eval_ho.IsEnabled = false;
				eval_bf();
				Thread thread = new Thread(eval_bb);
				thread.IsBackground = true;
				thread.Start();
				return;
			}
			case 10:
				if (!(Langve == "RU"))
				{
					MessageBoxWindow.Show(this, "The final folder of the game should have a name " + NameDirGamePatch + ", change the name of the game folder to " + NameDirGamePatch + "!", name_messege);
					return;
				}
				num = 0;
				num2 = num;
				break;
			case 11:
			{
				num = 13356;
				short num3 = num;
				num = 13356;
				switch (num3 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 13;
					num2 = num;
					goto end_IL_0031;
				}
				goto IL_0332;
			}
			case 13:
				if (!(Path.GetFileName(Loadsetting) != NameDirGamePatch))
				{
					eval_fo.Value = 0.0;
					num = 15;
					num2 = num;
				}
				else
				{
					num = 8;
					num2 = num;
				}
				break;
			case 8:
				num = 1;
				if (num != 0)
				{
				}
				num = 10;
				num2 = num;
				break;
			case 15:
				try
				{
					d3.Clear();
				}
				catch
				{
				}
				num = 2;
				num2 = num;
				break;
			case 0:
				{
					MessageBoxWindow.Show(this, "Конечная папка игры должна иметь имя " + NameDirGamePatch + ",смените имя папки игры на " + NameDirGamePatch + "!", name_messege);
					return;
				}
				IL_0332:
				MessageBoxWindow.Show(this, "Go to the launcher settings and specify the path to the game! /  Перейдите в настройки лаунчера и укажите путь к игре!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
				return;
				end_IL_0031:
				break;
			}
		}
	}

	public static void CleanFilesAndDirectories(DirectoryInfo directory)
	{
		int num = default(int);
		int num3 = default(int);
		FileInfo[] files = default(FileInfo[]);
		switch (0)
		{
		default:
		{
			DirectoryInfo[] directories = default(DirectoryInfo[]);
			while (true)
			{
				switch (num)
				{
				case 6:
				{
					short num2 = 6449;
					short num4 = num2;
					num2 = 6449;
					switch (num4 == num2)
					{
					case false:
					case true:
						continue;
					}
					num2 = 0;
					if (num2 == 0)
					{
					}
					goto case 1;
				}
				case 2:
				case 5:
				{
					short num2 = 7;
					num = num2;
					continue;
				}
				case 7:
					if (num3 < directories.Length)
					{
						directories[num3].Delete(recursive: true);
						num3++;
						short num2 = 1;
						if (num2 != 0)
						{
						}
						num2 = 5;
						num = num2;
					}
					else
					{
						short num2 = 3;
						num = num2;
					}
					continue;
				case 3:
					return;
				case 1:
				{
					short num2 = 0;
					num = num2;
					continue;
				}
				case 0:
					if (num3 < files.Length)
					{
						files[num3].Delete();
						num3++;
						short num2 = 1;
						num = num2;
					}
					else
					{
						short num2 = 4;
						num = num2;
					}
					continue;
				case 4:
				{
					short num2 = 0;
					_ = num2;
					directories = directory.GetDirectories();
					num3 = 0;
					num2 = 2;
					num = num2;
					continue;
				}
				}
				break;
			}
			goto case 0;
		}
		case 0:
		{
			files = directory.GetFiles();
			num3 = 0;
			short num2 = 6;
			num = num2;
			goto default;
		}
		}
	}

	private void eval_bb()
	{
		short num = 29853;
		short num2 = num;
		num = 29853;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			if (num != 0)
			{
			}
			UpdateStatus = true;
			eval_fp.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
			{
				while (true)
				{
					short num48 = 1;
					if (num48 != 0)
					{
					}
					if (!(Langve == "RU"))
					{
						break;
					}
					num48 = 0;
					_ = num48;
					num48 = 14604;
					short num49 = num48;
					num48 = 14604;
					switch (num49 == num48)
					{
					case false:
					case true:
						break;
					default:
						num48 = 0;
						if (num48 != 0)
						{
						}
						eval_fp.Content = "Очистка клиента";
						return;
					}
				}
				eval_fp.Content = "Clearing the client";
			});
			eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
			{
				short num46 = 1;
				if (num46 != 0)
				{
				}
				num46 = 0;
				_ = num46;
				num46 = -14578;
				short num47 = num46;
				num46 = -14578;
				switch (num47 == num46)
				{
				default:
					num46 = 0;
					if (num46 != 0)
					{
					}
					eval_fo.Value = 0.0;
					break;
				}
			});
			int eval_c = 0;
			bool eval_e = false;
			bool eval_d = false;
			WebClient webClient = new WebClient();
			try
			{
				num = 1;
				if (num != 0)
				{
				}
				Uri b = new Uri(URL_DIRClearClient + this.m_eval_o + URL_DIRClearClientDIR);
				webClient.DownloadFileAsync(b, DirLocal + "\\DIRECTORY.log");
				webClient.DownloadFileCompleted += delegate
				{
					short num4 = 2946;
					short num5 = num4;
					num4 = 2946;
					switch (num5 == num4)
					{
					default:
						num4 = 0;
						_ = num4;
						break;
					case true:
						break;
					case false:
					case true:
						return;
					}
					num4 = 0;
					if (num4 != 0)
					{
					}
					num4 = 1;
					if (num4 != 0)
					{
					}
					WebClient webClient2 = new WebClient();
					try
					{
						b = new Uri(URL_ClearClient + this.m_eval_o + URL_ClearClientDIR);
						webClient2.DownloadFileAsync(b, DirLocal + "\\FILE.log");
						webClient2.DownloadFileCompleted += delegate
						{
							int num8;
							short num7;
							try
							{
								num7 = 0;
								num8 = num7;
								switch (num8)
								{
								default:
									switch (0)
									{
									default:
										while (true)
										{
											switch (num8)
											{
											case 3:
												if (dy.Length == 0L)
												{
													num7 = 5;
													num8 = num7;
												}
												else
												{
													dy = new FileInfo(DirLocal + "\\DIRECTORY.log");
													num7 = 7;
													num8 = num7;
												}
												continue;
											case 6:
												fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
												{
													short num38 = 24398;
													short num39 = num38;
													num38 = 24398;
													switch (num39 == num38)
													{
													default:
														num38 = 0;
														_ = num38;
														num38 = 1;
														if (num38 != 0)
														{
														}
														num38 = 0;
														if (num38 != 0)
														{
														}
														MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
														break;
													}
												});
												num7 = 11;
												num8 = num7;
												continue;
											case 7:
												if (dy.Length == 0L)
												{
													num7 = 14;
													num8 = num7;
												}
												else
												{
													num7 = 8;
													num8 = num7;
												}
												continue;
											case 9:
											case 11:
												num7 = 2;
												num8 = num7;
												continue;
											case 2:
												return;
											case 10:
											case 12:
												num7 = 0;
												num8 = num7;
												continue;
											case 0:
												return;
											case 14:
												UpdateStatus = false;
												num7 = 13;
												num8 = num7;
												continue;
											case 13:
												if (Langve == "RU")
												{
													num7 = 6;
													num8 = num7;
												}
												else
												{
													fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
													{
														short num40 = 20700;
														short num41 = num40;
														num40 = 20700;
														switch (num41 == num40)
														{
														default:
															num40 = 0;
															_ = num40;
															num40 = 1;
															if (num40 != 0)
															{
															}
															num40 = 0;
															if (num40 != 0)
															{
															}
															MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. DIRECTORY.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
															break;
														}
													});
													num7 = 9;
													num8 = num7;
												}
												continue;
											case 4:
												fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
												{
													short num42 = -11754;
													short num43 = num42;
													num42 = -11754;
													switch (num43 == num42)
													{
													default:
														num42 = 0;
														_ = num42;
														num42 = 1;
														if (num42 != 0)
														{
														}
														num42 = 0;
														if (num42 != 0)
														{
														}
														MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
														break;
													}
												});
												num7 = 12;
												num8 = num7;
												continue;
											case 5:
												UpdateStatus = false;
												num7 = 1;
												num8 = num7;
												continue;
											case 1:
												if (!(Langve == "RU"))
												{
													fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
													{
														short num44 = 1;
														if (num44 != 0)
														{
														}
														num44 = 1526;
														short num45 = num44;
														num44 = 1526;
														switch (num45 == num44)
														{
														default:
															num44 = 0;
															_ = num44;
															break;
														case true:
															break;
														}
														num44 = 0;
														if (num44 != 0)
														{
														}
														MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. FILE.log", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
													});
													num7 = 10;
													num8 = num7;
												}
												else
												{
													num7 = 4;
													num8 = num7;
												}
												continue;
											case 8:
												goto end_IL_0028;
											}
											goto case 0;
											continue;
											end_IL_0028:
											break;
										}
										break;
									case 0:
										dy = new FileInfo(DirLocal + "\\FILE.log");
										num7 = 3;
										num8 = num7;
										goto default;
									}
									break;
								}
							}
							catch
							{
							}
							eval_d4.Clear();
							d3.Clear();
							d6.Clear();
							num7 = 184;
							num8 = num7;
							int num10 = default(int);
							int num13 = default(int);
							int num15 = default(int);
							int num14 = default(int);
							int num22 = default(int);
							int num16 = default(int);
							string text = default(string);
							int num11 = default(int);
							int num9 = default(int);
							string text2 = default(string);
							int num12 = default(int);
							string text3 = default(string);
							int num27 = default(int);
							int num21 = default(int);
							string text4 = default(string);
							int num17 = default(int);
							int num24 = default(int);
							string text6 = default(string);
							int num23 = default(int);
							string text5 = default(string);
							int num19 = default(int);
							int num18 = default(int);
							DirectoryInfo directoryInfo4 = default(DirectoryInfo);
							int num20 = default(int);
							int num25 = default(int);
							string text7 = default(string);
							StreamReader streamReader2 = default(StreamReader);
							StreamReader streamReader = default(StreamReader);
							string fILEDELLDIR = default(string);
							while (true)
							{
								switch (num8)
								{
								case 101:
								case 174:
									num7 = 115;
									num8 = num7;
									break;
								case 115:
									switch (0)
									{
									default:
										goto end_IL_0352;
									case 0:
										break;
									}
									goto default;
								default:
									if (num10 >= d6.Count)
									{
										num7 = 20;
										num8 = num7;
									}
									else
									{
										num7 = 33;
										num8 = num7;
									}
									break;
								case 53:
									num7 = 171;
									num8 = num7;
									break;
								case 171:
									if (!eval_d2[num13].DIRDELLDIR.StartsWith(NameDirGamePatchTorrent))
									{
										num7 = 76;
										num8 = num7;
										break;
									}
									goto IL_0b99;
								case 5:
								case 8:
									num7 = 168;
									num8 = num7;
									break;
								case 168:
									if (num13 >= eval_d2.Count)
									{
										num7 = 117;
										num8 = num7;
									}
									else
									{
										num7 = 100;
										num8 = num7;
									}
									break;
								case 79:
									num7 = 18;
									num8 = num7;
									break;
								case 18:
									eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
									{
										short num28 = 31069;
										short num29 = num28;
										num28 = 31069;
										switch (num29 == num28)
										{
										default:
											num28 = 0;
											_ = num28;
											num28 = 0;
											if (num28 != 0)
											{
											}
											num28 = 1;
											if (num28 != 0)
											{
											}
											eval_fo.Value++;
											break;
										}
									});
									num7 = 89;
									num8 = num7;
									break;
								case 179:
									num7 = 24;
									num8 = num7;
									break;
								case 24:
									if (!eval_d1[num15].FILEDELLDIR.EndsWith(MainWindow.m_eval_ab + ".exe"))
									{
										num7 = 7;
										num8 = num7;
										break;
									}
									goto IL_1c22;
								case 20:
									text5 = string.Empty;
									num14 = 0;
									num7 = 26;
									num8 = num7;
									break;
								case 185:
									num7 = 3;
									num8 = num7;
									break;
								case 3:
									eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
									{
										short num34 = -24546;
										short num35 = num34;
										num34 = -24546;
										switch (num35 == num34)
										{
										default:
											num34 = 0;
											_ = num34;
											num34 = 0;
											if (num34 != 0)
											{
											}
											num34 = 1;
											if (num34 != 0)
											{
											}
											eval_fo.Value++;
											break;
										}
									});
									num7 = 43;
									num8 = num7;
									break;
								case 2:
									num22++;
									num7 = 58;
									num8 = num7;
									break;
								case 27:
									if (Directory.Exists(Directory_game + "\\" + d6[num14]))
									{
										num7 = 97;
										num8 = num7;
										break;
									}
									goto case 107;
								case 81:
									text = Files[num16].DirectoryName + "\\" + Files[num16].Name;
									text = "\\" + text.Replace(Directory_game + "\\", "");
									eval_e = false;
									num11 = 0;
									num7 = 45;
									num8 = num7;
									break;
								case 183:
									text2 = Files[num9].DirectoryName + "\\" + Files[num9].Name;
									text2 = text2.Replace(Directory_game + "\\", string.Empty);
									text2 = "\\" + text2;
									eval_e = false;
									num12 = 0;
									num7 = 56;
									num8 = num7;
									break;
								case 17:
									if (text3 == d5[num27].DIRS)
									{
										num7 = 94;
										num8 = num7;
										break;
									}
									goto case 80;
								case 138:
									eval_d1.Add(new DELLETEDFILE
									{
										FILEDELLDIR = Directory_game + "\\" + text2,
										NAMEDELLDIR = Files[num9].Name
									});
									num7 = 158;
									num8 = num7;
									break;
								case 116:
									eval_d = true;
									num7 = 165;
									num8 = num7;
									break;
								case 10:
									if (text5 == d3[num22].FILEEXIST)
									{
										num7 = 82;
										num8 = num7;
										break;
									}
									goto case 2;
								case 92:
								case 149:
									num7 = 177;
									num8 = num7;
									break;
								case 177:
									if (num27 < d5.Count)
									{
										num7 = 17;
										num8 = num7;
									}
									else
									{
										num7 = 127;
										num8 = num7;
									}
									break;
								case 159:
									num7 = 187;
									num8 = num7;
									break;
								case 107:
									num14++;
									num7 = 6;
									num8 = num7;
									break;
								case 69:
									num7 = 112;
									num8 = num7;
									break;
								case 112:
									if (!d6[num21].EndsWith(this.m_eval_ag))
									{
										num7 = 135;
										num8 = num7;
										break;
									}
									goto case 15;
								case 21:
									if (!fILEDELLDIR.EndsWith("cache"))
									{
										num7 = 23;
										num8 = num7;
										break;
									}
									goto IL_1c22;
								case 96:
								case 131:
									num7 = 62;
									num8 = num7;
									break;
								case 62:
									if (num16 >= Files.Length)
									{
										num7 = 145;
										num8 = num7;
									}
									else
									{
										num7 = 70;
										num8 = num7;
									}
									break;
								case 32:
								case 38:
									num7 = 128;
									num8 = num7;
									break;
								case 128:
									if (num9 >= Files.Length)
									{
										num7 = 121;
										num8 = num7;
									}
									else
									{
										num7 = 122;
										num8 = num7;
									}
									break;
								case 4:
									num11++;
									num7 = 46;
									num8 = num7;
									break;
								case 54:
									if (text4 != Directory_game + "\\cache")
									{
										num7 = 51;
										num8 = num7;
										break;
									}
									goto case 98;
								case 30:
									num7 = 162;
									num8 = num7;
									break;
								case 162:
									if (text3 != Directory_game + "\\" + NameDirGamePatchTorrent)
									{
										num7 = 137;
										num8 = num7;
										break;
									}
									goto case 114;
								case 114:
									num17++;
									num7 = 19;
									num8 = num7;
									break;
								case 70:
									if (Files[num16].DirectoryName != Directory_game + "\\" + this.m_eval_ag)
									{
										num7 = 185;
										num8 = num7;
										break;
									}
									goto case 102;
								case 123:
								case 140:
									num7 = 36;
									num8 = num7;
									break;
								case 36:
									if (num24 >= Diles.Length)
									{
										num7 = 108;
										num8 = num7;
									}
									else
									{
										eval_d = false;
										text6 = Diles[num24].FullName;
										num7 = 106;
										num8 = num7;
									}
									break;
								case 148:
									num7 = 161;
									num8 = num7;
									break;
								case 161:
									if (text6 != Directory_game + "\\" + NameDirGamePatchTorrent)
									{
										num7 = 169;
										num8 = num7;
										break;
									}
									goto case 40;
								case 85:
								{
									DirectoryInfo directoryInfo = new DirectoryInfo(Directory_game + "\\" + d6[num23]);
									Files = directoryInfo.GetFiles("*", SearchOption.TopDirectoryOnly);
									num16 = 0;
									num7 = 131;
									num8 = num7;
									break;
								}
								case 155:
									eval_d2.Add(new DELLETEDDIR
									{
										DIRDELLDIR = text4
									});
									num7 = 98;
									num8 = num7;
									break;
								case 91:
									text5 = Files[num19].DirectoryName + "\\" + Files[num19].Name;
									text5 = "\\" + text5.Replace(Directory_game + "\\", "");
									eval_e = false;
									num22 = 0;
									num7 = 105;
									num8 = num7;
									break;
								case 127:
									num7 = 175;
									num8 = num7;
									break;
								case 175:
									if (!eval_d)
									{
										num7 = 143;
										num8 = num7;
										break;
									}
									goto case 114;
								case 102:
									num16++;
									num7 = 96;
									num8 = num7;
									break;
								case 158:
									num9++;
									num7 = 38;
									num8 = num7;
									break;
								case 89:
									if (!Files[num19].DirectoryName.EndsWith("cache"))
									{
										num7 = 75;
										num8 = num7;
										break;
									}
									goto case 163;
								case 35:
									num18++;
									num7 = 65;
									num8 = num7;
									break;
								case 52:
									try
									{
										Directory.Delete(Directory_game + "\\" + eval_d2[num13].DIRDELLDIR);
									}
									catch
									{
									}
									goto IL_0b99;
								case 122:
									eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
									{
										short num36 = 1;
										if (num36 != 0)
										{
										}
										num36 = 4199;
										short num37 = num36;
										num36 = 4199;
										switch (num37 == num36)
										{
										default:
											num36 = 0;
											_ = num36;
											break;
										case true:
											break;
										}
										num36 = 0;
										if (num36 != 0)
										{
										}
										eval_fo.Value++;
									});
									num7 = 64;
									num8 = num7;
									break;
								case 9:
									if (text == d3[num11].FILEEXIST)
									{
										num7 = 34;
										num8 = num7;
										break;
									}
									goto case 4;
								case 120:
									num7 = 142;
									num8 = num7;
									break;
								case 37:
									if (text3 != Directory_game + "\\cache")
									{
										num7 = 30;
										num8 = num7;
										break;
									}
									goto case 114;
								case 173:
									if (Directory.Exists(Directory_game + "\\" + d6[num21]))
									{
										num7 = 69;
										num8 = num7;
										break;
									}
									goto case 15;
								case 137:
									text3 = text3.Replace(Directory_game + "\\", string.Empty);
									num27 = 0;
									num7 = 149;
									num8 = num7;
									break;
								case 43:
									if (!Files[num16].DirectoryName.EndsWith("cache"))
									{
										num7 = 60;
										num8 = num7;
										break;
									}
									goto case 102;
								case 22:
									if (GameLicense)
									{
										num7 = 154;
										num8 = num7;
									}
									else
									{
										directoryInfo4 = new DirectoryInfo(Directory_game + "\\");
										Diles = directoryInfo4.GetDirectories("*", SearchOption.AllDirectories);
										num24 = 0;
										num7 = 123;
										num8 = num7;
									}
									break;
								case 47:
									text = string.Empty;
									num23 = 0;
									num7 = 14;
									num8 = num7;
									break;
								case 1:
									if (Directory.Exists(Directory_game + "\\" + d6[num23]))
									{
										num7 = 85;
										num8 = num7;
										break;
									}
									goto case 145;
								case 13:
								case 146:
									num7 = 48;
									num8 = num7;
									break;
								case 48:
									if (num20 >= d5.Count)
									{
										num7 = 170;
										num8 = num7;
									}
									else
									{
										num7 = 152;
										num8 = num7;
									}
									break;
								case 160:
									num7 = 42;
									num8 = num7;
									break;
								case 42:
									if (!Files[num19].DirectoryName.EndsWith("fastresume"))
									{
										num7 = 41;
										num8 = num7;
										break;
									}
									goto case 163;
								case 109:
									eval_d = true;
									num7 = 35;
									num8 = num7;
									break;
								case 165:
									num20++;
									num7 = 146;
									num8 = num7;
									break;
								case 100:
									if (!eval_d2[num13].DIRDELLDIR.StartsWith("cache"))
									{
										num7 = 53;
										num8 = num7;
										break;
									}
									goto IL_0b99;
								case 170:
									num7 = 111;
									num8 = num7;
									break;
								case 111:
									if (!eval_d)
									{
										num7 = 155;
										num8 = num7;
										break;
									}
									goto case 98;
								case 83:
									num7 = 86;
									num8 = num7;
									break;
								case 86:
									if (!Files[num16].DirectoryName.EndsWith("fastresume"))
									{
										num7 = 182;
										num8 = num7;
										break;
									}
									goto case 102;
								case 150:
									num7 = 103;
									num8 = num7;
									break;
								case 103:
									if (!eval_e)
									{
										num7 = 138;
										num8 = num7;
										break;
									}
									goto case 158;
								case 119:
									num21 = 0;
									num7 = 55;
									num8 = num7;
									break;
								case 90:
									num7 = 186;
									num8 = num7;
									break;
								case 186:
									if (!Files[num9].DirectoryName.EndsWith("metadata"))
									{
										num7 = 183;
										num8 = num7;
										break;
									}
									goto case 158;
								case 77:
								{
									DirectoryInfo directoryInfo5 = new DirectoryInfo(Directory_game + "\\" + d6[num10]);
									Diles = directoryInfo5.GetDirectories("*", SearchOption.TopDirectoryOnly);
									num17 = 0;
									num7 = 59;
									num8 = num7;
									break;
								}
								case 16:
									if (text2 == d3[num12].FILEEXIST)
									{
										num7 = 29;
										num8 = num7;
										break;
									}
									goto case 71;
								case 29:
									eval_e = true;
									num7 = 71;
									num8 = num7;
									break;
								case 57:
								case 141:
									num7 = 124;
									num8 = num7;
									break;
								case 124:
									if (num25 < Diles.Length)
									{
										eval_d = false;
										text4 = Diles[num25].FullName;
										num7 = 54;
										num8 = num7;
									}
									else
									{
										num7 = 15;
										num8 = num7;
									}
									break;
								case 60:
									num7 = 99;
									num8 = num7;
									break;
								case 99:
									if (!Files[num16].DirectoryName.EndsWith(NameDirGamePatchTorrent))
									{
										num7 = 83;
										num8 = num7;
										break;
									}
									goto case 102;
								case 40:
									num24++;
									num7 = 140;
									num8 = num7;
									break;
								case 133:
									num7 = 28;
									num8 = num7;
									break;
								case 28:
									if (!fILEDELLDIR.EndsWith("cache\\fastresume"))
									{
										num7 = 157;
										num8 = num7;
										break;
									}
									goto IL_1c22;
								case 117:
									eval_ba();
									num7 = 153;
									num8 = num7;
									break;
								case 153:
									return;
								case 129:
									num7 = 118;
									num8 = num7;
									break;
								case 118:
									if (!d6[num10].EndsWith(this.m_eval_ag))
									{
										num7 = 77;
										num8 = num7;
										break;
									}
									goto case 49;
								case 71:
									num12++;
									num7 = 61;
									num8 = num7;
									break;
								case 58:
								case 105:
									num7 = 73;
									num8 = num7;
									break;
								case 73:
									if (num22 < d3.Count)
									{
										num7 = 10;
										num8 = num7;
									}
									else
									{
										num7 = 50;
										num8 = num7;
									}
									break;
								case 49:
									num7 = 0;
									_ = num7;
									num10++;
									num7 = 101;
									num8 = num7;
									break;
								case 144:
									try
									{
										File.Delete(eval_d1[num15].FILEDELLDIR);
									}
									catch
									{
									}
									goto IL_1c22;
								case 106:
									if (text6 != Directory_game + "\\cache")
									{
										num7 = 148;
										num8 = num7;
										break;
									}
									goto case 40;
								case 108:
									text2 = string.Empty;
									Files = directoryInfo4.GetFiles("*", SearchOption.AllDirectories);
									num9 = 0;
									num7 = 32;
									num8 = num7;
									break;
								case 82:
									eval_e = true;
									num7 = 2;
									num8 = num7;
									break;
								case 184:
									try
									{
										switch (0)
										{
										default:
											while (true)
											{
												switch (num8)
												{
												case 1:
													try
													{
														num7 = 3;
														num8 = num7;
														while (true)
														{
															switch (num8)
															{
															case 3:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															case 2:
																if (!string.IsNullOrEmpty(text7))
																{
																	num7 = 6;
																	num8 = num7;
																	continue;
																}
																goto default;
															case 6:
																d3.Add(new FILEINFO
																{
																	FILEEXIST = text7.Split('|')[0],
																	FILENEWMD5 = text7.Split('|')[1]
																});
																eval_c++;
																num7 = 5;
																num8 = num7;
																continue;
															default:
																num7 = 4;
																num8 = num7;
																continue;
															case 4:
																if ((text7 = streamReader2.ReadLine()) != null)
																{
																	num7 = 2;
																	num8 = num7;
																}
																else
																{
																	num7 = 0;
																	num8 = num7;
																}
																continue;
															case 0:
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																break;
															}
															break;
														}
													}
													finally
													{
														num7 = 2;
														num8 = num7;
														while (true)
														{
															switch (num8)
															{
															case 2:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															default:
																if (streamReader2 != null)
																{
																	num7 = 1;
																	num8 = num7;
																	continue;
																}
																break;
															case 1:
																((IDisposable)streamReader2).Dispose();
																num7 = 0;
																num8 = num7;
																continue;
															case 0:
																break;
															}
															break;
														}
													}
													goto IL_20ae;
												case 2:
												{
													try
													{
														num7 = 3;
														num8 = num7;
														while (true)
														{
															switch (num8)
															{
															case 3:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															case 2:
																if (!string.IsNullOrEmpty(text7))
																{
																	num7 = 6;
																	num8 = num7;
																	continue;
																}
																goto default;
															default:
																num7 = 5;
																num8 = num7;
																continue;
															case 5:
																if ((text7 = streamReader.ReadLine()) != null)
																{
																	num7 = 2;
																	num8 = num7;
																}
																else
																{
																	num7 = 4;
																	num8 = num7;
																}
																continue;
															case 6:
																d6.Add(text7);
																d5.Add(new DIRINFO
																{
																	DIRS = text7
																});
																num7 = 0;
																num8 = num7;
																continue;
															case 4:
																num7 = 1;
																num8 = num7;
																continue;
															case 1:
																break;
															}
															break;
														}
													}
													finally
													{
														num7 = 2;
														num8 = num7;
														while (true)
														{
															switch (num8)
															{
															case 2:
																switch (0)
																{
																default:
																	continue;
																case 0:
																	break;
																}
																goto default;
															default:
																if (streamReader != null)
																{
																	num7 = 1;
																	num8 = num7;
																	continue;
																}
																break;
															case 1:
																((IDisposable)streamReader).Dispose();
																num7 = 0;
																num8 = num7;
																continue;
															case 0:
																break;
															}
															break;
														}
													}
													text7 = string.Empty;
													streamReader2 = new StreamReader(DirLocal + "\\FILE.log");
													num7 = 3682;
													short num26 = num7;
													num7 = 3682;
													switch (num26 == num7)
													{
													default:
														num7 = 0;
														if (num7 != 0)
														{
														}
														num7 = 1;
														num8 = num7;
														continue;
													case false:
													case true:
														break;
													}
													goto IL_20ae;
												}
												case 0:
													goto end_IL_1c9a;
													IL_20ae:
													eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
													{
														short num32 = -2589;
														short num33 = num32;
														num32 = -2589;
														switch (num33 == num32)
														{
														default:
															num32 = 0;
															_ = num32;
															num32 = 1;
															if (num32 != 0)
															{
															}
															num32 = 0;
															if (num32 != 0)
															{
															}
															eval_fo.Maximum = eval_c + 1;
															break;
														}
													});
													num7 = 0;
													num8 = num7;
													continue;
												}
												goto case 0;
												continue;
												end_IL_1c9a:
												break;
											}
											break;
										case 0:
											text7 = string.Empty;
											streamReader = new StreamReader(DirLocal + "\\DIRECTORY.log");
											num7 = 2;
											num8 = num7;
											goto default;
										}
									}
									catch (Exception ex)
									{
										Exception ex2 = ex;
										Exception a = ex2;
										UpdateStatus = false;
										fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
										{
											short num30 = 1;
											if (num30 != 0)
											{
											}
											num30 = 7801;
											short num31 = num30;
											num30 = 7801;
											switch (num31 == num30)
											{
											default:
												num30 = 0;
												_ = num30;
												break;
											case true:
												break;
											}
											num30 = 0;
											if (num30 != 0)
											{
											}
											MessageBoxWindow.Show(this, "[ReadFileUpdate] : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										});
										return;
									}
									num7 = 25;
									num8 = num7;
									break;
								case 34:
									eval_e = true;
									num7 = 4;
									num8 = num7;
									break;
								case 7:
									num7 = 67;
									num8 = num7;
									break;
								case 67:
									if (!eval_d1[num15].FILEDELLDIR.EndsWith("client.ini"))
									{
										num7 = 144;
										num8 = num7;
										break;
									}
									goto IL_1c22;
								case 50:
									num7 = 63;
									num8 = num7;
									break;
								case 63:
									if (!eval_e)
									{
										num7 = 68;
										num8 = num7;
										break;
									}
									goto case 163;
								case 145:
									num23++;
									num7 = 72;
									num8 = num7;
									break;
								case 41:
									num7 = 110;
									num8 = num7;
									break;
								case 110:
									if (!Files[num19].DirectoryName.EndsWith("metadata"))
									{
										num7 = 91;
										num8 = num7;
										break;
									}
									goto case 163;
								case 64:
									if (!Files[num9].DirectoryName.EndsWith("cache"))
									{
										num7 = 78;
										num8 = num7;
										break;
									}
									goto case 158;
								case 163:
									num19++;
									num7 = 74;
									num8 = num7;
									break;
								case 15:
									num21++;
									num7 = 31;
									num8 = num7;
									break;
								case 14:
								case 72:
									num7 = 104;
									num8 = num7;
									break;
								case 104:
									if (num23 < d6.Count)
									{
										num7 = 1;
										num8 = num7;
									}
									else
									{
										num7 = 120;
										num8 = num7;
									}
									break;
								case 51:
									num7 = 167;
									num8 = num7;
									break;
								case 167:
									if (text4 != Directory_game + "\\" + NameDirGamePatchTorrent)
									{
										num7 = 84;
										num8 = num7;
										break;
									}
									goto case 98;
								case 97:
								{
									DirectoryInfo directoryInfo3 = new DirectoryInfo(Directory_game + "\\" + d6[num14]);
									Files = directoryInfo3.GetFiles("*", SearchOption.TopDirectoryOnly);
									num19 = 0;
									num7 = 12;
									num8 = num7;
									break;
								}
								case 136:
									num13 = 0;
									num7 = 8;
									num8 = num7;
									break;
								case 88:
									num7 = 87;
									num8 = num7;
									break;
								case 87:
									if (!eval_d)
									{
										num7 = 113;
										num8 = num7;
										break;
									}
									goto case 40;
								case 68:
									eval_d1.Add(new DELLETEDFILE
									{
										FILEDELLDIR = Directory_game + "\\" + text5,
										NAMEDELLDIR = Files[num19].Name
									});
									num7 = 163;
									num8 = num7;
									break;
								case 182:
									num7 = 130;
									num8 = num7;
									break;
								case 130:
									if (!Files[num16].DirectoryName.EndsWith("metadata"))
									{
										num7 = 81;
										num8 = num7;
										break;
									}
									goto case 102;
								case 143:
									eval_d2.Add(new DELLETEDDIR
									{
										DIRDELLDIR = text3
									});
									num7 = 114;
									num8 = num7;
									break;
								case 134:
									if (text6 == d5[num18].DIRS)
									{
										num7 = 109;
										num8 = num7;
										break;
									}
									goto case 35;
								case 45:
								case 46:
									num7 = 139;
									num8 = num7;
									break;
								case 139:
									if (num11 < d3.Count)
									{
										num7 = 9;
										num8 = num7;
									}
									else
									{
										num7 = 176;
										num8 = num7;
									}
									break;
								case 80:
									num27++;
									num7 = 92;
									num8 = num7;
									break;
								case 75:
									num7 = 66;
									num8 = num7;
									break;
								case 66:
									if (!Files[num19].DirectoryName.EndsWith(NameDirGamePatchTorrent))
									{
										num7 = 160;
										num8 = num7;
										break;
									}
									goto case 163;
								case 135:
								{
									DirectoryInfo directoryInfo2 = new DirectoryInfo(Directory_game + "\\" + d6[num21]);
									Diles = directoryInfo2.GetDirectories("*", SearchOption.TopDirectoryOnly);
									num25 = 0;
									num7 = 141;
									num8 = num7;
									break;
								}
								case 56:
								case 61:
									num7 = 178;
									num8 = num7;
									break;
								case 178:
									if (num12 < d3.Count)
									{
										num7 = 16;
										num8 = num7;
									}
									else
									{
										num7 = 150;
										num8 = num7;
									}
									break;
								case 6:
								case 26:
									num7 = 44;
									num8 = num7;
									break;
								case 44:
									if (num14 < d6.Count)
									{
										num7 = 27;
										num8 = num7;
									}
									else
									{
										num7 = 159;
										num8 = num7;
									}
									break;
								case 176:
									num7 = 164;
									num8 = num7;
									break;
								case 164:
									if (!eval_e)
									{
										num7 = 180;
										num8 = num7;
										break;
									}
									goto case 102;
								case 180:
									num7 = 1;
									if (num7 != 0)
									{
									}
									eval_d1.Add(new DELLETEDFILE
									{
										FILEDELLDIR = Directory_game + "\\" + text,
										NAMEDELLDIR = Files[num16].Name
									});
									num7 = 102;
									num8 = num7;
									break;
								case 113:
									eval_d2.Add(new DELLETEDDIR
									{
										DIRDELLDIR = text6
									});
									num7 = 40;
									num8 = num7;
									break;
								case 33:
									if (Directory.Exists(Directory_game + "\\" + d6[num10]))
									{
										num7 = 129;
										num8 = num7;
										break;
									}
									goto case 49;
								case 157:
									num7 = 172;
									num8 = num7;
									break;
								case 172:
									if (!fILEDELLDIR.EndsWith("cache\\metadata"))
									{
										num7 = 179;
										num8 = num7;
										break;
									}
									goto IL_1c22;
								case 84:
									text4 = text4.Replace(Directory_game + "\\", string.Empty);
									num20 = 0;
									num7 = 13;
									num8 = num7;
									break;
								case 169:
									text6 = text6.Replace(Directory_game + "\\", string.Empty);
									num18 = 0;
									num7 = 166;
									num8 = num7;
									break;
								case 39:
									if (Files[num19].DirectoryName != Directory_game + "\\" + this.m_eval_ag)
									{
										num7 = 79;
										num8 = num7;
										break;
									}
									goto case 163;
								case 31:
								case 55:
									num7 = 132;
									num8 = num7;
									break;
								case 132:
									if (num21 < d6.Count)
									{
										num7 = 173;
										num8 = num7;
									}
									else
									{
										num7 = 47;
										num8 = num7;
									}
									break;
								case 65:
								case 166:
									num7 = 95;
									num8 = num7;
									break;
								case 95:
									if (num18 < d5.Count)
									{
										num7 = 134;
										num8 = num7;
									}
									else
									{
										num7 = 88;
										num8 = num7;
									}
									break;
								case 121:
								case 142:
								case 187:
									num15 = 0;
									num7 = 151;
									num8 = num7;
									break;
								case 12:
								case 74:
									num7 = 0;
									num8 = num7;
									break;
								case 0:
									if (num19 < Files.Length)
									{
										num7 = 39;
										num8 = num7;
									}
									else
									{
										num7 = 107;
										num8 = num7;
									}
									break;
								case 152:
									if (text4 == d5[num20].DIRS)
									{
										num7 = 116;
										num8 = num7;
										break;
									}
									goto case 165;
								case 23:
									num7 = 156;
									num8 = num7;
									break;
								case 156:
									if (!fILEDELLDIR.EndsWith(NameDirGamePatchTorrent))
									{
										num7 = 133;
										num8 = num7;
										break;
									}
									goto IL_1c22;
								case 19:
								case 59:
									num7 = 126;
									num8 = num7;
									break;
								case 126:
									if (num17 < Diles.Length)
									{
										eval_d = false;
										text3 = Diles[num17].FullName;
										num7 = 37;
										num8 = num7;
									}
									else
									{
										num7 = 49;
										num8 = num7;
									}
									break;
								case 151:
								case 181:
									num7 = 93;
									num8 = num7;
									break;
								case 93:
									if (num15 < eval_d1.Count)
									{
										fILEDELLDIR = eval_d1[num15].FILEDELLDIR;
										fILEDELLDIR = fILEDELLDIR.Replace(eval_d1[num15].NAMEDELLDIR, "");
										num7 = 21;
										num8 = num7;
									}
									else
									{
										num7 = 136;
										num8 = num7;
									}
									break;
								case 98:
									num25++;
									num7 = 57;
									num8 = num7;
									break;
								case 76:
									try
									{
										CleanFilesAndDirectories(new DirectoryInfo(Directory_game + "\\" + eval_d2[num13].DIRDELLDIR));
									}
									catch
									{
									}
									num7 = 52;
									num8 = num7;
									break;
								case 25:
									if (this.m_eval_b6)
									{
										num7 = 22;
										num8 = num7;
									}
									else
									{
										num7 = 119;
										num8 = num7;
									}
									break;
								case 78:
									num7 = 125;
									num8 = num7;
									break;
								case 125:
									if (!Files[num9].DirectoryName.EndsWith(NameDirGamePatchTorrent))
									{
										num7 = 11;
										num8 = num7;
										break;
									}
									goto case 158;
								case 154:
									num10 = 0;
									num7 = 174;
									num8 = num7;
									break;
								case 11:
									num7 = 147;
									num8 = num7;
									break;
								case 147:
									if (!Files[num9].DirectoryName.EndsWith("fastresume"))
									{
										num7 = 90;
										num8 = num7;
										break;
									}
									goto case 158;
								case 94:
									{
										eval_d = true;
										num7 = 80;
										num8 = num7;
										break;
									}
									IL_1c22:
									num15++;
									num7 = 181;
									num8 = num7;
									break;
									IL_0b99:
									num13++;
									num7 = 5;
									num8 = num7;
									break;
									end_IL_0352:
									break;
								}
							}
						};
					}
					finally
					{
						num4 = 0;
						int num6 = num4;
						while (true)
						{
							switch (num6)
							{
							case 0:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (webClient2 != null)
								{
									num4 = 1;
									num6 = num4;
									continue;
								}
								break;
							case 1:
								((IDisposable)webClient2).Dispose();
								num4 = 2;
								num6 = num4;
								continue;
							case 2:
								break;
							}
							break;
						}
					}
				};
			}
			finally
			{
				num = 1;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 1:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (webClient != null)
						{
							num = 2;
							num3 = num;
							continue;
						}
						break;
					case 2:
						((IDisposable)webClient).Dispose();
						num = 0;
						num3 = num;
						continue;
					case 0:
						break;
					}
					break;
				}
			}
			break;
		}
		case false:
		case true:
			break;
		}
		num = 0;
		_ = num;
	}

	private void eval_ba()
	{
		short num;
		try
		{
			num = 0;
			switch (num)
			{
			default:
			{
				num = 10;
				int num2 = num;
				int num3 = default(int);
				int num4 = default(int);
				bool flag = default(bool);
				string text = default(string);
				StreamReader streamReader = default(StreamReader);
				string text2 = default(string);
				StreamReader streamReader2 = default(StreamReader);
				while (true)
				{
					switch (num2)
					{
					case 10:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (!DownloadMods)
						{
							num = 2;
							num2 = num;
							continue;
						}
						goto IL_0181;
					case 8:
						num = 1;
						num2 = num;
						continue;
					case 1:
					{
						num = -31080;
						short num5 = num;
						num = -31080;
						switch (num5 == num)
						{
						case false:
						case true:
							goto IL_0606;
						}
						num = 0;
						if (num != 0)
						{
						}
						if (eval_d4[num3].FILEMD5OLD != d3[num4].FILENEWMD5)
						{
							num = 23;
							num2 = num;
							continue;
						}
						goto IL_0496;
					}
					case 0:
						if (File.Exists(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log"))
						{
							num = 4;
							num2 = num;
							continue;
						}
						LoadResume = false;
						eval_a9();
						num = 24;
						num2 = num;
						continue;
					case 18:
						num3++;
						num = 22;
						num2 = num;
						continue;
					case 21:
						try
						{
							num = 1;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 1:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								case 4:
									flag = true;
									num = 9;
									num2 = num;
									continue;
								case 7:
									num = 8;
									num2 = num;
									continue;
								case 8:
									if (text.Split('|')[0].Replace("\\", string.Empty) == this.m_eval_x + ".exe")
									{
										num = 4;
										num2 = num;
										continue;
									}
									goto default;
								default:
									num = 5;
									num2 = num;
									continue;
								case 5:
									if ((text = streamReader.ReadLine()) == null)
									{
										num = 0;
										num2 = num;
									}
									else
									{
										num = 10;
										num2 = num;
									}
									continue;
								case 10:
									if (!string.IsNullOrEmpty(text))
									{
										num = 7;
										num2 = num;
										continue;
									}
									goto default;
								case 0:
									streamReader.Close();
									num = 6;
									num2 = num;
									continue;
								case 6:
									if (!flag)
									{
										num = 2;
										num2 = num;
										continue;
									}
									break;
								case 2:
									try
									{
										File.Delete(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
									}
									catch (Exception ex3)
									{
										if (Langve == "RU")
										{
											MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [DeletedFile 2]" + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										else
										{
											MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [DeletedFile 2]" + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										}
										goto end_IL_003f;
									}
									break;
								case 3:
									goto end_IL_021c;
								}
								num = 3;
								num2 = num;
								continue;
								end_IL_021c:
								break;
							}
						}
						finally
						{
							num = 1;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 1:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (streamReader != null)
									{
										num = 2;
										num2 = num;
										continue;
									}
									break;
								case 2:
									((IDisposable)streamReader).Dispose();
									num = 0;
									num2 = num;
									continue;
								case 0:
									break;
								}
								break;
							}
						}
						goto IL_0181;
					case 17:
						eval_d7.Start();
						num = 20;
						num2 = num;
						continue;
					case 14:
						if (eval_d4[num3].FILEOLD == d3[num4].FILEEXIST)
						{
							num = 8;
							num2 = num;
							continue;
						}
						goto IL_0496;
					case 4:
						text2 = string.Empty;
						LoadResume = true;
						streamReader2 = new StreamReader(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
						num = 5;
						num2 = num;
						continue;
					case 9:
					case 22:
						num = 7;
						num2 = num;
						continue;
					case 7:
						if (num3 >= eval_d4.Count)
						{
							num = 17;
							num2 = num;
						}
						else
						{
							num4 = 0;
							num = 11;
							num2 = num;
						}
						continue;
					case 2:
						goto IL_0606;
					case 13:
						if (File.Exists(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log"))
						{
							num = 15;
							num2 = num;
							continue;
						}
						goto IL_0181;
					case 5:
						try
						{
							num = 3;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 3:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								case 1:
									if (!string.IsNullOrEmpty(text2))
									{
										num = 6;
										num2 = num;
										continue;
									}
									goto default;
								default:
									num = 5;
									num2 = num;
									continue;
								case 5:
									if ((text2 = streamReader2.ReadLine()) != null)
									{
										num = 1;
										num2 = num;
									}
									else
									{
										num = 2;
										num2 = num;
									}
									continue;
								case 6:
									eval_d4.Add(new FILEINFOOLD
									{
										FILEOLD = text2.Split('|')[0],
										FILEMD5OLD = text2.Split('|')[1]
									});
									num = 4;
									num2 = num;
									continue;
								case 2:
									streamReader2.Close();
									num = 0;
									num2 = num;
									continue;
								case 0:
									break;
								}
								break;
							}
						}
						finally
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (streamReader2 != null)
									{
										num = 2;
										num2 = num;
										continue;
									}
									break;
								case 2:
									((IDisposable)streamReader2).Dispose();
									num = 1;
									num2 = num;
									continue;
								case 1:
									break;
								}
								break;
							}
						}
						num3 = 0;
						num = 9;
						num2 = num;
						continue;
					case 11:
					case 16:
						num = 3;
						num2 = num;
						continue;
					case 3:
						if (num4 < d3.Count)
						{
							num = 14;
							num2 = num;
						}
						else
						{
							num = 18;
							num2 = num;
						}
						continue;
					case 6:
						try
						{
							File.Delete(Directory_game + eval_d4[num3].FILEOLD);
						}
						catch (Exception ex)
						{
							Exception ex2 = ex;
							Exception a2 = ex2;
							if (!(Langve == "RU"))
							{
								fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
								{
									short num12 = 0;
									_ = num12;
									num12 = 1;
									if (num12 != 0)
									{
									}
									num12 = 3784;
									short num13 = num12;
									num12 = 3784;
									switch (num13 == num12)
									{
									default:
										num12 = 0;
										if (num12 != 0)
										{
										}
										MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! " + a2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										break;
									}
								});
								break;
							}
							fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num10 = 1;
								if (num10 != 0)
								{
								}
								num10 = 10377;
								short num11 = num10;
								num10 = 10377;
								switch (num11 == num10)
								{
								default:
									num10 = 0;
									_ = num10;
									break;
								case true:
									break;
								}
								num10 = 0;
								if (num10 != 0)
								{
								}
								MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! " + a2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							});
							break;
						}
						goto IL_0496;
					case 15:
						flag = false;
						text = string.Empty;
						streamReader = new StreamReader(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
						num = 21;
						num2 = num;
						continue;
					case 23:
						num = 12;
						num2 = num;
						continue;
					case 12:
						if (File.Exists(Directory_game + eval_d4[num3].FILEOLD))
						{
							num = 6;
							num2 = num;
							continue;
						}
						goto IL_0496;
					case 20:
					case 24:
						num = 19;
						num2 = num;
						continue;
					case 19:
						break;
						IL_0496:
						num4++;
						num = 16;
						num2 = num;
						continue;
						IL_0606:
						num = 13;
						num2 = num;
						continue;
						IL_0181:
						num = 0;
						num2 = num;
						continue;
						end_IL_003f:
						break;
					}
					break;
				}
				break;
			}
			}
		}
		catch (Exception ex4)
		{
			Exception ex2 = ex4;
			Exception a = ex2;
			if (Langve == "RU")
			{
				fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
				{
					short num8 = 0;
					_ = num8;
					num8 = 1;
					if (num8 != 0)
					{
					}
					num8 = 32248;
					short num9 = num8;
					num8 = 32248;
					switch (num9 == num8)
					{
					default:
						num8 = 0;
						if (num8 != 0)
						{
						}
						MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! LoadFileResume : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						break;
					}
				});
			}
			else
			{
				fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
				{
					short num6 = 0;
					_ = num6;
					num6 = 7346;
					short num7 = num6;
					num6 = 7346;
					switch (num7 == num6)
					{
					default:
						num6 = 0;
						if (num6 != 0)
						{
						}
						num6 = 1;
						if (num6 != 0)
						{
						}
						MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! LoadFileResume : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						break;
					}
				});
			}
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	private void eval_a9()
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			int num6 = default(int);
			int num5 = default(int);
			switch (0)
			{
			default:
			{
				int num3 = default(int);
				string text = default(string);
				int num7 = default(int);
				byte[] array = default(byte[]);
				while (true)
				{
					switch (num2)
					{
					case 38:
						try
						{
							Directory.Delete(Directory_game + "\\" + d5[num3].DIRS);
						}
						catch
						{
						}
						goto IL_0c3d;
					case 23:
						if (Directory.Exists(Directory_game + "\\" + d5[num3].DIRS))
						{
							num = 28;
							num2 = num;
							continue;
						}
						goto IL_0c3d;
					case 10:
						num = 6;
						num2 = num;
						continue;
					case 6:
						if (!d3[num6].FILEEXIST.EndsWith(MainWindow.m_eval_ab + ".exe"))
						{
							num = 26;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 13:
						num = 9;
						num2 = num;
						continue;
					case 9:
						num = 0;
						_ = num;
						if (!d3[num6].FILEEXIST.EndsWith("inventory.bin"))
						{
							num = 5;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 27:
						num3 = 0;
						num = 32;
						num2 = num;
						continue;
					case 26:
						num = 36;
						num2 = num;
						continue;
					case 36:
						if (!d3[num6].FILEEXIST.EndsWith("client.ini"))
						{
							num = 8;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 21:
						try
						{
							Directory.Delete(Directory_game + "\\" + d5[num3].DIRS);
						}
						catch
						{
						}
						goto IL_02ae;
					case 2:
						eval_d7.Start();
						num = 1;
						if (num != 0)
						{
						}
						num = 35;
						num2 = num;
						continue;
					case 35:
						return;
					case 4:
					{
						num = -24278;
						short num4 = num;
						num = -24278;
						switch (num4 == num)
						{
						default:
							num = 0;
							if (num != 0)
							{
							}
							num5++;
							num = 22;
							num2 = num;
							continue;
						case false:
						case true:
							break;
						}
						goto case 11;
					}
					case 16:
						if (!d3[num6].FILEEXIST.EndsWith("avatar.png"))
						{
							num = 15;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 43:
						num = 20;
						num2 = num;
						continue;
					case 20:
						if (!d3[num6].FILEEXIST.EndsWith("ALI213.ini"))
						{
							num = 10;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 5:
						num = 30;
						num2 = num;
						continue;
					case 30:
						if (!d3[num6].FILEEXIST.EndsWith("item_schema.bin"))
						{
							num = 43;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 31:
						text = string.Empty;
						num = 11;
						num2 = num;
						continue;
					case 11:
						if (File.Exists(Directory_game + d3[num6].FILEEXIST))
						{
							num = 24;
							num2 = num;
							continue;
						}
						goto IL_095c;
					case 37:
						num = 1;
						num2 = num;
						continue;
					case 1:
						if (Directory.GetDirectories(Directory_game + "\\" + d5[num3].DIRS).Length + Directory.GetFiles(Directory_game + "\\" + d5[num3].DIRS).Length == 0)
						{
							num = 42;
							num2 = num;
							continue;
						}
						goto IL_02ae;
					case 22:
						try
						{
							num = 0;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 0:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (File.Exists(Directory_game + d3[num6].FILEEXIST))
									{
										num = 2;
										num2 = num;
										continue;
									}
									break;
								case 2:
									try
									{
										File.Delete(Directory_game + d3[num6].FILEEXIST);
									}
									catch
									{
									}
									break;
								case 1:
									goto end_IL_0685;
								}
								num = 1;
								num2 = num;
								continue;
								end_IL_0685:
								break;
							}
						}
						catch
						{
						}
						goto IL_0b65;
					case 24:
						try
						{
							FileStream fileStream = File.Open(Directory_game + d3[num6].FILEEXIST, FileMode.Open, FileAccess.ReadWrite);
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 0:
										case 1:
											num = 4;
											num2 = num;
											continue;
										case 4:
											if (num7 < array.Length)
											{
												byte b = array[num7];
												text += b.ToString("x2").ToLower();
												num7++;
												num = 0;
												num2 = num;
											}
											else
											{
												num = 2;
												num2 = num;
											}
											continue;
										case 2:
											num = 3;
											num2 = num;
											continue;
										case 3:
											goto end_IL_074c;
										}
										goto case 0;
										continue;
										end_IL_074c:
										break;
									}
									break;
								case 0:
									array = dx.ComputeHash(fileStream);
									num7 = 0;
									num = 1;
									num2 = num;
									goto default;
								}
							}
							finally
							{
								num = 0;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 0:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (fileStream != null)
										{
											num = 2;
											num2 = num;
											continue;
										}
										break;
									case 2:
										((IDisposable)fileStream).Dispose();
										num = 1;
										num2 = num;
										continue;
									case 1:
										break;
									}
									break;
								}
							}
						}
						catch (Exception ex)
						{
							Exception ex2 = ex;
							Exception a = ex2;
							fa.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num12 = 0;
								_ = num12;
								num12 = 30602;
								short num13 = num12;
								num12 = 30602;
								switch (num13 == num12)
								{
								default:
									num12 = 1;
									if (num12 != 0)
									{
									}
									num12 = 0;
									if (num12 != 0)
									{
									}
									MessageBoxWindow.Show(this, "StatusFile : " + a.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
									break;
								}
							});
							return;
						}
						goto IL_095c;
					case 8:
						num = 25;
						num2 = num;
						continue;
					case 25:
						if (!d3[num6].FILEEXIST.EndsWith("client.bin"))
						{
							num = 31;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 42:
						try
						{
							CleanFilesAndDirectories(new DirectoryInfo(Directory_game + "\\" + d5[num3].DIRS));
						}
						catch
						{
						}
						num = 21;
						num2 = num;
						continue;
					case 3:
						if (d3[num6].FILENEWMD5 != text)
						{
							num = 4;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 39:
						num = 19;
						num2 = num;
						continue;
					case 19:
						if (!d3[num6].FILEEXIST.EndsWith("items.bin"))
						{
							num = 13;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 14:
						try
						{
							CleanFilesAndDirectories(new DirectoryInfo(Directory_game + "\\" + d5[num3].DIRS));
						}
						catch
						{
						}
						num = 38;
						num2 = num;
						continue;
					case 15:
						num = 29;
						num2 = num;
						continue;
					case 29:
						if (!d3[num6].FILEEXIST.EndsWith("SmartSteamEmu.log"))
						{
							num = 0;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 28:
						num = 41;
						num2 = num;
						continue;
					case 41:
						if (Directory.GetDirectories(Directory_game + "\\" + d5[num3].DIRS).Length + Directory.GetFiles(Directory_game + "\\" + d5[num3].DIRS).Length == 0)
						{
							num = 14;
							num2 = num;
							continue;
						}
						goto IL_0c3d;
					case 12:
					case 17:
						num = 34;
						num2 = num;
						continue;
					case 34:
						if (num6 < d3.Count)
						{
							eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num14;
								try
								{
									num14 = 26310;
									short num15 = num14;
									num14 = 26310;
									switch (num15 == num14)
									{
									default:
										num14 = 0;
										if (num14 != 0)
										{
										}
										eval_fo.Value++;
										break;
									}
								}
								catch
								{
								}
								num14 = 0;
								_ = num14;
								num14 = 1;
								if (num14 == 0)
								{
								}
							});
							num = 16;
							num2 = num;
						}
						else
						{
							num = 27;
							num2 = num;
						}
						continue;
					case 32:
					case 40:
						num = 18;
						num2 = num;
						continue;
					case 18:
						if (num3 < d5.Count)
						{
							num = 23;
							num2 = num;
						}
						else
						{
							num = 2;
							num2 = num;
						}
						continue;
					case 0:
						num = 7;
						num2 = num;
						continue;
					case 7:
						if (!d3[num6].FILEEXIST.EndsWith("DayZSetting.xml"))
						{
							num = 39;
							num2 = num;
							continue;
						}
						goto IL_0b65;
					case 33:
						{
							if (Directory.Exists(Directory_game + "\\" + d5[num3].DIRS))
							{
								num = 37;
								num2 = num;
								continue;
							}
							goto IL_02ae;
						}
						IL_0b65:
						num6++;
						num = 17;
						num2 = num;
						continue;
						IL_095c:
						num = 3;
						num2 = num;
						continue;
						IL_02ae:
						num3++;
						num = 40;
						num2 = num;
						continue;
						IL_0c3d:
						num = 33;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
				{
					if (Langve == "RU")
					{
						while (true)
						{
							short num10 = 0;
							_ = num10;
							num10 = 1;
							if (num10 != 0)
							{
							}
							num10 = -26362;
							short num11 = num10;
							num10 = -26362;
							switch (num11 == num10)
							{
							case false:
							case true:
								break;
							default:
								num10 = 0;
								if (num10 != 0)
								{
								}
								eval_fp.Content = "Проверка файлов на подлинность... Это может занять некоторое время.";
								return;
							}
						}
					}
					eval_fp.Content = "Checking files for authenticity ... This may take a while.";
				});
				eval_fo.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
				{
					short num8 = -6637;
					short num9 = num8;
					num8 = -6637;
					switch (num9 == num8)
					{
					default:
						num8 = 0;
						if (num8 != 0)
						{
						}
						num8 = 0;
						_ = num8;
						num8 = 1;
						if (num8 != 0)
						{
						}
						eval_fo.Value = 0.0;
						break;
					}
				});
				num5 = 0;
				num6 = 0;
				num = 12;
				num2 = num;
				goto default;
			}
		}
		}
	}

	private void eval_a2(object A_0, EventArgs A_1)
	{
		short num = -25669;
		short num2 = num;
		num = -25669;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_d7.Stop();
		eval_a8();
	}

	private void eval_a8()
	{
		short num;
		try
		{
			try
			{
				File.Delete(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName);
			}
			catch
			{
			}
			while (true)
			{
				WebClient webClient = new WebClient();
				try
				{
					Uri address = new Uri(Url_update_torrent + this.m_eval_o + URL_TORRENT_DIR);
					webClient.DownloadFileAsync(address, Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName);
					webClient.DownloadFileCompleted += delegate
					{
						switch (0)
						{
						case 0:
							goto IL_0020;
						}
						goto IL_000a;
						IL_000a:
						int num4 = default(int);
						short num5;
						while (true)
						{
							switch (num4)
							{
							case 2:
								goto IL_00c2;
							case 3:
								MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. " + TorrentName, name_messege, MessageBoxButton.OK, MessageBoxImage.Hand);
								return;
							case 1:
								goto IL_0154;
							case 0:
								goto IL_0173;
							}
							break;
							IL_0173:
							if (!(Langve == "RU"))
							{
								num5 = 0;
								_ = num5;
								MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. " + TorrentName, name_messege, MessageBoxButton.OK, MessageBoxImage.Hand);
								return;
							}
							num5 = 3;
							num4 = num5;
							continue;
							IL_00c2:
							if (dy.Length != 0L)
							{
								num5 = 1;
								if (num5 != 0)
								{
								}
								eval_fo.Maximum = 100.0;
								eval_fo.Value = 0.0;
								string directoryName = Path.GetDirectoryName(Directory_game);
								eval_a(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName, directoryName);
								return;
							}
							num5 = 1;
							num4 = num5;
						}
						goto IL_0020;
						IL_0154:
						UpdateStatus = false;
						num5 = 0;
						num4 = num5;
						goto IL_000a;
						IL_0020:
						num5 = -17458;
						short num6 = num5;
						num5 = -17458;
						switch (num6 == num5)
						{
						case false:
						case true:
							goto IL_0154;
						}
						num5 = 0;
						if (num5 != 0)
						{
						}
						dy = new FileInfo(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName);
						num5 = 2;
						num4 = num5;
						goto IL_000a;
					};
				}
				finally
				{
					num = 0;
					int num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 0:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (webClient != null)
							{
								num = 2;
								num2 = num;
								continue;
							}
							break;
						case 2:
							((IDisposable)webClient).Dispose();
							num = 1;
							num2 = num;
							continue;
						case 1:
							break;
						}
						break;
					}
				}
				num = -13982;
				short num3 = num;
				num = -13982;
				switch (num3 == num)
				{
				case false:
				case true:
					continue;
				}
				num = 0;
				if (num == 0)
				{
				}
				break;
			}
		}
		catch (Exception ex)
		{
			MessageBoxWindow.Show(this, "[StartTorrentDownload] : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	private void eval_a7()
	{
		try
		{
			IRule rule = FirewallManager.Instance.CreateApplicationRule(FirewallManager.Instance.GetProfile().Type, Name_form + "_TCP", FirewallAction.Allow, Assembly.GetExecutingAssembly().Location);
			rule.Profiles = FirewallProfiles.Public;
			rule.Scope = FirewallScope.All;
			rule.Protocol = FirewallProtocol.TCP;
			FirewallManager.Instance.Rules.Add(rule);
		}
		catch
		{
		}
		while (true)
		{
			try
			{
				IRule rule2 = FirewallManager.Instance.CreateApplicationRule(FirewallManager.Instance.GetProfile().Type, Name_form + "_UDP", FirewallAction.Allow, Assembly.GetExecutingAssembly().Location);
				rule2.Profiles = FirewallProfiles.Public;
				rule2.Scope = FirewallScope.All;
				rule2.Protocol = FirewallProtocol.UDP;
				FirewallManager.Instance.Rules.Add(rule2);
			}
			catch
			{
			}
			short num = 0;
			_ = num;
			num = -6406;
			short num2 = num;
			num = -6406;
			switch (num2 == num)
			{
			case false:
			case true:
				continue;
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num == 0)
			{
			}
			return;
		}
	}

	private void eval_e(string A_0)
	{
		short num = -30856;
		short num2 = num;
		num = -30856;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_fz.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
		{
			short num3;
			try
			{
				num3 = 0;
				switch (num3)
				{
				default:
				{
					num3 = 10;
					int num4 = num3;
					while (true)
					{
						switch (num4)
						{
						case 10:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (A_0.Contains("WRITEVER"))
							{
								num3 = 5;
								num4 = num3;
								continue;
							}
							goto IL_06b4;
						case 11:
							num3 = 4;
							num4 = num3;
							continue;
						case 18:
							num3 = 15;
							num4 = num3;
							continue;
						case 15:
							if (Langve == "RU")
							{
								num3 = 3;
								num4 = num3;
							}
							else
							{
								eval_fr.Content = "Ready to play.";
								MessageBoxWindow.Show(this, "The process of updating the game is completed successfully, successful survival on our servers.", name_messege, MessageBoxButton.OK, MessageBoxImage.Asterisk);
								num3 = 8;
								num4 = num3;
							}
							continue;
						case 3:
						{
							num3 = 16546;
							short num5 = num3;
							num3 = 16546;
							switch (num5 == num3)
							{
							default:
								num3 = 0;
								if (num3 != 0)
								{
								}
								eval_fr.Content = "Готов к игре.";
								MessageBoxWindow.Show(this, "Процесс обновления игры завершен успешно,удачного выживания на наших серверах.", name_messege, MessageBoxButton.OK, MessageBoxImage.Asterisk);
								num3 = 6;
								num4 = num3;
								continue;
							case false:
							case true:
								break;
							}
							goto IL_027d;
						}
						case 23:
							eval_f0.AppendText(A_0.Split(',')[1] + "\r\n");
							num3 = 0;
							num4 = num3;
							continue;
						case 6:
						case 8:
							eval_ec = true;
							num3 = 11;
							num4 = num3;
							continue;
						case 17:
							eval_fz.AppendText(A_0.Split(',')[1] + "\r\n");
							num3 = 20;
							num4 = num3;
							continue;
						case 12:
							if (!eval_ec)
							{
								num3 = 18;
								num4 = num3;
								continue;
							}
							goto case 11;
						case 25:
							try
							{
								File.Delete(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
							}
							catch (Exception ex6)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [Sedding #1]" + ex6.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [Sedding #1]" + ex6.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_0696;
						case 0:
							num3 = 22;
							num4 = num3;
							continue;
						case 22:
							if (A_0.Contains("Engine"))
							{
								num3 = 17;
								num4 = num3;
								continue;
							}
							goto case 20;
						case 21:
							eval_ho.IsEnabled = true;
							eval_fq.Content = "";
							eval_fo.Value = 0.0;
							eval_fp.Content = "";
							eval_fs.Content = "";
							BoxServer.IsEnabled = true;
							num3 = 16;
							num4 = num3;
							continue;
						case 5:
							eval_b8();
							num3 = 26;
							num4 = num3;
							continue;
						case 26:
							if (!DownloadMods)
							{
								num3 = 1;
								num4 = num3;
							}
							else
							{
								num3 = 2;
								num4 = num3;
							}
							continue;
						case 14:
							if (File.Exists(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log"))
							{
								num3 = 25;
								num4 = num3;
								continue;
							}
							goto IL_0696;
						case 1:
							try
							{
								StreamWriter streamWriter2 = new StreamWriter(Directory_Launcher + "\\client.ini");
								try
								{
									streamWriter2.WriteLine(Updateclient);
									streamWriter2.Close();
								}
								finally
								{
									num3 = 1;
									if (num3 != 0)
									{
									}
									num3 = 0;
									num4 = num3;
									while (true)
									{
										switch (num4)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (streamWriter2 != null)
											{
												num3 = 2;
												num4 = num3;
												continue;
											}
											break;
										case 2:
											((IDisposable)streamWriter2).Dispose();
											num3 = 1;
											num4 = num3;
											continue;
										case 1:
											break;
										}
										break;
									}
								}
							}
							catch (Exception ex5)
							{
								if (!(Langve == "RU"))
								{
									MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [write_local_v]" + ex5.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [write_local_v]" + ex5.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_0508;
						case 19:
							if (A_0.Contains("DownloadAsync"))
							{
								num3 = 23;
								num4 = num3;
								continue;
							}
							goto case 0;
						case 4:
							try
							{
								SystemSleep.RestoreForCurrentThread();
								SystemSleep.ResetIdle();
							}
							catch (Exception ex4)
							{
								MessageBoxWindow.Show(this, " [RestoreForCurrentThread #0] - " + ex4.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Asterisk);
							}
							goto IL_06b4;
						case 13:
							try
							{
								File.Copy(DirLocal + "\\FILE.log", Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
							}
							catch (Exception ex3)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [Sedding #2]" + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [Sedding #2]" + ex3.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							num3 = 7;
							num4 = num3;
							continue;
						case 7:
							try
							{
								File.Delete(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName);
							}
							catch (Exception ex2)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [Sedding #3]" + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [Sedding #3]" + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_027d;
						case 2:
							try
							{
								StreamWriter streamWriter = new StreamWriter(Directory_Launcher + "\\mods.ini");
								try
								{
									streamWriter.WriteLine(Updatemods);
									streamWriter.Close();
								}
								finally
								{
									num3 = 0;
									num4 = num3;
									while (true)
									{
										switch (num4)
										{
										case 0:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										default:
											if (streamWriter != null)
											{
												num3 = 2;
												num4 = num3;
												continue;
											}
											break;
										case 2:
											((IDisposable)streamWriter).Dispose();
											num3 = 1;
											num4 = num3;
											continue;
										case 1:
											break;
										}
										break;
									}
								}
							}
							catch (Exception ex)
							{
								if (Langve == "RU")
								{
									MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [write_local_v]" + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
								else
								{
									MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [write_local_v]" + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								}
							}
							goto IL_0508;
						case 20:
							num3 = 9;
							num4 = num3;
							continue;
						case 9:
							if (A_0.Contains("StopedUpload"))
							{
								num3 = 21;
								num4 = num3;
								continue;
							}
							break;
						case 16:
							break;
						case 24:
							goto end_IL_003d;
							IL_027d:
							eval_ho.IsEnabled = true;
							eval_fq.Content = "";
							eval_fo.Value = 0.0;
							eval_fp.Content = "";
							eval_fs.Content = "";
							BoxServer.IsEnabled = true;
							UpdateStatus = false;
							CheckGameFileServer = false;
							num3 = 12;
							num4 = num3;
							continue;
							IL_0508:
							DownloadMods = false;
							num3 = 14;
							num4 = num3;
							continue;
							IL_06b4:
							num3 = 19;
							num4 = num3;
							continue;
							IL_0696:
							num3 = 13;
							num4 = num3;
							continue;
						}
						num3 = 24;
						num4 = num3;
						continue;
						end_IL_003d:
						break;
					}
					break;
				}
				}
			}
			catch (Exception ex7)
			{
				eval_fz.AppendText("UpdateStatus_Message : " + ex7.Message + "\r\n");
			}
			num3 = 0;
			_ = num3;
		});
	}

	[AsyncStateMachine(typeof(eval_an))]
	private Task eval_a(CancellationToken A_0)
	{
		short num = -13786;
		short num2 = num;
		num = -13786;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_an stateMachine = default(eval_an);
		stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.d = A_0;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
		return stateMachine.eval_b.Task;
	}

	private void eval_a(string A_0, string A_1)
	{
		short num;
		try
		{
			num = 0;
			int num2 = num;
			switch (num2)
			{
			default:
			{
				eval_z eval_z = default(eval_z);
				switch (0)
				{
				default:
				{
					int num4 = default(int);
					FileInfo[] files = default(FileInfo[]);
					while (true)
					{
						switch (num2)
						{
						case 2:
							if (Directory.Exists(Environment.CurrentDirectory + "\\cache"))
							{
								num = 6;
								num2 = num;
								continue;
							}
							goto case 3;
						case 3:
							num = 1;
							num2 = num;
							continue;
						case 1:
							if (A_1.EndsWith(":"))
							{
								num = 0;
								num2 = num;
								continue;
							}
							goto case 5;
						case 4:
						case 7:
							num = 9;
							num2 = num;
							continue;
						case 9:
							if (num4 >= files.Length)
							{
								num = 3;
								num2 = num;
								continue;
							}
							File.Delete(files[num4].FullName);
							num4++;
							num = 4;
							num2 = num;
							continue;
						case 6:
							files = new DirectoryInfo(Environment.CurrentDirectory + "\\cache").GetFiles("*", SearchOption.AllDirectories);
							num4 = 0;
							num = 7;
							num2 = num;
							continue;
						case 0:
							A_1 += "\\";
							num = 5;
							num2 = num;
							continue;
						case 5:
							torrentsPath = A_0;
							downloadsPath = A_1;
							eval_z.eval_a = new CancellationTokenSource();
							eval_z.b = eval_a(eval_z.eval_a.Token);
							StandardDownloader.StatusMessage += delegate(object A_0, string A_1)
							{
								short num5 = -25829;
								short num6 = num5;
								num5 = -25829;
								switch (num6 == num5)
								{
								default:
									num5 = 1;
									if (num5 != 0)
									{
									}
									num5 = 0;
									_ = num5;
									num5 = 0;
									if (num5 != 0)
									{
									}
									eval_e(A_1);
									break;
								}
							};
							Console.CancelKeyPress += eval_z.eval_b;
							AppDomain.CurrentDomain.ProcessExit += eval_z.eval_b;
							AppDomain.CurrentDomain.UnhandledException += eval_z.eval_c;
							Thread.GetDomain().UnhandledException += eval_z.eval_b;
							num = 8;
							num2 = num;
							continue;
						case 8:
						{
							num = 1381;
							short num3 = num;
							num = 1381;
							switch (num3 == num)
							{
							case false:
							case true:
								break;
							default:
								num = 0;
								if (num == 0)
								{
								}
								goto end_IL_0027;
							}
							goto case 5;
						}
						}
						goto case 0;
						continue;
						end_IL_0027:
						break;
					}
					break;
				}
				case 0:
					eval_z = new eval_z();
					num = 2;
					num2 = num;
					goto default;
				}
				break;
			}
			}
		}
		catch (Exception ex)
		{
			MessageBoxWindow.Show(this, "[Start_Monotorrent] : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
	}

	private void eval_a6()
	{
		short num;
		try
		{
			num = 0;
			switch (num)
			{
			default:
			{
				num = 3;
				int num2 = num;
				FileInfo[] files = default(FileInfo[]);
				int num3 = default(int);
				while (true)
				{
					switch (num2)
					{
					case 3:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
					{
						num = 1;
						if (num != 0)
						{
						}
						num = -11478;
						short num4 = num;
						num = -11478;
						switch (num4 == num)
						{
						case false:
						case true:
							goto IL_0126;
						}
						num = 0;
						if (num != 0)
						{
						}
						if (Directory.Exists(Environment.CurrentDirectory + "\\cache"))
						{
							num = 1;
							num2 = num;
							continue;
						}
						break;
					}
					case 1:
						files = new DirectoryInfo(Environment.CurrentDirectory + "\\cache").GetFiles("*", SearchOption.AllDirectories);
						num3 = 0;
						goto IL_0126;
					case 4:
					case 6:
						num = 5;
						num2 = num;
						continue;
					case 5:
						if (num3 >= files.Length)
						{
							num = 2;
							num2 = num;
							continue;
						}
						File.Delete(files[num3].FullName);
						num3++;
						num = 4;
						num2 = num;
						continue;
					case 2:
						break;
					case 0:
						goto end_IL_003c;
						IL_0126:
						num = 6;
						num2 = num;
						continue;
					}
					num = 0;
					num2 = num;
					continue;
					end_IL_003c:
					break;
				}
				break;
			}
			}
		}
		catch (Exception ex)
		{
			if (!(Langve == "RU"))
			{
				MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [DeletedFile 1]" + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
			else
			{
				MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [DeletedFile 1]" + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
			return;
		}
		num = 0;
		_ = num;
		if (!File.Exists(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log"))
		{
			return;
		}
		try
		{
			File.Delete(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\FILE.log");
		}
		catch (Exception ex2)
		{
			if (!(Langve == "RU"))
			{
				MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception! [DeletedFile 2]" + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
			else
			{
				MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение! [DeletedFile 2]" + ex2.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
		}
	}

	public string NumberToFileSize(long value)
	{
		short num = 0;
		switch (num)
		{
		}
		string[] array = default(string[]);
		string[] array2 = default(string[]);
		while (true)
		{
			num = 2;
			int num2 = num;
			while (true)
			{
				switch (num2)
				{
				case 2:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (Langve == "RU")
					{
						num = 0;
						num2 = num;
						continue;
					}
					array = new string[7] { "B", "KB", "MB", "GB", "TB", "PB", "EB" };
					num = 5;
					num2 = num;
					continue;
				case 5:
				{
					if (value == 0L)
					{
						num = 3;
						num2 = num;
						continue;
					}
					long num3 = Math.Abs(value);
					int num4 = Convert.ToInt32(Math.Floor(Math.Log(num3, 1024.0)));
					double num5 = Math.Round((double)num3 / Math.Pow(1024.0, num4), 1);
					return string.Format(NumberFormatInfo.InvariantInfo, "{0:0.0} {1}", (double)Math.Sign(value) * num5, array[num4]);
				}
				case 0:
					array2 = new string[7] { "Б", "КБ", "МБ", "ГБ", "ТБ", "ПБ", "ЕБ" };
					num = 1;
					num2 = num;
					continue;
				case 1:
					break;
				case 4:
					num = 1;
					if (num != 0)
					{
					}
					return "0 " + array2[0];
				case 3:
					return "0 " + array[0];
				}
				num = -9570;
				short num6 = num;
				num = -9570;
				switch (num6 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					if (value != 0L)
					{
						long num7 = Math.Abs(value);
						int num8 = Convert.ToInt32(Math.Floor(Math.Log(num7, 1024.0)));
						double num9 = Math.Round((double)num7 / Math.Pow(1024.0, num8), 1);
						return string.Format(NumberFormatInfo.InvariantInfo, "{0:0.0} {1}", (double)Math.Sign(value) * num9, array2[num8]);
					}
					num = 0;
					_ = num;
					num = 4;
					num2 = num;
					continue;
				}
				break;
			}
		}
	}

	public string NumberToSpeed(long value)
	{
		short num = 0;
		switch (num)
		{
		}
		string[] array2 = default(string[]);
		string[] array = default(string[]);
		while (true)
		{
			num = 2;
			int num2 = num;
			while (true)
			{
				switch (num2)
				{
				case 2:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (Langve == "RU")
					{
						num = 0;
						num2 = num;
						continue;
					}
					array2 = new string[7] { "b/s", "kB/s", "mB/s", "gB/s", "tB/s", "pB/s", "eB/s" };
					num = 5;
					num2 = num;
					continue;
				case 5:
				{
					if (value == 0L)
					{
						num = 3;
						num2 = num;
						continue;
					}
					long num3 = Math.Abs(value);
					int num4 = Convert.ToInt32(Math.Floor(Math.Log(num3, 1024.0)));
					double num5 = Math.Round((double)num3 / Math.Pow(1024.0, num4), 1);
					return string.Format(NumberFormatInfo.InvariantInfo, "{0:0.0} {1}", (double)Math.Sign(value) * num5, array2[num4]);
				}
				case 0:
					array = new string[7] { "б/с", "кб/с", "мб/с", "гб/с", "тб/с", "пб/с", "еб/с" };
					num = 1;
					num2 = num;
					continue;
				case 1:
					break;
				case 3:
					return "0 " + array2[0];
				case 4:
					return "0 " + array[0];
				}
				num = -9186;
				short num6 = num;
				num = -9186;
				switch (num6 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 1;
					if (num != 0)
					{
					}
					num = 0;
					if (num != 0)
					{
					}
					num = 0;
					_ = num;
					if (value != 0L)
					{
						long num7 = Math.Abs(value);
						int num8 = Convert.ToInt32(Math.Floor(Math.Log(num7, 1024.0)));
						double num9 = Math.Round((double)num7 / Math.Pow(1024.0, num8), 1);
						return string.Format(NumberFormatInfo.InvariantInfo, "{0:0.0} {1}", (double)Math.Sign(value) * num9, array[num8]);
					}
					num = 4;
					num2 = num;
					continue;
				}
				break;
			}
		}
	}

	private void eval_b(object A_0, SelectionChangedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = 0;
		int num2 = num;
		string text = default(string);
		while (true)
		{
			switch (num2)
			{
			case 0:
				switch (0)
				{
				default:
					goto end_IL_0049;
				case 0:
					break;
				}
				goto default;
			default:
				if (!eval_d8)
				{
					num = 1;
					if (num != 0)
					{
					}
					num = 2;
					num2 = num;
				}
				else
				{
					num = 1;
					num2 = num;
				}
				break;
			case 2:
				return;
			case 1:
				{
					try
					{
						switch (0)
						{
						default:
							while (true)
							{
								RegistryKey registryKey2;
								switch (num2)
								{
								case 3:
								{
									num = -32303;
									short num3 = num;
									num = -32303;
									switch (num3 == num)
									{
									case false:
									case true:
										goto IL_017e;
									}
									num = 0;
									if (num != 0)
									{
									}
									if (text != "Unlimited")
									{
										num = 1;
										num2 = num;
										continue;
									}
									goto IL_01a5;
								}
								case 1:
									num = 6;
									num2 = num;
									continue;
								case 6:
									goto IL_017e;
								case 5:
								{
									eval_ea = Convert.ToInt32(text);
									RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
									registryKey.SetValue("DownloadLimite_", text);
									registryKey.Close();
									num = 4;
									num2 = num;
									continue;
								}
								case 2:
								case 4:
									num = 0;
									num2 = num;
									continue;
								case 0:
									return;
									IL_017e:
									if (text != "Неограниченный")
									{
										num = 5;
										num2 = num;
										continue;
									}
									goto IL_01a5;
									IL_01a5:
									eval_ea = 0;
									registryKey2 = Registry.CurrentUser.CreateSubKey(Name_form);
									registryKey2.SetValue("DownloadLimite_", text);
									registryKey2.Close();
									num = 2;
									num2 = num;
									continue;
								}
								break;
							}
							goto case 0;
						case 0:
							text = eval_hp.SelectedItem.ToString();
							num = 3;
							num2 = num;
							goto default;
						}
					}
					catch
					{
						return;
					}
				}
				end_IL_0049:
				break;
			}
		}
	}

	private void eval_a(object A_0, SelectionChangedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = 1;
		int num2 = num;
		string text = default(string);
		while (true)
		{
			switch (num2)
			{
			case 1:
				switch (0)
				{
				default:
					goto end_IL_0047;
				case 0:
					break;
				}
				goto default;
			default:
			{
				if (!eval_d9)
				{
					num = 0;
					num2 = num;
					break;
				}
				num = -16989;
				short num3 = num;
				num = -16989;
				switch (num3 == num)
				{
				case false:
				case true:
					return;
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 2;
					num2 = num;
					break;
				}
				break;
			}
			case 0:
				return;
			case 2:
				{
					try
					{
						switch (0)
						{
						default:
							while (true)
							{
								RegistryKey registryKey2;
								switch (num2)
								{
								case 0:
									if (text != "Unlimited")
									{
										num = 5;
										num2 = num;
										continue;
									}
									goto IL_012d;
								case 5:
									num = 3;
									num2 = num;
									continue;
								case 3:
									if (text != "Неограниченный")
									{
										num = 1;
										num2 = num;
										continue;
									}
									goto IL_012d;
								case 1:
								{
									eval_eb = Convert.ToInt32(text);
									RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(Name_form);
									registryKey.SetValue("UploadLimite_", text);
									registryKey.Close();
									num = 6;
									num2 = num;
									continue;
								}
								case 4:
								case 6:
									num = 2;
									num2 = num;
									continue;
								case 2:
									goto end_IL_0087;
									IL_012d:
									eval_eb = 0;
									registryKey2 = Registry.CurrentUser.CreateSubKey(Name_form);
									registryKey2.SetValue("UploadLimite_", text);
									registryKey2.Close();
									num = 4;
									num2 = num;
									continue;
								}
								goto case 0;
								continue;
								end_IL_0087:
								break;
							}
							break;
						case 0:
							text = eval_hq.SelectedItem.ToString();
							num = 0;
							num2 = num;
							goto default;
						}
					}
					catch
					{
					}
					num = 1;
					if (num == 0)
					{
					}
					return;
				}
				end_IL_0047:
				break;
			}
		}
	}

	private void eval_a1(object A_0, EventArgs A_1)
	{
		short num = -25003;
		short num2 = num;
		num = -25003;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_d8 = true;
	}

	private void eval_a0(object A_0, EventArgs A_1)
	{
		short num = -11357;
		short num2 = num;
		num = -11357;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_d9 = true;
	}

	private void eval_a(object A_0, RoutedEventArgs A_1)
	{
		short num;
		try
		{
			num = 0;
			int num2 = num;
			RegistryKey registryKey = default(RegistryKey);
			MessageBoxResult messageBoxResult = default(MessageBoxResult);
			while (true)
			{
				switch (num2)
				{
				case 0:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (!UpdateStatus)
					{
						num = 1;
						num2 = num;
						continue;
					}
					break;
				case 7:
					if (Langve == "RU")
					{
						num = 13;
						num2 = num;
					}
					else
					{
						MessageBoxWindow.Show(this, "The launcher settings are reset successfully, launcher will be restarted", name_messege);
						num = 8;
						num2 = num;
					}
					continue;
				case 3:
					try
					{
						num = 2;
						num2 = num;
						while (true)
						{
							switch (num2)
							{
							case 2:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (registryKey != null)
								{
									num = 1;
									num2 = num;
									continue;
								}
								break;
							case 1:
								Registry.CurrentUser.DeleteSubKeyTree(Name_form, throwOnMissingSubKey: true);
								num = 0;
								num2 = num;
								continue;
							case 0:
								break;
							case 3:
								goto end_IL_00e9;
							}
							num = 3;
							num2 = num;
							continue;
							end_IL_00e9:
							break;
						}
					}
					finally
					{
						num = 1;
						num2 = num;
						while (true)
						{
							switch (num2)
							{
							case 1:
								switch (0)
								{
								default:
									continue;
								case 0:
									break;
								}
								goto default;
							default:
								if (registryKey != null)
								{
									num = 0;
									num2 = num;
									continue;
								}
								break;
							case 0:
								((IDisposable)registryKey).Dispose();
								num = 2;
								num2 = num;
								continue;
							case 2:
								break;
							}
							break;
						}
					}
					num = 7;
					num2 = num;
					continue;
				case 11:
					messageBoxResult = MessageBoxWindow.Show(this, "Вы уверены что хотите сбросить настройки лаунчера?", name_messege, MessageBoxButton.YesNo);
					num = 10;
					num2 = num;
					continue;
				case 8:
				{
					num = 31957;
					short num3 = num;
					num = 31957;
					switch (num3 == num)
					{
					case false:
					case true:
						continue;
					}
					num = 0;
					if (num == 0)
					{
					}
					goto case 9;
				}
				case 1:
					num = 4;
					num2 = num;
					continue;
				case 4:
					if (Langve == "RU")
					{
						num = 11;
						num2 = num;
					}
					else
					{
						messageBoxResult = MessageBoxWindow.Show(this, "Are you sure you want to reset your launcher settings?", name_messege, MessageBoxButton.YesNo);
						num = 14;
						num2 = num;
					}
					continue;
				case 13:
					MessageBoxWindow.Show(this, "Настройки лаунчера сброшены успешно, лаунчер будет перезапущен", name_messege);
					num = 9;
					num2 = num;
					continue;
				case 9:
					System.Windows.Forms.Application.Restart();
					Close_launcher();
					num = 5;
					num2 = num;
					continue;
				case 2:
					registryKey = Registry.CurrentUser.OpenSubKey(Name_form, writable: true);
					num = 3;
					num2 = num;
					continue;
				case 10:
				case 14:
					num = 12;
					num2 = num;
					continue;
				case 12:
					if (messageBoxResult == MessageBoxResult.Yes)
					{
						num = 2;
						num2 = num;
						continue;
					}
					break;
				case 5:
					break;
				case 6:
					goto end_IL_0020;
				}
				num = 6;
				num2 = num;
				continue;
				end_IL_0020:
				break;
			}
		}
		catch (Exception ex)
		{
			MessageBoxWindow.Show(this, "Deleted REGEDIT : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
		num = 0;
		_ = num;
		num = 1;
		if (num == 0)
		{
		}
	}

	private static void eval_a(DirectoryInfo A_0)
	{
		short num;
		try
		{
			num = 2;
			int num2 = num;
			FileInfo[] files = default(FileInfo[]);
			int num3 = default(int);
			DirectoryInfo[] directories = default(DirectoryInfo[]);
			while (true)
			{
				switch (num2)
				{
				case 2:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (A_0 != null)
					{
						num = 3;
						num2 = num;
						continue;
					}
					break;
				case 3:
				{
					num = 17110;
					short num4 = num;
					num = 17110;
					switch (num4 == num)
					{
					default:
						num = 0;
						if (num != 0)
						{
						}
						A_0.Attributes = FileAttributes.Normal;
						files = A_0.GetFiles();
						num3 = 0;
						num = 1;
						num2 = num;
						continue;
					case false:
					case true:
						break;
					}
					goto case 1;
				}
				case 1:
				case 10:
					num = 4;
					num2 = num;
					continue;
				case 4:
					if (num3 >= files.Length)
					{
						num = 7;
						num2 = num;
						continue;
					}
					files[num3].Attributes = FileAttributes.Normal;
					num3++;
					num = 10;
					num2 = num;
					continue;
				case 6:
				case 9:
					num = 0;
					num2 = num;
					continue;
				case 0:
					if (num3 < directories.Length)
					{
						eval_a(directories[num3]);
						num3++;
						num = 9;
						num2 = num;
					}
					else
					{
						num = 5;
						num2 = num;
					}
					continue;
				case 7:
					directories = A_0.GetDirectories();
					num3 = 0;
					num = 6;
					num2 = num;
					continue;
				case 5:
					break;
				case 8:
					goto end_IL_001f;
				}
				num = 8;
				num2 = num;
				continue;
				end_IL_001f:
				break;
			}
		}
		catch
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num == 0)
		{
		}
	}

	[AsyncStateMachine(typeof(eval_as))]
	private Task eval_a4()
	{
		short num = 23460;
		short num2 = num;
		num = 23460;
		switch (num2 == num)
		{
		default:
		{
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			eval_as stateMachine = default(eval_as);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	private void a3()
	{
		if (string.IsNullOrEmpty(UidToPlayer))
		{
			return;
		}
		short num = 0;
		_ = num;
		try
		{
			int num2 = default(int);
			switch (0)
			{
			default:
			{
				StreamWriter streamWriter = default(StreamWriter);
				while (true)
				{
					switch (num2)
					{
					case 0:
						if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.m_eval_ai)))
						{
							num = 6;
							num2 = num;
							continue;
						}
						goto IL_0125;
					case 2:
						if (!Directory.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.m_eval_ak)))
						{
							num = 4;
							num2 = num;
							continue;
						}
						goto case 7;
					case 6:
						Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.m_eval_ai));
						num = 1;
						num2 = num;
						continue;
					case 1:
						num = 1;
						if (num == 0)
						{
						}
						goto IL_0125;
					case 5:
						try
						{
							streamWriter.WriteLine(UidToPlayer);
							streamWriter.Close();
							try
							{
								streamWriter.Dispose();
							}
							catch
							{
							}
							eval_ip.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num4 = -9969;
								short num5 = num4;
								num4 = -9969;
								switch (num5 == num4)
								{
								default:
									num4 = 1;
									if (num4 != 0)
									{
									}
									num4 = 0;
									_ = num4;
									num4 = 0;
									if (num4 != 0)
									{
									}
									gg.Content = UidToPlayer;
									eval_ip.Content = UidToPlayer;
									break;
								}
							});
						}
						finally
						{
							num = 1;
							num2 = num;
							while (true)
							{
								switch (num2)
								{
								case 1:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								default:
									if (streamWriter != null)
									{
										num = 0;
										num2 = num;
										continue;
									}
									break;
								case 0:
									((IDisposable)streamWriter).Dispose();
									num = 2;
									num2 = num;
									continue;
								case 2:
									break;
								}
								break;
							}
						}
						num = 3;
						num2 = num;
						continue;
					case 7:
						streamWriter = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.m_eval_aj));
						num = 5;
						num2 = num;
						continue;
					case 4:
						Directory.CreateDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.m_eval_ak));
						num = 7;
						num2 = num;
						continue;
					case 3:
						return;
						IL_0125:
						num = 2;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				while (true)
				{
					eval_a(new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.m_eval_ai) + "\\"));
					num = 16398;
					short num3 = num;
					num = 16398;
					switch (num3 == num)
					{
					case false:
					case true:
						continue;
					}
					break;
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				num2 = num;
				goto default;
			}
		}
		catch (Exception ex)
		{
			MessageBoxWindow.Show(this, "#SUID1 : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			Close_launcher();
		}
	}

	private void eval_az(object A_0, EventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = 1;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 1:
			{
				num = -31637;
				short num3 = num;
				num = -31637;
				switch (num3 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					switch (0)
					{
					default:
						goto end_IL_0093;
					case 0:
						break;
					}
					break;
				case false:
				case true:
					break;
				}
				goto default;
			}
			default:
				if (eval_ef)
				{
					num = 0;
					num2 = num;
					break;
				}
				return;
			case 0:
			{
				num = 1;
				if (num != 0)
				{
				}
				Thread thread = new Thread(eval_a2);
				thread.IsBackground = true;
				thread.Start();
				num = 2;
				num2 = num;
				break;
			}
			case 2:
				return;
				end_IL_0093:
				break;
			}
		}
	}

	private void eval_a2()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			int num3 = default(int);
			Process[] processes = default(Process[]);
			switch (0)
			{
			default:
			{
				Process process = default(Process);
				while (true)
				{
					switch (num2)
					{
					case 12:
						num = 5;
						num2 = num;
						continue;
					case 9:
						num = 11;
						num2 = num;
						continue;
					case 11:
					{
						num = -21266;
						short num4 = num;
						num = -21266;
						switch (num4 == num)
						{
						case false:
						case true:
							goto IL_030e;
						}
						num = 0;
						if (num != 0)
						{
						}
						if (!process.MainWindowTitle.Contains("user_steam_id.txt"))
						{
							num = 0;
							_ = num;
							num = 8;
							num2 = num;
							continue;
						}
						goto case 12;
					}
					case 4:
						if (!string.IsNullOrEmpty(process.MainWindowTitle))
						{
							num = 9;
							num2 = num;
							continue;
						}
						goto IL_018c;
					case 5:
						try
						{
							process.Kill();
						}
						catch (Exception ex)
						{
							eval_bw();
							this.m_eval_ca.Stop();
							eval_eh.Stop();
							System.Windows.Forms.MessageBox.Show(" LoadS : " + ex.Message, name_messege, MessageBoxButtons.OK, MessageBoxIcon.Hand);
						}
						goto IL_018c;
					case 0:
					case 6:
						num = 2;
						num2 = num;
						continue;
					case 2:
						if (num3 < processes.Length)
						{
							process = processes[num3];
							num = 4;
							num2 = num;
						}
						else
						{
							num = 3;
							num2 = num;
						}
						continue;
					case 10:
						num = 7;
						num2 = num;
						continue;
					case 7:
						if (process.MainWindowTitle.EndsWith("steam_id.txt"))
						{
							num = 12;
							num2 = num;
							continue;
						}
						goto IL_018c;
					case 8:
						num = 1;
						num2 = num;
						continue;
					case 1:
						if (!process.MainWindowTitle.Contains("user_steam_id"))
						{
							num = 10;
							num2 = num;
							continue;
						}
						goto case 12;
					case 3:
						goto IL_030e;
						IL_018c:
						num3++;
						num = 6;
						num2 = num;
						continue;
						IL_030e:
						eval_ef = true;
						return;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				eval_ef = false;
				processes = Process.GetProcesses();
				num3 = 0;
				num = 0;
				num2 = num;
				goto default;
			}
		}
		}
	}

	public void ScreenCapture()
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			int num3 = default(int);
			switch (0)
			{
			default:
			{
				long num6 = default(long);
				long length = default(long);
				FileStream fileStream = default(FileStream);
				byte[] array = default(byte[]);
				NetworkStream stream = default(NetworkStream);
				BinaryWriter binaryWriter = default(BinaryWriter);
				NativeUtilities.DEVMODE devMode = default(NativeUtilities.DEVMODE);
				NativeUtilities.DisplayDevice lpDisplayDevice = default(NativeUtilities.DisplayDevice);
				while (true)
				{
					switch (num2)
					{
					case 1:
					{
						num = 5862;
						short num4 = num;
						num = 5862;
						switch (num4 == num)
						{
						case false:
						case true:
							goto IL_098f;
						}
						num = 0;
						if (num == 0)
						{
						}
						goto case 8;
					}
					case 6:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 1:
										if (eval_ei == 3)
										{
											num = 4;
											num2 = num;
											continue;
										}
										goto case 3;
									case 5:
										try
										{
											switch (0)
											{
											default:
												while (true)
												{
													switch (num2)
													{
													case 1:
														try
														{
															switch (0)
															{
															default:
																while (true)
																{
																	switch (num2)
																	{
																	case 1:
																		try
																		{
																			switch (0)
																			{
																			default:
																				while (true)
																				{
																					switch (num2)
																					{
																					case 5:
																						num = 4;
																						num2 = num;
																						continue;
																					case 4:
																						if (num6 >= length)
																						{
																							num = 0;
																							num2 = num;
																							continue;
																						}
																						goto case 1;
																					case 1:
																					{
																						int num5 = fileStream.Read(array, 0, array.Length);
																						stream.Write(array, 0, num5);
																						num6 += num5;
																						num = 3;
																						num2 = num;
																						continue;
																					}
																					case 3:
																						if (en.Connected)
																						{
																							num = 5;
																							num2 = num;
																							continue;
																						}
																						goto case 0;
																					case 0:
																						num = 2;
																						num2 = num;
																						continue;
																					case 2:
																						goto end_IL_0216;
																					}
																					goto case 0;
																					continue;
																					end_IL_0216:
																					break;
																				}
																				break;
																			case 0:
																			{
																				length = fileStream.Length;
																				num6 = 0L;
																				int num5 = 0;
																				array = new byte[2048];
																				binaryWriter.Write(Path.GetFileName(DirLocal + "\\" + Ename));
																				binaryWriter.Write(length);
																				num = 1;
																				num2 = num;
																				goto default;
																			}
																			}
																		}
																		finally
																		{
																			num = 1;
																			num2 = num;
																			while (true)
																			{
																				switch (num2)
																				{
																				case 1:
																					switch (0)
																					{
																					default:
																						continue;
																					case 0:
																						break;
																					}
																					goto default;
																				default:
																					if (binaryWriter != null)
																					{
																						num = 0;
																						num2 = num;
																						continue;
																					}
																					break;
																				case 0:
																					((IDisposable)binaryWriter).Dispose();
																					num = 2;
																					num2 = num;
																					continue;
																				case 2:
																					break;
																				}
																				break;
																			}
																		}
																		num = 0;
																		num2 = num;
																		continue;
																	case 0:
																		try
																		{
																			stream.Close();
																		}
																		catch
																		{
																		}
																		num = 2;
																		num2 = num;
																		continue;
																	case 2:
																		goto end_IL_01d7;
																	}
																	goto case 0;
																	continue;
																	end_IL_01d7:
																	break;
																}
																break;
															case 0:
																binaryWriter = new BinaryWriter(stream);
																num = 1;
																num2 = num;
																goto default;
															}
														}
														finally
														{
															num = 1;
															num2 = num;
															while (true)
															{
																switch (num2)
																{
																case 1:
																	switch (0)
																	{
																	default:
																		continue;
																	case 0:
																		break;
																	}
																	goto default;
																default:
																	if (stream != null)
																	{
																		num = 0;
																		num2 = num;
																		continue;
																	}
																	break;
																case 0:
																	((IDisposable)stream).Dispose();
																	num = 2;
																	num2 = num;
																	continue;
																case 2:
																	break;
																}
																break;
															}
														}
														num = 0;
														num2 = num;
														continue;
													case 0:
														try
														{
															fileStream.Close();
														}
														catch
														{
														}
														num = 2;
														num2 = num;
														continue;
													case 2:
														goto end_IL_0196;
													}
													goto case 0;
													continue;
													end_IL_0196:
													break;
												}
												break;
											case 0:
												stream = en.GetStream();
												num = 1;
												num2 = num;
												goto default;
											}
										}
										finally
										{
											num = 1;
											num2 = num;
											while (true)
											{
												switch (num2)
												{
												case 1:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (fileStream != null)
													{
														num = 0;
														num2 = num;
														continue;
													}
													break;
												case 0:
													((IDisposable)fileStream).Dispose();
													num = 2;
													num2 = num;
													continue;
												case 2:
													break;
												}
												break;
											}
										}
										goto IL_070c;
									case 4:
										eval_bw();
										eval_k("Can't connect to server... please restart launcher.");
										num = 10;
										num2 = num;
										continue;
									case 10:
										if (Langve == "RU")
										{
											num = 7;
											num2 = num;
										}
										else
										{
											System.Windows.MessageBox.Show("Can't connect to server... please restart launcher.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
											num = 3;
											num2 = num;
										}
										continue;
									case 3:
									case 11:
										GetScreenshot().Save(DirLocal + "\\" + Ename, ImageFormat.Jpeg);
										en = new TcpClient(IP_OUTVIDSCS, Port_OUTVID);
										num = 8;
										num2 = num;
										continue;
									case 8:
										if (en.Connected)
										{
											num = 0;
											num2 = num;
											continue;
										}
										goto IL_070c;
									case 0:
										fileStream = File.OpenRead(DirLocal + "\\" + Ename);
										num = 5;
										num2 = num;
										continue;
									case 2:
										try
										{
											num = 2;
											num2 = num;
											while (true)
											{
												switch (num2)
												{
												case 2:
													switch (0)
													{
													default:
														continue;
													case 0:
														break;
													}
													goto default;
												default:
													if (File.Exists(DirLocal + "\\" + Ename))
													{
														num = 1;
														num2 = num;
														continue;
													}
													break;
												case 1:
													File.Delete(DirLocal + "\\" + Ename);
													num = 0;
													num2 = num;
													continue;
												case 0:
													break;
												case 3:
													goto end_IL_0674;
												}
												num = 3;
												num2 = num;
												continue;
												end_IL_0674:
												break;
											}
										}
										catch
										{
										}
										eval_ei = 0;
										Thread.Sleep(100);
										num = 9;
										num2 = num;
										continue;
									case 6:
										try
										{
											en.Close();
										}
										catch
										{
										}
										num = 2;
										num2 = num;
										continue;
									case 7:
										System.Windows.MessageBox.Show("Нет коннекта к серверу...,перезапустите лаунчер.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
										num = 11;
										num2 = num;
										continue;
									case 9:
										goto end_IL_010c;
										IL_070c:
										num = 6;
										num2 = num;
										continue;
									}
									goto case 0;
									continue;
									end_IL_010c:
									break;
								}
								break;
							case 0:
								eval_ei++;
								num = 1;
								num2 = num;
								goto default;
							}
						}
						catch (Exception ex)
						{
							try
							{
								en.Close();
							}
							catch
							{
							}
							try
							{
								num = 2;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 2:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (File.Exists(DirLocal + "\\" + Ename))
										{
											num = 1;
											num2 = num;
											continue;
										}
										break;
									case 1:
										File.Delete(DirLocal + "\\" + Ename);
										num = 0;
										num2 = num;
										continue;
									case 0:
										break;
									case 3:
										goto end_IL_07e6;
									}
									num = 3;
									num2 = num;
									continue;
									end_IL_07e6:
									break;
								}
							}
							catch
							{
							}
							num = 1;
							if (num != 0)
							{
							}
							eval_k("ScreenCapture : " + ex.Message);
						}
						num = 7;
						num2 = num;
						continue;
					case 3:
						devMode = default(NativeUtilities.DEVMODE);
						num = 4;
						num2 = num;
						continue;
					case 4:
						if (NativeUtilities.EnumDisplaySettings(lpDisplayDevice.DeviceName, -1, ref devMode))
						{
							num = 5;
							num2 = num;
							continue;
						}
						goto case 2;
					case 7:
						try
						{
							GC.Collect();
							return;
						}
						catch
						{
							return;
						}
					case 8:
					{
						NativeUtilities.DisplayDevice displayDevice = default(NativeUtilities.DisplayDevice);
						displayDevice.cb = Marshal.SizeOf(typeof(NativeUtilities.DisplayDevice));
						lpDisplayDevice = displayDevice;
						num = 0;
						num2 = num;
						continue;
					}
					case 0:
						if (NativeUtilities.EnumDisplayDevices(null, num3, ref lpDisplayDevice, 0) != 0)
						{
							num = 3;
							num2 = num;
							continue;
						}
						num = 0;
						_ = num;
						Ename = "CS," + UID_SC + "," + GUID_SC + "," + MC + "," + Name_players_local + ".data";
						num = 6;
						num2 = num;
						continue;
					case 2:
						num3++;
						goto IL_098f;
					case 5:
						{
							eval_ep = Math.Min(eval_ep, devMode.dmPositionX);
							eval_eq = Math.Min(eval_eq, devMode.dmPositionY);
							eval_er = Math.Max(eval_er, devMode.dmPositionX + devMode.dmPelsWidth);
							eval_es = Math.Max(eval_es, devMode.dmPositionY + devMode.dmPelsHeight);
							num = 2;
							num2 = num;
							continue;
						}
						IL_098f:
						num = 8;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				eval_ep = int.MaxValue;
				eval_eq = int.MaxValue;
				eval_er = int.MinValue;
				eval_es = int.MinValue;
				num3 = 0;
				num = 1;
				num2 = num;
				goto default;
			}
		}
		}
	}

	public static Bitmap GetScreenshot()
	{
		short num = 16504;
		short num2 = num;
		num = 16504;
		Bitmap bitmap = default(Bitmap);
		switch (num2 == num)
		{
		default:
		{
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			bitmap = new Bitmap(eval_er - eval_ep, eval_es - eval_eq);
			Graphics graphics = Graphics.FromImage(bitmap);
			try
			{
				graphics.CopyFromScreen(eval_ep, eval_eq, 0, 0, bitmap.Size);
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (graphics != null)
						{
							num = 2;
							num3 = num;
							continue;
						}
						break;
					case 2:
						((IDisposable)graphics).Dispose();
						num = 1;
						num3 = num;
						continue;
					case 1:
						break;
					}
					break;
				}
			}
			break;
		}
		case false:
		case true:
			break;
		}
		return bitmap;
	}

	public static byte[] ConvertImageToBytes(Bitmap bitmap)
	{
		short num = 23417;
		short num2 = num;
		num = 23417;
		switch (num2 == num)
		{
		default:
		{
			num = 0;
			if (num != 0)
			{
			}
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			MemoryStream memoryStream = new MemoryStream();
			try
			{
				bitmap.Save(memoryStream, ImageFormat.Jpeg);
				return memoryStream.ToArray();
			}
			finally
			{
				num = 0;
				int num3 = num;
				while (true)
				{
					switch (num3)
					{
					case 0:
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						goto default;
					default:
						if (memoryStream != null)
						{
							num = 2;
							num3 = num;
							continue;
						}
						break;
					case 2:
						((IDisposable)memoryStream).Dispose();
						num = 1;
						num3 = num;
						continue;
					case 1:
						break;
					}
					break;
				}
			}
		}
		case false:
		case true:
		{
			byte[] result = default(byte[]);
			return result;
		}
		}
	}

	private void ay(object A_0, EventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = -30756;
		short num2 = num;
		num = -30756;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_em = new Thread(ScreenCapture)
		{
			IsBackground = true
		};
		eval_em.Start();
	}

	private void eval_ay()
	{
		short num = 0;
		_ = num;
		num = 26704;
		short num2 = num;
		num = 26704;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_eu.Clear();
		eval_fm.BoxALL.Items.Clear();
		eval_fm.BoxDistancion.Items.Clear();
		eval_fm.BoxKillZ.Items.Clear();
		eval_fm.BoxShoot.Items.Clear();
		eval_fm.BoxTime.Items.Clear();
		eval_fm.BoxAnimall.Items.Clear();
		eval_fm.BoxKills.Items.Clear();
	}

	[AsyncStateMachine(typeof(eval_am))]
	public Task LoadStatistic(string serverport)
	{
		short num = 0;
		_ = num;
		num = -31240;
		short num2 = num;
		num = -31240;
		switch (num2 == num)
		{
		default:
		{
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_am stateMachine = default(eval_am);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_d = this;
			stateMachine.eval_c = serverport;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	[AsyncStateMachine(typeof(eval_ax))]
	private void eval_ax(object A_0, EventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = 11218;
		short num2 = num;
		num = 11218;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_ax stateMachine = default(eval_ax);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	private void eval_ax()
	{
		int num = default(int);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num)
				{
				case 0:
				{
					short num2 = 0;
					_ = num2;
					num2 = -2926;
					short num3 = num2;
					num2 = -2926;
					switch (num3 == num2)
					{
					case false:
					case true:
						break;
					default:
						num2 = 0;
						if (num2 != 0)
						{
						}
						if (fa.Visibility == Visibility.Hidden)
						{
							num2 = 2;
							num = num2;
							continue;
						}
						return;
					}
					break;
				}
				case 2:
				{
					short num2 = 1;
					if (num2 != 0)
					{
					}
					fa.Visibility = Visibility.Visible;
					DoubleAnimation animation = new DoubleAnimation
					{
						From = 0.0,
						To = 1.0,
						Duration = new Duration(TimeSpan.FromSeconds(0.3)),
						AutoReverse = false
					};
					fa.BeginAnimation(UIElement.OpacityProperty, animation);
					num2 = 1;
					num = num2;
					continue;
				}
				case 1:
					return;
				}
				break;
			}
			goto case 0;
		case 0:
		{
			eval_ew.Stop();
			short num2 = 0;
			num = num2;
			goto default;
		}
		}
	}

	[AsyncStateMachine(typeof(eval_ay))]
	private Task aw()
	{
		short num = 0;
		_ = num;
		num = -5117;
		short num2 = num;
		num = -5117;
		switch (num2 == num)
		{
		default:
		{
			num = 1;
			if (num != 0)
			{
			}
			num = 0;
			if (num != 0)
			{
			}
			eval_ay stateMachine = default(eval_ay);
			stateMachine.eval_b = AsyncTaskMethodBuilder.Create();
			stateMachine.eval_c = this;
			stateMachine.eval_a = -1;
			stateMachine.eval_b.Start(ref stateMachine);
			return stateMachine.eval_b.Task;
		}
		}
	}

	[DllImport("kernel32")]
	private static extern eval_b SetThreadExecutionState(eval_b A_0);

	private void eval_av()
	{
		short num;
		try
		{
			num = 1899;
			short num2 = num;
			num = 1899;
			int num3;
			long result = default(long);
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				num = 3;
				num3 = num;
				goto IL_0091;
			case false:
			case true:
				{
					if (long.TryParse(ey, out result))
					{
						num = 0;
						num3 = num;
					}
					else
					{
						MessageBoxWindow.Show(this, "ID Приложения указан неверно", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						num = 4;
						num3 = num;
					}
					goto IL_0091;
				}
				IL_0091:
				while (true)
				{
					switch (num3)
					{
					case 3:
						num = 1;
						if (num != 0)
						{
						}
						switch (0)
						{
						default:
							continue;
						case 0:
							break;
						}
						break;
					case 1:
						eval_e8 = new DiscordRpcClient(result.ToString());
						eval_e8.RegisterUriScheme();
						eval_e8.Initialize();
						eval_e8.OnError += eval_a;
						eval_e8.OnReady += eval_a;
						eval_e8.OnPresenceUpdate += eval_a;
						num = 5;
						num3 = num;
						continue;
					case 2:
						eval_au();
						num = 1;
						num3 = num;
						continue;
					case 0:
						num = 7;
						num3 = num;
						continue;
					case 7:
						if (eval_e8.IsInitialized)
						{
							num = 2;
							num3 = num;
							continue;
						}
						goto case 1;
					case 4:
					case 5:
						num = 6;
						num3 = num;
						continue;
					case 6:
						goto end_IL_0091;
					}
					goto case false;
					continue;
					end_IL_0091:
					break;
				}
				break;
			}
		}
		catch (Exception ex)
		{
			System.Windows.MessageBox.Show("[StatusStartVoid] " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
		num = 0;
		_ = num;
	}

	private void eval_au()
	{
		short num = 0;
		_ = num;
		num = 21649;
		short num2 = num;
		num = 21649;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_e8.Dispose();
	}

	private void eval_at()
	{
		short num;
		try
		{
			num = 0;
			int num2 = num;
			switch (num2)
			{
			default:
			{
				RichPresence richPresence = default(RichPresence);
				switch (0)
				{
				default:
				{
					long result = default(long);
					long result2 = default(long);
					long result3 = default(long);
					DiscordRPC.Button button2 = default(DiscordRPC.Button);
					DiscordRPC.Button button = default(DiscordRPC.Button);
					RichPresence richPresence2 = default(RichPresence);
					while (true)
					{
						switch (num2)
						{
						case 5:
						{
							bool num3 = long.TryParse("0", out result);
							bool flag = long.TryParse("0", out result2);
							bool flag2 = long.TryParse("0", out result3);
							if (num3 || flag || flag2)
							{
								num = 9;
								num2 = num;
								continue;
							}
							goto case 18;
						}
						case 17:
							if (button2 != null)
							{
								num = 21;
								num2 = num;
								continue;
							}
							goto case 1;
						case 13:
							richPresence.Assets.SmallImageText = eval_e7;
							button2 = new DiscordRPC.Button
							{
								Label = eval_e1,
								Url = eval_e0
							};
							button = new DiscordRPC.Button
							{
								Label = eval_e3,
								Url = eval_e2
							};
							num = 25;
							num2 = num;
							continue;
						case 25:
							if (button2 != null)
							{
								num = 3;
								num2 = num;
								continue;
							}
							goto IL_011e;
						case 3:
						{
							num = 22796;
							short num6 = num;
							num = 22796;
							switch (num6 == num)
							{
							default:
								num = 0;
								if (num != 0)
								{
								}
								num = 6;
								num2 = num;
								continue;
							case false:
							case true:
								break;
							}
							goto case 8;
						}
						case 26:
							richPresence.Assets.LargeImageKey = eval_e4;
							richPresence2 = richPresence;
							num = 14;
							num2 = num;
							continue;
						case 14:
							if (richPresence2.Assets == null)
							{
								num = 0;
								num2 = num;
								continue;
							}
							goto case 12;
						case 2:
							richPresence.Buttons = new DiscordRPC.Button[1] { button };
							num = 20;
							num2 = num;
							continue;
						case 18:
							richPresence2 = richPresence;
							num = 23;
							num2 = num;
							continue;
						case 23:
							if (richPresence2.Assets == null)
							{
								num = 19;
								num2 = num;
								continue;
							}
							goto case 26;
						case 22:
							richPresence.Buttons = new DiscordRPC.Button[2] { button2, button };
							num = 16;
							num2 = num;
							continue;
						case 16:
						case 20:
							richPresence2 = richPresence;
							num = 27;
							num2 = num;
							continue;
						case 27:
							if (richPresence2.Party == null)
							{
								num = 4;
								num2 = num;
								continue;
							}
							goto case 29;
						case 15:
						{
							Assets assets2 = (richPresence2.Assets = new Assets());
							num = 13;
							num2 = num;
							continue;
						}
						case 0:
						{
							Assets assets2 = (richPresence2.Assets = new Assets());
							num = 12;
							num2 = num;
							continue;
						}
						case 1:
							num = 10;
							num2 = num;
							continue;
						case 10:
							if (button != null)
							{
								num = 2;
								num2 = num;
								continue;
							}
							goto case 16;
						case 4:
						{
							Party party2 = (richPresence2.Party = new Party());
							num = 29;
							num2 = num;
							continue;
						}
						case 24:
						{
							Assets assets2 = (richPresence2.Assets = new Assets());
							num = 8;
							num2 = num;
							continue;
						}
						case 9:
						{
							long num4 = ((DateTimeOffset)DateTime.Now).ToUnixTimeMilliseconds();
							long num5 = result3 + result2 * 60 + result * 3600;
							richPresence.Timestamps = new Timestamps
							{
								StartUnixMilliseconds = (ulong)(num4 - num5 * 1000)
							};
							num = 18;
							num2 = num;
							continue;
						}
						case 19:
						{
							Assets assets2 = (richPresence2.Assets = new Assets());
							num = 26;
							num2 = num;
							continue;
						}
						case 12:
							richPresence.Assets.LargeImageText = eval_e5;
							richPresence2 = richPresence;
							num = 7;
							num2 = num;
							continue;
						case 7:
							if (richPresence2.Assets == null)
							{
								num = 24;
								num2 = num;
								continue;
							}
							goto case 8;
						case 8:
							richPresence.Assets.SmallImageKey = eval_e6;
							richPresence2 = richPresence;
							num = 11;
							num2 = num;
							continue;
						case 11:
							if (richPresence2.Assets == null)
							{
								num = 15;
								num2 = num;
								continue;
							}
							goto case 13;
						case 21:
							richPresence.Buttons = new DiscordRPC.Button[1] { button2 };
							num = 1;
							num2 = num;
							continue;
						case 6:
							if (button != null)
							{
								num = 22;
								num2 = num;
								continue;
							}
							goto IL_011e;
						case 29:
							richPresence.Party.ID = ey;
							richPresence.Party.Privacy = Party.PrivacySetting.Public;
							eval_e8.SetPresence(richPresence);
							Environment.GetCommandLineArgs();
							num = 28;
							num2 = num;
							continue;
						case 28:
							goto end_IL_0027;
							IL_011e:
							num = 17;
							num2 = num;
							continue;
						}
						goto case 0;
						continue;
						end_IL_0027:
						break;
					}
					break;
				}
				case 0:
					richPresence = new RichPresence();
					richPresence.Details = Name_players_local;
					num = 5;
					num2 = num;
					goto default;
				}
				break;
			}
			}
		}
		catch (Exception ex)
		{
			System.Windows.MessageBox.Show("[StatusUpdateDiscord] " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
		num = 0;
		_ = num;
		num = 1;
		if (num == 0)
		{
		}
	}

	private void eval_a(object A_0, ErrorMessage A_1)
	{
		short num = 0;
		_ = num;
		num = -2366;
		short num2 = num;
		num = -2366;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		MessageBoxWindow.Show(this, "Ошибка (" + A_1.Code.ToString() + ")", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	private void eval_a(object A_0, ReadyMessage A_1)
	{
		short num = 0;
		_ = num;
		num = 8194;
		short num2 = num;
		num = 8194;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num == 0)
		{
		}
	}

	private void eval_a(object A_0, PresenceMessage A_1)
	{
		short num = 0;
		_ = num;
		num = 31541;
		short num2 = num;
		num = 31541;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num == 0)
		{
		}
	}

	private void eval_aw(object A_0, EventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = -15665;
		short num2 = num;
		num = -15665;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_ex.Stop();
		eval_at();
	}

	protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
	{
		short num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 26865;
		short num2 = num;
		num = 26865;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_e9?.Invoke(this, new PropertyChangedEventArgs(propertyName));
	}

	[DebuggerNonUserCode]
	[GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
	internal Delegate eval_a(Type A_0, string A_1)
	{
		short num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = -25292;
		short num2 = num;
		num = -25292;
		switch (num2 == num)
		{
		default:
			num = 0;
			if (num != 0)
			{
			}
			return Delegate.CreateDelegate(A_0, this, A_1);
		}
	}

	static MainWindow()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -5051;
		short num2 = num;
		num = -5051;
		switch (num2 == num)
		{
		default:
			num = 0;
			_ = num;
			break;
		case true:
			break;
		}
		num = 0;
		if (num != 0)
		{
		}
		name_messege = "[DayZavr Dayz]";
		versionlocal = Assembly.GetExecutingAssembly().GetName().Version.ToString(2);
		NameDirGamePatchTorrent = "data";
		MainWindow.m_eval_ab = "DayZavr Dayz";
		Enable_Shop = false;
		Enable_Discount = false;
		Enable_UploadGame = false;
		OpenUser = false;
		CheckGameMods = true;
		CheckGameFileServer = false;
		GameLicense = false;
		connectudp = 0;
		IfStopedUload = false;
		InfoHeshF = string.Empty;
		Md5F = string.Empty;
		ListFileModsDownload = new List<string>();
		OpenDownloader = false;
		UpdateStatus = false;
		LoadResume = false;
		en = null;
		eval_ep = 0;
		eval_eq = 0;
		eval_er = 0;
		eval_es = 0;
		FirstRunStatistic = false;
	}

	[CompilerGenerated]
	private void eval_av(object A_0, EventArgs A_1)
	{
		short num = 17390;
		short num2 = num;
		num = 17390;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_h5.IsEnabled = true;
		this.m_eval_cd = false;
	}

	[CompilerGenerated]
	private void eval_au(object A_0, EventArgs A_1)
	{
		short num = -17012;
		short num2 = num;
		num = -17012;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_gt.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_k(object A_0, AsyncCompletedEventArgs A_1)
	{
		int num2 = default(int);
		short num;
		try
		{
			num = 0;
			num2 = num;
			switch (num2)
			{
			default:
				switch (0)
				{
				default:
					while (true)
					{
						switch (num2)
						{
						case 3:
							if (dy.Length == 0L)
							{
								num = 5;
								num2 = num;
								continue;
							}
							goto case 1;
						case 0:
							MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для запуска игры, попробуйте перезапустить лаунчер и повторить попытку.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
							num = 1;
							num2 = num;
							continue;
						case 5:
							eval_bw();
							num = 4;
							num2 = num;
							continue;
						case 4:
							if (Langve == "RU")
							{
								num = 0;
								num2 = num;
							}
							else
							{
								MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the run game, try restarting the launcher and try again.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
								num = 2;
								num2 = num;
							}
							continue;
						case 1:
						case 2:
							num = 6;
							num2 = num;
							continue;
						case 6:
							goto end_IL_0028;
						}
						goto case 0;
						continue;
						end_IL_0028:
						break;
					}
					break;
				case 0:
					dy = new FileInfo(DirLocal + "\\FILE.log");
					num = 3;
					num2 = num;
					goto default;
				}
				break;
			}
		}
		catch
		{
		}
		num = 13455;
		short num3 = num;
		num = 13455;
		switch (num3 == num)
		{
		default:
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			d3.Clear();
			try
			{
				num = 1;
				if (num != 0)
				{
				}
				string text = string.Empty;
				StreamReader streamReader = new StreamReader(DirLocal + "\\FILE.log");
				try
				{
					num = 3;
					num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 6:
							break;
						case 3:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						case 5:
							if (!string.IsNullOrEmpty(text))
							{
								num = 1;
								num2 = num;
								continue;
							}
							goto default;
						case 1:
							d3.Add(new FILEINFO
							{
								FILEEXIST = text.Split('|')[0],
								FILENEWMD5 = text.Split('|')[1]
							});
							num = 4;
							num2 = num;
							continue;
						default:
							num = 0;
							num2 = num;
							continue;
						case 0:
							if ((text = streamReader.ReadLine()) != null)
							{
								num = 5;
								num2 = num;
							}
							else
							{
								num = 2;
								num2 = num;
							}
							continue;
						case 2:
							num = 6;
							num2 = num;
							continue;
						}
						break;
					}
				}
				finally
				{
					num = 1;
					num2 = num;
					while (true)
					{
						switch (num2)
						{
						case 1:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (streamReader != null)
							{
								num = 0;
								num2 = num;
								continue;
							}
							break;
						case 0:
							((IDisposable)streamReader).Dispose();
							num = 2;
							num2 = num;
							continue;
						case 2:
							break;
						}
						break;
					}
				}
			}
			catch (Exception ex)
			{
				eval_bw();
				MessageBoxWindow.Show(this, "CheckGameFileExist : " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
			break;
		case false:
		case true:
			break;
		}
		try
		{
			int num4 = default(int);
			string text2 = default(string);
			switch (0)
			{
			default:
			{
				string fILEEXIST = default(string);
				bool flag = default(bool);
				MessageBoxResult messageBoxResult = default(MessageBoxResult);
				while (true)
				{
					switch (num2)
					{
					case 17:
						eval_bm();
						num = 18;
						num2 = num;
						continue;
					case 25:
						if (!fILEEXIST.EndsWith("avatar.png"))
						{
							num = 36;
							num2 = num;
							continue;
						}
						goto case 3;
					case 41:
						num = 15;
						num2 = num;
						continue;
					case 15:
						if (!File.Exists(Directory_game + fILEEXIST))
						{
							num = 45;
							num2 = num;
							continue;
						}
						goto case 3;
					case 5:
						num = 49;
						num2 = num;
						continue;
					case 49:
						if (!fILEEXIST.EndsWith("SSE.ini"))
						{
							num = 41;
							num2 = num;
							continue;
						}
						goto case 3;
					case 44:
					case 53:
						num = 1;
						num2 = num;
						continue;
					case 1:
						if (num4 < d3.Count)
						{
							fILEEXIST = d3[num4].FILEEXIST;
							num = 25;
							num2 = num;
						}
						else
						{
							num = 39;
							num2 = num;
						}
						continue;
					case 13:
						if (flag)
						{
							num = 26;
							num2 = num;
							continue;
						}
						goto case 4;
					case 29:
						eval_a6();
						eval_b7();
						num = 54;
						num2 = num;
						continue;
					case 54:
						if (eval_fe.Visibility == Visibility.Hidden)
						{
							num = 17;
							num2 = num;
							continue;
						}
						goto case 18;
					case 18:
						eval_be();
						num = 22;
						num2 = num;
						continue;
					case 0:
						num = 48;
						num2 = num;
						continue;
					case 48:
						if (Langve == "RU")
						{
							num = 10;
							num2 = num;
						}
						else
						{
							messageBoxResult = MessageBoxWindow.Show(this, "Found missing game files!. Update to current version ?", name_messege, MessageBoxButton.YesNo);
							num = 11;
							num2 = num;
						}
						continue;
					case 45:
						text2 = text2 + fILEEXIST + ",";
						num = 3;
						num2 = num;
						continue;
					case 39:
						num = 12;
						num2 = num;
						continue;
					case 12:
						if (text2 != string.Empty)
						{
							num = 0;
							num2 = num;
							continue;
						}
						goto case 9;
					case 3:
						num4++;
						num = 53;
						num2 = num;
						continue;
					case 10:
						messageBoxResult = MessageBoxWindow.Show(this, "Обнаружено отсутствие файлов игры!. Обновить до актуальной версии ?", name_messege, MessageBoxButton.YesNo);
						num = 23;
						num2 = num;
						continue;
					case 51:
						num = 6;
						num2 = num;
						continue;
					case 6:
						if (text2 == string.Empty)
						{
							num = 33;
							num2 = num;
							continue;
						}
						goto case 4;
					case 36:
						num = 14;
						num2 = num;
						continue;
					case 14:
						if (!fILEEXIST.EndsWith("SmartSteamEmu.log"))
						{
							num = 28;
							num2 = num;
							continue;
						}
						goto case 3;
					case 9:
						num = 30;
						num2 = num;
						continue;
					case 30:
						if (eval_ce)
						{
							num = 51;
							num2 = num;
							continue;
						}
						goto case 4;
					case 11:
					case 23:
						num = 31;
						num2 = num;
						continue;
					case 31:
						if (messageBoxResult == MessageBoxResult.Yes)
						{
							num = 29;
							num2 = num;
						}
						else
						{
							num = 27;
							num2 = num;
						}
						continue;
					case 52:
						try
						{
							StreamWriter streamWriter2 = new StreamWriter(Directory_Launcher + "\\client.ini");
							try
							{
								streamWriter2.WriteLine(Updateclient);
								streamWriter2.Close();
							}
							finally
							{
								num = 1;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (streamWriter2 != null)
										{
											num = 0;
											num2 = num;
											continue;
										}
										break;
									case 0:
										((IDisposable)streamWriter2).Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
						}
						catch (Exception ex4)
						{
							MessageBoxWindow.Show(this, ex4.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						goto IL_046d;
					case 27:
						if (eval_fe.Visibility == Visibility.Hidden)
						{
							num = 7;
							num2 = num;
							continue;
						}
						goto case 22;
					case 26:
						num = 35;
						num2 = num;
						continue;
					case 35:
						if (File.Exists(Directory_Launcher + "\\client.ini"))
						{
							num = 2;
							num2 = num;
							continue;
						}
						goto IL_0e17;
					case 47:
						num = 55;
						num2 = num;
						continue;
					case 55:
						if (!fILEEXIST.EndsWith("item_schema.bin"))
						{
							num = 8;
							num2 = num;
							continue;
						}
						goto case 3;
					case 28:
						num = 20;
						num2 = num;
						continue;
					case 20:
						if (!fILEEXIST.EndsWith("DayZSetting.xml"))
						{
							num = 24;
							num2 = num;
							continue;
						}
						goto case 3;
					case 2:
						try
						{
							File.Delete(Directory_Launcher + "\\client.ini");
						}
						catch (Exception ex3)
						{
							MessageBoxWindow.Show(this, ex3.Message + " !-=scorpions=-", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						goto IL_0e17;
					case 8:
						num = 37;
						num2 = num;
						continue;
					case 37:
						if (!fILEEXIST.EndsWith("ALI213.ini"))
						{
							num = 5;
							num2 = num;
							continue;
						}
						goto case 3;
					case 56:
						try
						{
							string text3 = "";
							StreamReader streamReader2 = new StreamReader(Directory_Launcher + "\\client.ini");
							try
							{
								num = 6;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 6:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 9:
										eval_b7();
										num = 5;
										num2 = num;
										continue;
									case 5:
										if (eval_fe.Visibility == Visibility.Hidden)
										{
											num = 11;
											num2 = num;
											continue;
										}
										goto case 3;
									case 11:
										eval_bm();
										num = 3;
										num2 = num;
										continue;
									case 13:
										if (eval_fe.Visibility == Visibility.Hidden)
										{
											num = 4;
											num2 = num;
											continue;
										}
										goto default;
									default:
										num = 7;
										num2 = num;
										continue;
									case 7:
										if ((text3 = streamReader2.ReadLine()) == null)
										{
											num = 2;
											num2 = num;
										}
										else
										{
											num = 0;
											num2 = num;
										}
										continue;
									case 10:
										num = 12;
										num2 = num;
										continue;
									case 12:
										if (!(text3 != Updateclient))
										{
											num = 13;
											num2 = num;
										}
										else
										{
											num = 9;
											num2 = num;
										}
										continue;
									case 3:
										eval_fo.Value = 0.0;
										eval_be();
										num = 8;
										num2 = num;
										continue;
									case 4:
										eval_bm();
										num = 1;
										num2 = num;
										continue;
									case 0:
										if (text3 != string.Empty)
										{
											num = 10;
											num2 = num;
											continue;
										}
										goto default;
									case 2:
										streamReader2.Close();
										streamReader2.Dispose();
										num = 14;
										num2 = num;
										continue;
									case 14:
										break;
									}
									break;
								}
							}
							finally
							{
								num = 1;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (streamReader2 != null)
										{
											num = 0;
											num2 = num;
											continue;
										}
										break;
									case 0:
										((IDisposable)streamReader2).Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
						}
						catch
						{
						}
						goto IL_046d;
					case 24:
						num = 21;
						num2 = num;
						continue;
					case 21:
						if (!fILEEXIST.EndsWith("items.bin"))
						{
							num = 50;
							num2 = num;
							continue;
						}
						goto case 3;
					case 7:
						BoxServer.IsEnabled = true;
						eval_bm();
						num = 46;
						num2 = num;
						continue;
					case 57:
						num = 34;
						num2 = num;
						continue;
					case 34:
						if (eval_fe.Visibility == Visibility.Hidden)
						{
							num = 38;
							num2 = num;
							continue;
						}
						goto case 32;
					case 22:
					case 46:
						RefreshServerList();
						num = 9;
						num2 = num;
						continue;
					case 32:
						num = 52;
						num2 = num;
						continue;
					case 38:
						eval_bm();
						num = 32;
						num2 = num;
						continue;
					case 50:
						num = 19;
						num2 = num;
						continue;
					case 19:
						if (!fILEEXIST.EndsWith("inventory.bin"))
						{
							num = 47;
							num2 = num;
							continue;
						}
						goto case 3;
					case 40:
						try
						{
							StreamWriter streamWriter = new StreamWriter(Directory_Launcher + "\\mods.ini");
							try
							{
								streamWriter.WriteLine(Updatemods);
								streamWriter.Close();
							}
							finally
							{
								num = 1;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 1:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										if (streamWriter != null)
										{
											num = 0;
											num2 = num;
											continue;
										}
										break;
									case 0:
										((IDisposable)streamWriter).Dispose();
										num = 2;
										num2 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
						}
						catch (Exception ex2)
						{
							MessageBoxWindow.Show(this, ex2.Message + " !WRVL", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						}
						goto IL_0f8d;
					case 33:
						flag = false;
						num = 43;
						num2 = num;
						continue;
					case 43:
						if (!File.Exists(Directory_Launcher + "\\mods.ini"))
						{
							num = 40;
							num2 = num;
							continue;
						}
						goto IL_0f8d;
					case 16:
						if (File.Exists(Directory_Launcher + "\\client.ini"))
						{
							num = 56;
							num2 = num;
						}
						else
						{
							num = 57;
							num2 = num;
						}
						continue;
					case 4:
						num = 42;
						num2 = num;
						continue;
					case 42:
						return;
						IL_0f8d:
						num = 16;
						num2 = num;
						continue;
						IL_0e17:
						flag = false;
						num = 4;
						num2 = num;
						continue;
						IL_046d:
						num = 13;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
				text2 = string.Empty;
				num4 = 0;
				num = 44;
				num2 = num;
				goto default;
			}
		}
		catch (Exception ex5)
		{
			eval_bw();
			MessageBoxWindow.Show(this, "CheckGameFileExist3 : " + ex5.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
		}
	}

	[CompilerGenerated]
	private void eval_at(object A_0, EventArgs A_1)
	{
		short num = 556;
		short num2 = num;
		num = 556;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		h6.IsEnabled = true;
		OpenDownloader = false;
	}

	[CompilerGenerated]
	private void eval_as(object A_0, EventArgs A_1)
	{
		short num = -3013;
		short num2 = num;
		num = -3013;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		eval_gl.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_ar(object A_0, EventArgs A_1)
	{
		short num = 4043;
		short num2 = num;
		num = 4043;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_h5.IsEnabled = true;
		this.m_eval_cd = false;
	}

	[CompilerGenerated]
	private void eval_aq(object A_0, EventArgs A_1)
	{
		short num = -20177;
		short num2 = num;
		num = -20177;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		eval_gt.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_ap(object A_0, EventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -8554;
		short num2 = num;
		num = -8554;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_h5.IsEnabled = true;
		this.m_eval_cd = true;
	}

	[CompilerGenerated]
	private void eval_ao(object A_0, EventArgs A_1)
	{
		short num = -3237;
		short num2 = num;
		num = -3237;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		h6.IsEnabled = true;
		OpenDownloader = false;
	}

	[CompilerGenerated]
	private void eval_an(object A_0, EventArgs A_1)
	{
		short num = -3023;
		short num2 = num;
		num = -3023;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_gl.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_am(object A_0, EventArgs A_1)
	{
		short num = -22513;
		short num2 = num;
		num = -22513;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		h4.IsEnabled = true;
		OpenUser = false;
	}

	[CompilerGenerated]
	private void eval_al(object A_0, EventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -17340;
		short num2 = num;
		num = -17340;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		gb.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_ak(object A_0, EventArgs A_1)
	{
		short num = -26074;
		short num2 = num;
		num = -26074;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		h4.IsEnabled = true;
		OpenUser = true;
	}

	[CompilerGenerated]
	private void eval_j(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num;
		try
		{
			num = 0;
			int num2 = num;
			switch (num2)
			{
			default:
			{
				IEnumerator enumerator = default(IEnumerator);
				switch (0)
				{
				default:
				{
					int num3 = default(int);
					XmlNode xmlNode = default(XmlNode);
					IDisposable disposable = default(IDisposable);
					while (true)
					{
						switch (num2)
						{
						case 4:
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 3:
											if (Langve == "RU")
											{
												num = 4;
												num2 = num;
											}
											else
											{
												eval_cg.BGo.Content = "More details";
												num = 0;
												num2 = num;
											}
											continue;
										case 4:
											eval_cg.BGo.Content = "Подробнее";
											num = 2;
											num2 = num;
											continue;
										case 0:
										case 2:
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_00a0;
										}
										goto case 0;
										continue;
										end_IL_00a0:
										break;
									}
									break;
								case 0:
									while (true)
									{
										eval_cg = new News
										{
											NewsText = eval_cf[num3].TXT_ALLNEWS,
											NewsTextHeadline = eval_cf[num3].Headline_ALLNEWS,
											NewsTexturl = eval_cf[num3].URL_ALLNEWS,
											NewsIMAGE = eval_cf[num3].IMAGE_ALLNEWS
										};
										BoxNews.Items.Add(eval_cg);
										num = -32603;
										short num4 = num;
										num = -32603;
										switch (num4 == num)
										{
										case false:
										case true:
											continue;
										}
										break;
									}
									num = 0;
									if (num != 0)
									{
									}
									num = 3;
									num2 = num;
									goto default;
								}
							}
							catch (Exception ex2)
							{
								System.Windows.MessageBox.Show("LoadAllNews[UPDATEN] :" + ex2.Message);
							}
							num3++;
							num = 1;
							num2 = num;
							continue;
						case 0:
						case 1:
							num = 2;
							num2 = num;
							continue;
						case 2:
							if (num3 >= eval_cf.Count)
							{
								num = 6;
								num2 = num;
								continue;
							}
							num = 1;
							if (num != 0)
							{
							}
							num = 4;
							num2 = num;
							continue;
						case 5:
							try
							{
								num = 3;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 3:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										num = 4;
										num2 = num;
										continue;
									case 4:
										if (!enumerator.MoveNext())
										{
											num = 2;
											num2 = num;
										}
										else
										{
											xmlNode = (XmlNode)enumerator.Current;
											num = 0;
											num2 = num;
										}
										continue;
									case 0:
										try
										{
											eval_cf.Add(new ENews
											{
												Headline_ALLNEWS = xmlNode.SelectSingleNode("Headline").InnerText,
												URL_ALLNEWS = xmlNode.SelectSingleNode("VK").InnerText,
												TXT_ALLNEWS = xmlNode.SelectSingleNode("NEWS").InnerText,
												IMAGE_ALLNEWS = xmlNode.SelectSingleNode("IMAGE").InnerText
											});
										}
										catch (Exception ex)
										{
											System.Windows.MessageBox.Show("LoadAllNews[XmlNode] :" + ex.Message);
										}
										goto default;
									case 2:
										num = 1;
										num2 = num;
										continue;
									case 1:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_0404;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_0404;
										}
										goto case 0;
										continue;
										end_IL_0404:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
							num3 = 0;
							num = 0;
							num2 = num;
							continue;
						case 6:
							num = 3;
							num2 = num;
							continue;
						case 3:
							goto end_IL_0028;
						}
						goto case 0;
						continue;
						end_IL_0028:
						break;
					}
					break;
				}
				case 0:
					eval_dm.Load(DirLocal + "\\ALLNews.xml");
					enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
					num = 5;
					num2 = num;
					goto default;
				}
				break;
			}
			}
		}
		catch (Exception ex3)
		{
			System.Windows.MessageBox.Show("LoadAllNews[DownloadFileCompleted] :" + ex3.Message);
		}
		num = 0;
		_ = num;
	}

	[CompilerGenerated]
	private void eval_as()
	{
		short num = -1548;
		short num2 = num;
		num = -1548;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_a<ScrollViewer>(BoxNews).FirstOrDefault().LineRight();
	}

	[CompilerGenerated]
	private void eval_ar()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 21842;
		short num2 = num;
		num = 21842;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_a<ScrollViewer>(BoxNews).FirstOrDefault().LineLeft();
	}

	[CompilerGenerated]
	private void eval_aq()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = 6236;
			short num2 = num;
			num = 6236;
			switch (num2 == num)
			{
			default:
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				num = 0;
				_ = num;
				eval_is.BoxShop.Visibility = Visibility.Hidden;
				return;
			case false:
			case true:
				break;
			}
		}
		eval_ga.BoxShop.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_i(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
			switch (0)
			{
			default:
			{
				XmlNode xmlNode8 = default(XmlNode);
				IDisposable disposable = default(IDisposable);
				XmlNode xmlNode4 = default(XmlNode);
				XmlNode xmlNode6 = default(XmlNode);
				XmlNode xmlNode2 = default(XmlNode);
				XmlNode xmlNode7 = default(XmlNode);
				XmlNode xmlNode5 = default(XmlNode);
				XmlNode xmlNode3 = default(XmlNode);
				XmlNode xmlNode = default(XmlNode);
				while (true)
				{
					switch (num2)
					{
					case 2:
						try
						{
							eval_c2.Clear();
							eval_dm.Load(DirLocal + "\\inventory.xml");
							IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
							try
							{
								num = 3;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 3:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 4:
										try
										{
											eval_c2.Add(new EShop_inventory
											{
												Name = xmlNode8.SelectSingleNode("name").InnerText,
												Price = xmlNode8.SelectSingleNode("price").InnerText,
												Set = xmlNode8.SelectSingleNode("set").InnerText,
												Image = xmlNode8.SelectSingleNode("image").InnerText,
												Cmd = xmlNode8.SelectSingleNode("cmd").InnerText
											});
										}
										catch (Exception ex8)
										{
											System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex8.Message);
											return;
										}
										goto default;
									default:
										num = 2;
										num2 = num;
										continue;
									case 2:
										if (enumerator.MoveNext())
										{
											xmlNode8 = (XmlNode)enumerator.Current;
											num = 4;
											num2 = num;
										}
										else
										{
											num = 0;
											num2 = num;
										}
										continue;
									case 0:
										num = 1;
										num2 = num;
										continue;
									case 1:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_026c;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_026c;
										}
										goto case 0;
										continue;
										end_IL_026c:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
						}
						catch
						{
							bool flag = true;
						}
						num = 0;
						_ = num;
						num = 1;
						if (num != 0)
						{
						}
						num = 0;
						num2 = num;
						continue;
					case 1:
						try
						{
							eval_c5.Clear();
							eval_dm.Load(DirLocal + "\\medic.xml");
							IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
							try
							{
								num = 3;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 3:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 0:
										try
										{
											eval_c5.Add(new EShop_medic
											{
												Name = xmlNode4.SelectSingleNode("name").InnerText,
												Price = xmlNode4.SelectSingleNode("price").InnerText,
												Description = xmlNode4.SelectSingleNode("description").InnerText,
												Set = xmlNode4.SelectSingleNode("set").InnerText,
												Image = xmlNode4.SelectSingleNode("image").InnerText,
												Cmd = xmlNode4.SelectSingleNode("cmd").InnerText
											});
										}
										catch (Exception ex4)
										{
											System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex4.Message);
											return;
										}
										goto default;
									default:
										num = 4;
										num2 = num;
										continue;
									case 4:
										if (!enumerator.MoveNext())
										{
											num = 2;
											num2 = num;
										}
										else
										{
											xmlNode4 = (XmlNode)enumerator.Current;
											num = 0;
											num2 = num;
										}
										continue;
									case 2:
										num = 1;
										num2 = num;
										continue;
									case 1:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_04c7;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_04c7;
										}
										goto case 0;
										continue;
										end_IL_04c7:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
						}
						catch
						{
							bool flag = true;
						}
						LoadShop();
						num = 6;
						num2 = num;
						continue;
					case 6:
						return;
					case 7:
						try
						{
							eval_cy.Clear();
							eval_dm.Load(DirLocal + "\\loot.xml");
							IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
							try
							{
								num = 3;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 3:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										num = 2;
										num2 = num;
										continue;
									case 2:
										if (enumerator.MoveNext())
										{
											xmlNode6 = (XmlNode)enumerator.Current;
											num = 4;
											num2 = num;
										}
										else
										{
											num = 0;
											num2 = num;
										}
										continue;
									case 4:
										try
										{
											eval_cy.Add(new EShop_loot
											{
												Name = xmlNode6.SelectSingleNode("name").InnerText,
												Price = xmlNode6.SelectSingleNode("price").InnerText,
												Description = xmlNode6.SelectSingleNode("description").InnerText,
												Set = xmlNode6.SelectSingleNode("set").InnerText,
												Image = xmlNode6.SelectSingleNode("image").InnerText,
												Cmd = xmlNode6.SelectSingleNode("cmd").InnerText
											});
										}
										catch (Exception ex6)
										{
											System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex6.Message);
											return;
										}
										goto default;
									case 0:
										num = 1;
										num2 = num;
										continue;
									case 1:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_0736;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_0736;
										}
										goto case 0;
										continue;
										end_IL_0736:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
						}
						catch
						{
							bool flag = true;
						}
						num = 8;
						num2 = num;
						continue;
					case 3:
						try
						{
							eval_c0.Clear();
							eval_dm.Load(DirLocal + "\\set.xml");
							IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
							try
							{
								num = 3;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 3:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										num = 4;
										num2 = num;
										continue;
									case 4:
										if (!enumerator.MoveNext())
										{
											num = 2;
											num2 = num;
										}
										else
										{
											xmlNode2 = (XmlNode)enumerator.Current;
											num = 0;
											num2 = num;
										}
										continue;
									case 0:
										try
										{
											eval_c0.Add(new EShop_set
											{
												Name = xmlNode2.SelectSingleNode("name").InnerText,
												Price = xmlNode2.SelectSingleNode("price").InnerText,
												Description = xmlNode2.SelectSingleNode("description").InnerText,
												Set = xmlNode2.SelectSingleNode("set").InnerText,
												Image = xmlNode2.SelectSingleNode("image").InnerText,
												Cmd = xmlNode2.SelectSingleNode("cmd").InnerText
											});
										}
										catch (Exception ex2)
										{
											System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_SET] :" + ex2.Message);
											return;
										}
										goto default;
									case 2:
										num = 1;
										num2 = num;
										continue;
									case 1:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_0971;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_0971;
										}
										goto case 0;
										continue;
										end_IL_0971:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
						}
						catch
						{
							bool flag = true;
						}
						num = 4;
						num2 = num;
						continue;
					case 8:
						try
						{
							while (true)
							{
								eval_cz.Clear();
								eval_dm.Load(DirLocal + "\\weapon.xml");
								IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
								try
								{
									num = 4;
									num2 = num;
									while (true)
									{
										switch (num2)
										{
										case 4:
											switch (0)
											{
											default:
												continue;
											case 0:
												break;
											}
											goto default;
										case 3:
											try
											{
												eval_cz.Add(new EShop_weapon
												{
													Name = xmlNode7.SelectSingleNode("name").InnerText,
													Price = xmlNode7.SelectSingleNode("price").InnerText,
													Description = xmlNode7.SelectSingleNode("description").InnerText,
													Set = xmlNode7.SelectSingleNode("set").InnerText,
													Image = xmlNode7.SelectSingleNode("image").InnerText,
													Cmd = xmlNode7.SelectSingleNode("cmd").InnerText
												});
											}
											catch (Exception ex7)
											{
												System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex7.Message);
												return;
											}
											goto default;
										default:
											num = 0;
											num2 = num;
											continue;
										case 0:
											if (enumerator.MoveNext())
											{
												xmlNode7 = (XmlNode)enumerator.Current;
												num = 3;
												num2 = num;
											}
											else
											{
												num = 1;
												num2 = num;
											}
											continue;
										case 1:
											num = 2;
											num2 = num;
											continue;
										case 2:
											break;
										}
										break;
									}
								}
								finally
								{
									switch (0)
									{
									default:
										while (true)
										{
											switch (num2)
											{
											case 2:
												if (disposable != null)
												{
													num = 0;
													num2 = num;
													continue;
												}
												goto end_IL_0bb0;
											case 0:
												disposable.Dispose();
												num = 1;
												num2 = num;
												continue;
											case 1:
												goto end_IL_0bb0;
											}
											goto case 0;
											continue;
											end_IL_0bb0:
											break;
										}
										break;
									case 0:
										disposable = enumerator as IDisposable;
										num = 2;
										num2 = num;
										goto default;
									}
								}
								num = -22575;
								short num3 = num;
								num = -22575;
								switch (num3 == num)
								{
								case false:
								case true:
									continue;
								}
								num = 0;
								if (num == 0)
								{
								}
								break;
							}
						}
						catch
						{
							bool flag = true;
						}
						num = 3;
						num2 = num;
						continue;
					case 0:
						try
						{
							eval_c3.Clear();
							eval_dm.Load(DirLocal + "\\mask.xml");
							IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
							try
							{
								num = 4;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 4:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 1:
										try
										{
											eval_c3.Add(new EShop_mask
											{
												Name = xmlNode5.SelectSingleNode("name").InnerText,
												Price = xmlNode5.SelectSingleNode("price").InnerText,
												Description = xmlNode5.SelectSingleNode("description").InnerText,
												Set = xmlNode5.SelectSingleNode("set").InnerText,
												Image = xmlNode5.SelectSingleNode("image").InnerText,
												Cmd = xmlNode5.SelectSingleNode("cmd").InnerText
											});
										}
										catch (Exception ex5)
										{
											System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex5.Message);
											return;
										}
										goto default;
									default:
										num = 3;
										num2 = num;
										continue;
									case 3:
										if (!enumerator.MoveNext())
										{
											num = 0;
											num2 = num;
										}
										else
										{
											xmlNode5 = (XmlNode)enumerator.Current;
											num = 1;
											num2 = num;
										}
										continue;
									case 0:
										num = 2;
										num2 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_0e39;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_0e39;
										}
										goto case 0;
										continue;
										end_IL_0e39:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
						}
						catch
						{
							bool flag = true;
						}
						num = 5;
						num2 = num;
						continue;
					case 4:
						try
						{
							eval_c1.Clear();
							eval_dm.Load(DirLocal + "\\car.xml");
							IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
							try
							{
								num = 4;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 4:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									default:
										num = 3;
										num2 = num;
										continue;
									case 3:
										if (!enumerator.MoveNext())
										{
											num = 0;
											num2 = num;
										}
										else
										{
											xmlNode3 = (XmlNode)enumerator.Current;
											num = 1;
											num2 = num;
										}
										continue;
									case 1:
										try
										{
											eval_c1.Add(new EShop_car
											{
												Name = xmlNode3.SelectSingleNode("name").InnerText,
												Description = xmlNode3.SelectSingleNode("description").InnerText,
												Price = xmlNode3.SelectSingleNode("price").InnerText,
												Set = xmlNode3.SelectSingleNode("set").InnerText,
												Image = xmlNode3.SelectSingleNode("image").InnerText,
												Cmd = xmlNode3.SelectSingleNode("cmd").InnerText
											});
										}
										catch (Exception ex3)
										{
											System.Windows.MessageBox.Show("LoadShoploot[UPSHOP_CAR] :" + ex3.Message);
											return;
										}
										goto default;
									case 0:
										num = 2;
										num2 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_1075;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_1075;
										}
										goto case 0;
										continue;
										end_IL_1075:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
						}
						catch
						{
							bool flag = true;
						}
						num = 2;
						num2 = num;
						continue;
					case 5:
						try
						{
							eval_c4.Clear();
							eval_dm.Load(DirLocal + "\\base.xml");
							IEnumerator enumerator = eval_dm.SelectNodes("/TEXT/number").GetEnumerator();
							try
							{
								num = 4;
								num2 = num;
								while (true)
								{
									switch (num2)
									{
									case 4:
										switch (0)
										{
										default:
											continue;
										case 0:
											break;
										}
										goto default;
									case 3:
										try
										{
											eval_c4.Add(new EShop_base
											{
												Name = xmlNode.SelectSingleNode("name").InnerText,
												Price = xmlNode.SelectSingleNode("price").InnerText,
												Description = xmlNode.SelectSingleNode("description").InnerText,
												Set = xmlNode.SelectSingleNode("set").InnerText,
												Image = xmlNode.SelectSingleNode("image").InnerText,
												Cmd = xmlNode.SelectSingleNode("cmd").InnerText
											});
										}
										catch (Exception ex)
										{
											System.Windows.MessageBox.Show("LoadShop[UPSHOP_LOOT] :" + ex.Message);
											return;
										}
										goto default;
									default:
										num = 0;
										num2 = num;
										continue;
									case 0:
										if (enumerator.MoveNext())
										{
											xmlNode = (XmlNode)enumerator.Current;
											num = 3;
											num2 = num;
										}
										else
										{
											num = 1;
											num2 = num;
										}
										continue;
									case 1:
										num = 2;
										num2 = num;
										continue;
									case 2:
										break;
									}
									break;
								}
							}
							finally
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 2:
											if (disposable != null)
											{
												num = 0;
												num2 = num;
												continue;
											}
											goto end_IL_1335;
										case 0:
											disposable.Dispose();
											num = 1;
											num2 = num;
											continue;
										case 1:
											goto end_IL_1335;
										}
										goto case 0;
										continue;
										end_IL_1335:
										break;
									}
									break;
								case 0:
									disposable = enumerator as IDisposable;
									num = 2;
									num2 = num;
									goto default;
								}
							}
						}
						catch
						{
							bool flag = true;
						}
						num = 1;
						num2 = num;
						continue;
					}
					break;
				}
				goto case 0;
			}
			case 0:
			{
				bool flag = false;
				num = 7;
				num2 = num;
				goto default;
			}
			}
		}
	}

	[CompilerGenerated]
	private void eval_ap()
	{
		short num = -30653;
		short num2 = num;
		num = -30653;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_is.BoxShop.Items.Clear();
	}

	[CompilerGenerated]
	private void eval_ao()
	{
		short num = 2157;
		short num2 = num;
		num = 2157;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_ga.BoxShop.Items.Clear();
	}

	[CompilerGenerated]
	private void eval_an()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = 15742;
			short num2 = num;
			num = 15742;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_is.Lootline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Lootline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Lootline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Lootline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_am()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = -4539;
			short num2 = num;
			num = -4539;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_is.Weaponline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Weaponline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Weaponline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Weaponline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_al()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = 663;
			short num2 = num;
			num = 663;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 0;
				if (num != 0)
				{
				}
				num = 1;
				if (num != 0)
				{
				}
				eval_is.Setsline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Setsline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Setsline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Setsline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_ak()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = 18764;
			short num2 = num;
			num = 18764;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_is.Carsline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Carsline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Carsline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Carsline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_aj()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = 1;
			if (num != 0)
			{
			}
			num = 0;
			_ = num;
			num = 25704;
			short num2 = num;
			num = 25704;
			switch (num2 == num)
			{
			default:
			{
				num = 0;
				if (num != 0)
				{
				}
				eval_is.Heliline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Heliline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Heliline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Heliline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_ai()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = 12728;
			short num2 = num;
			num = 12728;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_is.Maskline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Maskline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Maskline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Maskline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_ah()
	{
		if (ij.Visibility == Visibility.Visible)
		{
			short num = -14049;
			short num2 = num;
			num = -14049;
			switch (num2 == num)
			{
			default:
				num = 0;
				_ = num;
				goto case true;
			case true:
			{
				num = 1;
				if (num != 0)
				{
				}
				num = 0;
				if (num != 0)
				{
				}
				eval_is.Baseline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Baseline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Baseline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Baseline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_ag()
	{
		short num = 1;
		if (num != 0)
		{
		}
		if (ij.Visibility == Visibility.Visible)
		{
			num = 0;
			_ = num;
			num = -11860;
			short num2 = num;
			num = -11860;
			switch (num2 == num)
			{
			default:
			{
				num = 0;
				if (num != 0)
				{
				}
				eval_is.Medicline.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.2)),
					AutoReverse = false
				};
				eval_is.Medicline.BeginAnimation(UIElement.OpacityProperty, animation);
				return;
			}
			case false:
			case true:
				break;
			}
		}
		eval_ga.Medicline.Visibility = Visibility.Visible;
		DoubleAnimation animation2 = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.2)),
			AutoReverse = false
		};
		eval_ga.Medicline.BeginAnimation(UIElement.OpacityProperty, animation2);
	}

	[CompilerGenerated]
	private void eval_af()
	{
		short num = 8;
		int num2 = num;
		while (true)
		{
			switch (num2)
			{
			case 8:
				switch (0)
				{
				default:
					goto end_IL_0020;
				case 0:
					break;
				}
				goto default;
			default:
			{
				if (ij.Visibility == Visibility.Visible)
				{
					num = 0;
					num2 = num;
					break;
				}
				eval_ga.BoxShop.Visibility = Visibility.Visible;
				DoubleAnimation animation2 = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.5)),
					AutoReverse = false
				};
				eval_ga.BoxShop.BeginAnimation(UIElement.OpacityProperty, animation2);
				num = 2;
				num2 = num;
				break;
			}
			case 10:
				eval_ga.BoxShop.ScrollIntoView(eval_ga.BoxShop.Items[0]);
				num = 13;
				num2 = num;
				break;
			case 13:
				num = 12;
				num2 = num;
				break;
			case 12:
				if (eval_is.BoxShop.Items.Count > 0)
				{
					num = 1;
					num2 = num;
					break;
				}
				return;
			case 0:
			{
				eval_is.BoxShop.Visibility = Visibility.Visible;
				DoubleAnimation animation = new DoubleAnimation
				{
					From = 0.0,
					To = 1.0,
					Duration = new Duration(TimeSpan.FromSeconds(0.5)),
					AutoReverse = false
				};
				eval_is.BoxShop.BeginAnimation(UIElement.OpacityProperty, animation);
				num = 4;
				num2 = num;
				break;
			}
			case 11:
			{
				num = 0;
				_ = num;
				num = 27649;
				short num3 = num;
				num = 27649;
				switch (num3 == num)
				{
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 3;
					num2 = num;
					goto end_IL_0020;
				case false:
				case true:
					break;
				}
				goto IL_05f5;
			}
			case 3:
				if (eval_ga.BoxShop.Items.Count > 0)
				{
					num = 10;
					num2 = num;
					break;
				}
				goto case 13;
			case 1:
				eval_is.BoxShop.ScrollIntoView(eval_is.BoxShop.Items[0]);
				num = 7;
				num2 = num;
				break;
			case 7:
				return;
			case 6:
				eval_ga.TextW.Text = "Спавн техники : возле Вас не должно быть никаких построек и ровная площадка!";
				eval_ga.TextSet.Text = "Спавн сетов : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
				eval_ga.TextLoot.Text = "Спавн лута : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
				eval_ga.TextBase.Text = "Спавн наборов для строительства : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
				eval_is.TextW.Text = "Спавн техники : возле Вас не должно быть никаких построек и ровная площадка!";
				eval_is.TextSet.Text = "Спавн сетов : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
				eval_is.TextLoot.Text = "Спавн лута : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
				eval_is.TextBase.Text = "Спавн наборов для строительства : если у Вас не хватает места, лут будет выпадать при спавне на землю / пол!";
				num = 9;
				num2 = num;
				break;
			case 9:
				num = 1;
				if (num == 0)
				{
				}
				goto case 11;
			case 2:
			case 4:
				eval_ga.BLOOT.IsEnabled = true;
				eval_ga.BSETS.IsEnabled = true;
				eval_ga.BCARS.IsEnabled = true;
				eval_ga.BWEAPON.IsEnabled = true;
				eval_ga.BHeli.IsEnabled = true;
				eval_ga.BMask.IsEnabled = true;
				eval_ga.BBase.IsEnabled = true;
				eval_ga.BMedic.IsEnabled = true;
				eval_is.BLOOT.IsEnabled = true;
				eval_is.BSETS.IsEnabled = true;
				eval_is.BCARS.IsEnabled = true;
				eval_is.BWEAPON.IsEnabled = true;
				eval_is.BHeli.IsEnabled = true;
				eval_is.BMask.IsEnabled = true;
				eval_is.BBase.IsEnabled = true;
				eval_is.BMedic.IsEnabled = true;
				goto IL_05f5;
			case 5:
				{
					if (!(Langve == "RU"))
					{
						eval_ga.TextBase.Text = "Spawn Build Kits: If you run out of space, loot will drop when spawning on the ground / floor!";
						eval_ga.TextLoot.Text = "Spawn Loot: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
						eval_ga.TextSet.Text = "Spawn Sets: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
						eval_ga.TextW.Text = "Spawn equipment: there should be no buildings near you and a flat area!";
						eval_is.TextBase.Text = "Spawn Build Kits: If you run out of space, loot will drop when spawning on the ground / floor!";
						eval_is.TextLoot.Text = "Spawn Loot: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
						eval_is.TextSet.Text = "Spawn Sets: If you don't have enough space, loot will drop when you spawn on the ground / floor!";
						eval_is.TextW.Text = "Spawn equipment: there should be no buildings near you and a flat area!";
						num = 11;
						num2 = num;
					}
					else
					{
						num = 6;
						num2 = num;
					}
					break;
				}
				IL_05f5:
				num = 5;
				num2 = num;
				break;
				end_IL_0020:
				break;
			}
		}
	}

	[CompilerGenerated]
	private void eval_ae()
	{
		short num = 11051;
		short num2 = num;
		num = 11051;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		eval_is.IsEnabled = false;
	}

	[CompilerGenerated]
	private void eval_ad()
	{
		short num = 30059;
		short num2 = num;
		num = 30059;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		gj.Content = UID_SC;
		eval_ip.Content = UID_SC;
	}

	[CompilerGenerated]
	private void eval_ac()
	{
		short num = -16351;
		short num2 = num;
		num = -16351;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "Вы не находитесь в игре (на сервере), пожалуйста зайдите на сам сервер и повторите попытку.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_ab()
	{
		short num = 5203;
		short num2 = num;
		num = 5203;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "You are not in the game (on the server), please go to the server itself and try again.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_aa()
	{
		short num = 21555;
		short num2 = num;
		num = 21555;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_is.IsEnabled = true;
	}

	[CompilerGenerated]
	private void eval_z()
	{
		short num = 6027;
		short num2 = num;
		num = 6027;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "У Вас недостаточно средств для покупки.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_y()
	{
		short num = -13745;
		short num2 = num;
		num = -13745;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "You don't have enough funds to buy.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_x()
	{
		short num = 13249;
		short num2 = num;
		num = 13249;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_is.IsEnabled = true;
	}

	[CompilerGenerated]
	private void eval_w()
	{
		short num = -31796;
		short num2 = num;
		num = -31796;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "У Вас на счету нет средств.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_v()
	{
		short num = 14230;
		short num2 = num;
		num = 14230;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "You have no funds in your account.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_u()
	{
		short num = -6970;
		short num2 = num;
		num = -6970;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_is.IsEnabled = true;
	}

	[CompilerGenerated]
	private void eval_t()
	{
		short num = 15060;
		short num2 = num;
		num = 15060;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "Ошибка.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_s()
	{
		short num = 10453;
		short num2 = num;
		num = 10453;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		MessageBoxWindow.Show(this, "Error.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_r()
	{
		short num = 24886;
		short num2 = num;
		num = 24886;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_is.IsEnabled = true;
	}

	[CompilerGenerated]
	private void eval_q()
	{
		short num = 25818;
		short num2 = num;
		num = 25818;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_is.IsEnabled = true;
	}

	[CompilerGenerated]
	private void eval_p()
	{
		short num = 20147;
		short num2 = num;
		num = 20147;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_is.IsEnabled = true;
	}

	[CompilerGenerated]
	private void eval_aj(object A_0, EventArgs A_1)
	{
		short num = 25534;
		short num2 = num;
		num = 25534;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		f8.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_ai(object A_0, EventArgs A_1)
	{
		short num = -7921;
		short num2 = num;
		num = -7921;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		h6.IsEnabled = true;
		OpenDownloader = false;
	}

	[CompilerGenerated]
	private void eval_ah(object A_0, EventArgs A_1)
	{
		short num = 16938;
		short num2 = num;
		num = 16938;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_gl.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_ag(object A_0, EventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 19601;
		short num2 = num;
		num = 19601;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_h5.IsEnabled = true;
		this.m_eval_cd = false;
	}

	[CompilerGenerated]
	private void eval_af(object A_0, EventArgs A_1)
	{
		short num = 18191;
		short num2 = num;
		num = 18191;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_gt.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_ae(object A_0, EventArgs A_1)
	{
		short num = 20628;
		short num2 = num;
		num = 20628;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_h5.IsEnabled = true;
		this.m_eval_cd = true;
	}

	[CompilerGenerated]
	[AsyncStateMachine(typeof(eval_d))]
	private void eval_h(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num = -18248;
		short num2 = num;
		num = -18248;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_d stateMachine = default(eval_d);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[CompilerGenerated]
	[AsyncStateMachine(typeof(eval_c))]
	private void eval_g(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num = 5360;
		short num2 = num;
		num = 5360;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_c stateMachine = default(eval_c);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[CompilerGenerated]
	private void eval_o()
	{
		short num = -1500;
		short num2 = num;
		num = -1500;
		int num3 = default(int);
		DoubleAnimation doubleAnimation;
		switch (num2 == num)
		{
		default:
			num = 0;
			if (num != 0)
			{
			}
			switch (0)
			{
			case 0:
				goto IL_0069;
			}
			goto IL_0057;
		case false:
		case true:
			goto IL_0118;
			IL_0069:
			eval_cc = false;
			eval_im.Content = "";
			eval_id.Visibility = Visibility.Hidden;
			eval_fe.Visibility = Visibility.Visible;
			eval_in.Visibility = Visibility.Hidden;
			eval_fj.Visibility = Visibility.Visible;
			num = 1;
			num3 = num;
			goto IL_0057;
			IL_0057:
			while (true)
			{
				switch (num3)
				{
				case 1:
					if (ij.Visibility == Visibility.Visible)
					{
						num = 0;
						_ = num;
						num = 2;
						num3 = num;
						continue;
					}
					goto IL_01c2;
				case 2:
					goto IL_0118;
				case 0:
					{
						num = 1;
						if (num == 0)
						{
						}
						goto IL_01c2;
					}
					IL_01c2:
					eval_f9.Visibility = Visibility.Visible;
					this.m_eval_b9.Stop();
					this.m_eval_cb.Stop();
					eo.Stop();
					return;
				}
				break;
			}
			goto IL_0069;
			IL_0118:
			doubleAnimation = new DoubleAnimation
			{
				From = 1.0,
				To = 0.0,
				Duration = new Duration(TimeSpan.FromSeconds(0.2)),
				AutoReverse = false
			};
			doubleAnimation.Completed += delegate
			{
				short num4 = -20794;
				short num5 = num4;
				num4 = -20794;
				switch (num5 == num4)
				{
				default:
					num4 = 0;
					if (num4 != 0)
					{
					}
					num4 = 1;
					if (num4 != 0)
					{
					}
					num4 = 0;
					_ = num4;
					ij.Visibility = Visibility.Hidden;
					break;
				}
			};
			ij.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
			num = 0;
			num3 = num;
			goto IL_0057;
		}
	}

	[CompilerGenerated]
	private void eval_ad(object A_0, EventArgs A_1)
	{
		short num = -20794;
		short num2 = num;
		num = -20794;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		ij.Visibility = Visibility.Hidden;
	}

	[AsyncStateMachine(typeof(eval_e))]
	[CompilerGenerated]
	private void eval_ac(object A_0, EventArgs A_1)
	{
		short num = 21929;
		short num2 = num;
		num = 21929;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		eval_e stateMachine = default(eval_e);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[CompilerGenerated]
	private void eval_f(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num;
		try
		{
			num = -17675;
			short num2 = num;
			num = -17675;
			switch (num2 == num)
			{
			default:
			{
				num = 0;
				if (num != 0)
				{
				}
				ProcessStartInfo obj = new ProcessStartInfo
				{
					FileName = Directory_Launcher + "\\" + this.m_eval_ac + ".exe",
					Verb = "runas"
				};
				obj.WorkingDirectory = obj.WorkingDirectory + Directory_Launcher + "\\";
				Process.Start(obj);
				Close_launcher();
				break;
			}
			}
		}
		catch (Exception ex)
		{
			if (!(Langve == "RU"))
			{
				System.Windows.MessageBox.Show("The launcher executable file is either not downloaded or blocked by Windows defender, antivirus! " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
			else
			{
				System.Windows.MessageBox.Show("Исполняемый файл лаунчера либо не докачан либо блокирован защитником виндовс,антивирусом! " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		Close_launcher();
	}

	[CompilerGenerated]
	private void eval_n()
	{
		short num;
		try
		{
			int num3 = default(int);
			int num4 = default(int);
			string text2 = default(string);
			string text = default(string);
			switch (0)
			{
			default:
				while (true)
				{
					num = -5309;
					short num2 = num;
					num = -5309;
					switch (num2 == num)
					{
					default:
						num = 0;
						if (num != 0)
						{
						}
						switch (num3)
						{
						case 4:
							goto IL_0131;
						case 9:
							goto IL_014f;
						case 1:
							goto IL_0168;
						case 5:
							goto IL_01f4;
						case 18:
							num = 1;
							if (num == 0)
							{
							}
							goto case 7;
						case 16:
							num = 6;
							num3 = num;
							continue;
						case 6:
							goto IL_0292;
						case 7:
						case 11:
							num4++;
							num = 0;
							num3 = num;
							continue;
						case 12:
							if (text2 != null)
							{
								num = 19;
								num3 = num;
								continue;
							}
							goto IL_014f;
						case 0:
						case 2:
							num = 21;
							num3 = num;
							continue;
						case 21:
							goto IL_0357;
						case 19:
							num = 13;
							num3 = num;
							continue;
						case 13:
							if (eval_ed[num4].ToString() == text2)
							{
								num = 10;
								num3 = num;
								continue;
							}
							goto IL_014f;
						case 8:
							goto IL_03eb;
						case 14:
							eval_hp.SelectedItem = "Неограниченный";
							eval_hq.SelectedItem = "Неограниченный";
							eval_hp.Items.Add("Неограниченный");
							eval_hq.Items.Add("Неограниченный");
							num = 11;
							num3 = num;
							continue;
						case 10:
							goto IL_048b;
						case 20:
							num = 15;
							num3 = num;
							continue;
						case 15:
							if (eval_ed[num4].ToString() == text)
							{
								num = 4;
								num3 = num;
								continue;
							}
							goto IL_01f4;
						case 3:
							num = 17;
							num3 = num;
							continue;
						case 17:
							goto end_IL_000a;
						}
						break;
					case false:
					case true:
						{
							num = 9;
							num3 = num;
							continue;
						}
						IL_0131:
						try
						{
							eval_ea = Convert.ToInt32(text);
						}
						catch
						{
							eval_ea = 0;
						}
						eval_hp.SelectedItem = text;
						num = 5;
						num3 = num;
						continue;
						IL_048b:
						try
						{
							eval_eb = Convert.ToInt32(text2);
						}
						catch
						{
							eval_ea = 0;
						}
						eval_hq.SelectedItem = text2;
						goto case false;
						IL_0292:
						if (!(Langve == "RU"))
						{
							eval_hp.SelectedItem = "Unlimited";
							eval_hq.SelectedItem = "Unlimited";
							eval_hp.Items.Add("Unlimited");
							eval_hq.Items.Add("Unlimited");
							num = 7;
							num3 = num;
						}
						else
						{
							num = 14;
							num3 = num;
						}
						continue;
						IL_03eb:
						if (!(eval_ed[num4] == "Unlimited"))
						{
							num = 12;
							num3 = num;
						}
						else
						{
							num = 16;
							num3 = num;
						}
						continue;
						IL_01f4:
						eval_hp.Items.Add(eval_ed[num4].ToString());
						eval_hq.Items.Add(eval_ed[num4].ToString());
						num = 18;
						num3 = num;
						continue;
						IL_014f:
						num = 1;
						num3 = num;
						continue;
						IL_0357:
						if (num4 >= eval_ed.Count)
						{
							num = 3;
							num3 = num;
						}
						else
						{
							num = 8;
							num3 = num;
						}
						continue;
						IL_0168:
						if (text != null)
						{
							num = 20;
							num3 = num;
							continue;
						}
						goto IL_01f4;
					}
					goto case 0;
					continue;
					end_IL_000a:
					break;
				}
				break;
			case 0:
				eval_hq.Items.Clear();
				eval_hp.Items.Clear();
				text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "DownloadLimite_", null);
				text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, "UploadLimite_", null);
				num4 = 0;
				num = 2;
				num3 = num;
				goto default;
			}
		}
		catch
		{
		}
		num = 0;
		_ = num;
	}

	[CompilerGenerated]
	private void eval_ab(object A_0, EventArgs A_1)
	{
		short num = -25149;
		short num2 = num;
		num = -25149;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		df.eval_c.Visibility = Visibility.Hidden;
		df.Close();
		fa.Visibility = Visibility.Visible;
		DoubleAnimation animation = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.5)),
			AutoReverse = false
		};
		fa.BeginAnimation(UIElement.OpacityProperty, animation);
	}

	[CompilerGenerated]
	private void eval_aa(object A_0, EventArgs A_1)
	{
		short num = -15742;
		short num2 = num;
		num = -15742;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		fa.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_z(object A_0, EventArgs A_1)
	{
		short num = 18092;
		short num2 = num;
		num = 18092;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		fa.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_y(object A_0, EventArgs A_1)
	{
		short num = -8317;
		short num2 = num;
		num = -8317;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		fa.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_x(object A_0, EventArgs A_1)
	{
		short num = 29333;
		short num2 = num;
		num = 29333;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		fa.Visibility = Visibility.Hidden;
		Close_launcher();
	}

	[CompilerGenerated]
	private void eval_w(object A_0, EventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = -14289;
		short num2 = num;
		num = -14289;
		switch (num2 == num)
		{
		case false:
		case true:
			return;
		}
		num = 0;
		if (num != 0)
		{
		}
		int num3 = default(int);
		switch (0)
		{
		default:
			while (true)
			{
				switch (num3)
				{
				case 0:
					if (!this.m_eval_a0)
					{
						num = 3;
						num3 = num;
						continue;
					}
					return;
				case 2:
					try
					{
						eval_fj.IsEnabled = false;
						eval_dl.Clear();
						eval_di = 0;
						eval_dk = 0;
						BoxServer.Items.Clear();
					}
					catch
					{
					}
					num = 0;
					num3 = num;
					continue;
				case 3:
				{
					Thread thread = new Thread(eval_bk);
					thread.IsBackground = true;
					thread.Start();
					num = 1;
					num3 = num;
					continue;
				}
				case 1:
					return;
				}
				break;
			}
			goto case 0;
		case 0:
			num = 1;
			if (num != 0)
			{
			}
			BoxServer.Visibility = Visibility.Hidden;
			num = 2;
			num3 = num;
			goto default;
		}
	}

	[CompilerGenerated]
	private void eval_e(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num = 0;
		_ = num;
		num = 32454;
		short num2 = num;
		num = 32454;
		int num3 = default(int);
		switch (num2 == num)
		{
		default:
			num = 0;
			if (num != 0)
			{
			}
			num = 0;
			num3 = num;
			switch (num3)
			{
			}
			break;
		case false:
		case true:
			break;
		}
		this.m_eval_a0 = true;
		try
		{
			IEnumerator enumerator = default(IEnumerator);
			switch (0)
			{
			default:
			{
				XmlNode xmlNode = default(XmlNode);
				string eNNMOD = default(string);
				int num5 = default(int);
				string[] array = default(string[]);
				int num4 = default(int);
				PingReply pingReply = default(PingReply);
				IDisposable disposable = default(IDisposable);
				while (true)
				{
					switch (num3)
					{
					case 0:
						goto end_IL_0161;
					case 2:
						try
						{
							eval_dl = eval_dl.OrderBy(delegate(ServerOnlain A_0)
							{
								short num17 = 1;
								if (num17 != 0)
								{
								}
								num17 = 0;
								_ = num17;
								num17 = -25103;
								short num18 = num17;
								num17 = -25103;
								switch (num18 == num17)
								{
								default:
									num17 = 0;
									if (num17 != 0)
									{
									}
									return A_0.Name_;
								}
							}).ToList();
							BoxServer.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
							{
								short num8 = 0;
								int num9 = num8;
								switch (num9)
								{
								default:
								{
									int num10 = default(int);
									switch (0)
									{
									default:
									{
										string lPLAYERGAMESERVER = default(string);
										string lTIMERESTARTSERVER = default(string);
										double num13 = default(double);
										double num11 = default(double);
										double value = default(double);
										double totalSeconds = default(double);
										double num12 = default(double);
										TimeSpan timeSpan = default(TimeSpan);
										while (true)
										{
											switch (num9)
											{
											case 10:
												BoxServer.Items.Add(eval_dj);
												num8 = 13;
												num9 = num8;
												continue;
											case 13:
												if (Langve == "RU")
												{
													num8 = 7;
													num9 = num8;
												}
												else
												{
													eval_dj.TextOnlain_GStats.Content = "Online players :";
													eval_dj.LGo.Content = "JOIN";
													num8 = 3;
													num9 = num8;
												}
												continue;
											case 17:
												num8 = 4;
												num9 = num8;
												continue;
											case 4:
												if (string.IsNullOrEmpty(eval_dl[num10].DISCORD))
												{
													num8 = 0;
													num9 = num8;
													continue;
												}
												goto case 6;
											case 3:
											case 20:
											{
												eval_dj.Border2.Visibility = Visibility.Visible;
												DoubleAnimation animation2 = new DoubleAnimation
												{
													From = 0.0,
													To = 1.0,
													Duration = new Duration(TimeSpan.FromSeconds(0.3)),
													AutoReverse = false
												};
												eval_dj.Border2.BeginAnimation(UIElement.OpacityProperty, animation2);
												num10++;
												num8 = 12;
												num9 = num8;
												continue;
											}
											case 16:
												eval_dj.BSERVER_PCF.Visibility = Visibility.Visible;
												num8 = 10;
												num9 = num8;
												continue;
											case 15:
												eval_fh.Content = "Всего серверов : " + eval_di + " / Всего игроков : " + eval_dk;
												num8 = 9;
												num9 = num8;
												continue;
											case 24:
												eval_dj.BShop.Visibility = Visibility.Hidden;
												num8 = 17;
												num9 = num8;
												continue;
											case 11:
												num8 = 0;
												_ = num8;
												try
												{
													lPLAYERGAMESERVER = eval_dl[num10].Played_players_.Replace(".", " ,");
												}
												catch
												{
												}
												_ = string.Empty;
												num8 = 2;
												num9 = num8;
												continue;
											case 1:
											case 12:
												num8 = 14;
												num9 = num8;
												continue;
											case 14:
												if (num10 >= eval_dl.Count)
												{
													num8 = 5;
													num9 = num8;
												}
												else
												{
													_ = string.Empty;
													lTIMERESTARTSERVER = string.Empty;
													lPLAYERGAMESERVER = string.Empty;
													num8 = 1;
													if (num8 != 0)
													{
													}
													num8 = 21;
													num9 = num8;
												}
												continue;
											case 22:
												try
												{
													switch (0)
													{
													default:
														while (true)
														{
															switch (num9)
															{
															case 117:
																if (num13 == 1.0)
																{
																	num8 = 41;
																	num9 = num8;
																	continue;
																}
																goto case 135;
															case 118:
																num8 = 109;
																num9 = num8;
																continue;
															case 109:
																if (num11 != 8.0)
																{
																	num8 = 89;
																	num9 = num8;
																	continue;
																}
																goto case 106;
															case 90:
																num8 = 104;
																num9 = num8;
																continue;
															case 104:
																if (num11 > 12.0)
																{
																	num8 = 100;
																	num9 = num8;
																	continue;
																}
																goto case 40;
															case 29:
																num8 = 75;
																num9 = num8;
																continue;
															case 75:
																if (num11 != 8.0)
																{
																	num8 = 42;
																	num9 = num8;
																	continue;
																}
																goto case 38;
															case 5:
																num8 = 92;
																num9 = num8;
																continue;
															case 92:
																if (num11 != 9.0)
																{
																	num8 = 56;
																	num9 = num8;
																	continue;
																}
																goto case 66;
															case 56:
															{
																num8 = -6163;
																short num14 = num8;
																num8 = -6163;
																switch (num14 == num8)
																{
																default:
																	num8 = 0;
																	if (num8 != 0)
																	{
																	}
																	num8 = 73;
																	num9 = num8;
																	continue;
																case false:
																case true:
																	break;
																}
																goto case 152;
															}
															case 122:
																num8 = 143;
																num9 = num8;
																continue;
															case 143:
																if (num11 > 16.0)
																{
																	num8 = 18;
																	num9 = num8;
																	continue;
																}
																goto case 33;
															case 34:
																num8 = 147;
																num9 = num8;
																continue;
															case 147:
																if (num11 > 8.0)
																{
																	num8 = 130;
																	num9 = num8;
																	continue;
																}
																goto case 46;
															case 113:
																num8 = 60;
																num9 = num8;
																continue;
															case 60:
																if (num11 > 20.0)
																{
																	num8 = 13;
																	num9 = num8;
																	continue;
																}
																goto case 63;
															case 61:
																num8 = 24;
																num9 = num8;
																continue;
															case 24:
																if (num11 != 18.0)
																{
																	num8 = 81;
																	num9 = num8;
																	continue;
																}
																goto case 74;
															case 111:
																value = totalSeconds - num12 - num12 - num12;
																num8 = 22;
																num9 = num8;
																continue;
															case 135:
																num8 = 137;
																num9 = num8;
																continue;
															case 137:
																if (num13 == 3.0)
																{
																	num8 = 29;
																	num9 = num8;
																	continue;
																}
																goto case 125;
															case 110:
																num8 = 64;
																num9 = num8;
																continue;
															case 64:
																if (num11 != 20.0)
																{
																	num8 = 150;
																	num9 = num8;
																	continue;
																}
																goto case 68;
															case 131:
																value = totalSeconds - num12 - num12;
																num8 = 118;
																num9 = num8;
																continue;
															case 22:
																num8 = 44;
																num9 = num8;
																continue;
															case 44:
																if (num11 != 18.0)
																{
																	num8 = 88;
																	num9 = num8;
																	continue;
																}
																goto case 97;
															case 2:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 91;
																num9 = num8;
																continue;
															case 76:
																value = totalSeconds - num12 - num12 - num12;
																num8 = 125;
																num9 = num8;
																continue;
															case 97:
																value = totalSeconds - num12 - num12 - num12 - num12;
																num8 = 43;
																num9 = num8;
																continue;
															case 20:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 105;
																num9 = num8;
																continue;
															case 89:
																num8 = 133;
																num9 = num8;
																continue;
															case 133:
																if (num11 > 8.0)
																{
																	num8 = 106;
																	num9 = num8;
																	continue;
																}
																goto case 58;
															case 141:
																num8 = 86;
																num9 = num8;
																continue;
															case 86:
																if (num11 != 16.0)
																{
																	num8 = 151;
																	num9 = num8;
																	continue;
																}
																goto case 15;
															case 130:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 46;
																num9 = num8;
																continue;
															case 151:
																num8 = 26;
																num9 = num8;
																continue;
															case 26:
																if (num11 > 16.0)
																{
																	num8 = 15;
																	num9 = num8;
																	continue;
																}
																goto case 61;
															case 81:
																num8 = 16;
																num9 = num8;
																continue;
															case 16:
																if (num11 > 18.0)
																{
																	num8 = 74;
																	num9 = num8;
																	continue;
																}
																goto case 110;
															case 43:
																num8 = 23;
																num9 = num8;
																continue;
															case 23:
																if (num13 == 6.0)
																{
																	num8 = 54;
																	num9 = num8;
																	continue;
																}
																goto case 63;
															case 0:
																num8 = 59;
																num9 = num8;
																continue;
															case 59:
																if (num11 > 21.0)
																{
																	num8 = 20;
																	num9 = num8;
																	continue;
																}
																goto case 105;
															case 33:
																num8 = 39;
																num9 = num8;
																continue;
															case 39:
																if (num11 != 20.0)
																{
																	num8 = 113;
																	num9 = num8;
																	continue;
																}
																goto case 13;
															case 124:
																num8 = 78;
																num9 = num8;
																continue;
															case 78:
																if (num11 != 18.0)
																{
																	num8 = 134;
																	num9 = num8;
																	continue;
																}
																goto case 21;
															case 146:
																num8 = 128;
																num9 = num8;
																continue;
															case 128:
																if (num11 != 12.0)
																{
																	num8 = 127;
																	num9 = num8;
																	continue;
																}
																goto case 111;
															case 12:
																num8 = 55;
																num9 = num8;
																continue;
															case 55:
																if (num11 != 8.0)
																{
																	num8 = 34;
																	num9 = num8;
																	continue;
																}
																goto case 130;
															case 21:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 71;
																num9 = num8;
																continue;
															case 99:
																value = totalSeconds - num12;
																num8 = 116;
																num9 = num8;
																continue;
															case 121:
																num8 = 45;
																num9 = num8;
																continue;
															case 45:
																if (num11 != 3.0)
																{
																	num8 = 129;
																	num9 = num8;
																	continue;
																}
																goto case 99;
															case 98:
																num8 = 48;
																num9 = num8;
																continue;
															case 48:
																if (num11 > 6.0)
																{
																	num8 = 120;
																	num9 = num8;
																	continue;
																}
																goto case 5;
															case 115:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12;
																num8 = 124;
																num9 = num8;
																continue;
															case 68:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 80;
																num9 = num8;
																continue;
															case 73:
																if (num11 > 9.0)
																{
																	num8 = 66;
																	num9 = num8;
																	continue;
																}
																goto case 6;
															case 116:
																num8 = 107;
																num9 = num8;
																continue;
															case 107:
																if (num11 != 6.0)
																{
																	num8 = 98;
																	num9 = num8;
																	continue;
																}
																goto case 120;
															case 105:
																num8 = 50;
																num9 = num8;
																continue;
															case 50:
																if (num13 == 12.0)
																{
																	num8 = 57;
																	num9 = num8;
																	continue;
																}
																goto case 82;
															case 91:
																num8 = 14;
																num9 = num8;
																continue;
															case 14:
																if (num11 != 14.0)
																{
																	num8 = 85;
																	num9 = num8;
																	continue;
																}
																goto case 152;
															case 134:
																num8 = 65;
																num9 = num8;
																continue;
															case 65:
																if (num11 > 18.0)
																{
																	num8 = 21;
																	num9 = num8;
																	continue;
																}
																goto case 71;
															case 54:
																num8 = 19;
																num9 = num8;
																continue;
															case 19:
																if (num11 != 4.0)
																{
																	num8 = 95;
																	num9 = num8;
																	continue;
																}
																goto case 131;
															case 125:
																num8 = 103;
																num9 = num8;
																continue;
															case 103:
																if (num13 == 4.0)
																{
																	num8 = 87;
																	num9 = num8;
																	continue;
																}
																goto case 43;
															case 138:
																value = totalSeconds - num12 - num12;
																num8 = 146;
																num9 = num8;
																continue;
															case 42:
																num8 = 9;
																num9 = num8;
																continue;
															case 9:
																if (num11 > 8.0)
																{
																	num8 = 38;
																	num9 = num8;
																	continue;
																}
																goto case 132;
															case 127:
																num8 = 79;
																num9 = num8;
																continue;
															case 79:
																if (num11 > 12.0)
																{
																	num8 = 111;
																	num9 = num8;
																	continue;
																}
																goto case 22;
															case 13:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 63;
																num9 = num8;
																continue;
															case 139:
																num8 = 77;
																num9 = num8;
																continue;
															case 77:
																if (num11 != 6.0)
																{
																	num8 = 1;
																	num9 = num8;
																	continue;
																}
																goto case 140;
															case 94:
																value = totalSeconds - num12 - num12 - num12 - num12;
																num8 = 139;
																num9 = num8;
																continue;
															case 102:
																num8 = 62;
																num9 = num8;
																continue;
															case 62:
																if (num11 != 4.0)
																{
																	num8 = 72;
																	num9 = num8;
																	continue;
																}
																goto case 94;
															case 18:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12;
																num8 = 33;
																num9 = num8;
																continue;
															case 70:
																num8 = 37;
																num9 = num8;
																continue;
															case 37:
																if (num11 > 15.0)
																{
																	num8 = 115;
																	num9 = num8;
																	continue;
																}
																goto case 124;
															case 51:
																num8 = 28;
																num9 = num8;
																continue;
															case 28:
																if (num11 > 12.0)
																{
																	num8 = 2;
																	num9 = num8;
																	continue;
																}
																goto case 91;
															case 41:
																value = totalSeconds - num12;
																num8 = 135;
																num9 = num8;
																continue;
															case 38:
																value = totalSeconds - num12 - num12;
																num8 = 132;
																num9 = num8;
																continue;
															case 57:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 148;
																num9 = num8;
																continue;
															case 148:
																if (num11 != 2.0)
																{
																	num8 = 123;
																	num9 = num8;
																	continue;
																}
																goto case 36;
															case 6:
																num8 = 67;
																num9 = num8;
																continue;
															case 67:
																if (num11 != 12.0)
																{
																	num8 = 90;
																	num9 = num8;
																	continue;
																}
																goto case 100;
															case 120:
																value = totalSeconds - num12 - num12;
																num8 = 5;
																num9 = num8;
																continue;
															case 25:
																num8 = 52;
																num9 = num8;
																continue;
															case 52:
																if (num11 != 16.0)
																{
																	num8 = 122;
																	num9 = num8;
																	continue;
																}
																goto case 18;
															case 40:
																num8 = 108;
																num9 = num8;
																continue;
															case 108:
																if (num11 != 15.0)
																{
																	num8 = 70;
																	num9 = num8;
																	continue;
																}
																goto case 115;
															case 88:
																num8 = 83;
																num9 = num8;
																continue;
															case 83:
																if (num11 > 18.0)
																{
																	num8 = 97;
																	num9 = num8;
																	continue;
																}
																goto case 43;
															case 74:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 110;
																num9 = num8;
																continue;
															case 1:
																num8 = 27;
																num9 = num8;
																continue;
															case 27:
																if (num11 > 6.0)
																{
																	num8 = 140;
																	num9 = num8;
																	continue;
																}
																goto case 12;
															case 140:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12;
																num8 = 12;
																num9 = num8;
																continue;
															case 96:
																value = totalSeconds - num12 - num12 - num12 - num12;
																num8 = 25;
																num9 = num8;
																continue;
															case 150:
																num8 = 114;
																num9 = num8;
																continue;
															case 114:
																if (num11 > 20.0)
																{
																	num8 = 68;
																	num9 = num8;
																	continue;
																}
																goto case 80;
															case 85:
																num8 = 4;
																num9 = num8;
																continue;
															case 4:
																if (num11 > 14.0)
																{
																	num8 = 152;
																	num9 = num8;
																	continue;
																}
																goto case 141;
															case 71:
																num8 = 142;
																num9 = num8;
																continue;
															case 142:
																if (num11 != 21.0)
																{
																	num8 = 0;
																	num9 = num8;
																	continue;
																}
																goto case 20;
															case 15:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 61;
																num9 = num8;
																continue;
															case 58:
																num8 = 144;
																num9 = num8;
																continue;
															case 144:
																if (num11 != 12.0)
																{
																	num8 = 119;
																	num9 = num8;
																	continue;
																}
																goto case 96;
															case 63:
																num8 = 17;
																num9 = num8;
																continue;
															case 17:
																if (num13 == 8.0)
																{
																	num8 = 121;
																	num9 = num8;
																	continue;
																}
																goto case 105;
															case 152:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 141;
																num9 = num8;
																continue;
															case 36:
																value = totalSeconds - num12 - num12 - num12;
																num8 = 102;
																num9 = num8;
																continue;
															case 145:
																value = totalSeconds - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12 - num12;
																num8 = 82;
																num9 = num8;
																continue;
															case 72:
																num8 = 31;
																num9 = num8;
																continue;
															case 31:
																if (num11 > 4.0)
																{
																	num8 = 94;
																	num9 = num8;
																	continue;
																}
																goto case 139;
															case 100:
																value = totalSeconds - num12 - num12 - num12 - num12;
																num8 = 40;
																num9 = num8;
																continue;
															case 46:
																num8 = 11;
																num9 = num8;
																continue;
															case 11:
																if (num11 != 12.0)
																{
																	num8 = 51;
																	num9 = num8;
																	continue;
																}
																goto case 2;
															case 80:
																num8 = 126;
																num9 = num8;
																continue;
															case 126:
																if (num11 != 22.0)
																{
																	num8 = 49;
																	num9 = num8;
																	continue;
																}
																goto case 145;
															case 82:
																value = Math.Abs(value);
																timeSpan = TimeSpan.FromSeconds(value);
																num8 = 101;
																num9 = num8;
																continue;
															case 101:
																if (Langve == "RU")
																{
																	num8 = 69;
																	num9 = num8;
																}
																else
																{
																	lTIMERESTARTSERVER = string.Format("{0} {1} h. {2} m.", "Time to restart : ", timeSpan.Hours, timeSpan.Minutes);
																	num8 = 35;
																	num9 = num8;
																}
																continue;
															case 132:
																num8 = 30;
																num9 = num8;
																continue;
															case 30:
																if (num11 != 16.0)
																{
																	num8 = 149;
																	num9 = num8;
																	continue;
																}
																goto case 76;
															case 95:
																num8 = 32;
																num9 = num8;
																continue;
															case 32:
																if (num11 > 4.0)
																{
																	num8 = 131;
																	num9 = num8;
																	continue;
																}
																goto case 118;
															case 123:
																num8 = 8;
																num9 = num8;
																continue;
															case 8:
																if (num11 > 2.0)
																{
																	num8 = 36;
																	num9 = num8;
																	continue;
																}
																goto case 102;
															case 69:
																lTIMERESTARTSERVER = string.Format("{0} {1} ч. {2} м.", "Время до рестарта : ", timeSpan.Hours, timeSpan.Minutes);
																num8 = 47;
																num9 = num8;
																continue;
															case 119:
																num8 = 10;
																num9 = num8;
																continue;
															case 10:
																if (num11 > 12.0)
																{
																	num8 = 96;
																	num9 = num8;
																	continue;
																}
																goto case 25;
															case 106:
																value = totalSeconds - num12 - num12 - num12;
																num8 = 58;
																num9 = num8;
																continue;
															case 149:
																num8 = 53;
																num9 = num8;
																continue;
															case 53:
																if (num11 > 16.0)
																{
																	num8 = 76;
																	num9 = num8;
																	continue;
																}
																goto case 125;
															case 49:
																num8 = 3;
																num9 = num8;
																continue;
															case 3:
																if (num11 > 22.0)
																{
																	num8 = 145;
																	num9 = num8;
																	continue;
																}
																goto case 82;
															case 93:
																num8 = 7;
																num9 = num8;
																continue;
															case 7:
																if (num11 > 6.0)
																{
																	num8 = 138;
																	num9 = num8;
																	continue;
																}
																goto case 146;
															case 129:
																num8 = 112;
																num9 = num8;
																continue;
															case 112:
																if (num11 > 3.0)
																{
																	num8 = 99;
																	num9 = num8;
																	continue;
																}
																goto case 116;
															case 87:
																num8 = 136;
																num9 = num8;
																continue;
															case 136:
																if (num11 != 6.0)
																{
																	num8 = 93;
																	num9 = num8;
																	continue;
																}
																goto case 138;
															case 66:
																value = totalSeconds - num12 - num12 - num12;
																num8 = 6;
																num9 = num8;
																continue;
															case 35:
															case 47:
																num8 = 84;
																num9 = num8;
																continue;
															case 84:
																goto end_IL_0405;
															}
															goto case 0;
															continue;
															end_IL_0405:
															break;
														}
														break;
													case 0:
													{
														string text3 = eval_dl[num10].TIMERESTART.Replace(" ", string.Empty);
														num12 = Convert.ToDouble(text3.Split(':')[3].Replace("сек.", string.Empty));
														num13 = Convert.ToDouble(text3.Split(':')[2]);
														string text4 = text3.Split(':')[0];
														num11 = Convert.ToDouble(text4);
														string text5 = text3.Split(':')[1];
														totalSeconds = TimeSpan.Parse(text4 + ":" + text5).TotalSeconds;
														value = 0.0;
														num8 = 117;
														num9 = num8;
														goto default;
													}
													}
												}
												catch
												{
												}
												num8 = 11;
												num9 = num8;
												continue;
											case 7:
												eval_dj.TextOnlain_GStats.Content = "Игроки онлайн :";
												eval_dj.LGo.Content = "ПРИСОЕДИНИТЬСЯ";
												num8 = 20;
												num9 = num8;
												continue;
											case 2:
												try
												{
													int.Parse(eval_dl[num10].Playhost);
													_ = 10;
													int.Parse(eval_dl[num10].Playhost);
													_ = 10;
													int.Parse(eval_dl[num10].Playhost);
													_ = 30;
												}
												catch
												{
												}
												eval_dj = new SControll
												{
													LNAMESERVER = eval_dl[num10].Name_,
													LPLAYERSERVER = eval_dl[num10].Playhost + "/" + eval_dl[num10].Slotevery,
													LPINGSERVER = eval_dl[num10].Ping_,
													LWhitelist_ = eval_dl[num10].Whitelist_,
													LPassword_ = eval_dl[num10].Password_,
													LIp_Host_ = eval_dl[num10].Ip_Host_,
													LPort_host_ = eval_dl[num10].Port_host_,
													LUDP_PORT_ = eval_dl[num10].UDP_PORT_,
													LMODS_ = eval_dl[num10].MODS_,
													LMODSEN_ = eval_dl[num10].MODSEN_,
													LPLAYERGAMESERVER = lPLAYERGAMESERVER,
													LPlayhost = eval_dl[num10].Playhost,
													LSlotevery = eval_dl[num10].Slotevery,
													LPORT_VID = eval_dl[num10].PORT_VID,
													LIP_VIDSCS = eval_dl[num10].IP_VIDSCS,
													DISKORD = eval_dl[num10].DISCORD,
													LTIMERESTARTSERVER = lTIMERESTARTSERVER,
													IMGSERVER = eval_dl[num10].IMAGE
												};
												num8 = 18;
												num9 = num8;
												continue;
											case 0:
												eval_dj.BDiscord.Visibility = Visibility.Hidden;
												num8 = 6;
												num9 = num8;
												continue;
											case 21:
												try
												{
													string text = string.Empty;
													string text2 = string.Empty;
													try
													{
														switch (0)
														{
														default:
															while (true)
															{
																switch (num9)
																{
																case 4:
																	if (Langve == "RU")
																	{
																		num8 = 0;
																		num9 = num8;
																	}
																	else
																	{
																		_ = "Survival time : " + text2 + " h. " + text + " m.";
																		num8 = 1;
																		num9 = num8;
																	}
																	continue;
																case 0:
																	_ = "Время выживания : " + text2 + " ч. " + text + " м.";
																	num8 = 3;
																	num9 = num8;
																	continue;
																case 1:
																case 3:
																	num8 = 2;
																	num9 = num8;
																	continue;
																case 2:
																	goto end_IL_1fdd;
																}
																goto case 0;
																continue;
																end_IL_1fdd:
																break;
															}
															break;
														case 0:
															_ = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num10].Port_host_ + "_STATISTIC", null);
															text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num10].Port_host_ + "_STATISTIC_h", null);
															text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num10].Port_host_ + "_STATISTIC_m", null);
															num8 = 4;
															num9 = num8;
															goto default;
														}
													}
													catch
													{
														_ = Langve == "RU";
													}
												}
												catch
												{
												}
												num8 = 22;
												num9 = num8;
												continue;
											case 5:
												num8 = 23;
												num9 = num8;
												continue;
											case 23:
												if (!(Langve == "RU"))
												{
													eval_fh.Content = "Total servers : " + eval_di + " / Total Players : " + eval_dk;
													num8 = 8;
													num9 = num8;
												}
												else
												{
													num8 = 15;
													num9 = num8;
												}
												continue;
											case 18:
												if (!Enable_Shop)
												{
													num8 = 24;
													num9 = num8;
													continue;
												}
												goto case 17;
											case 6:
												num8 = 19;
												num9 = num8;
												continue;
											case 19:
												if (!this.m_eval_b6)
												{
													num8 = 16;
													num9 = num8;
													continue;
												}
												goto case 10;
											case 8:
											case 9:
											{
												DoubleAnimation doubleAnimation = new DoubleAnimation
												{
													From = 1.0,
													To = 0.0,
													Duration = new Duration(TimeSpan.FromSeconds(this.m_eval_ah)),
													AutoReverse = false
												};
												doubleAnimation.Completed += delegate
												{
													short num15 = -22544;
													short num16 = num15;
													num15 = -22544;
													switch (num16 == num15)
													{
													default:
														num15 = 1;
														if (num15 != 0)
														{
														}
														num15 = 0;
														_ = num15;
														num15 = 0;
														if (num15 != 0)
														{
														}
														eval_fl.Visibility = Visibility.Hidden;
														break;
													}
												};
												eval_fl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
												BoxServer.Visibility = Visibility.Visible;
												DoubleAnimation animation = new DoubleAnimation
												{
													From = 0.0,
													To = 1.0,
													Duration = new Duration(TimeSpan.FromSeconds(0.2)),
													AutoReverse = false
												};
												BoxServer.BeginAnimation(UIElement.OpacityProperty, animation);
												return;
											}
											}
											break;
										}
										goto case 0;
									}
									case 0:
										num10 = 0;
										num8 = 1;
										num9 = num8;
										goto default;
									}
								}
								}
							});
						}
						catch
						{
						}
						num = 0;
						num3 = num;
						continue;
					case 1:
						try
						{
							num = 11;
							num3 = num;
							while (true)
							{
								switch (num3)
								{
								case 11:
									switch (0)
									{
									default:
										continue;
									case 0:
										break;
									}
									goto default;
								case 33:
									try
									{
										Connectslot = xmlNode.SelectSingleNode("play_host").InnerText;
									}
									catch
									{
									}
									num = 0;
									num3 = num;
									continue;
								case 8:
									if (PASS == "YES")
									{
										num = 37;
										num3 = num;
									}
									else
									{
										num = 17;
										num3 = num;
									}
									continue;
								case 26:
									try
									{
										Time_host = xmlNode.SelectSingleNode("time").InnerText;
									}
									catch
									{
									}
									num = 33;
									num3 = num;
									continue;
								case 21:
									try
									{
										TIMERESTART = xmlNode.SelectSingleNode("TimeRestart").InnerText;
									}
									catch
									{
									}
									num = 28;
									num3 = num;
									continue;
								case 9:
									try
									{
										Nameplayers = xmlNode.SelectSingleNode("Played_gamer").InnerText;
									}
									catch
									{
									}
									num = 10;
									num3 = num;
									continue;
								case 7:
									PASS = "NO";
									num = 13;
									num3 = num;
									continue;
								case 2:
									try
									{
										Mods = xmlNode.SelectSingleNode("mods").InnerText;
									}
									catch
									{
									}
									num = 9;
									num3 = num;
									continue;
								case 3:
									try
									{
										Name_server = xmlNode.SelectSingleNode("name").InnerText;
									}
									catch
									{
									}
									num = 30;
									num3 = num;
									continue;
								case 29:
									eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "YES", "YES", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
									num = 31;
									num3 = num;
									continue;
								case 1:
									try
									{
										Ip_server = xmlNode.SelectSingleNode("ip").InnerText;
									}
									catch
									{
									}
									num = 38;
									num3 = num;
									continue;
								case 15:
									try
									{
										switch (0)
										{
										default:
											while (true)
											{
												switch (num3)
												{
												case 0:
												case 5:
													num = 1;
													num3 = num;
													continue;
												case 1:
													if (num5 >= array.Length)
													{
														num = 2;
														num3 = num;
														continue;
													}
													num4++;
													num5++;
													num = 5;
													num3 = num;
													continue;
												case 2:
													num = 3;
													num3 = num;
													continue;
												case 3:
													if (num4 > 1)
													{
														num = 6;
														num3 = num;
														continue;
													}
													goto case 4;
												case 6:
													eNNMOD = "YES";
													num = 4;
													num3 = num;
													continue;
												case 4:
													num = 7;
													num3 = num;
													continue;
												case 7:
													goto end_IL_067e;
												}
												goto case 0;
												continue;
												end_IL_067e:
												break;
											}
											break;
										case 0:
											array = Mods.Split(';');
											num4 = 0;
											num5 = 0;
											num = 0;
											num3 = num;
											goto default;
										}
									}
									catch
									{
									}
									num = 12;
									num3 = num;
									continue;
								case 38:
									try
									{
										PASS = xmlNode.SelectSingleNode("pass").InnerText;
									}
									catch
									{
									}
									num = 14;
									num3 = num;
									continue;
								case 6:
								case 13:
									num = 4;
									num3 = num;
									continue;
								case 4:
									if (!string.IsNullOrEmpty(Name_server))
									{
										num = 36;
										num3 = num;
										continue;
									}
									goto default;
								case 18:
									try
									{
										eval_dk += Convert.ToInt32(Connectslot);
									}
									catch
									{
										eval_dk += Convert.ToInt32("0");
									}
									eval_di++;
									eNNMOD = string.Empty;
									num = 15;
									num3 = num;
									continue;
								case 36:
									try
									{
										switch (0)
										{
										default:
											while (true)
											{
												switch (num3)
												{
												case 0:
													if (pingReply.Status == IPStatus.Success)
													{
														num = 1;
														num3 = num;
													}
													else
													{
														Ping_server = "---";
														num = 4;
														num3 = num;
													}
													continue;
												case 1:
													num = 3;
													num3 = num;
													continue;
												case 3:
													Ping_server = pingReply.RoundtripTime.ToString() ?? "";
													num = 2;
													num3 = num;
													continue;
												case 2:
												case 4:
													num = 5;
													num3 = num;
													continue;
												case 5:
													goto end_IL_0898;
												}
												goto case 0;
												continue;
												end_IL_0898:
												break;
											}
											break;
										case 0:
										{
											Ping_server = "";
											int timeout = 120;
											byte[] buffer = new byte[4];
											pingReply = new Ping().Send(Ip_server, timeout, buffer, new PingOptions
											{
												Ttl = 30
											});
											num = 0;
											num3 = num;
											goto default;
										}
										}
									}
									catch
									{
									}
									num = 8;
									num3 = num;
									continue;
								case 37:
									num = 23;
									num3 = num;
									continue;
								case 23:
									if (Whitelist == "true")
									{
										num = 29;
										num3 = num;
									}
									else
									{
										eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "NO", "YES", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
										num = 19;
										num3 = num;
									}
									continue;
								case 34:
									try
									{
										DISINVITE = xmlNode.SelectSingleNode("Diskord").InnerText;
									}
									catch
									{
									}
									num = 21;
									num3 = num;
									continue;
								case 20:
									try
									{
										PortVID = xmlNode.SelectSingleNode("PORT_VID").InnerText;
									}
									catch
									{
									}
									num = 35;
									num3 = num;
									continue;
								case 17:
									if (!(Whitelist == "true"))
									{
										eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "NO", "NO", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
										num = 5;
										num3 = num;
									}
									else
									{
										num = 25;
										num3 = num;
									}
									continue;
								case 0:
									try
									{
										Connectplay = xmlNode.SelectSingleNode("MaxPlayers").InnerText;
									}
									catch
									{
									}
									num = 20;
									num3 = num;
									continue;
								case 16:
									try
									{
										Port_server = xmlNode.SelectSingleNode("port").InnerText;
									}
									catch
									{
									}
									num = 1;
									num3 = num;
									continue;
								case 30:
									try
									{
										Slot_server = xmlNode.SelectSingleNode("slot").InnerText;
									}
									catch
									{
									}
									num = 16;
									num3 = num;
									continue;
								case 14:
									try
									{
										Portudp = xmlNode.SelectSingleNode("portUDP").InnerText;
									}
									catch
									{
									}
									num = 2;
									num3 = num;
									continue;
								case 35:
									try
									{
										IPVIDSCS = xmlNode.SelectSingleNode("VIDSCSCL").InnerText;
									}
									catch
									{
									}
									num = 34;
									num3 = num;
									continue;
								case 12:
									if (!(PASS == string.Empty))
									{
										PASS = "YES";
										num = 6;
										num3 = num;
									}
									else
									{
										num = 7;
										num3 = num;
									}
									continue;
								case 28:
									try
									{
										IMAGESERVER = xmlNode.SelectSingleNode("Image").InnerText;
									}
									catch
									{
									}
									num = 18;
									num3 = num;
									continue;
								case 25:
									eval_dl.Add(new ServerOnlain(eval_di, Name_server, Slot_server, Ping_server, "YES", "NO", Ip_server, Port_server, Mods, Nameplayers, Portudp, Connectslot, Connectplay, PortVID, IPVIDSCS, Time_host, eNNMOD, DISINVITE, TIMERESTART, IMAGESERVER));
									num = 22;
									num3 = num;
									continue;
								case 10:
									try
									{
										Whitelist = xmlNode.SelectSingleNode("Whitelist").InnerText;
									}
									catch
									{
									}
									num = 26;
									num3 = num;
									continue;
								default:
									num = 24;
									num3 = num;
									continue;
								case 24:
									if (enumerator.MoveNext())
									{
										xmlNode = (XmlNode)enumerator.Current;
										num = 3;
										num3 = num;
									}
									else
									{
										num = 27;
										num3 = num;
									}
									continue;
								case 27:
									num = 32;
									num3 = num;
									continue;
								case 32:
									break;
								}
								break;
							}
						}
						finally
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num3)
									{
									case 0:
										if (disposable != null)
										{
											num = 1;
											num3 = num;
											continue;
										}
										goto end_IL_0ebd;
									case 1:
										disposable.Dispose();
										num = 2;
										num3 = num;
										continue;
									case 2:
										goto end_IL_0ebd;
									}
									goto case 0;
									continue;
									end_IL_0ebd:
									break;
								}
								break;
							case 0:
								disposable = enumerator as IDisposable;
								num = 0;
								num3 = num;
								goto default;
							}
						}
						num = 2;
						num3 = num;
						continue;
					}
					goto case 0;
					continue;
					end_IL_0161:
					break;
				}
				break;
			}
			case 0:
				eval_dm.Load(DirLocal + "\\servers.xml");
				enumerator = eval_dm.SelectNodes("/server/load").GetEnumerator();
				num = 1;
				num3 = num;
				goto default;
			}
		}
		catch
		{
		}
		try
		{
			num = 2;
			num3 = num;
			while (true)
			{
				switch (num3)
				{
				case 2:
					switch (0)
					{
					default:
						continue;
					case 0:
						break;
					}
					goto default;
				default:
					if (File.Exists(DirLocal + "\\servers.xml"))
					{
						num = 0;
						num3 = num;
						continue;
					}
					break;
				case 0:
					File.Delete(DirLocal + "\\servers.xml");
					num = 3;
					num3 = num;
					continue;
				case 3:
					break;
				case 1:
					goto end_IL_00bf;
				}
				num = 1;
				num3 = num;
				continue;
				end_IL_00bf:
				break;
			}
		}
		catch
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		this.m_eval_a0 = false;
		eval_fj.Dispatcher.Invoke(DispatcherPriority.Background, (Action)delegate
		{
			short num6 = 17907;
			short num7 = num6;
			num6 = 17907;
			switch (num7 == num6)
			{
			default:
				num6 = 1;
				if (num6 != 0)
				{
				}
				num6 = 0;
				_ = num6;
				num6 = 0;
				if (num6 != 0)
				{
				}
				eval_fj.IsEnabled = true;
				break;
			}
		});
	}

	[CompilerGenerated]
	private void eval_m()
	{
		short num = 0;
		int num2 = num;
		switch (num2)
		{
		default:
		{
			int num3 = default(int);
			switch (0)
			{
			default:
			{
				string lPLAYERGAMESERVER = default(string);
				string lTIMERESTARTSERVER = default(string);
				double num6 = default(double);
				double num4 = default(double);
				double value = default(double);
				double totalSeconds = default(double);
				double num5 = default(double);
				TimeSpan timeSpan = default(TimeSpan);
				while (true)
				{
					switch (num2)
					{
					case 10:
						BoxServer.Items.Add(eval_dj);
						num = 13;
						num2 = num;
						continue;
					case 13:
						if (Langve == "RU")
						{
							num = 7;
							num2 = num;
							continue;
						}
						eval_dj.TextOnlain_GStats.Content = "Online players :";
						eval_dj.LGo.Content = "JOIN";
						num = 3;
						num2 = num;
						continue;
					case 17:
						num = 4;
						num2 = num;
						continue;
					case 4:
						if (string.IsNullOrEmpty(eval_dl[num3].DISCORD))
						{
							num = 0;
							num2 = num;
							continue;
						}
						goto case 6;
					case 3:
					case 20:
					{
						eval_dj.Border2.Visibility = Visibility.Visible;
						DoubleAnimation animation2 = new DoubleAnimation
						{
							From = 0.0,
							To = 1.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.3)),
							AutoReverse = false
						};
						eval_dj.Border2.BeginAnimation(UIElement.OpacityProperty, animation2);
						num3++;
						num = 12;
						num2 = num;
						continue;
					}
					case 16:
						eval_dj.BSERVER_PCF.Visibility = Visibility.Visible;
						num = 10;
						num2 = num;
						continue;
					case 15:
						eval_fh.Content = "Всего серверов : " + eval_di + " / Всего игроков : " + eval_dk;
						num = 9;
						num2 = num;
						continue;
					case 24:
						eval_dj.BShop.Visibility = Visibility.Hidden;
						num = 17;
						num2 = num;
						continue;
					case 11:
						num = 0;
						_ = num;
						try
						{
							lPLAYERGAMESERVER = eval_dl[num3].Played_players_.Replace(".", " ,");
						}
						catch
						{
						}
						_ = string.Empty;
						num = 2;
						num2 = num;
						continue;
					case 1:
					case 12:
						num = 14;
						num2 = num;
						continue;
					case 14:
						if (num3 >= eval_dl.Count)
						{
							num = 5;
							num2 = num;
							continue;
						}
						_ = string.Empty;
						lTIMERESTARTSERVER = string.Empty;
						lPLAYERGAMESERVER = string.Empty;
						num = 1;
						if (num != 0)
						{
						}
						num = 21;
						num2 = num;
						continue;
					case 22:
						try
						{
							switch (0)
							{
							default:
								while (true)
								{
									switch (num2)
									{
									case 117:
										if (num6 == 1.0)
										{
											num = 41;
											num2 = num;
											continue;
										}
										goto case 135;
									case 118:
										num = 109;
										num2 = num;
										continue;
									case 109:
										if (num4 != 8.0)
										{
											num = 89;
											num2 = num;
											continue;
										}
										goto case 106;
									case 90:
										num = 104;
										num2 = num;
										continue;
									case 104:
										if (num4 > 12.0)
										{
											num = 100;
											num2 = num;
											continue;
										}
										goto case 40;
									case 29:
										num = 75;
										num2 = num;
										continue;
									case 75:
										if (num4 != 8.0)
										{
											num = 42;
											num2 = num;
											continue;
										}
										goto case 38;
									case 5:
										num = 92;
										num2 = num;
										continue;
									case 92:
										if (num4 != 9.0)
										{
											num = 56;
											num2 = num;
											continue;
										}
										goto case 66;
									case 56:
									{
										num = -6163;
										short num7 = num;
										num = -6163;
										switch (num7 == num)
										{
										default:
											num = 0;
											if (num != 0)
											{
											}
											num = 73;
											num2 = num;
											continue;
										case false:
										case true:
											break;
										}
										goto case 152;
									}
									case 122:
										num = 143;
										num2 = num;
										continue;
									case 143:
										if (num4 > 16.0)
										{
											num = 18;
											num2 = num;
											continue;
										}
										goto case 33;
									case 34:
										num = 147;
										num2 = num;
										continue;
									case 147:
										if (num4 > 8.0)
										{
											num = 130;
											num2 = num;
											continue;
										}
										goto case 46;
									case 113:
										num = 60;
										num2 = num;
										continue;
									case 60:
										if (num4 > 20.0)
										{
											num = 13;
											num2 = num;
											continue;
										}
										goto case 63;
									case 61:
										num = 24;
										num2 = num;
										continue;
									case 24:
										if (num4 != 18.0)
										{
											num = 81;
											num2 = num;
											continue;
										}
										goto case 74;
									case 111:
										value = totalSeconds - num5 - num5 - num5;
										num = 22;
										num2 = num;
										continue;
									case 135:
										num = 137;
										num2 = num;
										continue;
									case 137:
										if (num6 == 3.0)
										{
											num = 29;
											num2 = num;
											continue;
										}
										goto case 125;
									case 110:
										num = 64;
										num2 = num;
										continue;
									case 64:
										if (num4 != 20.0)
										{
											num = 150;
											num2 = num;
											continue;
										}
										goto case 68;
									case 131:
										value = totalSeconds - num5 - num5;
										num = 118;
										num2 = num;
										continue;
									case 22:
										num = 44;
										num2 = num;
										continue;
									case 44:
										if (num4 != 18.0)
										{
											num = 88;
											num2 = num;
											continue;
										}
										goto case 97;
									case 2:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 91;
										num2 = num;
										continue;
									case 76:
										value = totalSeconds - num5 - num5 - num5;
										num = 125;
										num2 = num;
										continue;
									case 97:
										value = totalSeconds - num5 - num5 - num5 - num5;
										num = 43;
										num2 = num;
										continue;
									case 20:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 105;
										num2 = num;
										continue;
									case 89:
										num = 133;
										num2 = num;
										continue;
									case 133:
										if (num4 > 8.0)
										{
											num = 106;
											num2 = num;
											continue;
										}
										goto case 58;
									case 141:
										num = 86;
										num2 = num;
										continue;
									case 86:
										if (num4 != 16.0)
										{
											num = 151;
											num2 = num;
											continue;
										}
										goto case 15;
									case 130:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5;
										num = 46;
										num2 = num;
										continue;
									case 151:
										num = 26;
										num2 = num;
										continue;
									case 26:
										if (num4 > 16.0)
										{
											num = 15;
											num2 = num;
											continue;
										}
										goto case 61;
									case 81:
										num = 16;
										num2 = num;
										continue;
									case 16:
										if (num4 > 18.0)
										{
											num = 74;
											num2 = num;
											continue;
										}
										goto case 110;
									case 43:
										num = 23;
										num2 = num;
										continue;
									case 23:
										if (num6 == 6.0)
										{
											num = 54;
											num2 = num;
											continue;
										}
										goto case 63;
									case 0:
										num = 59;
										num2 = num;
										continue;
									case 59:
										if (num4 > 21.0)
										{
											num = 20;
											num2 = num;
											continue;
										}
										goto case 105;
									case 33:
										num = 39;
										num2 = num;
										continue;
									case 39:
										if (num4 != 20.0)
										{
											num = 113;
											num2 = num;
											continue;
										}
										goto case 13;
									case 124:
										num = 78;
										num2 = num;
										continue;
									case 78:
										if (num4 != 18.0)
										{
											num = 134;
											num2 = num;
											continue;
										}
										goto case 21;
									case 146:
										num = 128;
										num2 = num;
										continue;
									case 128:
										if (num4 != 12.0)
										{
											num = 127;
											num2 = num;
											continue;
										}
										goto case 111;
									case 12:
										num = 55;
										num2 = num;
										continue;
									case 55:
										if (num4 != 8.0)
										{
											num = 34;
											num2 = num;
											continue;
										}
										goto case 130;
									case 21:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 71;
										num2 = num;
										continue;
									case 99:
										value = totalSeconds - num5;
										num = 116;
										num2 = num;
										continue;
									case 121:
										num = 45;
										num2 = num;
										continue;
									case 45:
										if (num4 != 3.0)
										{
											num = 129;
											num2 = num;
											continue;
										}
										goto case 99;
									case 98:
										num = 48;
										num2 = num;
										continue;
									case 48:
										if (num4 > 6.0)
										{
											num = 120;
											num2 = num;
											continue;
										}
										goto case 5;
									case 115:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5;
										num = 124;
										num2 = num;
										continue;
									case 68:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 80;
										num2 = num;
										continue;
									case 73:
										if (num4 > 9.0)
										{
											num = 66;
											num2 = num;
											continue;
										}
										goto case 6;
									case 116:
										num = 107;
										num2 = num;
										continue;
									case 107:
										if (num4 != 6.0)
										{
											num = 98;
											num2 = num;
											continue;
										}
										goto case 120;
									case 105:
										num = 50;
										num2 = num;
										continue;
									case 50:
										if (num6 == 12.0)
										{
											num = 57;
											num2 = num;
											continue;
										}
										goto case 82;
									case 91:
										num = 14;
										num2 = num;
										continue;
									case 14:
										if (num4 != 14.0)
										{
											num = 85;
											num2 = num;
											continue;
										}
										goto case 152;
									case 134:
										num = 65;
										num2 = num;
										continue;
									case 65:
										if (num4 > 18.0)
										{
											num = 21;
											num2 = num;
											continue;
										}
										goto case 71;
									case 54:
										num = 19;
										num2 = num;
										continue;
									case 19:
										if (num4 != 4.0)
										{
											num = 95;
											num2 = num;
											continue;
										}
										goto case 131;
									case 125:
										num = 103;
										num2 = num;
										continue;
									case 103:
										if (num6 == 4.0)
										{
											num = 87;
											num2 = num;
											continue;
										}
										goto case 43;
									case 138:
										value = totalSeconds - num5 - num5;
										num = 146;
										num2 = num;
										continue;
									case 42:
										num = 9;
										num2 = num;
										continue;
									case 9:
										if (num4 > 8.0)
										{
											num = 38;
											num2 = num;
											continue;
										}
										goto case 132;
									case 127:
										num = 79;
										num2 = num;
										continue;
									case 79:
										if (num4 > 12.0)
										{
											num = 111;
											num2 = num;
											continue;
										}
										goto case 22;
									case 13:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5;
										num = 63;
										num2 = num;
										continue;
									case 139:
										num = 77;
										num2 = num;
										continue;
									case 77:
										if (num4 != 6.0)
										{
											num = 1;
											num2 = num;
											continue;
										}
										goto case 140;
									case 94:
										value = totalSeconds - num5 - num5 - num5 - num5;
										num = 139;
										num2 = num;
										continue;
									case 102:
										num = 62;
										num2 = num;
										continue;
									case 62:
										if (num4 != 4.0)
										{
											num = 72;
											num2 = num;
											continue;
										}
										goto case 94;
									case 18:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5;
										num = 33;
										num2 = num;
										continue;
									case 70:
										num = 37;
										num2 = num;
										continue;
									case 37:
										if (num4 > 15.0)
										{
											num = 115;
											num2 = num;
											continue;
										}
										goto case 124;
									case 51:
										num = 28;
										num2 = num;
										continue;
									case 28:
										if (num4 > 12.0)
										{
											num = 2;
											num2 = num;
											continue;
										}
										goto case 91;
									case 41:
										value = totalSeconds - num5;
										num = 135;
										num2 = num;
										continue;
									case 38:
										value = totalSeconds - num5 - num5;
										num = 132;
										num2 = num;
										continue;
									case 57:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 148;
										num2 = num;
										continue;
									case 148:
										if (num4 != 2.0)
										{
											num = 123;
											num2 = num;
											continue;
										}
										goto case 36;
									case 6:
										num = 67;
										num2 = num;
										continue;
									case 67:
										if (num4 != 12.0)
										{
											num = 90;
											num2 = num;
											continue;
										}
										goto case 100;
									case 120:
										value = totalSeconds - num5 - num5;
										num = 5;
										num2 = num;
										continue;
									case 25:
										num = 52;
										num2 = num;
										continue;
									case 52:
										if (num4 != 16.0)
										{
											num = 122;
											num2 = num;
											continue;
										}
										goto case 18;
									case 40:
										num = 108;
										num2 = num;
										continue;
									case 108:
										if (num4 != 15.0)
										{
											num = 70;
											num2 = num;
											continue;
										}
										goto case 115;
									case 88:
										num = 83;
										num2 = num;
										continue;
									case 83:
										if (num4 > 18.0)
										{
											num = 97;
											num2 = num;
											continue;
										}
										goto case 43;
									case 74:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 110;
										num2 = num;
										continue;
									case 1:
										num = 27;
										num2 = num;
										continue;
									case 27:
										if (num4 > 6.0)
										{
											num = 140;
											num2 = num;
											continue;
										}
										goto case 12;
									case 140:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5;
										num = 12;
										num2 = num;
										continue;
									case 96:
										value = totalSeconds - num5 - num5 - num5 - num5;
										num = 25;
										num2 = num;
										continue;
									case 150:
										num = 114;
										num2 = num;
										continue;
									case 114:
										if (num4 > 20.0)
										{
											num = 68;
											num2 = num;
											continue;
										}
										goto case 80;
									case 85:
										num = 4;
										num2 = num;
										continue;
									case 4:
										if (num4 > 14.0)
										{
											num = 152;
											num2 = num;
											continue;
										}
										goto case 141;
									case 71:
										num = 142;
										num2 = num;
										continue;
									case 142:
										if (num4 != 21.0)
										{
											num = 0;
											num2 = num;
											continue;
										}
										goto case 20;
									case 15:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 61;
										num2 = num;
										continue;
									case 58:
										num = 144;
										num2 = num;
										continue;
									case 144:
										if (num4 != 12.0)
										{
											num = 119;
											num2 = num;
											continue;
										}
										goto case 96;
									case 63:
										num = 17;
										num2 = num;
										continue;
									case 17:
										if (num6 == 8.0)
										{
											num = 121;
											num2 = num;
											continue;
										}
										goto case 105;
									case 152:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 141;
										num2 = num;
										continue;
									case 36:
										value = totalSeconds - num5 - num5 - num5;
										num = 102;
										num2 = num;
										continue;
									case 145:
										value = totalSeconds - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5 - num5;
										num = 82;
										num2 = num;
										continue;
									case 72:
										num = 31;
										num2 = num;
										continue;
									case 31:
										if (num4 > 4.0)
										{
											num = 94;
											num2 = num;
											continue;
										}
										goto case 139;
									case 100:
										value = totalSeconds - num5 - num5 - num5 - num5;
										num = 40;
										num2 = num;
										continue;
									case 46:
										num = 11;
										num2 = num;
										continue;
									case 11:
										if (num4 != 12.0)
										{
											num = 51;
											num2 = num;
											continue;
										}
										goto case 2;
									case 80:
										num = 126;
										num2 = num;
										continue;
									case 126:
										if (num4 != 22.0)
										{
											num = 49;
											num2 = num;
											continue;
										}
										goto case 145;
									case 82:
										value = Math.Abs(value);
										timeSpan = TimeSpan.FromSeconds(value);
										num = 101;
										num2 = num;
										continue;
									case 101:
										if (Langve == "RU")
										{
											num = 69;
											num2 = num;
										}
										else
										{
											lTIMERESTARTSERVER = string.Format("{0} {1} h. {2} m.", "Time to restart : ", timeSpan.Hours, timeSpan.Minutes);
											num = 35;
											num2 = num;
										}
										continue;
									case 132:
										num = 30;
										num2 = num;
										continue;
									case 30:
										if (num4 != 16.0)
										{
											num = 149;
											num2 = num;
											continue;
										}
										goto case 76;
									case 95:
										num = 32;
										num2 = num;
										continue;
									case 32:
										if (num4 > 4.0)
										{
											num = 131;
											num2 = num;
											continue;
										}
										goto case 118;
									case 123:
										num = 8;
										num2 = num;
										continue;
									case 8:
										if (num4 > 2.0)
										{
											num = 36;
											num2 = num;
											continue;
										}
										goto case 102;
									case 69:
										lTIMERESTARTSERVER = string.Format("{0} {1} ч. {2} м.", "Время до рестарта : ", timeSpan.Hours, timeSpan.Minutes);
										num = 47;
										num2 = num;
										continue;
									case 119:
										num = 10;
										num2 = num;
										continue;
									case 10:
										if (num4 > 12.0)
										{
											num = 96;
											num2 = num;
											continue;
										}
										goto case 25;
									case 106:
										value = totalSeconds - num5 - num5 - num5;
										num = 58;
										num2 = num;
										continue;
									case 149:
										num = 53;
										num2 = num;
										continue;
									case 53:
										if (num4 > 16.0)
										{
											num = 76;
											num2 = num;
											continue;
										}
										goto case 125;
									case 49:
										num = 3;
										num2 = num;
										continue;
									case 3:
										if (num4 > 22.0)
										{
											num = 145;
											num2 = num;
											continue;
										}
										goto case 82;
									case 93:
										num = 7;
										num2 = num;
										continue;
									case 7:
										if (num4 > 6.0)
										{
											num = 138;
											num2 = num;
											continue;
										}
										goto case 146;
									case 129:
										num = 112;
										num2 = num;
										continue;
									case 112:
										if (num4 > 3.0)
										{
											num = 99;
											num2 = num;
											continue;
										}
										goto case 116;
									case 87:
										num = 136;
										num2 = num;
										continue;
									case 136:
										if (num4 != 6.0)
										{
											num = 93;
											num2 = num;
											continue;
										}
										goto case 138;
									case 66:
										value = totalSeconds - num5 - num5 - num5;
										num = 6;
										num2 = num;
										continue;
									case 35:
									case 47:
										num = 84;
										num2 = num;
										continue;
									case 84:
										goto end_IL_0405;
									}
									goto case 0;
									continue;
									end_IL_0405:
									break;
								}
								break;
							case 0:
							{
								string text3 = eval_dl[num3].TIMERESTART.Replace(" ", string.Empty);
								num5 = Convert.ToDouble(text3.Split(':')[3].Replace("сек.", string.Empty));
								num6 = Convert.ToDouble(text3.Split(':')[2]);
								string text4 = text3.Split(':')[0];
								num4 = Convert.ToDouble(text4);
								string text5 = text3.Split(':')[1];
								totalSeconds = TimeSpan.Parse(text4 + ":" + text5).TotalSeconds;
								value = 0.0;
								num = 117;
								num2 = num;
								goto default;
							}
							}
						}
						catch
						{
						}
						num = 11;
						num2 = num;
						continue;
					case 7:
						eval_dj.TextOnlain_GStats.Content = "Игроки онлайн :";
						eval_dj.LGo.Content = "ПРИСОЕДИНИТЬСЯ";
						num = 20;
						num2 = num;
						continue;
					case 2:
						try
						{
							int.Parse(eval_dl[num3].Playhost);
							_ = 10;
							int.Parse(eval_dl[num3].Playhost);
							_ = 10;
							int.Parse(eval_dl[num3].Playhost);
							_ = 30;
						}
						catch
						{
						}
						eval_dj = new SControll
						{
							LNAMESERVER = eval_dl[num3].Name_,
							LPLAYERSERVER = eval_dl[num3].Playhost + "/" + eval_dl[num3].Slotevery,
							LPINGSERVER = eval_dl[num3].Ping_,
							LWhitelist_ = eval_dl[num3].Whitelist_,
							LPassword_ = eval_dl[num3].Password_,
							LIp_Host_ = eval_dl[num3].Ip_Host_,
							LPort_host_ = eval_dl[num3].Port_host_,
							LUDP_PORT_ = eval_dl[num3].UDP_PORT_,
							LMODS_ = eval_dl[num3].MODS_,
							LMODSEN_ = eval_dl[num3].MODSEN_,
							LPLAYERGAMESERVER = lPLAYERGAMESERVER,
							LPlayhost = eval_dl[num3].Playhost,
							LSlotevery = eval_dl[num3].Slotevery,
							LPORT_VID = eval_dl[num3].PORT_VID,
							LIP_VIDSCS = eval_dl[num3].IP_VIDSCS,
							DISKORD = eval_dl[num3].DISCORD,
							LTIMERESTARTSERVER = lTIMERESTARTSERVER,
							IMGSERVER = eval_dl[num3].IMAGE
						};
						num = 18;
						num2 = num;
						continue;
					case 0:
						eval_dj.BDiscord.Visibility = Visibility.Hidden;
						num = 6;
						num2 = num;
						continue;
					case 21:
						try
						{
							string text = string.Empty;
							string text2 = string.Empty;
							try
							{
								switch (0)
								{
								default:
									while (true)
									{
										switch (num2)
										{
										case 4:
											if (Langve == "RU")
											{
												num = 0;
												num2 = num;
												continue;
											}
											_ = "Survival time : " + text2 + " h. " + text + " m.";
											num = 1;
											num2 = num;
											continue;
										case 0:
											_ = "Время выживания : " + text2 + " ч. " + text + " м.";
											num = 3;
											num2 = num;
											continue;
										case 1:
										case 3:
											num = 2;
											num2 = num;
											continue;
										case 2:
											goto end_IL_1fdd;
										}
										goto case 0;
										continue;
										end_IL_1fdd:
										break;
									}
									break;
								case 0:
									_ = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num3].Port_host_ + "_STATISTIC", null);
									text2 = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num3].Port_host_ + "_STATISTIC_h", null);
									text = (string)Registry.GetValue("HKEY_CURRENT_USER\\" + Name_form, eval_dl[num3].Port_host_ + "_STATISTIC_m", null);
									num = 4;
									num2 = num;
									goto default;
								}
							}
							catch
							{
								_ = Langve == "RU";
							}
						}
						catch
						{
						}
						num = 22;
						num2 = num;
						continue;
					case 5:
						num = 23;
						num2 = num;
						continue;
					case 23:
						if (!(Langve == "RU"))
						{
							eval_fh.Content = "Total servers : " + eval_di + " / Total Players : " + eval_dk;
							num = 8;
							num2 = num;
						}
						else
						{
							num = 15;
							num2 = num;
						}
						continue;
					case 18:
						if (!Enable_Shop)
						{
							num = 24;
							num2 = num;
							continue;
						}
						goto case 17;
					case 6:
						num = 19;
						num2 = num;
						continue;
					case 19:
						if (!this.m_eval_b6)
						{
							num = 16;
							num2 = num;
							continue;
						}
						goto case 10;
					case 8:
					case 9:
					{
						DoubleAnimation doubleAnimation = new DoubleAnimation
						{
							From = 1.0,
							To = 0.0,
							Duration = new Duration(TimeSpan.FromSeconds(this.m_eval_ah)),
							AutoReverse = false
						};
						doubleAnimation.Completed += delegate
						{
							short num8 = -22544;
							short num9 = num8;
							num8 = -22544;
							switch (num9 == num8)
							{
							default:
								num8 = 1;
								if (num8 != 0)
								{
								}
								num8 = 0;
								_ = num8;
								num8 = 0;
								if (num8 != 0)
								{
								}
								eval_fl.Visibility = Visibility.Hidden;
								break;
							}
						};
						eval_fl.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
						BoxServer.Visibility = Visibility.Visible;
						DoubleAnimation animation = new DoubleAnimation
						{
							From = 0.0,
							To = 1.0,
							Duration = new Duration(TimeSpan.FromSeconds(0.2)),
							AutoReverse = false
						};
						BoxServer.BeginAnimation(UIElement.OpacityProperty, animation);
						return;
					}
					}
					break;
				}
				goto case 0;
			}
			case 0:
				num3 = 0;
				num = 1;
				num2 = num;
				goto default;
			}
		}
		}
	}

	[CompilerGenerated]
	private void eval_v(object A_0, EventArgs A_1)
	{
		short num = -22544;
		short num2 = num;
		num = -22544;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_fl.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_l()
	{
		short num = 17907;
		short num2 = num;
		num = 17907;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_fj.IsEnabled = true;
	}

	[CompilerGenerated]
	private void eval_k()
	{
		if (Langve == "RU")
		{
			while (true)
			{
				short num = 0;
				_ = num;
				num = 26906;
				short num2 = num;
				num = 26906;
				switch (num2 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					MessageBoxWindow.Show(this, "Лаунчер блокирует сторонняя программа или антивирус,добавьте в исключение!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
					return;
				}
			}
		}
		MessageBoxWindow.Show(this, "Launcher blocks a third-party program or antivirus, add to the exception!", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
	}

	[CompilerGenerated]
	private void eval_u(object A_0, EventArgs A_1)
	{
		short num = 12197;
		short num2 = num;
		num = 12197;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		h6.IsEnabled = true;
		OpenDownloader = false;
	}

	[CompilerGenerated]
	private void eval_t(object A_0, EventArgs A_1)
	{
		short num = 8592;
		short num2 = num;
		num = 8592;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		eval_gl.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_s(object A_0, EventArgs A_1)
	{
		short num = -27504;
		short num2 = num;
		num = -27504;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		h4.IsEnabled = true;
		OpenUser = false;
	}

	[CompilerGenerated]
	private void eval_r(object A_0, EventArgs A_1)
	{
		short num = 28730;
		short num2 = num;
		num = 28730;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		gb.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_q(object A_0, EventArgs A_1)
	{
		short num = -23684;
		short num2 = num;
		num = -23684;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_h5.IsEnabled = true;
		this.m_eval_cd = false;
	}

	[CompilerGenerated]
	private void eval_p(object A_0, EventArgs A_1)
	{
		short num = -12903;
		short num2 = num;
		num = -12903;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		eval_gt.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_o(object A_0, EventArgs A_1)
	{
		short num = 5289;
		short num2 = num;
		num = 5289;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		f8.Visibility = Visibility.Hidden;
		eval_f3.Visibility = Visibility.Hidden;
		ff.Visibility = Visibility.Visible;
		DoubleAnimation animation = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.5)),
			AutoReverse = false
		};
		ff.BeginAnimation(UIElement.OpacityProperty, animation);
		eval_h7.IsEnabled = true;
		eval_dh = false;
	}

	[CompilerGenerated]
	private void eval_n(object A_0, EventArgs A_1)
	{
		short num = -29426;
		short num2 = num;
		num = -29426;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		h6.IsEnabled = true;
		OpenDownloader = false;
	}

	[CompilerGenerated]
	private void eval_m(object A_0, EventArgs A_1)
	{
		short num = -25156;
		short num2 = num;
		num = -25156;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_gl.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_l(object A_0, EventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -1384;
		short num2 = num;
		num = -1384;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		h4.IsEnabled = true;
		OpenUser = false;
	}

	[CompilerGenerated]
	private void eval_k(object A_0, EventArgs A_1)
	{
		short num = 170;
		short num2 = num;
		num = 170;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		gb.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_j(object A_0, EventArgs A_1)
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = 20649;
		short num2 = num;
		num = 20649;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_h5.IsEnabled = true;
		this.m_eval_cd = false;
	}

	[CompilerGenerated]
	private void eval_i(object A_0, EventArgs A_1)
	{
		short num = -30987;
		short num2 = num;
		num = -30987;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_gt.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_h(object A_0, EventArgs A_1)
	{
		short num = -31462;
		short num2 = num;
		num = -31462;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_f3.Visibility = Visibility.Visible;
		DoubleAnimation doubleAnimation = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.5)),
			AutoReverse = false
		};
		doubleAnimation.Completed += delegate
		{
			short num3 = 9457;
			short num4 = num3;
			num3 = 9457;
			switch (num4 == num3)
			{
			default:
				num3 = 1;
				if (num3 != 0)
				{
				}
				num3 = 0;
				_ = num3;
				num3 = 0;
				if (num3 != 0)
				{
				}
				eval_h7.IsEnabled = true;
				eval_dh = true;
				break;
			}
		};
		eval_f3.BeginAnimation(UIElement.OpacityProperty, doubleAnimation);
	}

	[CompilerGenerated]
	private void eval_g(object A_0, EventArgs A_1)
	{
		short num = 9457;
		short num2 = num;
		num = 9457;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_h7.IsEnabled = true;
		eval_dh = true;
	}

	[CompilerGenerated]
	private void eval_j()
	{
		short num;
		if (Langve == "RU")
		{
			while (true)
			{
				num = 0;
				_ = num;
				num = -9577;
				short num2 = num;
				num = -9577;
				switch (num2 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					eval_im.Content = "Коннект к [SM] : Успешно , не закрывайте лаунчер!";
					return;
				}
			}
		}
		num = 1;
		if (num != 0)
		{
		}
		eval_im.Content = "Connect to [SM]: Successfully , do not close the launcher!";
	}

	[CompilerGenerated]
	private void eval_i()
	{
		short num = 1;
		if (num != 0)
		{
		}
		num = -17230;
		short num2 = num;
		num = -17230;
		switch (num2 == num)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		Close_launcher();
	}

	[CompilerGenerated]
	private void eval_h()
	{
		short num = -21711;
		short num2 = num;
		num = -21711;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		Close_launcher();
	}

	[CompilerGenerated]
	private void eval_g()
	{
		short num = 6702;
		short num2 = num;
		num = 6702;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		Close_launcher();
	}

	[CompilerGenerated]
	private void eval_f()
	{
		if (Langve == "RU")
		{
			while (true)
			{
				short num = 0;
				_ = num;
				num = -23188;
				short num2 = num;
				num = -23188;
				switch (num2 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					num = 1;
					if (num != 0)
					{
					}
					eval_im.Content = "Коннект к [SM] : Нет подключения.Попытка подключения...";
					return;
				}
			}
		}
		eval_im.Content = "Connect to [SM]: No connection.Attempt to connect...";
	}

	[CompilerGenerated]
	private void eval_e()
	{
		short num = -15903;
		short num2 = num;
		num = -15903;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_f0.Document.Blocks.Clear();
	}

	[CompilerGenerated]
	private void eval_d(object A_0, AsyncCompletedEventArgs A_1)
	{
		switch (0)
		{
		case 0:
			goto IL_0024;
		}
		goto IL_000a;
		IL_000a:
		string text = default(string);
		StreamReader streamReader = default(StreamReader);
		int num = default(int);
		short num2;
		while (true)
		{
			switch (num)
			{
			case 1:
				if (dy.Length == 0L)
				{
					num2 = 3;
					num = num2;
					continue;
				}
				text = string.Empty;
				streamReader = new StreamReader(DirLocal + "\\fastresume.log");
				num2 = 4;
				num = num2;
				continue;
			case 3:
				UpdateStatus = false;
				num2 = 2;
				num = num2;
				continue;
			case 2:
			{
				num2 = 3930;
				short num3 = num2;
				num2 = 3930;
				switch (num3 == num2)
				{
				default:
					num2 = 0;
					if (num2 != 0)
					{
					}
					if (!(Langve == "RU"))
					{
						MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
						return;
					}
					num2 = 0;
					num = num2;
					continue;
				case false:
				case true:
					break;
				}
				goto case 0;
			}
			case 0:
				MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя.", name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
				return;
			case 4:
				num2 = 0;
				_ = num2;
				try
				{
					num2 = 0;
					num = num2;
					while (true)
					{
						switch (num)
						{
						case 0:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							num2 = 6;
							num = num2;
							continue;
						case 6:
							if ((text = streamReader.ReadLine()) == null)
							{
								num2 = 5;
								num = num2;
							}
							else
							{
								num2 = 8;
								num = num2;
							}
							continue;
						case 11:
							InfoHeshF = text.Replace("fastresume=", string.Empty);
							num2 = 10;
							num = num2;
							continue;
						case 8:
							if (!string.IsNullOrEmpty(text))
							{
								num2 = 4;
								num = num2;
								continue;
							}
							goto default;
						case 9:
							Md5F = text.Replace("md5=", string.Empty);
							num2 = 2;
							num = num2;
							continue;
						case 10:
							num2 = 3;
							num = num2;
							continue;
						case 3:
							if (text.StartsWith("md5="))
							{
								num2 = 9;
								num = num2;
								continue;
							}
							goto default;
						case 4:
							num2 = 7;
							num = num2;
							continue;
						case 7:
							if (text.StartsWith("fastresume="))
							{
								num2 = 11;
								num = num2;
								continue;
							}
							goto case 10;
						case 5:
							streamReader.Close();
							streamReader.Dispose();
							num2 = 1;
							num = num2;
							continue;
						case 1:
							break;
						}
						break;
					}
				}
				finally
				{
					num2 = 1;
					num = num2;
					while (true)
					{
						switch (num)
						{
						case 1:
							switch (0)
							{
							default:
								continue;
							case 0:
								break;
							}
							goto default;
						default:
							if (streamReader != null)
							{
								num2 = 0;
								num = num2;
								continue;
							}
							break;
						case 0:
							((IDisposable)streamReader).Dispose();
							num2 = 2;
							num = num2;
							continue;
						case 2:
							break;
						}
						break;
					}
				}
				num2 = 1;
				if (num2 != 0)
				{
				}
				eval_a8();
				RunUload = true;
				return;
			}
			break;
		}
		goto IL_0024;
		IL_0024:
		dy = new FileInfo(DirLocal + "\\fastresume.log");
		num2 = 1;
		num = num2;
		goto IL_000a;
	}

	[CompilerGenerated]
	private void eval_f(object A_0, EventArgs A_1)
	{
		short num = 18558;
		short num2 = num;
		num = 18558;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		h6.IsEnabled = true;
		OpenDownloader = false;
	}

	[CompilerGenerated]
	private void eval_e(object A_0, EventArgs A_1)
	{
		short num = -6648;
		short num2 = num;
		num = -6648;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_gl.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_d(object A_0, EventArgs A_1)
	{
		short num = 29971;
		short num2 = num;
		num = 29971;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		h6.IsEnabled = true;
		OpenDownloader = true;
	}

	[CompilerGenerated]
	private void eval_c(object A_0, EventArgs A_1)
	{
		short num = -25062;
		short num2 = num;
		num = -25062;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		h4.IsEnabled = true;
		OpenUser = false;
	}

	[CompilerGenerated]
	private void eval_b(object A_0, EventArgs A_1)
	{
		short num = 23376;
		short num2 = num;
		num = 23376;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		gb.Visibility = Visibility.Hidden;
	}

	[CompilerGenerated]
	private void eval_a(object A_0, EventArgs A_1)
	{
		short num = -18881;
		short num2 = num;
		num = -18881;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_f3.Visibility = Visibility.Hidden;
		ff.Visibility = Visibility.Visible;
		DoubleAnimation animation = new DoubleAnimation
		{
			From = 0.0,
			To = 1.0,
			Duration = new Duration(TimeSpan.FromSeconds(0.5)),
			AutoReverse = false
		};
		ff.BeginAnimation(UIElement.OpacityProperty, animation);
	}

	[CompilerGenerated]
	private void eval_d()
	{
		if (Langve == "RU")
		{
			while (true)
			{
				short num = 0;
				_ = num;
				num = 1;
				if (num != 0)
				{
				}
				num = -26362;
				short num2 = num;
				num = -26362;
				switch (num2 == num)
				{
				case false:
				case true:
					break;
				default:
					num = 0;
					if (num != 0)
					{
					}
					eval_fp.Content = "Проверка файлов на подлинность... Это может занять некоторое время.";
					return;
				}
			}
		}
		eval_fp.Content = "Checking files for authenticity ... This may take a while.";
	}

	[CompilerGenerated]
	private void eval_c()
	{
		short num = -6637;
		short num2 = num;
		num = -6637;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		eval_fo.Value = 0.0;
	}

	[CompilerGenerated]
	private void eval_b()
	{
		short num;
		try
		{
			num = 26310;
			short num2 = num;
			num = 26310;
			switch (num2 == num)
			{
			default:
				num = 0;
				if (num != 0)
				{
				}
				eval_fo.Value++;
				break;
			}
		}
		catch
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num == 0)
		{
		}
	}

	[CompilerGenerated]
	private void eval_c(object A_0, AsyncCompletedEventArgs A_1)
	{
		switch (0)
		{
		case 0:
			goto IL_0020;
		}
		goto IL_000a;
		IL_000a:
		int num = default(int);
		short num2;
		while (true)
		{
			switch (num)
			{
			case 2:
				goto IL_00c2;
			case 3:
				MessageBoxWindow.Show(this, "Ошибка, лаунчеру не удалось скачать нужные файлы для обновления, попробуйте перезапустить лаунчер и повторить попытку обновленя. " + TorrentName, name_messege, MessageBoxButton.OK, MessageBoxImage.Hand);
				return;
			case 1:
				goto IL_0154;
			case 0:
				goto IL_0173;
			}
			break;
			IL_0173:
			if (!(Langve == "RU"))
			{
				num2 = 0;
				_ = num2;
				MessageBoxWindow.Show(this, "Error, the launcher could not download the necessary files for the update, try restarting the launcher and try updating again. " + TorrentName, name_messege, MessageBoxButton.OK, MessageBoxImage.Hand);
				return;
			}
			num2 = 3;
			num = num2;
			continue;
			IL_00c2:
			if (dy.Length == 0L)
			{
				num2 = 1;
				num = num2;
				continue;
			}
			num2 = 1;
			if (num2 != 0)
			{
			}
			eval_fo.Maximum = 100.0;
			eval_fo.Value = 0.0;
			string directoryName = Path.GetDirectoryName(Directory_game);
			eval_a(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName, directoryName);
			return;
		}
		goto IL_0020;
		IL_0154:
		UpdateStatus = false;
		num2 = 0;
		num = num2;
		goto IL_000a;
		IL_0020:
		num2 = -17458;
		short num3 = num2;
		num2 = -17458;
		switch (num3 == num2)
		{
		case false:
		case true:
			goto IL_0154;
		}
		num2 = 0;
		if (num2 != 0)
		{
		}
		dy = new FileInfo(Directory_Launcher + "\\" + NameDirGamePatchTorrent + "\\" + TorrentName);
		num2 = 2;
		num = num2;
		goto IL_000a;
	}

	[CompilerGenerated]
	private void eval_a(object A_0, string A_1)
	{
		short num = -25829;
		short num2 = num;
		num = -25829;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		eval_e(A_1);
	}

	[CompilerGenerated]
	private void eval_a()
	{
		short num = -9969;
		short num2 = num;
		num = -9969;
		switch (num2 == num)
		{
		}
		num = 1;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 0;
		if (num != 0)
		{
		}
		gg.Content = UidToPlayer;
		eval_ip.Content = UidToPlayer;
	}

	[CompilerGenerated]
	[AsyncStateMachine(typeof(eval_f))]
	private void eval_b(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num = 7404;
		short num2 = num;
		num = 7404;
		switch (num2 == num)
		{
		}
		num = 0;
		if (num != 0)
		{
		}
		num = 0;
		_ = num;
		num = 1;
		if (num != 0)
		{
		}
		eval_f stateMachine = default(eval_f);
		stateMachine.eval_b = AsyncVoidMethodBuilder.Create();
		stateMachine.eval_c = this;
		stateMachine.eval_a = -1;
		stateMachine.eval_b.Start(ref stateMachine);
	}

	[CompilerGenerated]
	private void eval_a(object A_0, AsyncCompletedEventArgs A_1)
	{
		short num;
		try
		{
			num = 9598;
			short num2 = num;
			num = 9598;
			switch (num2 == num)
			{
			default:
			{
				num = 0;
				if (num != 0)
				{
				}
				ProcessStartInfo obj = new ProcessStartInfo
				{
					FileName = Directory_Launcher + "\\" + this.m_eval_ac + ".exe"
				};
				obj.WorkingDirectory = obj.WorkingDirectory + Directory_Launcher + "\\";
				Process.Start(obj);
				Close_launcher();
				break;
			}
			}
		}
		catch (Exception ex)
		{
			if (Langve == "RU")
			{
				num = 1;
				if (num != 0)
				{
				}
				MessageBoxWindow.Show(this, "Исполняемый файл лаунчера либо не докачан либо блокирован защитником виндовс,антивирусом! " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
			else
			{
				MessageBoxWindow.Show(this, "The launcher executable file is either not downloaded or blocked by Windows defender, antivirus! " + ex.Message, name_messege, MessageBoxButton.OK, MessageBoxImage.Exclamation);
			}
		}
		num = 0;
		_ = num;
		Close_launcher();
	}
}
